[
	{
		"original_code": "// PostgresqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class PostgresqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"select indexdef from pg_indexes where tablename = '\" + tableName + \"' and indexname like '%_pkey'\";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                String indexdef = rsKey.getString(\"indexdef\");\n                String keyss = indexdef.substring(indexdef.indexOf(\"(\") + 1, indexdef.indexOf(\")\"));\n                String[] keys = StringUtils.split(keyss, \",\");\n                for (int i = 0; i < keys.length; i++) {\n                    keyMap.put(keys[i].trim(), keys[i].trim());\n                }\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT *  FROM information_schema.columns  WHERE table_name='\" + tableName + \"' ORDER BY ordinal_position  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"column_name\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"character_maximum_length\"));\n                columnBean.setDataType(rs.getString(\"data_type\"));\n                columnBean.setLen(rs.getInt(\"character_maximum_length\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                // columnBean.setMode(rs.getString(\"Key\"));\n                // columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"is_nullable\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"column_default\"));\n                // columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + createTableXmlBean.getName() + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlTableStructure_0Test.java",
		"test_prompt": "// PostgresqlTableStructure_0Test.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlTableStructure}.\n* It contains ten unit test cases for the {@link PostgresqlTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass PostgresqlTableStructure_0Test {"
	},
	{
		"original_code": "// PostgresqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class PostgresqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"select indexdef from pg_indexes where tablename = '\" + tableName + \"' and indexname like '%_pkey'\";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                String indexdef = rsKey.getString(\"indexdef\");\n                String keyss = indexdef.substring(indexdef.indexOf(\"(\") + 1, indexdef.indexOf(\")\"));\n                String[] keys = StringUtils.split(keyss, \",\");\n                for (int i = 0; i < keys.length; i++) {\n                    keyMap.put(keys[i].trim(), keys[i].trim());\n                }\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT *  FROM information_schema.columns  WHERE table_name='\" + tableName + \"' ORDER BY ordinal_position  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"column_name\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"character_maximum_length\"));\n                columnBean.setDataType(rs.getString(\"data_type\"));\n                columnBean.setLen(rs.getInt(\"character_maximum_length\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                // columnBean.setMode(rs.getString(\"Key\"));\n                // columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"is_nullable\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"column_default\"));\n                // columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + createTableXmlBean.getName() + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlTableStructure_1Test.java",
		"test_prompt": "// PostgresqlTableStructure_1Test.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlTableStructure}.\n* It contains ten unit test cases for the {@link PostgresqlTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass PostgresqlTableStructure_1Test {"
	},
	{
		"original_code": "// PostgresqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class PostgresqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"select indexdef from pg_indexes where tablename = '\" + tableName + \"' and indexname like '%_pkey'\";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                String indexdef = rsKey.getString(\"indexdef\");\n                String keyss = indexdef.substring(indexdef.indexOf(\"(\") + 1, indexdef.indexOf(\")\"));\n                String[] keys = StringUtils.split(keyss, \",\");\n                for (int i = 0; i < keys.length; i++) {\n                    keyMap.put(keys[i].trim(), keys[i].trim());\n                }\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT *  FROM information_schema.columns  WHERE table_name='\" + tableName + \"' ORDER BY ordinal_position  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"column_name\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"character_maximum_length\"));\n                columnBean.setDataType(rs.getString(\"data_type\"));\n                columnBean.setLen(rs.getInt(\"character_maximum_length\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                // columnBean.setMode(rs.getString(\"Key\"));\n                // columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"is_nullable\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"column_default\"));\n                // columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + createTableXmlBean.getName() + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlTableStructure_2Test.java",
		"test_prompt": "// PostgresqlTableStructure_2Test.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlTableStructure}.\n* It contains ten unit test cases for the {@link PostgresqlTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass PostgresqlTableStructure_2Test {"
	},
	{
		"original_code": "// PostgresqlSequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class PostgresqlSequenceStructure implements SequenceStructure {\n\n    private static Logger log = Logger.getLogger(PostgresqlSequenceStructure.class.getName());\n\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        /*Connection connection = null;\n\t\ttry {\n\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\tStatement stmt= connection.createStatement();\n\n\t\t\tResultSet rs=stmt.executeQuery(\"SHOW TABLE STATUS \");\n\n\t\t    while(rs.next()){\n\t\t    \tString name = rs.getString(\"NAME\");\n\t\t        String auto = rs.getString(\"Auto_Increment\");\n\t\t        if(auto != null) {\n\t\t        \tSequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n\t\t\t        sequenceStructureBean.setName(name);\n\t\t\t        sequenceStructureBean.setMinValue(1);\n\t\t\t        sequenceStructureBean.setMaxValue(\"\");\n\t\t\t        sequenceStructureBean.setIncrementBy(1);\n\t\t\t        sequenceStructureBean.setLastNumber(rs.getInt(\"Auto_Increment\"));\n\n\t\t\t        sequences.add(sequenceStructureBean);\n\t\t        }\n\t\t    }\n\n\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        // TODO Auto-generated method stub\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlSequenceStructure.java",
		"test_prompt": "// PostgresqlSequenceStructureTest.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlSequenceStructure}.\n* It contains ten unit test cases for the {@link PostgresqlSequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass PostgresqlSequenceStructureTest {"
	},
	{
		"original_code": "// PostgresqlDataBase.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class PostgresqlDataBase implements DataBase {\n\n    private final static String LOGIN_QUERY = \"select now()\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlDataBase.java",
		"test_prompt": "// PostgresqlDataBaseTest.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlDataBase}.\n* It contains ten unit test cases for the {@link PostgresqlDataBase#testLogin(DBDataBean)} method.\n*/\nclass PostgresqlDataBaseTest {"
	},
	{
		"original_code": "// PostgresqlViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class PostgresqlViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(PostgresqlViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlViewStructure_0Test.java",
		"test_prompt": "// PostgresqlViewStructure_0Test.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlViewStructure}.\n* It contains ten unit test cases for the {@link PostgresqlViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass PostgresqlViewStructure_0Test {"
	},
	{
		"original_code": "// PostgresqlViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class PostgresqlViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(PostgresqlViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/postgresql/PostgresqlViewStructure_1Test.java",
		"test_prompt": "// PostgresqlViewStructure_1Test.java\npackage com.gbshape.dbe.postgresql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PostgresqlViewStructure}.\n* It contains ten unit test cases for the {@link PostgresqlViewStructure#isView(DBDataBean, String)} method.\n*/\nclass PostgresqlViewStructure_1Test {"
	},
	{
		"original_code": "// ColumnForm.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.form;\n\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.struts.action.ActionForm;\n\npublic class ColumnForm extends ActionForm implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private String dim = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private String notnull;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public String getTable() {\n        return tableName;\n    }\n\n    public void setTable(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n\n    public String getNotnull() {\n        return notnull;\n    }\n\n    public void setNotnull(String notnull) {\n        this.notnull = notnull;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/form/ColumnForm_0Test.java",
		"test_prompt": "// ColumnForm_0Test.java\npackage com.gbshape.dbe.struts.form;\n\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.struts.action.ActionForm;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnForm}.\n* It contains ten unit test cases for the {@link ColumnForm#isUnique()} method.\n*/\nclass ColumnForm_0Test {"
	},
	{
		"original_code": "// ColumnForm.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.form;\n\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.struts.action.ActionForm;\n\npublic class ColumnForm extends ActionForm implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private String dim = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private String notnull;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public String getTable() {\n        return tableName;\n    }\n\n    public void setTable(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public String toString() {\n        return ToStringBuilder.reflectionToString(this);\n    }\n\n    public String getNotnull() {\n        return notnull;\n    }\n\n    public void setNotnull(String notnull) {\n        this.notnull = notnull;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/form/ColumnForm_1Test.java",
		"test_prompt": "// ColumnForm_1Test.java\npackage com.gbshape.dbe.struts.form;\n\nimport org.apache.commons.lang.builder.ToStringBuilder;\nimport org.apache.struts.action.ActionForm;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnForm}.\n* It contains ten unit test cases for the {@link ColumnForm#isKey()} method.\n*/\nclass ColumnForm_1Test {"
	},
	{
		"original_code": "// DataTypeBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic final class DataTypeBean implements java.io.Serializable {\n\n    /*<name>VARCHAR</name>\n    \t\t<len>true</len>\n    \t\t<valueWrapper>'</valueWrapper>\n    \t\t<maxlength>256</maxlength>\n    \t\t<forceLength>true</forceLength>*/\n    private String name = \"\";\n\n    private boolean len = false;\n\n    private boolean dec = false;\n\n    private String valueWrapper = \"\";\n\n    private int maxlength = 0;\n\n    private int formSize = 0;\n\n    private boolean forceLength = false;\n\n    private String formInput = \"text\";\n\n    private String format = \"\";\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getFormInput() {\n        return formInput;\n    }\n\n    public void setFormInput(String formInput) {\n        this.formInput = formInput;\n    }\n\n    public boolean isDec() {\n        return dec;\n    }\n\n    public void setDec(boolean dec) {\n        this.dec = dec;\n    }\n\n    public boolean isForceLength() {\n        return forceLength;\n    }\n\n    public void setForceLength(boolean forceLength) {\n        this.forceLength = forceLength;\n    }\n\n    public boolean isLen() {\n        return len;\n    }\n\n    public void setLen(boolean len) {\n        this.len = len;\n    }\n\n    public int getMaxlength() {\n        return maxlength;\n    }\n\n    public void setMaxlength(int maxlength) {\n        this.maxlength = maxlength;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getValueWrapper() {\n        return valueWrapper;\n    }\n\n    public void setValueWrapper(String valueWrapper) {\n        this.valueWrapper = valueWrapper;\n    }\n\n    public int getFormSize() {\n        return formSize;\n    }\n\n    public void setFormSize(int formSize) {\n        this.formSize = formSize;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/DataTypeBean_0Test.java",
		"test_prompt": "// DataTypeBean_0Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataTypeBean}.\n* It contains ten unit test cases for the {@link DataTypeBean#isDec()} method.\n*/\nclass DataTypeBean_0Test {"
	},
	{
		"original_code": "// DataTypeBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic final class DataTypeBean implements java.io.Serializable {\n\n    /*<name>VARCHAR</name>\n    \t\t<len>true</len>\n    \t\t<valueWrapper>'</valueWrapper>\n    \t\t<maxlength>256</maxlength>\n    \t\t<forceLength>true</forceLength>*/\n    private String name = \"\";\n\n    private boolean len = false;\n\n    private boolean dec = false;\n\n    private String valueWrapper = \"\";\n\n    private int maxlength = 0;\n\n    private int formSize = 0;\n\n    private boolean forceLength = false;\n\n    private String formInput = \"text\";\n\n    private String format = \"\";\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getFormInput() {\n        return formInput;\n    }\n\n    public void setFormInput(String formInput) {\n        this.formInput = formInput;\n    }\n\n    public boolean isDec() {\n        return dec;\n    }\n\n    public void setDec(boolean dec) {\n        this.dec = dec;\n    }\n\n    public boolean isForceLength() {\n        return forceLength;\n    }\n\n    public void setForceLength(boolean forceLength) {\n        this.forceLength = forceLength;\n    }\n\n    public boolean isLen() {\n        return len;\n    }\n\n    public void setLen(boolean len) {\n        this.len = len;\n    }\n\n    public int getMaxlength() {\n        return maxlength;\n    }\n\n    public void setMaxlength(int maxlength) {\n        this.maxlength = maxlength;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getValueWrapper() {\n        return valueWrapper;\n    }\n\n    public void setValueWrapper(String valueWrapper) {\n        this.valueWrapper = valueWrapper;\n    }\n\n    public int getFormSize() {\n        return formSize;\n    }\n\n    public void setFormSize(int formSize) {\n        this.formSize = formSize;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/DataTypeBean_1Test.java",
		"test_prompt": "// DataTypeBean_1Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataTypeBean}.\n* It contains ten unit test cases for the {@link DataTypeBean#isForceLength()} method.\n*/\nclass DataTypeBean_1Test {"
	},
	{
		"original_code": "// DataTypeBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic final class DataTypeBean implements java.io.Serializable {\n\n    /*<name>VARCHAR</name>\n    \t\t<len>true</len>\n    \t\t<valueWrapper>'</valueWrapper>\n    \t\t<maxlength>256</maxlength>\n    \t\t<forceLength>true</forceLength>*/\n    private String name = \"\";\n\n    private boolean len = false;\n\n    private boolean dec = false;\n\n    private String valueWrapper = \"\";\n\n    private int maxlength = 0;\n\n    private int formSize = 0;\n\n    private boolean forceLength = false;\n\n    private String formInput = \"text\";\n\n    private String format = \"\";\n\n    public String getFormat() {\n        return format;\n    }\n\n    public void setFormat(String format) {\n        this.format = format;\n    }\n\n    public String getFormInput() {\n        return formInput;\n    }\n\n    public void setFormInput(String formInput) {\n        this.formInput = formInput;\n    }\n\n    public boolean isDec() {\n        return dec;\n    }\n\n    public void setDec(boolean dec) {\n        this.dec = dec;\n    }\n\n    public boolean isForceLength() {\n        return forceLength;\n    }\n\n    public void setForceLength(boolean forceLength) {\n        this.forceLength = forceLength;\n    }\n\n    public boolean isLen() {\n        return len;\n    }\n\n    public void setLen(boolean len) {\n        this.len = len;\n    }\n\n    public int getMaxlength() {\n        return maxlength;\n    }\n\n    public void setMaxlength(int maxlength) {\n        this.maxlength = maxlength;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getValueWrapper() {\n        return valueWrapper;\n    }\n\n    public void setValueWrapper(String valueWrapper) {\n        this.valueWrapper = valueWrapper;\n    }\n\n    public int getFormSize() {\n        return formSize;\n    }\n\n    public void setFormSize(int formSize) {\n        this.formSize = formSize;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/DataTypeBean_2Test.java",
		"test_prompt": "// DataTypeBean_2Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataTypeBean}.\n* It contains ten unit test cases for the {@link DataTypeBean#isLen()} method.\n*/\nclass DataTypeBean_2Test {"
	},
	{
		"original_code": "// TableBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic class TableBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String comment = \"\";\n\n    private boolean view = false;\n\n    public boolean isView() {\n        return view;\n    }\n\n    public void setView(boolean view) {\n        this.view = view;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/TableBean.java",
		"test_prompt": "// TableBeanTest.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableBean}.\n* It contains ten unit test cases for the {@link TableBean#isView()} method.\n*/\nclass TableBeanTest {"
	},
	{
		"original_code": "// ColumnBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\n\npublic class ColumnBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private boolean nullable;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    private ArrayList constraintList = new ArrayList();\n\n    private String dim = \"\";\n\n    private String originalDT = \"\";\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public ArrayList getConstraintList() {\n        return constraintList;\n    }\n\n    public void setConstraintList(ArrayList constraintList) {\n        this.constraintList = constraintList;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public boolean isNullable() {\n        return nullable;\n    }\n\n    public void setNullable(boolean nullable) {\n        this.nullable = nullable;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public String getOriginalDT() {\n        return originalDT;\n    }\n\n    public void setOriginalDT(String originalDT) {\n        this.originalDT = originalDT;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ColumnBean_0Test.java",
		"test_prompt": "// ColumnBean_0Test.java\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnBean}.\n* It contains ten unit test cases for the {@link ColumnBean#isNullable()} method.\n*/\nclass ColumnBean_0Test {"
	},
	{
		"original_code": "// ColumnBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\n\npublic class ColumnBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private boolean nullable;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    private ArrayList constraintList = new ArrayList();\n\n    private String dim = \"\";\n\n    private String originalDT = \"\";\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public ArrayList getConstraintList() {\n        return constraintList;\n    }\n\n    public void setConstraintList(ArrayList constraintList) {\n        this.constraintList = constraintList;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public boolean isNullable() {\n        return nullable;\n    }\n\n    public void setNullable(boolean nullable) {\n        this.nullable = nullable;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public String getOriginalDT() {\n        return originalDT;\n    }\n\n    public void setOriginalDT(String originalDT) {\n        this.originalDT = originalDT;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ColumnBean_1Test.java",
		"test_prompt": "// ColumnBean_1Test.java\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnBean}.\n* It contains ten unit test cases for the {@link ColumnBean#isUnique()} method.\n*/\nclass ColumnBean_1Test {"
	},
	{
		"original_code": "// ColumnBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\n\npublic class ColumnBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private boolean nullable;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    private ArrayList constraintList = new ArrayList();\n\n    private String dim = \"\";\n\n    private String originalDT = \"\";\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public ArrayList getConstraintList() {\n        return constraintList;\n    }\n\n    public void setConstraintList(ArrayList constraintList) {\n        this.constraintList = constraintList;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public boolean isNullable() {\n        return nullable;\n    }\n\n    public void setNullable(boolean nullable) {\n        this.nullable = nullable;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public String getOriginalDT() {\n        return originalDT;\n    }\n\n    public void setOriginalDT(String originalDT) {\n        this.originalDT = originalDT;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ColumnBean_2Test.java",
		"test_prompt": "// ColumnBean_2Test.java\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnBean}.\n* It contains ten unit test cases for the {@link ColumnBean#isKey()} method.\n*/\nclass ColumnBean_2Test {"
	},
	{
		"original_code": "// ColumnBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\n\npublic class ColumnBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String className = \"\";\n\n    private String owner = \"\";\n\n    private String tableName = \"\";\n\n    private String mode = \"\";\n\n    private String dataType = \"\";\n\n    private String codeType = \"\";\n\n    private int len = 0;\n\n    private int dec = 0;\n\n    private boolean nullable;\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    private String defaultValue = \"\";\n\n    private String comment = \"\";\n\n    // extra for mysql\n    private String extra = \"\";\n\n    private ArrayList constraintList = new ArrayList();\n\n    private String dim = \"\";\n\n    private String originalDT = \"\";\n\n    public String getDim() {\n        return dim;\n    }\n\n    public void setDim(String dim) {\n        this.dim = dim;\n    }\n\n    public ArrayList getConstraintList() {\n        return constraintList;\n    }\n\n    public void setConstraintList(ArrayList constraintList) {\n        this.constraintList = constraintList;\n    }\n\n    public String getClassName() {\n        return className;\n    }\n\n    public void setClassName(String className) {\n        this.className = className;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getCodeType() {\n        return codeType;\n    }\n\n    public void setCodeType(String codeType) {\n        this.codeType = codeType;\n    }\n\n    public String getComment() {\n        return comment;\n    }\n\n    public void setComment(String comment) {\n        this.comment = comment;\n    }\n\n    public String getDataType() {\n        return dataType;\n    }\n\n    public void setDataType(String dataType) {\n        this.dataType = dataType;\n    }\n\n    public int getDec() {\n        return dec;\n    }\n\n    public void setDec(int dec) {\n        this.dec = dec;\n    }\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n    public void setMode(String mode) {\n        this.mode = mode;\n    }\n\n    public boolean isNullable() {\n        return nullable;\n    }\n\n    public void setNullable(boolean nullable) {\n        this.nullable = nullable;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public void setOwner(String owner) {\n        this.owner = owner;\n    }\n\n    public String getTableName() {\n        return tableName;\n    }\n\n    public void setTableName(String tableName) {\n        this.tableName = tableName;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public String getExtra() {\n        return extra;\n    }\n\n    public void setExtra(String extra) {\n        this.extra = extra;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public String getOriginalDT() {\n        return originalDT;\n    }\n\n    public void setOriginalDT(String originalDT) {\n        this.originalDT = originalDT;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ColumnBean_3Test.java",
		"test_prompt": "// ColumnBean_3Test.java\npackage com.gbshape.dbe.struts.bean;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ColumnBean}.\n* It contains ten unit test cases for the {@link ColumnBean#isIndex()} method.\n*/\nclass ColumnBean_3Test {"
	},
	{
		"original_code": "// ConstraintBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic class ConstraintBean implements java.io.Serializable {\n\n    private String columnName = \"\";\n\n    private String constraintName = \"\";\n\n    private String constraintType = \"\";\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    public String getColumnName() {\n        return columnName;\n    }\n\n    public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }\n\n    public String getConstraintName() {\n        return constraintName;\n    }\n\n    public void setConstraintName(String constraintName) {\n        this.constraintName = constraintName;\n    }\n\n    public String getConstraintType() {\n        return constraintType;\n    }\n\n    public void setConstraintType(String constraintType) {\n        this.constraintType = constraintType;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ConstraintBean_0Test.java",
		"test_prompt": "// ConstraintBean_0Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstraintBean}.\n* It contains ten unit test cases for the {@link ConstraintBean#isIndex()} method.\n*/\nclass ConstraintBean_0Test {"
	},
	{
		"original_code": "// ConstraintBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic class ConstraintBean implements java.io.Serializable {\n\n    private String columnName = \"\";\n\n    private String constraintName = \"\";\n\n    private String constraintType = \"\";\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    public String getColumnName() {\n        return columnName;\n    }\n\n    public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }\n\n    public String getConstraintName() {\n        return constraintName;\n    }\n\n    public void setConstraintName(String constraintName) {\n        this.constraintName = constraintName;\n    }\n\n    public String getConstraintType() {\n        return constraintType;\n    }\n\n    public void setConstraintType(String constraintType) {\n        this.constraintType = constraintType;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ConstraintBean_1Test.java",
		"test_prompt": "// ConstraintBean_1Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstraintBean}.\n* It contains ten unit test cases for the {@link ConstraintBean#isKey()} method.\n*/\nclass ConstraintBean_1Test {"
	},
	{
		"original_code": "// ConstraintBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.bean;\n\npublic class ConstraintBean implements java.io.Serializable {\n\n    private String columnName = \"\";\n\n    private String constraintName = \"\";\n\n    private String constraintType = \"\";\n\n    private boolean unique;\n\n    private boolean key;\n\n    private boolean index;\n\n    public String getColumnName() {\n        return columnName;\n    }\n\n    public void setColumnName(String columnName) {\n        this.columnName = columnName;\n    }\n\n    public String getConstraintName() {\n        return constraintName;\n    }\n\n    public void setConstraintName(String constraintName) {\n        this.constraintName = constraintName;\n    }\n\n    public String getConstraintType() {\n        return constraintType;\n    }\n\n    public void setConstraintType(String constraintType) {\n        this.constraintType = constraintType;\n    }\n\n    public boolean isIndex() {\n        return index;\n    }\n\n    public void setIndex(boolean index) {\n        this.index = index;\n    }\n\n    public boolean isKey() {\n        return key;\n    }\n\n    public void setKey(boolean key) {\n        this.key = key;\n    }\n\n    public boolean isUnique() {\n        return unique;\n    }\n\n    public void setUnique(boolean unique) {\n        this.unique = unique;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/bean/ConstraintBean_2Test.java",
		"test_prompt": "// ConstraintBean_2Test.java\npackage com.gbshape.dbe.struts.bean;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConstraintBean}.\n* It contains ten unit test cases for the {@link ConstraintBean#isUnique()} method.\n*/\nclass ConstraintBean_2Test {"
	},
	{
		"original_code": "// DBStructureAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DBStructureAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableList tableList = TableListFactory.getInstance(dataBean.getDbType());\n        ArrayList tArrayList = tableList.getTableList(dataBean);\n        int size = tArrayList.size();\n        ArrayList list = new ArrayList(size);\n        boolean showTableStatus = DBEHelper.showTableStatus(dataBean);\n        for (int i = 0; i < size; i++) {\n            TableBean tableBean = (TableBean) tArrayList.get(i);\n            if (StringUtils.isNotEmpty(tableBean.getName()) && !tableBean.isView()) {\n                TableStatusBean tableStatusBean = tableStructure.getStatus(dataBean, tableBean.getName(), showTableStatus);\n                list.add(tableStatusBean);\n            }\n        }\n        request.setAttribute(\"tableList\", list);\n        ViewStructure viewStructure = ViewStructureFactory.getInstance(dataBean.getDbType());\n        ArrayList viewList = new ArrayList(size);\n        for (int i = 0; i < size; i++) {\n            TableBean tableBean = (TableBean) tArrayList.get(i);\n            if (StringUtils.isNotEmpty(tableBean.getName()) && tableBean.isView()) {\n                ViewStatusBean viewStatusBean = viewStructure.getStatus(dataBean, tableBean.getName());\n                viewList.add(viewStatusBean);\n            }\n        }\n        request.setAttribute(\"viewList\", viewList);\n        //System.out.println(\"-------------\"+viewList.size());\n        SequenceStructure sequenceStructure = SequenceStructureFactory.getInstance(dataBean.getDbType());\n        ArrayList sequenceList = sequenceStructure.getList(dataBean);\n        request.setAttribute(\"sequenceList\", sequenceList);\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        return mapping.findForward(\"show_structure\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/DBStructureAction.java",
		"test_prompt": "// DBStructureActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBStructureAction}.\n* It contains ten unit test cases for the {@link DBStructureAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DBStructureActionTest {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_0Test.java",
		"test_prompt": "// AlterTableAction_0Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#drop(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_0Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_1Test.java",
		"test_prompt": "// AlterTableAction_1Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#modify(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_1Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_2Test.java",
		"test_prompt": "// AlterTableAction_2Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#add(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_2Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_3Test.java",
		"test_prompt": "// AlterTableAction_3Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#dropIndex(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_3Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_4Test.java",
		"test_prompt": "// AlterTableAction_4Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#dropUnique(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_4Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_5Test.java",
		"test_prompt": "// AlterTableAction_5Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#dropPrimary(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_5Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_6Test.java",
		"test_prompt": "// AlterTableAction_6Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#unique(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_6Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_7Test.java",
		"test_prompt": "// AlterTableAction_7Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#index(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_7Test {"
	},
	{
		"original_code": "// AlterTableAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class AlterTableAction extends DispatchAction {\n\n    //private static Logger log = Logger.getLogger(AlterTableAction.class.getName());\n    public ActionForward drop(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.alterDrop(request, dataBean, tableName, field);\n        return mapping.findForward(\"none\");\n    }\n\n    public ActionForward modify(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        String name = columnForm.getName();\n        ColumnBean columnBean = null;\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean cb = (ColumnBean) columns.get(i);\n            if (name.equals(cb.getName())) {\n                columnBean = cb;\n                break;\n            }\n        }\n        //tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        ArrayList querys = tableStructure.alterModify(request, dataBean, tableName, columnBean, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward add(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String check = request.getParameter(\"check\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        //TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ColumnForm columnForm = (ColumnForm) form;\n        //String name = columnForm.getName();\n        //tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        ArrayList querys = tableStructure.alterAdd(request, dataBean, tableName, columnForm);\n        if (StringUtils.isEmpty(check)) {\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            return mapping.findForward(\"done\");\n        } else {\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"sql\");\n        }\n    }\n\n    public ActionForward dropIndex(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropIndex(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropUnique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropUnique(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward dropPrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String keyName = request.getParameter(\"keyName\");\n        String columnName = request.getParameter(\"columnName\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.dropPrimary(request, dataBean, tableName, keyName, columnName);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward unique(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addUnique(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward index(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String field = request.getParameter(\"field\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.addIndex(request, dataBean, tableName, field);\n        return mapping.findForward(\"done\");\n    }\n\n    public ActionForward changePrimary(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        //DBEUtils.dumpRequest(request);\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            String key = request.getParameter(columnBean.getName());\n            if (StringUtils.isNotEmpty(key) && key.equals(\"1\")) {\n                columnBean.setKey(true);\n            } else {\n                columnBean.setKey(false);\n            }\n        }\n        tableStructure.changePrimary(request, dataBean, tableName, columns);\n        return mapping.findForward(\"done\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/AlterTableAction_8Test.java",
		"test_prompt": "// AlterTableAction_8Test.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.DispatchAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlterTableAction}.\n* It contains ten unit test cases for the {@link AlterTableAction#changePrimary(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass AlterTableAction_8Test {"
	},
	{
		"original_code": "// CreateSequenceAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class CreateSequenceAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        String check = request.getParameter(\"check\");\n        SequenceForm sequenceForm = (SequenceForm) form;\n        request.setAttribute(\"sequenceForm\", sequenceForm);\n        if (StringUtils.isNotEmpty(check)) {\n            SequenceStructure sequenceStructure = SequenceStructureFactory.getInstance(dataBean.getDbType());\n            ArrayList querys = sequenceStructure.create(request, dataBean, sequenceForm);\n            request.setAttribute(\"querys\", querys);\n            return mapping.findForward(\"querys\");\n        } else {\n            SequenceStructure sequenceStructure = SequenceStructureFactory.getInstance(dataBean.getDbType());\n            ArrayList querys = sequenceStructure.create(request, dataBean, sequenceForm);\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            if (StringUtils.isNotEmpty(errorMessages.toString())) {\n                request.setAttribute(\"errorMessage\", errorMessages.toString());\n                return mapping.findForward(\"error\");\n            } else {\n                return mapping.findForward(\"done\");\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/CreateSequenceAction.java",
		"test_prompt": "// CreateSequenceActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateSequenceAction}.\n* It contains ten unit test cases for the {@link CreateSequenceAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CreateSequenceActionTest {"
	},
	{
		"original_code": "// InsertFormAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic class InsertFormAction extends ForwardAction {\n\n    //private static Logger log = Logger.getLogger(InsertFormAction.class.getName());\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        request.setAttribute(\"table\", tableName);\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        request.setAttribute(\"tableStructureBean\", tableStructureBean);\n        return mapping.findForward(\"form\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/InsertFormAction.java",
		"test_prompt": "// InsertFormActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InsertFormAction}.\n* It contains ten unit test cases for the {@link InsertFormAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass InsertFormActionTest {"
	},
	{
		"original_code": "// ExportDataAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.CharUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport au.com.bytecode.opencsv.CSVWriter;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.FieldBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class ExportDataAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        String tm = request.getParameter(\"tm\");\n        String type = request.getParameter(\"type\");\n        String file = request.getParameter(\"file\");\n        if (StringUtils.isEmpty(type)) {\n            type = \"csv\";\n        }\n        request.setAttribute(\"type\", type);\n        String tableName = request.getParameter(\"tableName\");\n        String query = request.getParameter(\"query\");\n        if (StringUtils.isEmpty(query)) {\n            query = (String) session.getAttribute(\"query_\" + tm);\n        }\n        if (StringUtils.isEmpty(query)) {\n            query = \"SELECT * FROM \" + tableName;\n        } else {\n            query = query.trim();\n        }\n        String separator = request.getParameter(\"separator\");\n        if (StringUtils.isEmpty(separator)) {\n            separator = \",\";\n        }\n        String enclosed = request.getParameter(\"enclosed\");\n        if (StringUtils.isEmpty(enclosed)) {\n            enclosed = \"\\\"\";\n        }\n        String escaped = request.getParameter(\"escaped\");\n        if (StringUtils.isEmpty(escaped)) {\n            escaped = \"\\\"\";\n        }\n        String endLine = request.getParameter(\"add_character\");\n        if (StringUtils.isEmpty(endLine)) {\n            endLine = \"\\n\";\n        }\n        String showcsvnames = request.getParameter(\"showcsvnames\");\n        if (StringUtils.isEmpty(showcsvnames)) {\n            showcsvnames = \"no\";\n        }\n        endLine = StringUtils.replace(endLine, \"\\\\n\", \"\\n\");\n        endLine = StringUtils.replace(endLine, \"\\\\r\", \"\\r\");\n        if (StringUtils.isNotEmpty(query)) {\n            DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n            TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n            if (query.toUpperCase().startsWith(\"SELECT\") || query.toUpperCase().startsWith(\"SHOW\") || query.toUpperCase().startsWith(\"EXPLAIN\")) {\n                SelectResultBean queryResult = (SelectResultBean) session.getAttribute(\"queryResult_\" + tm);\n                String data = request.getParameter(\"data\");\n                if (queryResult == null && !(data == null && type.equals(\"sql\"))) {\n                    queryResult = Select.executeQuery(dataBean, query);\n                    ArrayList messages = queryResult.getMessages();\n                    DBEHelper.setLogs(request, messages);\n                }\n                ArrayList export = null;\n                if (queryResult != null) {\n                    if (queryResult.getValueListHandler() == null) {\n                        request.setAttribute(\"errorMessage\", queryResult.getErrorMessage());\n                        return mapping.findForward(\"noResult\");\n                    }\n                    Collection resultList = queryResult.getValueListHandler().getList();\n                    int resultSize = resultList.size() + 10;\n                    export = new ArrayList(resultSize);\n                    if (type.equals(\"csv\")) {\n                        Iterator iterator = resultList.iterator();\n                        if (showcsvnames.equals(\"yes\")) {\n                            ColumnBean[] columnBeans = queryResult.getColumnBeans();\n                            String[] values = new String[columnBeans.length];\n                            for (int j = 0; j < columnBeans.length; j++) {\n                                ColumnBean columnBean = columnBeans[j];\n                                values[j] = columnBean.getName();\n                            }\n                            export.add(values);\n                        }\n                        while (iterator.hasNext()) {\n                            FieldBean[] fieldBeans = (FieldBean[]) iterator.next();\n                            String[] values = new String[fieldBeans.length];\n                            for (int j = 0; j < fieldBeans.length; j++) {\n                                FieldBean fieldBean = fieldBeans[j];\n                                String val = fieldBean.getValue();\n                                values[j] = val;\n                            }\n                            export.add(values);\n                        }\n                    } else if (type.equals(\"sql\") && StringUtils.isNotEmpty(tableName)) {\n                        Iterator iterator = resultList.iterator();\n                        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n                        String structure = request.getParameter(\"structure\");\n                        if (structure != null) {\n                            TableStatusBean tableStatusBean = tableStructure.getStatus(dataBean, tableName, true);\n                            CreateTableXmlBean createTableXmlBean = new CreateTableXmlBean();\n                            createTableXmlBean.setColumns(tableStructureBean.getColumns());\n                            createTableXmlBean.setName(tableStructureBean.getTableName());\n                            createTableXmlBean.setComment(tableStatusBean.getComment());\n                            ArrayList querys = tableStructure.create(request, dataBean, createTableXmlBean);\n                            for (int i = 0; i < querys.size(); i++) {\n                                String line = (String) querys.get(i);\n                                export.add(line + \";\");\n                            }\n                            export.add(\" \");\n                        }\n                        while (iterator.hasNext()) {\n                            FieldBean[] fieldBeans = (FieldBean[]) iterator.next();\n                            String[] values = new String[fieldBeans.length];\n                            for (int j = 0; j < fieldBeans.length; j++) {\n                                FieldBean fieldBean = fieldBeans[j];\n                                String val = fieldBean.getValue();\n                                values[j] = val;\n                            }\n                            String insert = DBEHelper.createInsertQuery(values, dataBean, tableName, tableStructureBean, \";\");\n                            export.add(insert);\n                        }\n                    }\n                }\n                if (file == null) {\n                    request.setAttribute(\"query\", query);\n                    request.setAttribute(\"export\", export);\n                    request.setAttribute(\"separator\", separator);\n                    request.setAttribute(\"enclosed\", enclosed);\n                    request.setAttribute(\"escaped\", escaped);\n                    request.setAttribute(\"endLine\", endLine);\n                    return mapping.findForward(\"showList\");\n                } else {\n                    String fileName = request.getParameter(\"fileName\");\n                    ServletOutputStream out = response.getOutputStream();\n                    response.setContentType(\"application/text\");\n                    response.setHeader(\"Content-disposition\", \"filename=\\\"\" + fileName + \"\\\"\");\n                    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(out);\n                    if (type.equals(\"csv\")) {\n                        CSVWriter writer = new CSVWriter(outputStreamWriter, CharUtils.toChar(separator), CharUtils.toChar(enclosed), CharUtils.toChar(escaped), endLine);\n                        writer.writeAll(export);\n                        writer.close();\n                    } else if (type.equals(\"sql\") && StringUtils.isNotEmpty(tableName)) {\n                        if (export == null) {\n                            export = new ArrayList();\n                        }\n                        int size = export.size();\n                        for (int i = 0; i < size; i++) {\n                            String line = (String) export.get(i);\n                            out.println(line);\n                        }\n                    }\n                    return null;\n                }\n            }\n        }\n        return mapping.findForward(\"noResult\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/ExportDataAction.java",
		"test_prompt": "// ExportDataActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.CharUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport au.com.bytecode.opencsv.CSVWriter;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.FieldBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExportDataAction}.\n* It contains ten unit test cases for the {@link ExportDataAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ExportDataActionTest {"
	},
	{
		"original_code": "// DBListAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.DataBaseListFactory;\nimport com.gbshape.dbe.idb.DataBaseList;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class DBListAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        DataBaseList dataBaseList = DataBaseListFactory.getInstance(dataBean.getDbType());\n        ArrayList tArrayList = dataBaseList.getDataBaseList(dataBean);\n        request.setAttribute(\"dataBaseList\", tArrayList);\n        return mapping.findForward(\"showList\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/DBListAction.java",
		"test_prompt": "// DBListActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.DataBaseListFactory;\nimport com.gbshape.dbe.idb.DataBaseList;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBListAction}.\n* It contains ten unit test cases for the {@link DBListAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DBListActionTest {"
	},
	{
		"original_code": "// CreateImportFormAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.importdata.ImportTask;\n\npublic class CreateImportFormAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        //HttpSession session = request.getSession();\n        //DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String importSelect = request.getParameter(\"importSelect\");\n        try {\n            Class cl = Class.forName(importSelect);\n            ImportTask importTask = (ImportTask) cl.newInstance();\n            ArrayList parameters = importTask.getParameters(request);\n            request.setAttribute(\"parameters\", parameters);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        request.setAttribute(\"importSelect\", importSelect);\n        return mapping.findForward(\"form\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/CreateImportFormAction.java",
		"test_prompt": "// CreateImportFormActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.importdata.ImportTask;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateImportFormAction}.\n* It contains ten unit test cases for the {@link CreateImportFormAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CreateImportFormActionTest {"
	},
	{
		"original_code": "// SQLQueryAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SQLQueryAction extends ForwardAction {\n\n    private static final String NO_RESULT = \"noResult\";\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        String tm = request.getParameter(\"tm\");\n        String nbDisplay = request.getParameter(\"nbDisplay\");\n        if (StringUtils.isNotEmpty(nbDisplay) && StringUtils.isNumeric(nbDisplay)) {\n            session.setAttribute(\"nbDisplay_\" + tm, nbDisplay);\n        }\n        String query = request.getParameter(\"query\");\n        if (StringUtils.isEmpty(query)) {\n            query = \"\";\n        } else {\n            query = query.trim();\n        }\n        query = StringUtils.replace(query, \"\\n\", \" \");\n        if (StringUtils.isNotEmpty(query)) {\n            //add the query into the sqlList\n            ArrayList sqlList = (ArrayList) session.getAttribute(\"SQL_LIST\");\n            if (sqlList == null) {\n                sqlList = new ArrayList();\n            }\n            sqlList.add(query);\n            //limit querys to 30 in memory\n            while (sqlList.size() > 30) {\n                sqlList.remove(0);\n            }\n            session.setAttribute(\"SQL_LIST\", sqlList);\n            String sqlDelimiter = request.getParameter(\"sqlDelimiter\");\n            if (StringUtils.isEmpty(sqlDelimiter)) {\n                // no sqlDelimiter, simulate an impossible one\n                sqlDelimiter = \"###########\";\n            }\n            DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n            query = DBEHelper.decodeAjax(dataBean, query);\n            String[] querys = StringUtils.split(query, sqlDelimiter);\n            String action = \"\";\n            for (int i = 0; i < querys.length; i++) {\n                String q = querys[i];\n                action = executeRequest(mapping, request, session, tm, q, dataBean);\n                if (action.equals(NO_RESULT)) {\n                    break;\n                }\n            }\n            return mapping.findForward(action);\n        }\n        return mapping.findForward(NO_RESULT);\n    }\n\n    private String executeRequest(ActionMapping mapping, HttpServletRequest request, HttpSession session, String tm, String query, DBDataBean dataBean) {\n        String action = NO_RESULT;\n        if (query.toUpperCase().startsWith(\"SELECT\") || query.toUpperCase().startsWith(\"SHOW\") || query.toUpperCase().startsWith(\"EXPLAIN\")) {\n            SelectResultBean queryResult = Select.executeQuery(dataBean, query);\n            session.setAttribute(\"queryResult_\" + tm, queryResult);\n            session.setAttribute(\"query_\" + tm, query);\n            request.setAttribute(\"tm\", tm);\n            request.setAttribute(\"createView\", \"ok\");\n            ArrayList messages = queryResult.getMessages();\n            DBEHelper.setLogs(request, messages);\n            if (queryResult.getValueListHandler() == null) {\n                request.setAttribute(\"errorMessage\", queryResult.getErrorMessage());\n                action = NO_RESULT;\n            }\n            action = \"showList\";\n        } else {\n            NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n            DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            int rowCount = nonSelectResultBean.getRowCount();\n            Integer rc = (Integer) request.getAttribute(\"rowCount\");\n            if (rc != null) {\n                rowCount = rowCount + rc.intValue();\n            }\n            request.setAttribute(\"rowCount\", new Integer(rowCount));\n            if (StringUtils.isNotEmpty(nonSelectResultBean.getErrorMessage())) {\n                request.setAttribute(\"errorMessage\", nonSelectResultBean.getErrorMessage());\n                action = NO_RESULT;\n            } else {\n                action = \"showRowCount\";\n            }\n        }\n        return action;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/SQLQueryAction.java",
		"test_prompt": "// SQLQueryActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SQLQueryAction}.\n* It contains ten unit test cases for the {@link SQLQueryAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass SQLQueryActionTest {"
	},
	{
		"original_code": "// CreateTableAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class CreateTableAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"tableName\");\n        String nl = request.getParameter(\"numLine\");\n        if (nl == null) {\n            nl = \"0\";\n        }\n        int numLine = Integer.parseInt(nl);\n        ArrayList columns = new ArrayList(numLine);\n        for (int i = 0; i < numLine; i++) {\n            ColumnBean columnBean = new ColumnBean();\n            String name = request.getParameter(\"name_\" + i);\n            //if(StringUtils.isNotEmpty(name)) {\n            columnBean.setName(name);\n            columnBean.setDataType(request.getParameter(\"dataType_\" + i));\n            String dim = request.getParameter(\"dim_\" + i);\n            if (StringUtils.isNotEmpty(dim)) {\n                String[] dims = StringUtils.split(dim, \",\");\n                if (dims.length > 0 && StringUtils.isNumeric(dims[0])) {\n                    columnBean.setLen(Integer.parseInt(dims[0]));\n                }\n                if (dims.length > 1 && StringUtils.isNumeric(dims[1])) {\n                    columnBean.setDec(Integer.parseInt(dims[1]));\n                }\n            }\n            columnBean.setDim(dim);\n            columnBean.setCodeType(request.getParameter(\"codeType_\" + i));\n            String notNull = request.getParameter(\"notnull_\" + i);\n            if (StringUtils.isNotEmpty(notNull) && notNull.equalsIgnoreCase(\"false\")) {\n                columnBean.setNullable(true);\n            }\n            columnBean.setDefaultValue(request.getParameter(\"defaultValue_\" + i));\n            columnBean.setComment(request.getParameter(\"comment_\" + i));\n            columnBean.setExtra(request.getParameter(\"extra_\" + i));\n            String constraint = request.getParameter(\"constraint_\" + i);\n            if (StringUtils.isNotEmpty(constraint)) {\n                if (constraint.equalsIgnoreCase(\"primary\")) {\n                    columnBean.setKey(true);\n                }\n                if (constraint.equalsIgnoreCase(\"unique\")) {\n                    columnBean.setUnique(true);\n                }\n                if (constraint.equalsIgnoreCase(\"index\")) {\n                    columnBean.setIndex(true);\n                }\n            }\n            columns.add(columnBean);\n            //}\n        }\n        CreateTableXmlBean createTableXmlBean = new CreateTableXmlBean();\n        createTableXmlBean.setName(tableName);\n        createTableXmlBean.setComment(request.getParameter(\"tableComment\"));\n        createTableXmlBean.setColumns(columns);\n        String tm = request.getParameter(\"tm\");\n        if (StringUtils.isNotEmpty(tm)) {\n            request.setAttribute(\"tm\", tm);\n        }\n        String add = request.getParameter(\"add\");\n        String check = request.getParameter(\"check\");\n        if (StringUtils.isNotEmpty(add)) {\n            ColumnBean columnBean = new ColumnBean();\n            createTableXmlBean.getColumns().add(columnBean);\n            request.setAttribute(\"createTableXmlBean\", createTableXmlBean);\n            return mapping.findForward(\"add\");\n        } else if (StringUtils.isNotEmpty(check)) {\n            TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n            ArrayList querys = tableStructure.create(request, dataBean, createTableXmlBean);\n            request.setAttribute(\"querys\", querys);\n            request.setAttribute(\"createTableXmlBean\", createTableXmlBean);\n            return mapping.findForward(\"querys\");\n        } else {\n            TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n            ArrayList querys = tableStructure.create(request, dataBean, createTableXmlBean);\n            StringBuffer errorMessages = new StringBuffer(\"\");\n            for (int i = 0; i < querys.size(); i++) {\n                String query = (String) querys.get(i);\n                NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n                errorMessages.append(nonSelectResultBean.getErrorMessage());\n            }\n            //String errorMessage = tableStructure.create(request, dataBean, createTableXmlBean);\n            if (StringUtils.isNotEmpty(errorMessages.toString())) {\n                request.setAttribute(\"createTableXmlBean\", createTableXmlBean);\n                request.setAttribute(\"errorMessage\", errorMessages.toString());\n                return mapping.findForward(\"error\");\n            } else {\n                return mapping.findForward(\"done\");\n            }\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/CreateTableAction.java",
		"test_prompt": "// CreateTableActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateTableAction}.\n* It contains ten unit test cases for the {@link CreateTableAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CreateTableActionTest {"
	},
	{
		"original_code": "// TableListAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class TableListAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        TableList tableList = TableListFactory.getInstance(dataBean.getDbType());\n        ArrayList tArrayList = tableList.getTableList(dataBean);\n        request.setAttribute(\"tableList\", tArrayList);\n        return mapping.findForward(\"showList\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/TableListAction.java",
		"test_prompt": "// TableListActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableListAction}.\n* It contains ten unit test cases for the {@link TableListAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass TableListActionTest {"
	},
	{
		"original_code": "// TableStructureAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class TableStructureAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        TableStatusBean tableStatusBean = tableStructure.getStatus(dataBean, tableName, true);\n        request.setAttribute(\"tableStructureBean\", tableStructureBean);\n        request.setAttribute(\"tableStatusBean\", tableStatusBean);\n        CreateTableXmlBean createTableXmlBean = new CreateTableXmlBean();\n        createTableXmlBean.setColumns(tableStructureBean.getColumns());\n        createTableXmlBean.setName(tableStructureBean.getTableName());\n        createTableXmlBean.setComment(tableStatusBean.getComment());\n        ArrayList querys = tableStructure.create(request, dataBean, createTableXmlBean);\n        request.setAttribute(\"querys\", querys);\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        //return mapping.findForward(\"show_\"+dataBean.getDbType());\n        return mapping.findForward(\"show_structure\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/TableStructureAction.java",
		"test_prompt": "// TableStructureActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableStructureAction}.\n* It contains ten unit test cases for the {@link TableStructureAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass TableStructureActionTest {"
	},
	{
		"original_code": "// UpdateDataAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.apache.struts.action.Action;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class UpdateDataAction extends Action {\n\n    private static Logger log = Logger.getLogger(UpdateDataAction.class.getName());\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        if (log.isInfoEnabled()) {\n            log.info(\"UpdateDataAction\");\n        }\n        String tableName = request.getParameter(\"table\");\n        String data = request.getParameter(\"data\");\n        if (log.isInfoEnabled()) {\n            log.info(\"tableName=\" + tableName);\n            log.info(\"data=\" + data);\n        }\n        // parse JSON data String\n        // {\"_oData\":{\"VALUE\":\"1.60\",\"ID\":\"EURO\"},\"_nId\":9}\n        //\"_sId\":\"6\",\"_oData\":{\"VALUE\":\"CH\",\"ID\":\"DEFAULT_COUNTRY\"}\n        //String oData = \"\\\"_oData\\\":{\";\n        //data = data.substring((data.indexOf(oData)+oData.length()));\n        //data = data.substring(0, data.indexOf(\"}\"));\n        HashMap keyValueMap = DBEHelper.parseJSON(data);\n        StringBuffer query = new StringBuffer(\"UPDATE \" + tableName + \" SET \");\n        StringBuffer setClause = new StringBuffer(\"\");\n        StringBuffer where = new StringBuffer(\"\");\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (keyValueMap.containsKey(columnBean.getName())) {\n                String value = (String) keyValueMap.get(columnBean.getName());\n                //value = StringUtils.replace(value, \"'\", DBEHelper.getApostropheWrapper(dataBean));\n                if (columnBean.isKey()) {\n                    if (!where.toString().equals(\"\")) {\n                        where.append(\" AND \");\n                    }\n                    where.append(columnBean.getName());\n                    DBEHelper.appendValueNoDecodeAjax(dataBean, where, columnBean, value);\n                } else {\n                    if (!setClause.toString().equals(\"\")) {\n                        setClause.append(\" , \");\n                    }\n                    setClause.append(columnBean.getName());\n                    DBEHelper.appendValueNoDecodeAjax(dataBean, setClause, columnBean, value);\n                }\n            }\n        }\n        query.append(setClause).append(\" WHERE \").append(where);\n        String queryString = query.toString();\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, queryString);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return mapping.findForward(\"none\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/UpdateDataAction.java",
		"test_prompt": "// UpdateDataActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport org.apache.struts.action.Action;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UpdateDataAction}.\n* It contains ten unit test cases for the {@link UpdateDataAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass UpdateDataActionTest {"
	},
	{
		"original_code": "// TruncateAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class TruncateAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        tableStructure.truncate(request, dataBean, tableName);\n        return mapping.findForward(\"none\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/TruncateAction.java",
		"test_prompt": "// TruncateActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TruncateAction}.\n* It contains ten unit test cases for the {@link TruncateAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass TruncateActionTest {"
	},
	{
		"original_code": "// DropAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class DropAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String viewName = request.getParameter(\"view\");\n        String seq = request.getParameter(\"seq\");\n        if (StringUtils.isNotEmpty(tableName)) {\n            TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n            tableStructure.drop(request, dataBean, tableName);\n        }\n        if (StringUtils.isNotEmpty(viewName)) {\n            ViewStructure viewStructure = ViewStructureFactory.getInstance(dataBean.getDbType());\n            viewStructure.drop(request, dataBean, viewName);\n        }\n        if (StringUtils.isNotEmpty(seq)) {\n            SequenceStructure sequenceStructure = SequenceStructureFactory.getInstance(dataBean.getDbType());\n            sequenceStructure.drop(request, dataBean, seq);\n        }\n        return mapping.findForward(\"none\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/DropAction.java",
		"test_prompt": "// DropActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.SequenceStructureFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DropAction}.\n* It contains ten unit test cases for the {@link DropAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DropActionTest {"
	},
	{
		"original_code": "// TableLoadDataAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.sql.SimpleCount;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class TableLoadDataAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        //DBEUtils.dumpRequest(request);\n        String tm = request.getParameter(\"tm\");\n        String where = request.getParameter(\"where\");\n        String orderby = request.getParameter(\"orderby\");\n        String select = request.getParameter(\"selectCols\");\n        String nbDisplay = request.getParameter(\"nbDisplay\");\n        if (StringUtils.isNotEmpty(nbDisplay) && StringUtils.isNumeric(nbDisplay)) {\n            session.setAttribute(\"nbDisplay_\" + tm, nbDisplay);\n        }\n        if (StringUtils.isEmpty(select)) {\n            select = (String) session.getAttribute(\"select_\" + tm);\n        }\n        SelectResultBean queryResult = null;\n        String whereSession = (String) session.getAttribute(\"where_\" + tm);\n        String orderBySession = (String) session.getAttribute(\"orderby_\" + tm);\n        if (whereSession != null || orderBySession != null) {\n            if (StringUtils.isEmpty(where)) {\n                where = whereSession;\n            }\n            if (where != null) {\n                where = where.trim();\n                where = DBEHelper.decodeAjax(dataBean, where);\n            }\n            if (StringUtils.isEmpty(orderby)) {\n                orderby = orderBySession;\n            }\n            String query = \"SELECT \" + select + \" FROM \" + tableName;\n            if (StringUtils.isNotEmpty(where)) {\n                query = query + \" WHERE \" + where;\n            }\n            if (StringUtils.isNotEmpty(orderby)) {\n                query = query + \" ORDER BY \" + orderby;\n            }\n            queryResult = Select.executeQuery(dataBean, query);\n            session.setAttribute(\"query_\" + tm, query);\n        } else {\n            queryResult = new SelectResultBean();\n            where = \"\";\n        }\n        session.setAttribute(\"queryResult_\" + tm, queryResult);\n        request.setAttribute(\"tm\", tm);\n        request.setAttribute(\"table\", tableName);\n        session.setAttribute(\"where_\" + tm, where);\n        session.setAttribute(\"orderby_\" + tm, orderby);\n        //TODO change it later\n        request.setAttribute(\"sortable\", \"false\");\n        request.setAttribute(\"editable\", \"true\");\n        //retreive the numbers of Rows in the table\n        String countRequest = \"SELECT COUNT(*) NB FROM \" + tableName;\n        int count = SimpleCount.executeQuery(dataBean, countRequest);\n        request.setAttribute(\"nbRows\", new Integer(count));\n        // get table structure\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        request.setAttribute(\"columns\", columns);\n        // check if is view\n        ViewStructure viewStructure = ViewStructureFactory.getInstance(dataBean.getDbType());\n        boolean isView = viewStructure.isView(dataBean, tableName);\n        if (isView) {\n            request.setAttribute(\"editable\", \"false\");\n        }\n        if (StringUtils.isEmpty(select)) {\n            select = \"\";\n            for (int i = 0; i < columns.size(); i++) {\n                if (i > 0) {\n                    select += \", \";\n                }\n                select += ((ColumnBean) columns.get(i)).getName();\n            }\n        }\n        session.setAttribute(\"select_\" + tm, select);\n        //add informations about columns\n        ColumnBean[] columnBeans = queryResult.getColumnBeans();\n        if (columnBeans != null) {\n            for (int i = 0; i < columns.size(); i++) {\n                ColumnBean columnBean = (ColumnBean) columns.get(i);\n                for (int j = 0; j < columnBeans.length; j++) {\n                    if (columnBeans[j].getName().equals(columnBean.getName())) {\n                        columnBeans[j].setKey(columnBean.isKey());\n                        columnBeans[j].setDataType(columnBean.getDataType());\n                    }\n                }\n            }\n        }\n        //queryResult.setColumnBeans((ColumnBean[]) columns.toArray(new ColumnBean[columns.size()]));\n        queryResult.setTable(tableName);\n        DBEHelper.setLogs(request, queryResult.getMessages());\n        return mapping.findForward(\"showList\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/TableLoadDataAction.java",
		"test_prompt": "// TableLoadDataActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.Select;\nimport com.gbshape.dbe.sql.SimpleCount;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableLoadDataAction}.\n* It contains ten unit test cases for the {@link TableLoadDataAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass TableLoadDataActionTest {"
	},
	{
		"original_code": "// SwitchDBAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class SwitchDBAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        String newDB = request.getParameter(\"db\");\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        dataBean.setDbName(newDB);\n        session.setAttribute(\"DBDataBean\", dataBean);\n        return mapping.findForward(\"start\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/SwitchDBAction.java",
		"test_prompt": "// SwitchDBActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SwitchDBAction}.\n* It contains ten unit test cases for the {@link SwitchDBAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass SwitchDBActionTest {"
	},
	{
		"original_code": "// InsertRowAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class InsertRowAction extends ForwardAction {\n\n    //private static Logger log = Logger.getLogger(InsertRowAction.class.getName());\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        //DBEUtils.dumpRequest(request);\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        request.setAttribute(\"table\", tableName);\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        request.setAttribute(\"tableStructureBean\", tableStructureBean);\n        StringBuffer query = DBEHelper.createInsertQuery(request, dataBean, tableName, tableStructureBean);\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        request.setAttribute(\"rowCount\", String.valueOf(nonSelectResultBean.getRowCount()));\n        return mapping.findForward(\"form\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/InsertRowAction.java",
		"test_prompt": "// InsertRowActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InsertRowAction}.\n* It contains ten unit test cases for the {@link InsertRowAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass InsertRowActionTest {"
	},
	{
		"original_code": "// ViewStructureAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\n\npublic class ViewStructureAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        ViewStructure viewStructure = ViewStructureFactory.getInstance(dataBean.getDbType());\n        ViewStructureBean viewStructureBean = viewStructure.getStructure(dataBean, tableName);\n        request.setAttribute(\"viewStructureBean\", viewStructureBean);\n        /*CreateTableXmlBean createTableXmlBean = new CreateTableXmlBean();\n        createTableXmlBean.setColumns(tableStructureBean.getColumns());\n        createTableXmlBean.setName(tableStructureBean.getTableName());\n        createTableXmlBean.setComment(tableStatusBean.getComment());\n        ArrayList querys = tableStructure.create(request, dataBean, createTableXmlBean);\n        request.setAttribute(\"querys\",querys);*/\n        String tm = request.getParameter(\"tm\");\n        request.setAttribute(\"tm\", tm);\n        //return mapping.findForward(\"show_\"+dataBean.getDbType());\n        return mapping.findForward(\"show_structure\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/ViewStructureAction.java",
		"test_prompt": "// ViewStructureActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ViewStructureAction}.\n* It contains ten unit test cases for the {@link ViewStructureAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass ViewStructureActionTest {"
	},
	{
		"original_code": "// DeleteAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.log4j.Logger;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DeleteAction extends ForwardAction {\n\n    private static Logger log = Logger.getLogger(UpdateDataAction.class.getName());\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String tableName = request.getParameter(\"table\");\n        String data = request.getParameter(\"data\");\n        if (log.isInfoEnabled()) {\n            log.info(\"tableName=\" + tableName);\n            log.info(\"data=\" + data);\n        }\n        // parse JSON data String\n        // {\"FOLLOW\":\"null\",\"URGENT\":\"N\",\"READ\":\"N\",\"MESSAGE\":\"Bonjour , voici la nouvelle version de l intranet avec une fonction POST-IT et une possiblite d envoyer des FAX, a bientot\",\"FROM\":\"GB\",\"TO\":\"JK\",\"TEMPS\":\"2005-08-28 16:35:20.000000\"}\n        data = data.substring((\"{\".length()));\n        data = data.substring(0, data.indexOf(\"}\"));\n        HashMap keyValueMap = DBEHelper.parseJSON(data);\n        StringBuffer query = new StringBuffer(\"DELETE FROM \" + tableName + \" WHERE \");\n        StringBuffer where = new StringBuffer(\"\");\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                String value = (String) keyValueMap.get(columnBean.getName());\n                if (!where.toString().equals(\"\")) {\n                    where.append(\" AND \");\n                }\n                where.append(columnBean.getName());\n                DBEHelper.appendValue(dataBean, where, columnBean, value);\n            }\n        }\n        query.append(where);\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return mapping.findForward(\"none\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/DeleteAction.java",
		"test_prompt": "// DeleteActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.log4j.Logger;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DeleteAction}.\n* It contains ten unit test cases for the {@link DeleteAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass DeleteActionTest {"
	},
	{
		"original_code": "// LoginAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.Locale;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.DataBaseFactory;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.form.DBDataForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class LoginAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataForm dataForm = (DBDataForm) form;\n        DBDataBean dataBean = new DBDataBean();\n        BeanUtils.copyProperties(dataBean, dataForm);\n        String jdbcDriver = DBEHelper.getJDBCDriver(dataBean);\n        dataBean.setDriver(jdbcDriver);\n        String connectionStartURL = DBEHelper.getConnectionStartURL(dataBean);\n        if (!dataBean.getUrl().startsWith(connectionStartURL)) {\n            dataBean.setUrl(connectionStartURL + dataBean.getUrl());\n        }\n        session.setAttribute(\"DBDataBean\", dataBean);\n        Locale locale = new Locale(dataBean.getLanguage().toLowerCase());\n        session.setAttribute(\"org.apache.struts.action.LOCALE\", locale);\n        session.setAttribute(\"language\", dataBean.getLanguage().toLowerCase());\n        DataBase dataBase = DataBaseFactory.getInstance(dataBean.getDbType());\n        String loginTest = dataBase.testLogin(dataBean);\n        if (StringUtils.isEmpty(loginTest)) {\n            DBEHelper.setLogs(request, new MessageBean(\"Login succesfull\"));\n            return mapping.findForward(\"start\");\n        } else {\n            request.setAttribute(\"error\", loginTest);\n            return mapping.findForward(\"back\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/LoginAction.java",
		"test_prompt": "// LoginActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.util.Locale;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.DataBaseFactory;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.form.DBDataForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LoginAction}.\n* It contains ten unit test cases for the {@link LoginAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass LoginActionTest {"
	},
	{
		"original_code": "// CreateViewAction.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\n\npublic class CreateViewAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        String viewName = request.getParameter(\"viewName\");\n        String tm = request.getParameter(\"tm\");\n        String query = (String) session.getAttribute(\"query_\" + tm);\n        query = StringUtils.replace(query, \"\\n\", \" \");\n        ViewStructure viewStructure = ViewStructureFactory.getInstance(dataBean.getDbType());\n        String errorMessage = viewStructure.create(request, dataBean, viewName, query);\n        if (StringUtils.isNotEmpty(errorMessage)) {\n            request.setAttribute(\"errorMessage\", errorMessage);\n            return mapping.findForward(\"error\");\n        } else {\n            return mapping.findForward(\"done\");\n        }\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/CreateViewAction.java",
		"test_prompt": "// CreateViewActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport com.gbshape.dbe.factory.ViewStructureFactory;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateViewAction}.\n* It contains ten unit test cases for the {@link CreateViewAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass CreateViewActionTest {"
	},
	{
		"original_code": "// UploadFileAction.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.struts.action;\n\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport org.apache.struts.upload.FormFile;\nimport au.com.bytecode.opencsv.CSVReader;\nimport com.gbshape.dbe.importdata.ImportTask;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.form.UploadFileForm;\n\npublic class UploadFileAction extends ForwardAction {\n\n    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        UploadFileForm myForm = (UploadFileForm) form;\n        // Process the FormFile\n        FormFile myFile = myForm.getFile();\n        /*String contentType = myFile.getContentType();\n\t\tString fileName = myFile.getFileName();\n\t\tint fileSize = myFile.getFileSize();\n\t\tbyte[] fileData = myFile.getFileData();*/\n        ArrayList datas = new ArrayList();\n        String separator = request.getParameter(\"separator\");\n        if (StringUtils.isEmpty(separator)) {\n            separator = \";\";\n        }\n        String quotechar = request.getParameter(\"quotechar\");\n        if (StringUtils.isEmpty(quotechar)) {\n            quotechar = \"\\\"\";\n        }\n        char sep = separator.charAt(0);\n        char quote = quotechar.charAt(0);\n        InputStream inputStream = myFile.getInputStream();\n        CSVReader reader = new CSVReader(new InputStreamReader(inputStream), sep, quote);\n        String[] nextLine;\n        while ((nextLine = reader.readNext()) != null) {\n            datas.add(nextLine);\n        }\n        String importSelect = request.getParameter(\"importSelect\");\n        try {\n            Class cl = Class.forName(importSelect);\n            ImportTask importTask = (ImportTask) cl.newInstance();\n            importTask.execute(request, dataBean, datas, request.getParameterMap());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return mapping.findForward(\"importDone\");\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/struts/action/UploadFileAction.java",
		"test_prompt": "// UploadFileActionTest.java\npackage com.gbshape.dbe.struts.action;\n\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.struts.action.ActionForm;\nimport org.apache.struts.action.ActionForward;\nimport org.apache.struts.action.ActionMapping;\nimport org.apache.struts.actions.ForwardAction;\nimport org.apache.struts.upload.FormFile;\nimport au.com.bytecode.opencsv.CSVReader;\nimport com.gbshape.dbe.importdata.ImportTask;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.form.UploadFileForm;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UploadFileAction}.\n* It contains ten unit test cases for the {@link UploadFileAction#execute(ActionMapping, ActionForm, HttpServletRequest, HttpServletResponse)} method.\n*/\nclass UploadFileActionTest {"
	},
	{
		"original_code": "// OracleViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class OracleViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(OracleViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select TEXT from all_views where view_name = '\" + viewName + \"' \";\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                String definition = rs.getString(\"TEXT\");\n                viewStructureBean.setDefinition(definition);\n            }\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from tab where TNAME NOT LIKE 'BIN$%'  and TABTYPE = 'VIEW' and TNAME = '\" + viewName + \"'  \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleViewStructure_0Test.java",
		"test_prompt": "// OracleViewStructure_0Test.java\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleViewStructure}.\n* It contains ten unit test cases for the {@link OracleViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass OracleViewStructure_0Test {"
	},
	{
		"original_code": "// OracleViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class OracleViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(OracleViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select TEXT from all_views where view_name = '\" + viewName + \"' \";\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                String definition = rs.getString(\"TEXT\");\n                viewStructureBean.setDefinition(definition);\n            }\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from tab where TNAME NOT LIKE 'BIN$%'  and TABTYPE = 'VIEW' and TNAME = '\" + viewName + \"'  \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleViewStructure_1Test.java",
		"test_prompt": "// OracleViewStructure_1Test.java\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleViewStructure}.\n* It contains ten unit test cases for the {@link OracleViewStructure#isView(DBDataBean, String)} method.\n*/\nclass OracleViewStructure_1Test {"
	},
	{
		"original_code": "// OracleSequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class OracleSequenceStructure implements SequenceStructure {\n\n    private static Logger log = Logger.getLogger(OracleSequenceStructure.class.getName());\n\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM ALL_SEQUENCES where SEQUENCE_NAME NOT LIKE '%$%' \");\n            while (rs.next()) {\n                SequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n                String name = rs.getString(\"SEQUENCE_NAME\");\n                sequenceStructureBean.setName(name);\n                sequenceStructureBean.setMinValue(rs.getInt(\"MIN_VALUE\"));\n                sequenceStructureBean.setMaxValue(rs.getString(\"MAX_VALUE\"));\n                sequenceStructureBean.setIncrementBy(rs.getInt(\"INCREMENT_BY\"));\n                sequenceStructureBean.setLastNumber(rs.getInt(\"LAST_NUMBER\"));\n                sequences.add(sequenceStructureBean);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        String query = new String(\"DROP SEQUENCE \" + sequence + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE SEQUENCE \\\"\");\n        String name = sequenceForm.getName();\n        if (StringUtils.isNotEmpty(name)) {\n            name = name.toUpperCase();\n        }\n        query.append(name);\n        query.append(\"\\\" \");\n        query.append(\" INCREMENT BY \");\n        query.append(sequenceForm.getIncrement());\n        if (StringUtils.isNotEmpty(sequenceForm.getStart())) {\n            query.append(\" START WITH \");\n            query.append(sequenceForm.getStart());\n        }\n        if (StringUtils.isEmpty(sequenceForm.getMin())) {\n            query.append(\" NOMINVALUE \");\n        } else {\n            query.append(\" MINVALUE \");\n            query.append(sequenceForm.getMin());\n        }\n        if (StringUtils.isEmpty(sequenceForm.getMax())) {\n            query.append(\" NOMAXVALUE \");\n        } else {\n            query.append(\" MAXVALUE \");\n            query.append(sequenceForm.getMax());\n        }\n        if (sequenceForm.getCycle().equalsIgnoreCase(\"no\")) {\n            query.append(\" NOCYCLE \");\n        } else {\n            query.append(\" CYCLE \");\n        }\n        if (StringUtils.isNotEmpty(sequenceForm.getCache())) {\n            query.append(\" CACHE \");\n            query.append(sequenceForm.getCache());\n        }\n        querys.add(query.toString());\n        /*if(StringUtils.isNotEmpty(sequenceForm.getComment())) {\n\t\t\tString queryComment = \"COMMENT ON SEQUENCE \\\"\"+name+\"\\\" IS '\"+sequenceForm.getComment()+\"' \";\n\t\t\tquerys.add(queryComment);\n\t\t}*/\n        return querys;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleSequenceStructure.java",
		"test_prompt": "// OracleSequenceStructureTest.java\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleSequenceStructure}.\n* It contains ten unit test cases for the {@link OracleSequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass OracleSequenceStructureTest {"
	},
	{
		"original_code": "// OracleDataBase.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class OracleDataBase implements DataBase {\n\n    private final static String LOGIN_QUERY = \"select 'toto' from dual\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n                if (!res.equals(\"toto\")) {\n                    test = \"error\";\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleDataBase.java",
		"test_prompt": "// OracleDataBaseTest.java\npackage com.gbshape.dbe.oracle;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleDataBase}.\n* It contains ten unit test cases for the {@link OracleDataBase#testLogin(DBDataBean)} method.\n*/\nclass OracleDataBaseTest {"
	},
	{
		"original_code": "// OracleTableStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class OracleTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(OracleTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' \";\n            //System.out.println(query);\n            ResultSet rs = stmt.executeQuery(query);\n            HashMap indexMap = new HashMap();\n            while (rs.next()) {\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                String type = rs.getString(\"constraint_type\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setConstraintType(type);\n                if (type.equals(\"PRIMARY KEY\")) {\n                    constraintBean.setKey(true);\n                } else if (type.equals(\"UNIQUE\")) {\n                    constraintBean.setUnique(true);\n                }\n                constraintBean.setConstraintName(rs.getString(\"CONSTRAINT_NAME\"));\n                constraintBean.setColumnName(columnName);\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            rs = stmt.executeQuery(\"Select * from USER_TAB_COLUMNS where TABLE_NAME = '\" + tableName + \"' order by COLUMN_ID \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATA_TYPE\"));\n                columnBean.setLen(rs.getInt(\"DATA_PRECISION\"));\n                columnBean.setDec(rs.getInt(\"DATA_SCALE\"));\n                if (!rs.getString(\"DATA_TYPE\").equalsIgnoreCase(\"NUMBER\")) {\n                    columnBean.setLen(rs.getInt(\"DATA_LENGTH\"));\n                }\n                columnBean.setMode(rs.getString(\"DATA_TYPE_MOD\"));\n                columnBean.setDefaultValue(rs.getString(\"DATA_DEFAULT\"));\n                //columnBean.setKey(rs.getString(\"DATA_TYPE_MOD\").equalsIgnoreCase(\"KEY\"));\n                //columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                //columnBean.setComment(rs.getString(\"COMMENT\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                        if (constraintBean.isKey()) {\n                            columnBean.setKey(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStructureBean;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        //select BYTES from user_segments where segment_name = 'PLAN_TABLE'\n        //select  object_name, created, TIMESTAMP  from user_objects where object_type='TABLE'\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                String query = \"select BYTES, CREATED, LAST_DDL_TIME, c.NUM_ROWS from user_segments,user_objects,all_all_tables c where c.table_name = '\" + tableName + \"' and object_name = '\" + tableName + \"' and segment_name(+) = object_name and object_type='TABLE' \";\n                //System.out.println(query);\n                ResultSet rs = stmt.executeQuery(query);\n                while (rs.next()) {\n                    //\t\t    \ttableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    //\t\t    \ttableStatusBean.setVersion(rs.getString(\"version\"));\n                    //\t\t    \ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    //\t\t    \ttableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    //\t\t    \ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    double usedSize = rs.getDouble(\"BYTES\") / 1024;\n                    tableStatusBean.setDataLength(new BigDecimal(usedSize));\n                    tableStatusBean.setTotalLength(new BigDecimal(usedSize));\n                    //\t\t    \ttableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    //\t\t    \ttableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    //\t\t    \ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    //\t\t    \ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"CREATED\"));\n                    tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"LAST_DDL_TIME\"));\n                    //\t\t    \ttableStatusBean.setCollation(rs.getString(\"collation\"));\n                    tableStatusBean.setRows(rs.getString(\"NUM_ROWS\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStatusBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"\" + columnForm.getDefaultValue().trim() + \"\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP COLUMN \\\"\" + field + \"\\\" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        //put all in uppercase\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \\\"\" + tableName + \"\\\" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        //StringBuffer index = new StringBuffer(\"\");\n        ArrayList unique = new ArrayList();\n        int uniqueNb = 1;\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (columnBean.isNullable()) {\n                        //query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        //comments.add(\"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS '\"+columnBean.getComment()+\"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        String cn = getConstraintName(dataBean, tableName, name, \"U\");\n                        if (StringUtils.isEmpty(cn)) {\n                            cn = tableName + \"_UK\" + uniqueNb;\n                        }\n                        String uniqueQuery = \"alter table \\\"\" + tableName + \"\\\" add constraint \" + cn + \" unique (\\\"\" + columnBean.getName() + \"\\\") \";\n                        unique.add(uniqueQuery.toUpperCase());\n                        uniqueNb++;\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        query.append(\")\");\n        querys.add(query.toString().toUpperCase());\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            StringBuffer primaryQuery = new StringBuffer(\"ALTER TABLE \\\"\");\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"\\\" ADD CONSTRAINT \\\"\");\n            //TODO find the constraint name !!!!!!!!!!!\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"_PK\\\" PRIMARY KEY (\");\n            primaryQuery.append(primary);\n            primaryQuery.append(\" )\");\n            querys.add(primaryQuery.toString().toUpperCase());\n        }\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        querys.addAll(comments);\n        querys.addAll(unique);\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP CONSTRAINT \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_\" + field + \"_UK UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        dropPrimary(request, dataBean, tableName, \"\", \"\");\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n            }\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_PK PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    private String getConstraintName(DBDataBean dataBean, String tableName, String columnName, String type) {\n        String cn = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' and cols.column_name = '\" + columnName + \"' and alc.constraint_type =  '\" + type + \"' \";\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                cn = rs.getString(\"CONSTRAINT_NAME\");\n            }\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return cn;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleTableStructure_0Test.java",
		"test_prompt": "// OracleTableStructure_0Test.java\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleTableStructure}.\n* It contains ten unit test cases for the {@link OracleTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass OracleTableStructure_0Test {"
	},
	{
		"original_code": "// OracleTableStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class OracleTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(OracleTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' \";\n            //System.out.println(query);\n            ResultSet rs = stmt.executeQuery(query);\n            HashMap indexMap = new HashMap();\n            while (rs.next()) {\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                String type = rs.getString(\"constraint_type\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setConstraintType(type);\n                if (type.equals(\"PRIMARY KEY\")) {\n                    constraintBean.setKey(true);\n                } else if (type.equals(\"UNIQUE\")) {\n                    constraintBean.setUnique(true);\n                }\n                constraintBean.setConstraintName(rs.getString(\"CONSTRAINT_NAME\"));\n                constraintBean.setColumnName(columnName);\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            rs = stmt.executeQuery(\"Select * from USER_TAB_COLUMNS where TABLE_NAME = '\" + tableName + \"' order by COLUMN_ID \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATA_TYPE\"));\n                columnBean.setLen(rs.getInt(\"DATA_PRECISION\"));\n                columnBean.setDec(rs.getInt(\"DATA_SCALE\"));\n                if (!rs.getString(\"DATA_TYPE\").equalsIgnoreCase(\"NUMBER\")) {\n                    columnBean.setLen(rs.getInt(\"DATA_LENGTH\"));\n                }\n                columnBean.setMode(rs.getString(\"DATA_TYPE_MOD\"));\n                columnBean.setDefaultValue(rs.getString(\"DATA_DEFAULT\"));\n                //columnBean.setKey(rs.getString(\"DATA_TYPE_MOD\").equalsIgnoreCase(\"KEY\"));\n                //columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                //columnBean.setComment(rs.getString(\"COMMENT\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                        if (constraintBean.isKey()) {\n                            columnBean.setKey(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStructureBean;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        //select BYTES from user_segments where segment_name = 'PLAN_TABLE'\n        //select  object_name, created, TIMESTAMP  from user_objects where object_type='TABLE'\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                String query = \"select BYTES, CREATED, LAST_DDL_TIME, c.NUM_ROWS from user_segments,user_objects,all_all_tables c where c.table_name = '\" + tableName + \"' and object_name = '\" + tableName + \"' and segment_name(+) = object_name and object_type='TABLE' \";\n                //System.out.println(query);\n                ResultSet rs = stmt.executeQuery(query);\n                while (rs.next()) {\n                    //\t\t    \ttableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    //\t\t    \ttableStatusBean.setVersion(rs.getString(\"version\"));\n                    //\t\t    \ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    //\t\t    \ttableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    //\t\t    \ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    double usedSize = rs.getDouble(\"BYTES\") / 1024;\n                    tableStatusBean.setDataLength(new BigDecimal(usedSize));\n                    tableStatusBean.setTotalLength(new BigDecimal(usedSize));\n                    //\t\t    \ttableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    //\t\t    \ttableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    //\t\t    \ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    //\t\t    \ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"CREATED\"));\n                    tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"LAST_DDL_TIME\"));\n                    //\t\t    \ttableStatusBean.setCollation(rs.getString(\"collation\"));\n                    tableStatusBean.setRows(rs.getString(\"NUM_ROWS\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStatusBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"\" + columnForm.getDefaultValue().trim() + \"\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP COLUMN \\\"\" + field + \"\\\" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        //put all in uppercase\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \\\"\" + tableName + \"\\\" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        //StringBuffer index = new StringBuffer(\"\");\n        ArrayList unique = new ArrayList();\n        int uniqueNb = 1;\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (columnBean.isNullable()) {\n                        //query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        //comments.add(\"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS '\"+columnBean.getComment()+\"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        String cn = getConstraintName(dataBean, tableName, name, \"U\");\n                        if (StringUtils.isEmpty(cn)) {\n                            cn = tableName + \"_UK\" + uniqueNb;\n                        }\n                        String uniqueQuery = \"alter table \\\"\" + tableName + \"\\\" add constraint \" + cn + \" unique (\\\"\" + columnBean.getName() + \"\\\") \";\n                        unique.add(uniqueQuery.toUpperCase());\n                        uniqueNb++;\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        query.append(\")\");\n        querys.add(query.toString().toUpperCase());\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            StringBuffer primaryQuery = new StringBuffer(\"ALTER TABLE \\\"\");\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"\\\" ADD CONSTRAINT \\\"\");\n            //TODO find the constraint name !!!!!!!!!!!\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"_PK\\\" PRIMARY KEY (\");\n            primaryQuery.append(primary);\n            primaryQuery.append(\" )\");\n            querys.add(primaryQuery.toString().toUpperCase());\n        }\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        querys.addAll(comments);\n        querys.addAll(unique);\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP CONSTRAINT \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_\" + field + \"_UK UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        dropPrimary(request, dataBean, tableName, \"\", \"\");\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n            }\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_PK PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    private String getConstraintName(DBDataBean dataBean, String tableName, String columnName, String type) {\n        String cn = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' and cols.column_name = '\" + columnName + \"' and alc.constraint_type =  '\" + type + \"' \";\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                cn = rs.getString(\"CONSTRAINT_NAME\");\n            }\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return cn;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleTableStructure_1Test.java",
		"test_prompt": "// OracleTableStructure_1Test.java\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleTableStructure}.\n* It contains ten unit test cases for the {@link OracleTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass OracleTableStructure_1Test {"
	},
	{
		"original_code": "// OracleTableStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class OracleTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(OracleTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' \";\n            //System.out.println(query);\n            ResultSet rs = stmt.executeQuery(query);\n            HashMap indexMap = new HashMap();\n            while (rs.next()) {\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                String type = rs.getString(\"constraint_type\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setConstraintType(type);\n                if (type.equals(\"PRIMARY KEY\")) {\n                    constraintBean.setKey(true);\n                } else if (type.equals(\"UNIQUE\")) {\n                    constraintBean.setUnique(true);\n                }\n                constraintBean.setConstraintName(rs.getString(\"CONSTRAINT_NAME\"));\n                constraintBean.setColumnName(columnName);\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            rs = stmt.executeQuery(\"Select * from USER_TAB_COLUMNS where TABLE_NAME = '\" + tableName + \"' order by COLUMN_ID \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATA_TYPE\"));\n                columnBean.setLen(rs.getInt(\"DATA_PRECISION\"));\n                columnBean.setDec(rs.getInt(\"DATA_SCALE\"));\n                if (!rs.getString(\"DATA_TYPE\").equalsIgnoreCase(\"NUMBER\")) {\n                    columnBean.setLen(rs.getInt(\"DATA_LENGTH\"));\n                }\n                columnBean.setMode(rs.getString(\"DATA_TYPE_MOD\"));\n                columnBean.setDefaultValue(rs.getString(\"DATA_DEFAULT\"));\n                //columnBean.setKey(rs.getString(\"DATA_TYPE_MOD\").equalsIgnoreCase(\"KEY\"));\n                //columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                //columnBean.setComment(rs.getString(\"COMMENT\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                        if (constraintBean.isKey()) {\n                            columnBean.setKey(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStructureBean;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        //select BYTES from user_segments where segment_name = 'PLAN_TABLE'\n        //select  object_name, created, TIMESTAMP  from user_objects where object_type='TABLE'\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                String query = \"select BYTES, CREATED, LAST_DDL_TIME, c.NUM_ROWS from user_segments,user_objects,all_all_tables c where c.table_name = '\" + tableName + \"' and object_name = '\" + tableName + \"' and segment_name(+) = object_name and object_type='TABLE' \";\n                //System.out.println(query);\n                ResultSet rs = stmt.executeQuery(query);\n                while (rs.next()) {\n                    //\t\t    \ttableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    //\t\t    \ttableStatusBean.setVersion(rs.getString(\"version\"));\n                    //\t\t    \ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    //\t\t    \ttableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    //\t\t    \ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    double usedSize = rs.getDouble(\"BYTES\") / 1024;\n                    tableStatusBean.setDataLength(new BigDecimal(usedSize));\n                    tableStatusBean.setTotalLength(new BigDecimal(usedSize));\n                    //\t\t    \ttableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    //\t\t    \ttableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    //\t\t    \ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    //\t\t    \ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"CREATED\"));\n                    tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"LAST_DDL_TIME\"));\n                    //\t\t    \ttableStatusBean.setCollation(rs.getString(\"collation\"));\n                    tableStatusBean.setRows(rs.getString(\"NUM_ROWS\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        stopWatch.stop();\n        return tableStatusBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY  (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"\" + columnForm.getDefaultValue().trim() + \"\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        //\t\t DATATYPE\n        String dataType = columnForm.getDataType();\n        StringBuffer alterQuery = new StringBuffer(\"\");\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\") || dataType.equals(\"VARCHAR2\") || dataType.equals(\"CHAR2\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"NUMBER\")) {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" \");\n        }\n        //    \t DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                alterQuery.append(\" DEFAULT \" + value + \" \");\n            }\n        }\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        alterQuery.append(\" ) \");\n        querys.add(alterQuery.toString().toUpperCase());\n        //COMMENT\n        /*if(columnForm.getComment() == null) { columnForm.setComment(\"\"); }\n        if(StringUtils.isNotEmpty(columnForm.getComment())) {\n        \tString value = \"'\"+columnForm.getComment()+\"'\";\n        \tif(columnForm.getComment().equals(\"null\")) {\n        \t\tvalue = \"null\";\n        \t}\n        \tString alterQueryComment = \"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS \"+value+\" \";\n        \t//NonSelectResultBean nonSelectResultBean2 = NonSelect.executeQuery(dataBean, alterQueryComment);\n        \t//DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n        \tquerys.add(alterQueryComment);\n        }*/\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP COLUMN \\\"\" + field + \"\\\" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        //put all in uppercase\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \\\"\" + tableName + \"\\\" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        //StringBuffer index = new StringBuffer(\"\");\n        ArrayList unique = new ArrayList();\n        int uniqueNb = 1;\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (columnBean.isNullable()) {\n                        //query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        //comments.add(\"COMMENT ON COLUMN \\\"\"+tableName+\"\\\".\\\"\"+name+\"\\\" IS '\"+columnBean.getComment()+\"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        String cn = getConstraintName(dataBean, tableName, name, \"U\");\n                        if (StringUtils.isEmpty(cn)) {\n                            cn = tableName + \"_UK\" + uniqueNb;\n                        }\n                        String uniqueQuery = \"alter table \\\"\" + tableName + \"\\\" add constraint \" + cn + \" unique (\\\"\" + columnBean.getName() + \"\\\") \";\n                        unique.add(uniqueQuery.toUpperCase());\n                        uniqueNb++;\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        query.append(\")\");\n        querys.add(query.toString().toUpperCase());\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            StringBuffer primaryQuery = new StringBuffer(\"ALTER TABLE \\\"\");\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"\\\" ADD CONSTRAINT \\\"\");\n            //TODO find the constraint name !!!!!!!!!!!\n            primaryQuery.append(tableName);\n            primaryQuery.append(\"_PK\\\" PRIMARY KEY (\");\n            primaryQuery.append(primary);\n            primaryQuery.append(\" )\");\n            querys.add(primaryQuery.toString().toUpperCase());\n        }\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        querys.addAll(comments);\n        querys.addAll(unique);\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP CONSTRAINT \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_\" + field + \"_UK UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        dropPrimary(request, dataBean, tableName, \"\", \"\");\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n            }\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD CONSTRAINT \" + tableName + \"_PK PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    private String getConstraintName(DBDataBean dataBean, String tableName, String columnName, String type) {\n        String cn = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            //get PrimaryKeys\n            Statement stmt = connection.createStatement();\n            String query = \"SELECT alc.constraint_name, CASE alc.constraint_type \" + \" WHEN 'P' THEN 'PRIMARY KEY' \" + \" WHEN 'R' THEN 'FOREIGN KEY' \" + \" WHEN 'U' THEN 'UNIQUE' \" + \" WHEN 'C' THEN 'CHECK' \" + \" END \\\"constraint_type\\\", \" + \" alc.DELETE_RULE \\\"on_delete\\\", \" + \" CASE alc.deferrable WHEN 'NOT DEFERRABLE' THEN 0 ELSE 1 END \\\"deferrable\\\", \" + \" CASE alc.deferred WHEN 'IMMEDIATE' THEN 1 ELSE 0 END \\\"initially_deferred\\\", \" + \" alc.search_condition, \" + \" alc.table_name, \" + \" cols.column_name, \" + \" cols.position, \" + \" r_alc.table_name \\\"references_table\\\", \" + \" r_cols.column_name \\\"references_field\\\", \" + \" r_cols.position \\\"references_field_position\\\" \" + \" FROM all_cons_columns cols \" + \" LEFT JOIN all_constraints alc \" + \" ON alc.constraint_name = cols.constraint_name \" + \" AND alc.owner = cols.owner \" + \" LEFT JOIN all_constraints r_alc \" + \" ON alc.r_constraint_name = r_alc.constraint_name \" + \" AND alc.r_owner = r_alc.owner \" + \" LEFT JOIN all_cons_columns r_cols \" + \" ON r_alc.constraint_name = r_cols.constraint_name \" + \" AND r_alc.owner = r_cols.owner \" + \" AND cols.position = r_cols.position \" + \" WHERE alc.constraint_name = cols.constraint_name and alc.TABLE_NAME = '\" + tableName + \"' and cols.column_name = '\" + columnName + \"' and alc.constraint_type =  '\" + type + \"' \";\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                cn = rs.getString(\"CONSTRAINT_NAME\");\n            }\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return cn;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/oracle/OracleTableStructure_2Test.java",
		"test_prompt": "// OracleTableStructure_2Test.java\npackage com.gbshape.dbe.oracle;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.lang.time.StopWatch;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OracleTableStructure}.\n* It contains ten unit test cases for the {@link OracleTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass OracleTableStructure_2Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_0Test.java",
		"test_prompt": "// DBEHelper_0Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getConnection(DBDataBean)} method.\n*/\nclass DBEHelper_0Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_1Test.java",
		"test_prompt": "// DBEHelper_1Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#decodeISO(DBDataBean, String)} method.\n*/\nclass DBEHelper_1Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_2Test.java",
		"test_prompt": "// DBEHelper_2Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#decodeAjax(DBDataBean, String)} method.\n*/\nclass DBEHelper_2Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_3Test.java",
		"test_prompt": "// DBEHelper_3Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#parseJSON(String)} method.\n*/\nclass DBEHelper_3Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_4Test.java",
		"test_prompt": "// DBEHelper_4Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#isDBAvailable(String)} method.\n*/\nclass DBEHelper_4Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_5Test.java",
		"test_prompt": "// DBEHelper_5Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getDataTypes(DBDataBean)} method.\n*/\nclass DBEHelper_5Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_6Test.java",
		"test_prompt": "// DBEHelper_6Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getDimDataTypes(DBDataBean)} method.\n*/\nclass DBEHelper_6Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_7Test.java",
		"test_prompt": "// DBEHelper_7Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getConnectionStartURL(DBDataBean)} method.\n*/\nclass DBEHelper_7Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_8Test.java",
		"test_prompt": "// DBEHelper_8Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getRemarks(DBDataBean)} method.\n*/\nclass DBEHelper_8Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_9Test.java",
		"test_prompt": "// DBEHelper_9Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getJDBCDriver(DBDataBean)} method.\n*/\nclass DBEHelper_9Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_10Test.java",
		"test_prompt": "// DBEHelper_10Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#isColumnExtra(DBDataBean)} method.\n*/\nclass DBEHelper_10Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_11Test.java",
		"test_prompt": "// DBEHelper_11Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#showDataBases(DBDataBean)} method.\n*/\nclass DBEHelper_11Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_12Test.java",
		"test_prompt": "// DBEHelper_12Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#canCreateSequence(DBDataBean)} method.\n*/\nclass DBEHelper_12Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_13Test.java",
		"test_prompt": "// DBEHelper_13Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#showTableStatus(DBDataBean)} method.\n*/\nclass DBEHelper_13Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_14Test.java",
		"test_prompt": "// DBEHelper_14Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getApostropheWrapper(DBDataBean)} method.\n*/\nclass DBEHelper_14Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_15Test.java",
		"test_prompt": "// DBEHelper_15Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getCalendar(ResultSet, String)} method.\n*/\nclass DBEHelper_15Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_16Test.java",
		"test_prompt": "// DBEHelper_16Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getDataTypeBean(DBDataBean, String)} method.\n*/\nclass DBEHelper_16Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_17Test.java",
		"test_prompt": "// DBEHelper_17Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getDBEConfig()} method.\n*/\nclass DBEHelper_17Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_18Test.java",
		"test_prompt": "// DBEHelper_18Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getImportTasks()} method.\n*/\nclass DBEHelper_18Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_19Test.java",
		"test_prompt": "// DBEHelper_19Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#getImplementationVersion(ServletContext)} method.\n*/\nclass DBEHelper_19Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_20Test.java",
		"test_prompt": "// DBEHelper_20Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#createInsertQuery(HttpServletRequest, DBDataBean, String, TableStructureBean)} method.\n*/\nclass DBEHelper_20Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_21Test.java",
		"test_prompt": "// DBEHelper_21Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#createInsertQuery(String[], DBDataBean, String, TableStructureBean, String)} method.\n*/\nclass DBEHelper_21Test {"
	},
	{
		"original_code": "// DBEHelper.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\n\npublic final class DBEHelper {\n\n    //private static Logger log = Logger.getLogger(DBEHelper.class.getName());\n    private final static String MANIFEST = \"META-INF/MANIFEST.MF\";\n\n    private final static String BUILD_REFERENCE = \"Implementation-Version\";\n\n    public static Connection getConnection(DBDataBean dataBean) throws ClassNotFoundException, SQLException {\n        Class.forName(dataBean.getDriver());\n        String connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \"/\" + dataBean.getDbName();\n        if (dataBean.getDbType().equals(\"oracle\")) {\n            connectionURL = \"jdbc:\" + dataBean.getDbType() + \":\" + dataBean.getUrl() + \":\" + dataBean.getDbName();\n        }\n        Connection connection = null;\n        if (StringUtils.isEmpty(dataBean.getUser())) {\n            connection = DriverManager.getConnection(connectionURL);\n        } else {\n            connection = DriverManager.getConnection(connectionURL, dataBean.getUser(), dataBean.getPasswd());\n        }\n        return connection;\n    }\n\n    public static void setLogs(HttpServletRequest request, MessageBean message) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        logList.addLast(message);\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static void setLogs(HttpServletRequest request, ArrayList messages) {\n        //System.out.println(\"setlogs \"+message);\n        HttpSession session = request.getSession();\n        LinkedList logList = (LinkedList) session.getAttribute(\"logList\");\n        if (logList == null) {\n            logList = new LinkedList();\n        }\n        for (int i = 0; i < messages.size(); i++) {\n            logList.addLast(messages.get(i));\n        }\n        session.setAttribute(\"logList\", logList);\n    }\n\n    public static String decodeISO(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"ISO-8859-1\");\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    public static String decodeAjax(DBDataBean dataBean, String property) {\n        String encodeType = dataBean.getEncoding();\n        try {\n            String value = URLDecoder.decode(URLEncoder.encode(property, encodeType), \"UTF-8\");\n            //System.out.println(\"--------------------\"+property+\" \"+value);\n            return value;\n        } catch (Exception e) {\n            return property;\n        }\n    }\n\n    /**\n     * Create an KeyValue HasMap form a JSON string\n     * @param data\n     * @return\n     */\n    public static HashMap parseJSON(String data) {\n        if (data.startsWith(\"{\")) {\n            data = data.substring(1);\n            data = data.substring(0, data.length() - 1);\n        }\n        System.out.println(data);\n        HashMap keyValueMap = new HashMap();\n        ArrayList keyVals = new ArrayList();\n        String[] keyValues = StringUtils.split(data, \",\");\n        String previousKV = \"\";\n        for (int i = 0; i < keyValues.length; i++) {\n            String keyValue = keyValues[i];\n            if (keyValue.startsWith(\"\\\"\")) {\n                if (!previousKV.equals(\"\")) {\n                    keyVals.add(previousKV);\n                }\n                previousKV = keyValue;\n            } else {\n                previousKV = previousKV + \",\" + keyValue;\n            }\n        }\n        keyVals.add(previousKV);\n        for (int i = 0; i < keyVals.size(); i++) {\n            String keyVal = (String) keyVals.get(i);\n            String key = keyVal.substring(0, keyVal.indexOf(\":\"));\n            key = StringUtils.replace(key, \"\\\"\", \"\");\n            String value = keyVal.substring((keyVal.indexOf(\":\") + 1));\n            value = StringUtils.replace(value, \"\\\"\", \"\");\n            keyValueMap.put(key, value);\n        }\n        return keyValueMap;\n    }\n\n    public static void appendValue(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeAjax(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValueNoDecodeAjax(DBDataBean dataBean, StringBuffer where, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            where.append(\"= NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            where.append(\"= \");\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(decodeISO(dataBean, value));\n            where.append(dataTypeBean.getValueWrapper());\n            where.append(\" \");\n        }\n    }\n\n    public static void appendValues(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeAjax(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static void appendValuesNoDecodeAjax(DBDataBean dataBean, StringBuffer query, ColumnBean columnBean, String value) {\n        if (StringUtils.isEmpty(value)) {\n            value = \"null\";\n        }\n        value = StringUtils.replace(value, \"'\", getApostropheWrapper(dataBean));\n        if (value.equalsIgnoreCase(\"null\")) {\n            query.append(\" NULL \");\n        } else {\n            DataTypeBean dataTypeBean = getDataTypeBean(dataBean, columnBean.getDataType());\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(decodeISO(dataBean, value));\n            query.append(dataTypeBean.getValueWrapper());\n            query.append(\" \");\n        }\n    }\n\n    public static boolean isDBAvailable(String dbType) {\n        try {\n            new XMLConfiguration(dbType + \".xml\");\n        } catch (ConfigurationException e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static String[] getDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            datatypes = new String[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                datatypes[i] = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                /*if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").dec\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").dec\"));\n                }\n                if(xmlConfiguration.containsKey(\"dataTypes.dataType(\"+i+\").len\")){\n                    System.out.println(xmlConfiguration.getBoolean(\"dataTypes.dataType(\"+i+\").len\"));\n                }\n                for (int j = 0; j <= xmlConfiguration.getMaxIndex(\"dataTypes.dataType(\"+i+\").codeTypes.codeType\") ; j++) {\n                    System.out.println(xmlConfiguration.getString(\"dataTypes.dataType(\"+i+\").codeTypes.codeType(\"+j+\")\"));\n                }*/\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String[] getDimDataTypes(DBDataBean dataBean) {\n        String[] datatypes = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            ArrayList dts = new ArrayList();\n            for (int i = 0; i < maxIndex; i++) {\n                if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\") && xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\")) {\n                    dts.add(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\"));\n                }\n            }\n            datatypes = (String[]) dts.toArray(new String[dts.size()]);\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return datatypes;\n    }\n\n    public static String getConnectionStartURL(DBDataBean dataBean) {\n        String connectionStartURL = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"connectionStartURL\")) {\n                connectionStartURL = xmlConfiguration.getString(\"connectionStartURL\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return connectionStartURL;\n    }\n\n    /**\n     * @param dataBean\n     * @return remarks from DB config file\n     */\n    public static String getRemarks(DBDataBean dataBean) {\n        String remarks = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"remarks\")) {\n                remarks = xmlConfiguration.getString(\"remarks\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return remarks;\n    }\n\n    public static String getJDBCDriver(DBDataBean dataBean) {\n        String jdbcDriver = \"\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"jdbcDriver\")) {\n                jdbcDriver = xmlConfiguration.getString(\"jdbcDriver\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return jdbcDriver;\n    }\n\n    public static boolean isColumnExtra(DBDataBean dataBean) {\n        boolean columnExtra = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"columnExtra\")) {\n                columnExtra = xmlConfiguration.getBoolean(\"columnExtra\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return columnExtra;\n    }\n\n    public static boolean showDataBases(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showDataBases\")) {\n                show = xmlConfiguration.getBoolean(\"showDataBases\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean canCreateSequence(DBDataBean dataBean) {\n        boolean show = false;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"createSequence\")) {\n                show = xmlConfiguration.getBoolean(\"createSequence\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static boolean showTableStatus(DBDataBean dataBean) {\n        boolean show = true;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"showTableStatus\")) {\n                show = xmlConfiguration.getBoolean(\"showTableStatus\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static String getApostropheWrapper(DBDataBean dataBean) {\n        String show = \"\\\\'\";\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            if (xmlConfiguration.containsKey(\"apostropheWrapper\")) {\n                show = xmlConfiguration.getString(\"apostropheWrapper\");\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return show;\n    }\n\n    public static GregorianCalendar getCalendar(ResultSet rs, String column) throws SQLException {\n        Timestamp createTime = rs.getTimestamp(column);\n        if (createTime == null) {\n            return null;\n        }\n        GregorianCalendar cal = new GregorianCalendar();\n        cal.setTimeInMillis(createTime.getTime());\n        return cal;\n    }\n\n    public static DataTypeBean getDataTypeBean(DBDataBean dataBean, String columnType) {\n        DataTypeBean dataTypeBean = null;\n        if (columnType.indexOf(\"(\") != -1) {\n            columnType = columnType.substring(0, columnType.indexOf(\"(\"));\n            System.out.println(columnType);\n        }\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(dataBean.getDbType() + \".xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dataTypes.dataType\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String name = xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").name\");\n                if (name.equalsIgnoreCase(columnType)) {\n                    dataTypeBean = new DataTypeBean();\n                    dataTypeBean.setName(name);\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").len\")) {\n                        dataTypeBean.setLen(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").len\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").dec\")) {\n                        dataTypeBean.setDec(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").dec\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").forceLength\")) {\n                        dataTypeBean.setForceLength(xmlConfiguration.getBoolean(\"dataTypes.dataType(\" + i + \").forceLength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").valueWrapper\")) {\n                        dataTypeBean.setValueWrapper(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").valueWrapper\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").maxlength\")) {\n                        dataTypeBean.setMaxlength(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").maxlength\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formSize\")) {\n                        dataTypeBean.setFormSize(xmlConfiguration.getInt(\"dataTypes.dataType(\" + i + \").formSize\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").formInput\")) {\n                        dataTypeBean.setFormInput(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").formInput\"));\n                    }\n                    if (xmlConfiguration.containsKey(\"dataTypes.dataType(\" + i + \").format\")) {\n                        dataTypeBean.setFormat(xmlConfiguration.getString(\"dataTypes.dataType(\" + i + \").format\"));\n                    }\n                    break;\n                }\n            }\n        } catch (ConfigurationException e) {\n            e.printStackTrace();\n        }\n        return dataTypeBean;\n    }\n\n    public static DBDataBean[] getDBEConfig() {\n        DBDataBean[] dbDataBeans = null;\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"dbs.db\") + 1;\n            dbDataBeans = new DBDataBean[maxIndex];\n            for (int i = 0; i < maxIndex; i++) {\n                DBDataBean dbDataBean = new DBDataBean();\n                dbDataBean.setNickName(getConfig(xmlConfiguration, \"nickName\", i));\n                dbDataBean.setUrl(getConfig(xmlConfiguration, \"url\", i));\n                dbDataBean.setDbType(getConfig(xmlConfiguration, \"dbType\", i));\n                dbDataBean.setDbName(getConfig(xmlConfiguration, \"dbName\", i));\n                dbDataBean.setUser(getConfig(xmlConfiguration, \"user\", i));\n                dbDataBean.setPasswd(getConfig(xmlConfiguration, \"password\", i));\n                dbDataBean.setEncoding(getConfig(xmlConfiguration, \"encoding\", i));\n                dbDataBeans[i] = dbDataBean;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dbDataBeans;\n    }\n\n    public static HashMap getImportTasks() {\n        HashMap imports = new HashMap();\n        try {\n            XMLConfiguration xmlConfiguration = new XMLConfiguration(\"dbe-config.xml\");\n            int maxIndex = xmlConfiguration.getMaxIndex(\"imports.import\") + 1;\n            for (int i = 0; i < maxIndex; i++) {\n                String className = getConfig(xmlConfiguration, \"className\", i, \"imports.import\");\n                String name = getConfig(xmlConfiguration, \"name\", i, \"imports.import\");\n                imports.put(name, className);\n            }\n        } catch (ConfigurationException e) {\n            //e.printStackTrace();\n        }\n        return imports;\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i) {\n        return getConfig(xmlConfiguration, configNode, i, \"dbs.db\");\n    }\n\n    private static String getConfig(XMLConfiguration xmlConfiguration, String configNode, int i, String startNode) {\n        String value = \"\";\n        if (xmlConfiguration.containsKey(startNode + \"(\" + i + \").\" + configNode)) {\n            return xmlConfiguration.getString(startNode + \"(\" + i + \").\" + configNode);\n        }\n        return value;\n    }\n\n    /**\n     * get Implemetation version\n     * @param ctx\n     * @return\n     */\n    public static String getImplementationVersion(ServletContext ctx) {\n        String buildReference = \"?\";\n        try {\n            InputStream in = ctx.getResourceAsStream(MANIFEST);\n            if (in != null) {\n                Manifest mfst = new Manifest(in);\n                buildReference = mfst.getMainAttributes().getValue(BUILD_REFERENCE);\n                in.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return buildReference;\n    }\n\n    public static StringBuffer createInsertQuery(HttpServletRequest request, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = request.getParameter(columnBean.getName());\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] values = StringUtils.split(columnBean.getDim(), \",\");\n                for (int j = 0; j < values.length; j++) {\n                    value = request.getParameter(columnBean.getName() + \"[\" + j + \"]\");\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        return query;\n    }\n\n    public static String createInsertQuery(String[] values, DBDataBean dataBean, String tableName, TableStructureBean tableStructureBean, String delimiter) {\n        StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n        ArrayList columns = tableStructureBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            query.append(columnBean.getName());\n        }\n        query.append(\") VALUES (\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (i > 0) {\n                query.append(\",\");\n            }\n            String value = values[i];\n            if (columnBean.getDataType().toUpperCase().startsWith(\"SET\")) {\n                query.append(\" '\");\n                String[] vals = StringUtils.split(value, \",\");\n                for (int j = 0; j < vals.length; j++) {\n                    value = vals[j];\n                    if (value != null) {\n                        if (j > 0) {\n                            query.append(\",\");\n                        }\n                        query.append(value);\n                    }\n                }\n                query.append(\"' \");\n            } else {\n                appendValues(dataBean, query, columnBean, value);\n            }\n        }\n        query.append(\") \");\n        query.append(delimiter);\n        return query.toString();\n    }\n\n    public static boolean isNumeric(String dataType) {\n        if (dataType.equalsIgnoreCase(\"INT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"LONG\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FIXED\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"FLOAT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"INTEGER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"SMALLINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"NUMBER\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"TINYINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"MEDIUMINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"BIGINT\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DOUBLE\")) {\n            return true;\n        } else if (dataType.equalsIgnoreCase(\"DECIMAL\")) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/utils/DBEHelper_22Test.java",
		"test_prompt": "// DBEHelper_22Test.java\npackage com.gbshape.dbe.utils;\n\nimport java.io.InputStream;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.jar.Manifest;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.DataTypeBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEHelper}.\n* It contains ten unit test cases for the {@link DBEHelper#isNumeric(String)} method.\n*/\nclass DBEHelper_22Test {"
	},
	{
		"original_code": "// DerbyViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DerbyViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(DerbyViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyViewStructure_0Test.java",
		"test_prompt": "// DerbyViewStructure_0Test.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyViewStructure}.\n* It contains ten unit test cases for the {@link DerbyViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass DerbyViewStructure_0Test {"
	},
	{
		"original_code": "// DerbyViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DerbyViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(DerbyViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyViewStructure_1Test.java",
		"test_prompt": "// DerbyViewStructure_1Test.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyViewStructure}.\n* It contains ten unit test cases for the {@link DerbyViewStructure#isView(DBDataBean, String)} method.\n*/\nclass DerbyViewStructure_1Test {"
	},
	{
		"original_code": "// DerbyDataBase.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DerbyDataBase implements DataBase {\n\n    private final static String LOGIN_QUERY = \"VALUES CURRENT_TIMESTAMP\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyDataBase.java",
		"test_prompt": "// DerbyDataBaseTest.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyDataBase}.\n* It contains ten unit test cases for the {@link DerbyDataBase#testLogin(DBDataBean)} method.\n*/\nclass DerbyDataBaseTest {"
	},
	{
		"original_code": "// DerbyTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class DerbyTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLENAME = '\" + tableName + \"' \");\n            ArrayList columns = new ArrayList();\n            /*REFERENCEID\n\t\t\tCOLUMNNAME\n\t\t\tCOLUMNNUMBER\n\t\t\tCOLUMNDATATYPE\n\t\t\tCOLUMNDEFAULT\n\t\t\tCOLUMNDEFAULTID\n\t\t\tAUTOINCREMENTVALUE\n\t\t\tAUTOINCREMENTSTART\n\t\t\tAUTOINCREMENTINC*/\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"COLUMNDATATYPE\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    dataType = rs.getString(\"COLUMNDATATYPE\");\n                    String[] splitDataType = StringUtils.split(dataType, \"(\");\n                    String dim = splitDataType[1].replace(')', ' ').trim();\n                    columnBean.setDim(dim);\n                }\n                columnBean.setOriginalDT(rs.getString(\"COLUMNDATATYPE\"));\n                columnBean.setDataType(dataType);\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                //columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMNDEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyTableStructure_0Test.java",
		"test_prompt": "// DerbyTableStructure_0Test.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyTableStructure}.\n* It contains ten unit test cases for the {@link DerbyTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass DerbyTableStructure_0Test {"
	},
	{
		"original_code": "// DerbyTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class DerbyTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLENAME = '\" + tableName + \"' \");\n            ArrayList columns = new ArrayList();\n            /*REFERENCEID\n\t\t\tCOLUMNNAME\n\t\t\tCOLUMNNUMBER\n\t\t\tCOLUMNDATATYPE\n\t\t\tCOLUMNDEFAULT\n\t\t\tCOLUMNDEFAULTID\n\t\t\tAUTOINCREMENTVALUE\n\t\t\tAUTOINCREMENTSTART\n\t\t\tAUTOINCREMENTINC*/\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"COLUMNDATATYPE\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    dataType = rs.getString(\"COLUMNDATATYPE\");\n                    String[] splitDataType = StringUtils.split(dataType, \"(\");\n                    String dim = splitDataType[1].replace(')', ' ').trim();\n                    columnBean.setDim(dim);\n                }\n                columnBean.setOriginalDT(rs.getString(\"COLUMNDATATYPE\"));\n                columnBean.setDataType(dataType);\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                //columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMNDEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyTableStructure_1Test.java",
		"test_prompt": "// DerbyTableStructure_1Test.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyTableStructure}.\n* It contains ten unit test cases for the {@link DerbyTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass DerbyTableStructure_1Test {"
	},
	{
		"original_code": "// DerbyTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class DerbyTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLENAME = '\" + tableName + \"' \");\n            ArrayList columns = new ArrayList();\n            /*REFERENCEID\n\t\t\tCOLUMNNAME\n\t\t\tCOLUMNNUMBER\n\t\t\tCOLUMNDATATYPE\n\t\t\tCOLUMNDEFAULT\n\t\t\tCOLUMNDEFAULTID\n\t\t\tAUTOINCREMENTVALUE\n\t\t\tAUTOINCREMENTSTART\n\t\t\tAUTOINCREMENTINC*/\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"COLUMNDATATYPE\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    dataType = rs.getString(\"COLUMNDATATYPE\");\n                    String[] splitDataType = StringUtils.split(dataType, \"(\");\n                    String dim = splitDataType[1].replace(')', ' ').trim();\n                    columnBean.setDim(dim);\n                }\n                columnBean.setOriginalDT(rs.getString(\"COLUMNDATATYPE\"));\n                columnBean.setDataType(dataType);\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                //columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMNDEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbyTableStructure_2Test.java",
		"test_prompt": "// DerbyTableStructure_2Test.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbyTableStructure}.\n* It contains ten unit test cases for the {@link DerbyTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass DerbyTableStructure_2Test {"
	},
	{
		"original_code": "// DerbySequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class DerbySequenceStructure implements SequenceStructure {\n\n    private static Logger log = Logger.getLogger(DerbySequenceStructure.class.getName());\n\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        /*Connection connection = null;\n\t\ttry {\n\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\tStatement stmt= connection.createStatement();\n\n\t\t\tResultSet rs=stmt.executeQuery(\"SHOW TABLE STATUS \");\n\n\t\t    while(rs.next()){\n\t\t    \tString name = rs.getString(\"NAME\");\n\t\t        String auto = rs.getString(\"Auto_Increment\");\n\t\t        if(auto != null) {\n\t\t        \tSequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n\t\t\t        sequenceStructureBean.setName(name);\n\t\t\t        sequenceStructureBean.setMinValue(1);\n\t\t\t        sequenceStructureBean.setMaxValue(\"\");\n\t\t\t        sequenceStructureBean.setIncrementBy(1);\n\t\t\t        sequenceStructureBean.setLastNumber(rs.getInt(\"Auto_Increment\"));\n\n\t\t\t        sequences.add(sequenceStructureBean);\n\t\t        }\n\t\t    }\n\n\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        // TODO Auto-generated method stub\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/derby/DerbySequenceStructure.java",
		"test_prompt": "// DerbySequenceStructureTest.java\npackage com.gbshape.dbe.derby;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DerbySequenceStructure}.\n* It contains ten unit test cases for the {@link DerbySequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass DerbySequenceStructureTest {"
	},
	{
		"original_code": "// SapdbDataBase.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SapdbDataBase implements DataBase {\n\n    private static final String LOGIN_QUERY = \"select 'toto' from dual\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        Statement stmt = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n                if (!res.equals(\"toto\")) {\n                    test = \"error\";\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    stmt.close();\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbDataBase.java",
		"test_prompt": "// SapdbDataBaseTest.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbDataBase}.\n* It contains ten unit test cases for the {@link SapdbDataBase#testLogin(DBDataBean)} method.\n*/\nclass SapdbDataBaseTest {"
	},
	{
		"original_code": "// SapdbTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SapdbTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(SapdbTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            // ResultSet rs=stmt.executeQuery(\"select * from columns where\n            // tablename='\"+tableName+\"'\");\n            ResultSet rsIndex = stmt.executeQuery(\"select * from indexcolumns where tablename='\" + tableName + \"' \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"COLUMNNAME\");\n                boolean unique = rsIndex.getString(\"TYPE\").equals(\"UNIQUE\");\n                String keyName = rsIndex.getString(\"INDEXNAME\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            /*\n\t\t\t * select\n\t\t\t * distinct(c.columnname),c.datatype,c.len,c.dec,c.mode,c.codetype,c.nullable,c.comment,c.default,i.type\n\t\t\t * from columns c,indexcolumns i where c.tablename='TOTO' and\n\t\t\t * i.tablename(+) = c.tablename and c.columnname = i.columnname(+)\n\t\t\t */\n            ResultSet rs = stmt.executeQuery(\"select * from columns where tablename='\" + tableName + \"'\");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATATYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATATYPE\"));\n                columnBean.setLen(rs.getInt(\"LEN\"));\n                columnBean.setDec(rs.getInt(\"DEC\"));\n                columnBean.setMode(rs.getString(\"MODE\"));\n                boolean key = rs.getString(\"MODE\").equalsIgnoreCase(\"KEY\");\n                columnBean.setKey(key);\n                columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                columnBean.setComment(rs.getString(\"COMMENT\"));\n                columnBean.setDefaultValue(rs.getString(\"DEFAULT\"));\n                if (key) {\n                    ArrayList constraintList = new ArrayList();\n                    ConstraintBean constraintBean = new ConstraintBean();\n                    constraintBean.setColumnName(columnName);\n                    constraintBean.setConstraintName(\"PRIMARY\");\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                    constraintBean.setKey(true);\n                    constraintList.add(constraintBean);\n                    columnBean.setConstraintList(constraintList);\n                }\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        if (!columnBean.getDataType().equals(dataType)) {\n            String alterQuery = \"\";\n            String dim = columnForm.getDim();\n            if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n            } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n            } else {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n            }\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (!defaultValue.equals(columnForm.getDefaultValue())) {\n            String keyword = \"ALTER\";\n            if (columnBean.getDefaultValue() == null) {\n                keyword = \"ADD\";\n            }\n            String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" \" + keyword + \" DEFAULT \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // UNIQUE\n        // COMMENT\n        String comment = columnBean.getComment();\n        if (comment == null) {\n            comment = \"\";\n        }\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (!comment.equals(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        return querys;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"select * from tables,tablesize where type = 'TABLE' and tablesize.tablename = tables.tablename and tables.tablename = '\" + tableName + \"' \");\n                while (rs.next()) {\n                    // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    // tableStatusBean.setVersion(rs.getString(\"version\"));\n                    // tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    tableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    // tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    tableStatusBean.setDataLength(rs.getBigDecimal(\"usedsize\"));\n                    tableStatusBean.setTotalLength(rs.getBigDecimal(\"usedsize\"));\n                    // tableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    // tableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    // tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    // tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setComment(rs.getString(\"COMMENT\"));\n                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                    String createDate = rs.getString(\"createdate\");\n                    String createTime = rs.getString(\"createtime\");\n                    GregorianCalendar cal = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(createDate + ' ' + createTime);\n                        cal.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setCreateTime(cal);\n                    String updateDate = rs.getString(\"alterdate\");\n                    String updateTime = rs.getString(\"altertime\");\n                    GregorianCalendar cal2 = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(updateDate + ' ' + updateTime);\n                        cal2.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setUpdateTime(cal2);\n                    // tableStatusBean.setCollation(rs.getString(\"collation\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String alterQuery = \"\";\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n        } else {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery);\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery);\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                String alterQueryDefault = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" ADD DEFAULT \" + value + \" \";\n                // NonSelectResultBean nonSelectResultBean1 =\n                // NonSelect.executeQuery(dataBean, alterQueryDefault);\n                // DBEHelper.setLogs(request,\n                // nonSelectResultBean1.getMessages());\n                querys.add(alterQueryDefault);\n            }\n        }\n        // UNIQUE\n        // COMMENT\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQueryComment = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean2 =\n            // NonSelect.executeQuery(dataBean, alterQueryComment);\n            // DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n            querys.add(alterQueryComment);\n        }\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP (\\\"\" + field + \"\\\") CASCADE \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + tableName + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        // StringBuffer index = new StringBuffer(\"\");\n        // StringBuffer unique = new StringBuffer(\"\");\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        comments.add(\"COMMENT ON COLUMN \\\"\" + tableName.toUpperCase() + \"\\\".\\\"\" + name.toUpperCase() + \"\\\" IS '\" + columnBean.getComment().toUpperCase() + \"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        query.append(\", UNIQUE(\" + columnBean.getName() + \") \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString().toUpperCase());\n        /*\n\t\t * for(int i=0; i < comments.size(); i++) { String commentQuery =\n\t\t * (String) comments.get(i); NonSelectResultBean nonSelectResultBean2 =\n\t\t * NonSelect.executeQuery(dataBean, commentQuery.toString());\n\t\t * DBEHelper.setLogs(request, nonSelectResultBean2.getMessages()); }\n\t\t */\n        querys.addAll(comments);\n        // return nonSelectResultBean.getErrorMessage();\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        // CREATE UNIQUE INDEX \"INDEX001\" ON \"DBA\".\"TOTO\"(\"BB\" ASC)\n        String id = \"UNI_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE UNIQUE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String id = \"IDX_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        ArrayList notNulls = new ArrayList();\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n                if (columnBean.isNullable()) {\n                    notNulls.add(\"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + columnBean.getName() + \"\\\" NOT NULL\");\n                }\n            }\n        }\n        for (int i = 0; i < notNulls.size(); i++) {\n            String notNullQuery = (String) notNulls.get(i);\n            NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, notNullQuery);\n            DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ALTER PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbTableStructure_0Test.java",
		"test_prompt": "// SapdbTableStructure_0Test.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbTableStructure}.\n* It contains ten unit test cases for the {@link SapdbTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass SapdbTableStructure_0Test {"
	},
	{
		"original_code": "// SapdbTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SapdbTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(SapdbTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            // ResultSet rs=stmt.executeQuery(\"select * from columns where\n            // tablename='\"+tableName+\"'\");\n            ResultSet rsIndex = stmt.executeQuery(\"select * from indexcolumns where tablename='\" + tableName + \"' \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"COLUMNNAME\");\n                boolean unique = rsIndex.getString(\"TYPE\").equals(\"UNIQUE\");\n                String keyName = rsIndex.getString(\"INDEXNAME\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            /*\n\t\t\t * select\n\t\t\t * distinct(c.columnname),c.datatype,c.len,c.dec,c.mode,c.codetype,c.nullable,c.comment,c.default,i.type\n\t\t\t * from columns c,indexcolumns i where c.tablename='TOTO' and\n\t\t\t * i.tablename(+) = c.tablename and c.columnname = i.columnname(+)\n\t\t\t */\n            ResultSet rs = stmt.executeQuery(\"select * from columns where tablename='\" + tableName + \"'\");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATATYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATATYPE\"));\n                columnBean.setLen(rs.getInt(\"LEN\"));\n                columnBean.setDec(rs.getInt(\"DEC\"));\n                columnBean.setMode(rs.getString(\"MODE\"));\n                boolean key = rs.getString(\"MODE\").equalsIgnoreCase(\"KEY\");\n                columnBean.setKey(key);\n                columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                columnBean.setComment(rs.getString(\"COMMENT\"));\n                columnBean.setDefaultValue(rs.getString(\"DEFAULT\"));\n                if (key) {\n                    ArrayList constraintList = new ArrayList();\n                    ConstraintBean constraintBean = new ConstraintBean();\n                    constraintBean.setColumnName(columnName);\n                    constraintBean.setConstraintName(\"PRIMARY\");\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                    constraintBean.setKey(true);\n                    constraintList.add(constraintBean);\n                    columnBean.setConstraintList(constraintList);\n                }\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        if (!columnBean.getDataType().equals(dataType)) {\n            String alterQuery = \"\";\n            String dim = columnForm.getDim();\n            if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n            } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n            } else {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n            }\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (!defaultValue.equals(columnForm.getDefaultValue())) {\n            String keyword = \"ALTER\";\n            if (columnBean.getDefaultValue() == null) {\n                keyword = \"ADD\";\n            }\n            String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" \" + keyword + \" DEFAULT \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // UNIQUE\n        // COMMENT\n        String comment = columnBean.getComment();\n        if (comment == null) {\n            comment = \"\";\n        }\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (!comment.equals(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        return querys;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"select * from tables,tablesize where type = 'TABLE' and tablesize.tablename = tables.tablename and tables.tablename = '\" + tableName + \"' \");\n                while (rs.next()) {\n                    // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    // tableStatusBean.setVersion(rs.getString(\"version\"));\n                    // tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    tableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    // tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    tableStatusBean.setDataLength(rs.getBigDecimal(\"usedsize\"));\n                    tableStatusBean.setTotalLength(rs.getBigDecimal(\"usedsize\"));\n                    // tableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    // tableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    // tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    // tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setComment(rs.getString(\"COMMENT\"));\n                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                    String createDate = rs.getString(\"createdate\");\n                    String createTime = rs.getString(\"createtime\");\n                    GregorianCalendar cal = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(createDate + ' ' + createTime);\n                        cal.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setCreateTime(cal);\n                    String updateDate = rs.getString(\"alterdate\");\n                    String updateTime = rs.getString(\"altertime\");\n                    GregorianCalendar cal2 = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(updateDate + ' ' + updateTime);\n                        cal2.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setUpdateTime(cal2);\n                    // tableStatusBean.setCollation(rs.getString(\"collation\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String alterQuery = \"\";\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n        } else {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery);\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery);\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                String alterQueryDefault = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" ADD DEFAULT \" + value + \" \";\n                // NonSelectResultBean nonSelectResultBean1 =\n                // NonSelect.executeQuery(dataBean, alterQueryDefault);\n                // DBEHelper.setLogs(request,\n                // nonSelectResultBean1.getMessages());\n                querys.add(alterQueryDefault);\n            }\n        }\n        // UNIQUE\n        // COMMENT\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQueryComment = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean2 =\n            // NonSelect.executeQuery(dataBean, alterQueryComment);\n            // DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n            querys.add(alterQueryComment);\n        }\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP (\\\"\" + field + \"\\\") CASCADE \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + tableName + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        // StringBuffer index = new StringBuffer(\"\");\n        // StringBuffer unique = new StringBuffer(\"\");\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        comments.add(\"COMMENT ON COLUMN \\\"\" + tableName.toUpperCase() + \"\\\".\\\"\" + name.toUpperCase() + \"\\\" IS '\" + columnBean.getComment().toUpperCase() + \"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        query.append(\", UNIQUE(\" + columnBean.getName() + \") \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString().toUpperCase());\n        /*\n\t\t * for(int i=0; i < comments.size(); i++) { String commentQuery =\n\t\t * (String) comments.get(i); NonSelectResultBean nonSelectResultBean2 =\n\t\t * NonSelect.executeQuery(dataBean, commentQuery.toString());\n\t\t * DBEHelper.setLogs(request, nonSelectResultBean2.getMessages()); }\n\t\t */\n        querys.addAll(comments);\n        // return nonSelectResultBean.getErrorMessage();\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        // CREATE UNIQUE INDEX \"INDEX001\" ON \"DBA\".\"TOTO\"(\"BB\" ASC)\n        String id = \"UNI_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE UNIQUE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String id = \"IDX_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        ArrayList notNulls = new ArrayList();\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n                if (columnBean.isNullable()) {\n                    notNulls.add(\"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + columnBean.getName() + \"\\\" NOT NULL\");\n                }\n            }\n        }\n        for (int i = 0; i < notNulls.size(); i++) {\n            String notNullQuery = (String) notNulls.get(i);\n            NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, notNullQuery);\n            DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ALTER PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbTableStructure_1Test.java",
		"test_prompt": "// SapdbTableStructure_1Test.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbTableStructure}.\n* It contains ten unit test cases for the {@link SapdbTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass SapdbTableStructure_1Test {"
	},
	{
		"original_code": "// SapdbTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SapdbTableStructure implements TableStructure {\n\n    private static Logger log = Logger.getLogger(SapdbTableStructure.class.getName());\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            // ResultSet rs=stmt.executeQuery(\"select * from columns where\n            // tablename='\"+tableName+\"'\");\n            ResultSet rsIndex = stmt.executeQuery(\"select * from indexcolumns where tablename='\" + tableName + \"' \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"COLUMNNAME\");\n                boolean unique = rsIndex.getString(\"TYPE\").equals(\"UNIQUE\");\n                String keyName = rsIndex.getString(\"INDEXNAME\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            /*\n\t\t\t * select\n\t\t\t * distinct(c.columnname),c.datatype,c.len,c.dec,c.mode,c.codetype,c.nullable,c.comment,c.default,i.type\n\t\t\t * from columns c,indexcolumns i where c.tablename='TOTO' and\n\t\t\t * i.tablename(+) = c.tablename and c.columnname = i.columnname(+)\n\t\t\t */\n            ResultSet rs = stmt.executeQuery(\"select * from columns where tablename='\" + tableName + \"'\");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columnBean.setDataType(rs.getString(\"DATATYPE\"));\n                columnBean.setOriginalDT(rs.getString(\"DATATYPE\"));\n                columnBean.setLen(rs.getInt(\"LEN\"));\n                columnBean.setDec(rs.getInt(\"DEC\"));\n                columnBean.setMode(rs.getString(\"MODE\"));\n                boolean key = rs.getString(\"MODE\").equalsIgnoreCase(\"KEY\");\n                columnBean.setKey(key);\n                columnBean.setCodeType(rs.getString(\"CODETYPE\"));\n                boolean nullable = rs.getString(\"NULLABLE\").equalsIgnoreCase(\"YES\");\n                columnBean.setNullable(nullable);\n                columnBean.setComment(rs.getString(\"COMMENT\"));\n                columnBean.setDefaultValue(rs.getString(\"DEFAULT\"));\n                if (key) {\n                    ArrayList constraintList = new ArrayList();\n                    ConstraintBean constraintBean = new ConstraintBean();\n                    constraintBean.setColumnName(columnName);\n                    constraintBean.setConstraintName(\"PRIMARY\");\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                    constraintBean.setKey(true);\n                    constraintList.add(constraintBean);\n                    columnBean.setConstraintList(constraintList);\n                }\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    ArrayList cl = columnBean.getConstraintList();\n                    if (cl == null) {\n                        cl = new ArrayList();\n                    }\n                    cl.addAll(constraintList);\n                    columnBean.setConstraintList(cl);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        if (!columnBean.getDataType().equals(dataType)) {\n            String alterQuery = \"\";\n            String dim = columnForm.getDim();\n            if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n            } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n            } else {\n                alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" MODIFY (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n            }\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (!defaultValue.equals(columnForm.getDefaultValue())) {\n            String keyword = \"ALTER\";\n            if (columnBean.getDefaultValue() == null) {\n                keyword = \"ADD\";\n            }\n            String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" \" + keyword + \" DEFAULT \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        // UNIQUE\n        // COMMENT\n        String comment = columnBean.getComment();\n        if (comment == null) {\n            comment = \"\";\n        }\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (!comment.equals(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQuery = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean =\n            // NonSelect.executeQuery(dataBean, alterQuery);\n            // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            querys.add(alterQuery);\n        }\n        return querys;\n    }\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"select * from tables,tablesize where type = 'TABLE' and tablesize.tablename = tables.tablename and tables.tablename = '\" + tableName + \"' \");\n                while (rs.next()) {\n                    // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                    // tableStatusBean.setVersion(rs.getString(\"version\"));\n                    // tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                    tableStatusBean.setRows(rs.getString(\"rowcount\"));\n                    // tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                    tableStatusBean.setDataLength(rs.getBigDecimal(\"usedsize\"));\n                    tableStatusBean.setTotalLength(rs.getBigDecimal(\"usedsize\"));\n                    // tableStatusBean.setMaxDataLength(rs.getString(\"max_data_length\"));\n                    // tableStatusBean.setIndexLength(rs.getString(\"index_length\"));\n                    // tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                    // tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                    tableStatusBean.setComment(rs.getString(\"COMMENT\"));\n                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n                    String createDate = rs.getString(\"createdate\");\n                    String createTime = rs.getString(\"createtime\");\n                    GregorianCalendar cal = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(createDate + ' ' + createTime);\n                        cal.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setCreateTime(cal);\n                    String updateDate = rs.getString(\"alterdate\");\n                    String updateTime = rs.getString(\"altertime\");\n                    GregorianCalendar cal2 = new GregorianCalendar();\n                    try {\n                        Date cd = simpleDateFormat.parse(updateDate + ' ' + updateTime);\n                        cal2.setTime(cd);\n                    } catch (ParseException e) {\n                    }\n                    tableStatusBean.setUpdateTime(cal2);\n                    // tableStatusBean.setCollation(rs.getString(\"collation\"));\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName().toUpperCase();\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String alterQuery = \"\";\n        String dim = columnForm.getDim();\n        if (dataType.equals(\"VARCHAR\") || dataType.equals(\"CHAR\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") \" + columnForm.getCodeType() + \" )\";\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \"(\" + dim + \") )\";\n        } else {\n            alterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" ADD (\\\"\" + name + \"\\\" \" + dataType + \" )\";\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery);\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery);\n        // NOTNULL\n        String nnAlterQuery = \"\";\n        if (columnForm.getNotnull().equals(\"false\")) {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NULL \";\n        } else {\n            nnAlterQuery = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" NOT NULL \";\n        }\n        // NonSelectResultBean nnNonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, nnAlterQuery);\n        // DBEHelper.setLogs(request, nnNonSelectResultBean.getMessages());\n        querys.add(nnAlterQuery);\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getDefaultValue())) {\n            String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n            if (columnForm.getDefaultValue().equals(\"null\")) {\n                value = \"null\";\n            }\n            if (!value.equals(\"''\")) {\n                String alterQueryDefault = \"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + name + \"\\\" ADD DEFAULT \" + value + \" \";\n                // NonSelectResultBean nonSelectResultBean1 =\n                // NonSelect.executeQuery(dataBean, alterQueryDefault);\n                // DBEHelper.setLogs(request,\n                // nonSelectResultBean1.getMessages());\n                querys.add(alterQueryDefault);\n            }\n        }\n        // UNIQUE\n        // COMMENT\n        if (columnForm.getComment() == null) {\n            columnForm.setComment(\"\");\n        }\n        if (StringUtils.isNotEmpty(columnForm.getComment())) {\n            String value = \"'\" + columnForm.getComment() + \"'\";\n            if (columnForm.getComment().equals(\"null\")) {\n                value = \"null\";\n            }\n            String alterQueryComment = \"COMMENT ON COLUMN \\\"\" + tableName + \"\\\".\\\"\" + name + \"\\\" IS \" + value + \" \";\n            // NonSelectResultBean nonSelectResultBean2 =\n            // NonSelect.executeQuery(dataBean, alterQueryComment);\n            // DBEHelper.setLogs(request, nonSelectResultBean2.getMessages());\n            querys.add(alterQueryComment);\n        }\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP (\\\"\" + field + \"\\\") CASCADE \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        String tableName = createTableXmlBean.getName();\n        tableName = tableName.toUpperCase();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE \" + tableName + \" (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        // StringBuffer index = new StringBuffer(\"\");\n        // StringBuffer unique = new StringBuffer(\"\");\n        ArrayList comments = new ArrayList();\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    query.append(\"\\\"\" + name + \"\\\" \" + columnBean.getDataType() + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        if (columnBean.getDataType().equalsIgnoreCase(\"BOOLEAN\")) {\n                            query.append(\" DEFAULT \" + columnBean.getDefaultValue() + \" \");\n                        } else {\n                            query.append(\" DEFAULT '\" + columnBean.getDefaultValue() + \"' \");\n                        }\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        comments.add(\"COMMENT ON COLUMN \\\"\" + tableName.toUpperCase() + \"\\\".\\\"\" + name.toUpperCase() + \"\\\" IS '\" + columnBean.getComment().toUpperCase() + \"' \");\n                    }\n                    if (columnBean.isUnique()) {\n                        query.append(\", UNIQUE(\" + columnBean.getName() + \") \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\\\"\" + name + \"\\\"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            comments.add(\"COMMENT ON TABLE \\\"\" + tableName.toUpperCase() + \"\\\" IS '\" + createTableXmlBean.getComment().toUpperCase() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString().toUpperCase());\n        /*\n\t\t * for(int i=0; i < comments.size(); i++) { String commentQuery =\n\t\t * (String) comments.get(i); NonSelectResultBean nonSelectResultBean2 =\n\t\t * NonSelect.executeQuery(dataBean, commentQuery.toString());\n\t\t * DBEHelper.setLogs(request, nonSelectResultBean2.getMessages()); }\n\t\t */\n        querys.addAll(comments);\n        // return nonSelectResultBean.getErrorMessage();\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"DROP INDEX \" + keyName + \" ON \" + tableName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \\\"\" + tableName + \"\\\" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        // CREATE UNIQUE INDEX \"INDEX001\" ON \"DBA\".\"TOTO\"(\"BB\" ASC)\n        String id = \"UNI_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE UNIQUE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String id = \"IDX_\" + field + \"_\" + tableName;\n        if (id.length() > 32) {\n            id = id.substring(0, 31);\n        }\n        String query = new String(\"CREATE INDEX \\\"\" + id + \"\\\" ON \\\"\" + tableName + \"\\\" (\\\"\" + field + \"\\\" ASC) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        ArrayList notNulls = new ArrayList();\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\\\"\" + columnBean.getName() + \"\\\"\");\n                if (columnBean.isNullable()) {\n                    notNulls.add(\"ALTER TABLE \\\"\" + tableName + \"\\\" COLUMN \\\"\" + columnBean.getName() + \"\\\" NOT NULL\");\n                }\n            }\n        }\n        for (int i = 0; i < notNulls.size(); i++) {\n            String notNullQuery = (String) notNulls.get(i);\n            NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, notNullQuery);\n            DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        }\n        String query = \"ALTER TABLE \\\"\" + tableName + \"\\\" ALTER PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbTableStructure_2Test.java",
		"test_prompt": "// SapdbTableStructure_2Test.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbTableStructure}.\n* It contains ten unit test cases for the {@link SapdbTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass SapdbTableStructure_2Test {"
	},
	{
		"original_code": "// SapdbViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SapdbViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(SapdbViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select DEFINITION from VIEWDEFS where viewname = '\" + viewName + \"' \";\n            ResultSet rsDef = stmt.executeQuery(query);\n            while (rsDef.next()) {\n                String definition = rsDef.getString(\"DEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select * from viewcolumns where viewname='\" + viewName + \"'\");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean viewColumnBean = new ViewColumnBean();\n                viewColumnBean.setName(rs.getString(\"VIEWCOLUMNNAME\"));\n                viewColumnBean.setTableName(rs.getString(\"TABLENAME\"));\n                viewColumnBean.setColumnName(rs.getString(\"COLUMNNAME\"));\n                columns.add(viewColumnBean);\n            }\n            viewStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public ArrayList getDefinition(DBDataBean dataBean, String name) {\n        ArrayList querys = new ArrayList();\n        return querys;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from tables where type = 'VIEW' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbViewStructure_0Test.java",
		"test_prompt": "// SapdbViewStructure_0Test.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbViewStructure}.\n* It contains ten unit test cases for the {@link SapdbViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass SapdbViewStructure_0Test {"
	},
	{
		"original_code": "// SapdbViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SapdbViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(SapdbViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select DEFINITION from VIEWDEFS where viewname = '\" + viewName + \"' \";\n            ResultSet rsDef = stmt.executeQuery(query);\n            while (rsDef.next()) {\n                String definition = rsDef.getString(\"DEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select * from viewcolumns where viewname='\" + viewName + \"'\");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean viewColumnBean = new ViewColumnBean();\n                viewColumnBean.setName(rs.getString(\"VIEWCOLUMNNAME\"));\n                viewColumnBean.setTableName(rs.getString(\"TABLENAME\"));\n                viewColumnBean.setColumnName(rs.getString(\"COLUMNNAME\"));\n                columns.add(viewColumnBean);\n            }\n            viewStructureBean.setColumns(columns);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW \\\"\" + tableName + \"\\\" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public ArrayList getDefinition(DBDataBean dataBean, String name) {\n        ArrayList querys = new ArrayList();\n        return querys;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from tables where type = 'VIEW' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbViewStructure_1Test.java",
		"test_prompt": "// SapdbViewStructure_1Test.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbViewStructure}.\n* It contains ten unit test cases for the {@link SapdbViewStructure#isView(DBDataBean, String)} method.\n*/\nclass SapdbViewStructure_1Test {"
	},
	{
		"original_code": "// SapdbSequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SapdbSequenceStructure implements SequenceStructure {\n\n    //private static Logger log = Logger.getLogger(SapdbSequenceStructure.class.getName());\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM SEQUENCES \");\n            while (rs.next()) {\n                SequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n                String name = rs.getString(\"SEQUENCE_NAME\");\n                sequenceStructureBean.setName(name);\n                sequenceStructureBean.setMinValue(rs.getInt(\"MIN_VALUE\"));\n                sequenceStructureBean.setMaxValue(rs.getString(\"MAX_VALUE\"));\n                sequenceStructureBean.setIncrementBy(rs.getInt(\"INCREMENT_BY\"));\n                sequenceStructureBean.setLastNumber(rs.getInt(\"LAST_NUMBER\"));\n                sequences.add(sequenceStructureBean);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        String query = \"DROP SEQUENCE \" + sequence + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE SEQUENCE \\\"\");\n        String name = sequenceForm.getName();\n        if (StringUtils.isNotEmpty(name)) {\n            name = name.toUpperCase();\n        }\n        query.append(name);\n        query.append(\"\\\" \");\n        query.append(\" INCREMENT BY \");\n        query.append(sequenceForm.getIncrement());\n        if (StringUtils.isNotEmpty(sequenceForm.getStart())) {\n            query.append(\" START WITH \");\n            query.append(sequenceForm.getStart());\n        }\n        if (StringUtils.isEmpty(sequenceForm.getMin())) {\n            query.append(\" NOMINVALUE \");\n        } else {\n            query.append(\" MINVALUE \");\n            query.append(sequenceForm.getMin());\n        }\n        if (StringUtils.isEmpty(sequenceForm.getMax())) {\n            query.append(\" NOMAXVALUE \");\n        } else {\n            query.append(\" MAXVALUE \");\n            query.append(sequenceForm.getMax());\n        }\n        if (sequenceForm.getCycle().equalsIgnoreCase(\"no\")) {\n            query.append(\" NOCYCLE \");\n        } else {\n            query.append(\" CYCLE \");\n        }\n        if (StringUtils.isNotEmpty(sequenceForm.getCache())) {\n            query.append(\" CACHE \");\n            query.append(sequenceForm.getCache());\n        }\n        querys.add(query.toString());\n        if (StringUtils.isNotEmpty(sequenceForm.getComment())) {\n            String queryComment = \"COMMENT ON SEQUENCE \\\"\" + name + \"\\\" IS '\" + sequenceForm.getComment() + \"' \";\n            querys.add(queryComment);\n        }\n        return querys;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sapdb/SapdbSequenceStructure.java",
		"test_prompt": "// SapdbSequenceStructureTest.java\npackage com.gbshape.dbe.sapdb;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SapdbSequenceStructure}.\n* It contains ten unit test cases for the {@link SapdbSequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass SapdbSequenceStructureTest {"
	},
	{
		"original_code": "// DBEDigester.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.xml;\n\nimport java.io.File;\nimport org.apache.commons.digester.Digester;\n\npublic final class DBEDigester {\n\n    public static DBEXmlBean parseXML(String xml) {\n        DBEXmlBean dXmlBean = null;\n        try {\n            Digester digester = new Digester();\n            digester.setValidating(false);\n            digester.addObjectCreate(\"dbe\", DBEXmlBean.class);\n            digester.addObjectCreate(\"dbe/createTable\", CreateTableXmlBean.class);\n            digester.addBeanPropertySetter(\"dbe/createTable/name\", \"name\");\n            digester.addSetNext(\"dbe/createTable\", \"addCreateTable\");\n            File input = new File(\"test.xml\");\n            dXmlBean = (DBEXmlBean) digester.parse(input);\n        } catch (Exception exc) {\n            exc.printStackTrace();\n        }\n        return dXmlBean;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/xml/DBEDigester.java",
		"test_prompt": "// DBEDigesterTest.java\npackage com.gbshape.dbe.xml;\n\nimport java.io.File;\nimport org.apache.commons.digester.Digester;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DBEDigester}.\n* It contains ten unit test cases for the {@link DBEDigester#parseXML(String)} method.\n*/\nclass DBEDigesterTest {"
	},
	{
		"original_code": "// CSVTableImport.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.importdata;\n\nimport java.util.ArrayList;\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.utils.DBEUtils;\n\npublic class CSVTableImport implements ImportTask {\n\n    public String getDescription() {\n        return \"Simple csv import for one table\";\n    }\n\n    public int getDataType() {\n        return ImportTask.CSV_DATATYPE;\n    }\n\n    public ArrayList getParameters(HttpServletRequest request) {\n        ArrayList parameters = new ArrayList();\n        ArrayList values = new ArrayList();\n        HttpSession session = request.getSession();\n        DBDataBean dataBean = (DBDataBean) session.getAttribute(\"DBDataBean\");\n        TableList tableList = TableListFactory.getInstance(dataBean.getDbType());\n        ArrayList tArrayList = tableList.getTableList(dataBean);\n        int size = tArrayList.size();\n        for (int i = 0; i < size; i++) {\n            TableBean tableBean = (TableBean) tArrayList.get(i);\n            if (!tableBean.isView()) {\n                values.add(tableBean.getName());\n            }\n        }\n        ParameterBean tables = new ParameterBean();\n        tables.setTranslatedLabel(true);\n        tables.setLabel(\"import.param.tables\");\n        tables.setName(\"tableName\");\n        tables.setValues(values);\n        tables.setType(ImportTask.SELECT_TYPE);\n        parameters.add(tables);\n        return parameters;\n    }\n\n    public String execute(HttpServletRequest request, DBDataBean dataBean, ArrayList datas, Map parameters) {\n        DBEUtils.dumpRequest(request);\n        String tableName = \"\";\n        if (parameters != null) {\n            String[] params = (String[]) parameters.get(\"tableName\");\n            tableName = (params)[0];\n        }\n        if (StringUtils.isEmpty(tableName)) {\n            tableName = request.getParameter(\"tableName\");\n        }\n        TableStructure tableStructure = TableStructureFactory.getInstance(dataBean.getDbType());\n        TableStructureBean tableStructureBean = tableStructure.getStructure(dataBean, tableName);\n        int size = datas.size();\n        for (int j = 0; j < size; j++) {\n            String[] data = (String[]) datas.get(j);\n            StringBuffer query = new StringBuffer(\"INSERT INTO \" + tableName + \" (\");\n            ArrayList columns = tableStructureBean.getColumns();\n            for (int i = 0; i < columns.size(); i++) {\n                ColumnBean columnBean = (ColumnBean) columns.get(i);\n                if (i > 0) {\n                    query.append(\",\");\n                }\n                query.append(columnBean.getName());\n            }\n            query.append(\") VALUES (\");\n            for (int i = 0; i < columns.size(); i++) {\n                if (i > 0) {\n                    query.append(\",\");\n                }\n                ColumnBean columnBean = (ColumnBean) columns.get(i);\n                String value = data[i];\n                DBEHelper.appendValuesNoDecodeAjax(dataBean, query, columnBean, value);\n            }\n            query.append(\") \");\n            NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query.toString());\n            //DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            if (StringUtils.isNotEmpty(nonSelectResultBean.getErrorMessage())) {\n                DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/importdata/CSVTableImport.java",
		"test_prompt": "// CSVTableImportTest.java\npackage com.gbshape.dbe.importdata;\n\nimport java.util.ArrayList;\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.factory.TableListFactory;\nimport com.gbshape.dbe.factory.TableStructureFactory;\nimport com.gbshape.dbe.idb.TableList;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.utils.DBEUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CSVTableImport}.\n* It contains ten unit test cases for the {@link CSVTableImport#execute(HttpServletRequest, DBDataBean, ArrayList, Map)} method.\n*/\nclass CSVTableImportTest {"
	},
	{
		"original_code": "// ParameterBean.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.importdata;\n\nimport java.util.ArrayList;\n\npublic class ParameterBean implements java.io.Serializable {\n\n    private String name = \"\";\n\n    private String defaultValue = \"\";\n\n    private int type = 0;\n\n    private ArrayList values = new ArrayList();\n\n    private String label = \"\";\n\n    private boolean translatedLabel = false;\n\n    public String getDefaultValue() {\n        return defaultValue;\n    }\n\n    public void setDefaultValue(String defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public void setLabel(String label) {\n        this.label = label;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public boolean isTranslatedLabel() {\n        return translatedLabel;\n    }\n\n    public void setTranslatedLabel(boolean translatedLabel) {\n        this.translatedLabel = translatedLabel;\n    }\n\n    public int getType() {\n        return type;\n    }\n\n    public void setType(int type) {\n        this.type = type;\n    }\n\n    public ArrayList getValues() {\n        return values;\n    }\n\n    public void setValues(ArrayList values) {\n        this.values = values;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/importdata/ParameterBean.java",
		"test_prompt": "// ParameterBeanTest.java\npackage com.gbshape.dbe.importdata;\n\nimport java.util.ArrayList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterBean}.\n* It contains ten unit test cases for the {@link ParameterBean#isTranslatedLabel()} method.\n*/\nclass ParameterBeanTest {"
	},
	{
		"original_code": "// MysqlViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class MysqlViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(MysqlViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"show create view `\" + viewName + \"` \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(2);\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM `\" + viewName + \"` \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"Field\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rsStatus = stmt.executeQuery(\"SHOW table status \");\n            while (rsStatus.next()) {\n                String tableName = rsStatus.getString(\"Name\");\n                String comment = rsStatus.getString(\"Comment\");\n                if (tableName.equals(viewName) && comment.equals(\"VIEW\")) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlViewStructure_0Test.java",
		"test_prompt": "// MysqlViewStructure_0Test.java\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlViewStructure}.\n* It contains ten unit test cases for the {@link MysqlViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass MysqlViewStructure_0Test {"
	},
	{
		"original_code": "// MysqlViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class MysqlViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(MysqlViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"show create view `\" + viewName + \"` \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(2);\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM `\" + viewName + \"` \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"Field\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP VIEW `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rsStatus = stmt.executeQuery(\"SHOW table status \");\n            while (rsStatus.next()) {\n                String tableName = rsStatus.getString(\"Name\");\n                String comment = rsStatus.getString(\"Comment\");\n                if (tableName.equals(viewName) && comment.equals(\"VIEW\")) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlViewStructure_1Test.java",
		"test_prompt": "// MysqlViewStructure_1Test.java\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlViewStructure}.\n* It contains ten unit test cases for the {@link MysqlViewStructure#isView(DBDataBean, String)} method.\n*/\nclass MysqlViewStructure_1Test {"
	},
	{
		"original_code": "// MysqlSequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class MysqlSequenceStructure implements SequenceStructure {\n\n    private static Logger log = Logger.getLogger(MysqlSequenceStructure.class.getName());\n\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SHOW TABLE STATUS \");\n            while (rs.next()) {\n                String name = rs.getString(\"NAME\");\n                String auto = rs.getString(\"Auto_Increment\");\n                if (auto != null) {\n                    SequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n                    sequenceStructureBean.setName(name);\n                    sequenceStructureBean.setMinValue(1);\n                    sequenceStructureBean.setMaxValue(\"\");\n                    sequenceStructureBean.setIncrementBy(1);\n                    sequenceStructureBean.setLastNumber(rs.getInt(\"Auto_Increment\"));\n                    sequences.add(sequenceStructureBean);\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        // TODO Auto-generated method stub\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlSequenceStructure.java",
		"test_prompt": "// MysqlSequenceStructureTest.java\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlSequenceStructure}.\n* It contains ten unit test cases for the {@link MysqlSequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass MysqlSequenceStructureTest {"
	},
	{
		"original_code": "// MysqlDataBase.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class MysqlDataBase implements DataBase {\n\n    private static final String LOGIN_QUERY = \"show databases\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n            }\n        } catch (ClassNotFoundException e) {\n            test = e.getMessage();\n        } catch (SQLException e) {\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlDataBase.java",
		"test_prompt": "// MysqlDataBaseTest.java\npackage com.gbshape.dbe.mysql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlDataBase}.\n* It contains ten unit test cases for the {@link MysqlDataBase#testLogin(DBDataBean)} method.\n*/\nclass MysqlDataBaseTest {"
	},
	{
		"original_code": "// MysqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class MysqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"show table status \");\n                while (rs.next()) {\n                    if (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n                        // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                        tableStatusBean.setVersion(rs.getString(\"version\"));\n                        tableStatusBean.setComment(rs.getString(\"Comment\"));\n                        tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                        String rows = rs.getString(\"rows\");\n                        if (StringUtils.isEmpty(rows)) {\n                            rows = \"0\";\n                        }\n                        tableStatusBean.setRows(rows);\n                        tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                        BigDecimal dl = rs.getBigDecimal(\"data_length\");\n                        if (dl == null) {\n                            dl = new BigDecimal(\"0\");\n                        }\n                        dl = dl.setScale(2);\n                        BigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setDataLength(dataLength);\n                        tableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n                        BigDecimal il = rs.getBigDecimal(\"index_length\");\n                        if (il == null) {\n                            il = new BigDecimal(\"0\");\n                        }\n                        il = il.setScale(2);\n                        BigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setIndexLength(indexLength);\n                        BigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setTotalLength(totalLength);\n                        tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                        tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                        tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n                        tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n                        tableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n                        tableStatusBean.setCollation(rs.getString(\"collation\"));\n                    }\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rsIndex = stmt.executeQuery(\"SHOW INDEX FROM \" + tableName + \" \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"Column_name\");\n                boolean unique = rsIndex.getString(\"Non_unique\").equals(\"0\");\n                String keyName = rsIndex.getString(\"Key_name\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                if (keyName.equalsIgnoreCase(\"PRIMARY\")) {\n                    constraintBean.setKey(true);\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            ResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM \" + tableName + \" \");\n            ArrayList columns = new ArrayList();\n            // Field Type Null Key Default Extra\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"Field\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"Type\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    if (!(dataType.toLowerCase().startsWith(\"enum\") || dataType.toLowerCase().startsWith(\"set\"))) {\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        dataType = splitDataType[0];\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        String[] dims = StringUtils.split(dim);\n                        if (StringUtils.isNumeric(dims[0])) {\n                            int len = Integer.parseInt(dims[0]);\n                            columnBean.setLen(len);\n                        }\n                        if (dims.length > 1) {\n                            columnBean.setCodeType(dims[1]);\n                        }\n                    } else {\n                        dataType = rs.getString(\"Type\");\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        columnBean.setDim(dim);\n                    }\n                }\n                columnBean.setOriginalDT(rs.getString(\"Type\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    columnBean.setConstraintList(constraintList);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columnBean.setDataType(dataType);\n                columnBean.setMode(rs.getString(\"Key\"));\n                columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"Default\"));\n                columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` CHANGE `\" + name + \"` `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE `\" + tableName + \"` DROP `\" + field + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` ADD `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE `\" + createTableXmlBean.getName() + \"` (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"`\" + name + \"` \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n                        query.append(\" (\");\n                        query.append(columnBean.getDim());\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"`\" + name + \"`\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD UNIQUE (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD INDEX (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        // ALTER TABLE `fdsf` DROP PRIMARY KEY ,\n        // ADD PRIMARY KEY ( `rrrr` , `toto` )\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"`\" + columnBean.getName() + \"`\");\n            }\n        }\n        String query = \"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlTableStructure_0Test.java",
		"test_prompt": "// MysqlTableStructure_0Test.java\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlTableStructure}.\n* It contains ten unit test cases for the {@link MysqlTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass MysqlTableStructure_0Test {"
	},
	{
		"original_code": "// MysqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class MysqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"show table status \");\n                while (rs.next()) {\n                    if (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n                        // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                        tableStatusBean.setVersion(rs.getString(\"version\"));\n                        tableStatusBean.setComment(rs.getString(\"Comment\"));\n                        tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                        String rows = rs.getString(\"rows\");\n                        if (StringUtils.isEmpty(rows)) {\n                            rows = \"0\";\n                        }\n                        tableStatusBean.setRows(rows);\n                        tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                        BigDecimal dl = rs.getBigDecimal(\"data_length\");\n                        if (dl == null) {\n                            dl = new BigDecimal(\"0\");\n                        }\n                        dl = dl.setScale(2);\n                        BigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setDataLength(dataLength);\n                        tableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n                        BigDecimal il = rs.getBigDecimal(\"index_length\");\n                        if (il == null) {\n                            il = new BigDecimal(\"0\");\n                        }\n                        il = il.setScale(2);\n                        BigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setIndexLength(indexLength);\n                        BigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setTotalLength(totalLength);\n                        tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                        tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                        tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n                        tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n                        tableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n                        tableStatusBean.setCollation(rs.getString(\"collation\"));\n                    }\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rsIndex = stmt.executeQuery(\"SHOW INDEX FROM \" + tableName + \" \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"Column_name\");\n                boolean unique = rsIndex.getString(\"Non_unique\").equals(\"0\");\n                String keyName = rsIndex.getString(\"Key_name\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                if (keyName.equalsIgnoreCase(\"PRIMARY\")) {\n                    constraintBean.setKey(true);\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            ResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM \" + tableName + \" \");\n            ArrayList columns = new ArrayList();\n            // Field Type Null Key Default Extra\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"Field\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"Type\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    if (!(dataType.toLowerCase().startsWith(\"enum\") || dataType.toLowerCase().startsWith(\"set\"))) {\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        dataType = splitDataType[0];\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        String[] dims = StringUtils.split(dim);\n                        if (StringUtils.isNumeric(dims[0])) {\n                            int len = Integer.parseInt(dims[0]);\n                            columnBean.setLen(len);\n                        }\n                        if (dims.length > 1) {\n                            columnBean.setCodeType(dims[1]);\n                        }\n                    } else {\n                        dataType = rs.getString(\"Type\");\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        columnBean.setDim(dim);\n                    }\n                }\n                columnBean.setOriginalDT(rs.getString(\"Type\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    columnBean.setConstraintList(constraintList);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columnBean.setDataType(dataType);\n                columnBean.setMode(rs.getString(\"Key\"));\n                columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"Default\"));\n                columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` CHANGE `\" + name + \"` `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE `\" + tableName + \"` DROP `\" + field + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` ADD `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE `\" + createTableXmlBean.getName() + \"` (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"`\" + name + \"` \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n                        query.append(\" (\");\n                        query.append(columnBean.getDim());\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"`\" + name + \"`\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD UNIQUE (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD INDEX (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        // ALTER TABLE `fdsf` DROP PRIMARY KEY ,\n        // ADD PRIMARY KEY ( `rrrr` , `toto` )\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"`\" + columnBean.getName() + \"`\");\n            }\n        }\n        String query = \"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlTableStructure_1Test.java",
		"test_prompt": "// MysqlTableStructure_1Test.java\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlTableStructure}.\n* It contains ten unit test cases for the {@link MysqlTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass MysqlTableStructure_1Test {"
	},
	{
		"original_code": "// MysqlTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class MysqlTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            Connection connection = null;\n            try {\n                connection = DBEHelper.getConnection(dataBean);\n                Statement stmt = connection.createStatement();\n                ResultSet rs = stmt.executeQuery(\"show table status \");\n                while (rs.next()) {\n                    if (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n                        // tableStatusBean.setEngine(rs.getString(\"Engine\"));\n                        tableStatusBean.setVersion(rs.getString(\"version\"));\n                        tableStatusBean.setComment(rs.getString(\"Comment\"));\n                        tableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n                        String rows = rs.getString(\"rows\");\n                        if (StringUtils.isEmpty(rows)) {\n                            rows = \"0\";\n                        }\n                        tableStatusBean.setRows(rows);\n                        tableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n                        BigDecimal dl = rs.getBigDecimal(\"data_length\");\n                        if (dl == null) {\n                            dl = new BigDecimal(\"0\");\n                        }\n                        dl = dl.setScale(2);\n                        BigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setDataLength(dataLength);\n                        tableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n                        BigDecimal il = rs.getBigDecimal(\"index_length\");\n                        if (il == null) {\n                            il = new BigDecimal(\"0\");\n                        }\n                        il = il.setScale(2);\n                        BigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setIndexLength(indexLength);\n                        BigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n                        tableStatusBean.setTotalLength(totalLength);\n                        tableStatusBean.setDataFree(rs.getString(\"data_free\"));\n                        tableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n                        tableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n                        tableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n                        tableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n                        tableStatusBean.setCollation(rs.getString(\"collation\"));\n                    }\n                }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (connection != null) {\n                    try {\n                        connection.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rsIndex = stmt.executeQuery(\"SHOW INDEX FROM \" + tableName + \" \");\n            HashMap indexMap = new HashMap();\n            while (rsIndex.next()) {\n                String columnName = rsIndex.getString(\"Column_name\");\n                boolean unique = rsIndex.getString(\"Non_unique\").equals(\"0\");\n                String keyName = rsIndex.getString(\"Key_name\");\n                ArrayList constraintList = new ArrayList();\n                if (indexMap.containsKey(columnName)) {\n                    constraintList = (ArrayList) indexMap.get(columnName);\n                }\n                ConstraintBean constraintBean = new ConstraintBean();\n                constraintBean.setColumnName(columnName);\n                constraintBean.setConstraintName(keyName);\n                constraintBean.setUnique(unique);\n                constraintBean.setIndex(!unique);\n                if (unique) {\n                    constraintBean.setConstraintType(\"UNIQUE\");\n                } else {\n                    constraintBean.setConstraintType(\"INDEX\");\n                }\n                if (keyName.equalsIgnoreCase(\"PRIMARY\")) {\n                    constraintBean.setKey(true);\n                    constraintBean.setConstraintType(\"PRIMARY\");\n                }\n                constraintList.add(constraintBean);\n                indexMap.put(columnName, constraintList);\n            }\n            ResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM \" + tableName + \" \");\n            ArrayList columns = new ArrayList();\n            // Field Type Null Key Default Extra\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"Field\");\n                columnBean.setName(columnName);\n                String dataType = rs.getString(\"Type\").toUpperCase();\n                if (dataType.indexOf(\"(\") != -1) {\n                    if (!(dataType.toLowerCase().startsWith(\"enum\") || dataType.toLowerCase().startsWith(\"set\"))) {\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        dataType = splitDataType[0];\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        String[] dims = StringUtils.split(dim);\n                        if (StringUtils.isNumeric(dims[0])) {\n                            int len = Integer.parseInt(dims[0]);\n                            columnBean.setLen(len);\n                        }\n                        if (dims.length > 1) {\n                            columnBean.setCodeType(dims[1]);\n                        }\n                    } else {\n                        dataType = rs.getString(\"Type\");\n                        String[] splitDataType = StringUtils.split(dataType, \"(\");\n                        String dim = splitDataType[1].replace(')', ' ').trim();\n                        columnBean.setDim(dim);\n                    }\n                }\n                columnBean.setOriginalDT(rs.getString(\"Type\"));\n                if (indexMap.containsKey(columnName)) {\n                    ArrayList constraintList = (ArrayList) indexMap.get(columnName);\n                    columnBean.setConstraintList(constraintList);\n                    for (int j = 0; j < constraintList.size(); j++) {\n                        ConstraintBean constraintBean = (ConstraintBean) constraintList.get(j);\n                        if (constraintBean.isIndex()) {\n                            columnBean.setIndex(true);\n                        }\n                        if (constraintBean.isUnique()) {\n                            columnBean.setUnique(true);\n                        }\n                    }\n                }\n                columnBean.setDataType(dataType);\n                columnBean.setMode(rs.getString(\"Key\"));\n                columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"Null\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"Default\"));\n                columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` CHANGE `\" + name + \"` `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE `\" + tableName + \"` \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE `\" + tableName + \"` DROP `\" + field + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE `address` CHANGE `CITY` `CITY` VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE `\" + tableName + \"` ADD `\" + name + \"` \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE `\" + createTableXmlBean.getName() + \"` (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"`\" + name + \"` \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n                        query.append(\" (\");\n                        query.append(columnBean.getDim());\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"`\" + name + \"`\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"`\" + name + \"`\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, query.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP INDEX `\" + keyName + \"` \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD UNIQUE (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE `\" + tableName + \"` ADD INDEX (`\" + field + \"`) \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        // ALTER TABLE `fdsf` DROP PRIMARY KEY ,\n        // ADD PRIMARY KEY ( `rrrr` , `toto` )\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"`\" + columnBean.getName() + \"`\");\n            }\n        }\n        String query = \"ALTER TABLE `\" + tableName + \"` DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/mysql/MysqlTableStructure_2Test.java",
		"test_prompt": "// MysqlTableStructure_2Test.java\npackage com.gbshape.dbe.mysql;\n\nimport java.math.BigDecimal;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.ConstraintBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MysqlTableStructure}.\n* It contains ten unit test cases for the {@link MysqlTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass MysqlTableStructure_2Test {"
	},
	{
		"original_code": "// SqlserverTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SqlserverTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"SELECT SC.Name, SC.COLID \" + \"FROM SYSOBJECTS SO \" + \"INNER JOIN SYSINDEXKEYS SI ON SO.ID = SI.ID AND SI.INDID = 1 \" + \"INNER JOIN SYSCOLUMNS SC ON SO.ID = SC.ID AND SC.COLID=SI.COLID \" + \"WHERE SO.NAME= '\" + tableName + \"' \" + \"AND SO.XTYPE='U' \";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                keyMap.put(rsKey.getString(\"Name\"), rsKey.getString(\"Name\"));\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT COLUMN_NAME, \" + \"DATA_TYPE, \" + \"CHARACTER_MAXIMUM_LENGTH, \" + \"NUMERIC_PRECISION, \" + \"NUMERIC_SCALE, \" + \"IS_NULLABLE, \" + \"COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS IS_AUTOINCREMENT, \" + \"COLUMN_DEFAULT \" + \"FROM   INFORMATION_SCHEMA.COLUMNS \" + \"WHERE  TABLE_NAME = '\" + tableName + \"' \" + \"ORDER BY ORDINAL_POSITION  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"CHARACTER_MAXIMUM_LENGTH\"));\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"IS_NULLABLE\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMN_DEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverTableStructure_0Test.java",
		"test_prompt": "// SqlserverTableStructure_0Test.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverTableStructure}.\n* It contains ten unit test cases for the {@link SqlserverTableStructure#alterModify(HttpServletRequest, DBDataBean, String, ColumnBean, ColumnForm)} method.\n*/\nclass SqlserverTableStructure_0Test {"
	},
	{
		"original_code": "// SqlserverTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SqlserverTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"SELECT SC.Name, SC.COLID \" + \"FROM SYSOBJECTS SO \" + \"INNER JOIN SYSINDEXKEYS SI ON SO.ID = SI.ID AND SI.INDID = 1 \" + \"INNER JOIN SYSCOLUMNS SC ON SO.ID = SC.ID AND SC.COLID=SI.COLID \" + \"WHERE SO.NAME= '\" + tableName + \"' \" + \"AND SO.XTYPE='U' \";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                keyMap.put(rsKey.getString(\"Name\"), rsKey.getString(\"Name\"));\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT COLUMN_NAME, \" + \"DATA_TYPE, \" + \"CHARACTER_MAXIMUM_LENGTH, \" + \"NUMERIC_PRECISION, \" + \"NUMERIC_SCALE, \" + \"IS_NULLABLE, \" + \"COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS IS_AUTOINCREMENT, \" + \"COLUMN_DEFAULT \" + \"FROM   INFORMATION_SCHEMA.COLUMNS \" + \"WHERE  TABLE_NAME = '\" + tableName + \"' \" + \"ORDER BY ORDINAL_POSITION  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"CHARACTER_MAXIMUM_LENGTH\"));\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"IS_NULLABLE\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMN_DEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverTableStructure_1Test.java",
		"test_prompt": "// SqlserverTableStructure_1Test.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverTableStructure}.\n* It contains ten unit test cases for the {@link SqlserverTableStructure#alterAdd(HttpServletRequest, DBDataBean, String, ColumnForm)} method.\n*/\nclass SqlserverTableStructure_1Test {"
	},
	{
		"original_code": "// SqlserverTableStructure.java\n/*\n Copyright 2007 DB-Everywhere\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\n\npublic class SqlserverTableStructure implements TableStructure {\n\n    public TableStatusBean getStatus(DBDataBean dataBean, String tableName, boolean showTableStatus) {\n        TableStatusBean tableStatusBean = new TableStatusBean();\n        tableStatusBean.setTableName(tableName);\n        if (showTableStatus) {\n            /*Connection connection = null;\n\t\t\ttry {\n\t\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\t\tStatement stmt = connection.createStatement();\n\t\t\t\tResultSet rs = stmt.executeQuery(\"show table status \");\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tif (tableName.equalsIgnoreCase(rs.getString(\"Name\"))) {\n\t\t\t\t\t\t// tableStatusBean.setEngine(rs.getString(\"Engine\"));\n\t\t\t\t\t\ttableStatusBean.setVersion(rs.getString(\"version\"));\n\t\t\t\t\t\ttableStatusBean.setComment(rs.getString(\"Comment\"));\n\t\t\t\t\t\ttableStatusBean.setRowFormat(rs.getString(\"row_format\"));\n\t\t\t\t\t\tString rows = rs.getString(\"rows\");\n\t\t\t\t\t\tif (StringUtils.isEmpty(rows)) {\n\t\t\t\t\t\t\trows = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableStatusBean.setRows(rows);\n\t\t\t\t\t\ttableStatusBean.setAvgRowLength(rs.getString(\"avg_row_length\"));\n\t\t\t\t\t\tBigDecimal dl = rs.getBigDecimal(\"data_length\");\n\t\t\t\t\t\tif (dl == null) {\n\t\t\t\t\t\t\tdl = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdl = dl.setScale(2);\n\t\t\t\t\t\tBigDecimal dataLength = (dl).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setDataLength(dataLength);\n\t\t\t\t\t\ttableStatusBean.setMaxDataLength(rs.getBigDecimal(\"max_data_length\"));\n\t\t\t\t\t\tBigDecimal il = rs.getBigDecimal(\"index_length\");\n\t\t\t\t\t\tif (il == null) {\n\t\t\t\t\t\t\til = new BigDecimal(\"0\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\til = il.setScale(2);\n\t\t\t\t\t\tBigDecimal indexLength = (il).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setIndexLength(indexLength);\n\t\t\t\t\t\tBigDecimal totalLength = (il.add(dl)).divide(new BigDecimal(\"1024\"), BigDecimal.ROUND_HALF_EVEN).setScale(2);\n\t\t\t\t\t\ttableStatusBean.setTotalLength(totalLength);\n\t\t\t\t\t\ttableStatusBean.setDataFree(rs.getString(\"data_free\"));\n\t\t\t\t\t\ttableStatusBean.setAutoIncrement(rs.getString(\"auto_increment\"));\n\t\t\t\t\t\ttableStatusBean.setCreateTime(DBEHelper.getCalendar(rs, \"create_time\"));\n\t\t\t\t\t\ttableStatusBean.setUpdateTime(DBEHelper.getCalendar(rs, \"update_time\"));\n\t\t\t\t\t\ttableStatusBean.setCheckTime(DBEHelper.getCalendar(rs, \"check_time\"));\n\t\t\t\t\t\ttableStatusBean.setCollation(rs.getString(\"collation\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconnection.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}*/\n        }\n        return tableStatusBean;\n    }\n\n    public TableStructureBean getStructure(DBDataBean dataBean, String tableName) {\n        TableStructureBean tableStructureBean = new TableStructureBean();\n        tableStructureBean.setTableName(tableName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String queryKey = \"SELECT SC.Name, SC.COLID \" + \"FROM SYSOBJECTS SO \" + \"INNER JOIN SYSINDEXKEYS SI ON SO.ID = SI.ID AND SI.INDID = 1 \" + \"INNER JOIN SYSCOLUMNS SC ON SO.ID = SC.ID AND SC.COLID=SI.COLID \" + \"WHERE SO.NAME= '\" + tableName + \"' \" + \"AND SO.XTYPE='U' \";\n            ResultSet rsKey = stmt.executeQuery(queryKey);\n            HashMap keyMap = new HashMap();\n            while (rsKey.next()) {\n                keyMap.put(rsKey.getString(\"Name\"), rsKey.getString(\"Name\"));\n            }\n            stmt.close();\n            stmt = connection.createStatement();\n            String query = \"SELECT COLUMN_NAME, \" + \"DATA_TYPE, \" + \"CHARACTER_MAXIMUM_LENGTH, \" + \"NUMERIC_PRECISION, \" + \"NUMERIC_SCALE, \" + \"IS_NULLABLE, \" + \"COLUMNPROPERTY(OBJECT_ID(TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS IS_AUTOINCREMENT, \" + \"COLUMN_DEFAULT \" + \"FROM   INFORMATION_SCHEMA.COLUMNS \" + \"WHERE  TABLE_NAME = '\" + tableName + \"' \" + \"ORDER BY ORDINAL_POSITION  \";\n            ResultSet rs = stmt.executeQuery(query);\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rs.getString(\"COLUMN_NAME\");\n                columnBean.setName(columnName);\n                columnBean.setDim(rs.getString(\"CHARACTER_MAXIMUM_LENGTH\"));\n                columnBean.setDataType(rs.getString(\"DATA_TYPE\"));\n                if (keyMap.containsKey(columnName)) {\n                    columnBean.setKey(true);\n                }\n                //columnBean.setMode(rs.getString(\"Key\"));\n                //columnBean.setKey(rs.getString(\"Key\").equalsIgnoreCase(\"PRI\"));\n                columnBean.setNullable(rs.getString(\"IS_NULLABLE\").equalsIgnoreCase(\"YES\"));\n                columnBean.setDefaultValue(rs.getString(\"COLUMN_DEFAULT\"));\n                //columnBean.setExtra(rs.getString(\"Extra\"));\n                columns.add(columnBean);\n            }\n            tableStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return tableStructureBean;\n    }\n\n    public ArrayList alterModify(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnBean columnBean, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" CHANGE \" + name + \" \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        String defaultValue = columnBean.getDefaultValue();\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        alterQuery.append(\" DEFAULT \" + value + \" \");\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"DROP TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void truncate(HttpServletRequest request, DBDataBean dataBean, String tableName) {\n        String query = \"TRUNCATE TABLE \" + tableName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void alterDrop(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String alterQuery = new String(\"ALTER TABLE \" + tableName + \" DROP \" + field + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, alterQuery);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public ArrayList alterAdd(HttpServletRequest request, DBDataBean dataBean, String tableName, ColumnForm columnForm) {\n        ArrayList querys = new ArrayList();\n        String name = columnForm.getName();\n        /* ALTER TABLE address CHANGE CITY CITY VARCHAR( 31 ) DEFAULT NULL */\n        StringBuffer alterQuery = new StringBuffer(\"ALTER TABLE \" + tableName + \" ADD \" + name + \" \");\n        // DATATYPE\n        String dataType = columnForm.getDataType();\n        String dim = columnForm.getDim();\n        if (dataType.equalsIgnoreCase(\"VARCHAR\") || dataType.equalsIgnoreCase(\"CHAR\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"FLOAT\") || dataType.equals(\"FIXED\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else if (dataType.equals(\"ENUM\") || dataType.equals(\"SET\")) {\n            alterQuery.append(\" \" + dataType + \"(\" + dim + \") \");\n        } else {\n            alterQuery.append(\" \" + dataType + \" \");\n        }\n        // DEFAULTVALUE\n        if (columnForm.getDefaultValue() == null) {\n            columnForm.setDefaultValue(\"\");\n        }\n        String value = \"'\" + columnForm.getDefaultValue().trim() + \"'\";\n        if (columnForm.getDefaultValue().equals(\"null\")) {\n            value = \"null\";\n        }\n        if (!value.trim().equals(\"''\")) {\n            alterQuery.append(\" DEFAULT \" + value + \" \");\n        }\n        // NOTNULL\n        if (columnForm.getNotnull().equals(\"true\")) {\n            alterQuery.append(\" NOT NULL \");\n        }\n        // NonSelectResultBean nonSelectResultBean =\n        // NonSelect.executeQuery(dataBean, alterQuery.toString());\n        // DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        querys.add(alterQuery.toString());\n        return querys;\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, CreateTableXmlBean createTableXmlBean) {\n        ArrayList querys = new ArrayList();\n        StringBuffer query = new StringBuffer(\"CREATE TABLE '\" + createTableXmlBean.getName() + \"' (\");\n        StringBuffer primary = new StringBuffer(\"\");\n        StringBuffer index = new StringBuffer(\"\");\n        StringBuffer unique = new StringBuffer(\"\");\n        ArrayList columns = createTableXmlBean.getColumns();\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean != null) {\n                String name = columnBean.getName();\n                if (StringUtils.isNotEmpty(name)) {\n                    if (i > 0) {\n                        query.append(\",\");\n                    }\n                    String dataType = columnBean.getDataType();\n                    query.append(\"\" + name + \" \" + dataType + \" \");\n                    if (columnBean.getLen() > 0) {\n                        query.append(\" (\");\n                        query.append(columnBean.getLen());\n                        if (columnBean.getDec() > 0) {\n                            query.append(\",\");\n                            query.append(columnBean.getDec());\n                        }\n                        query.append(\") \");\n                    }\n                    if (columnBean.isNullable()) {\n                        query.append(\" NULL \");\n                    } else {\n                        query.append(\" NOT NULL \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getDefaultValue())) {\n                        query.append(\" default '\" + columnBean.getDefaultValue() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getComment())) {\n                        query.append(\" COMMENT '\" + columnBean.getComment() + \"' \");\n                    }\n                    if (StringUtils.isNotEmpty(columnBean.getExtra())) {\n                        query.append(\" \" + columnBean.getExtra() + \" \");\n                    }\n                    if (columnBean.isKey()) {\n                        if (StringUtils.isNotEmpty(primary.toString())) {\n                            primary.append(\",\");\n                        }\n                        primary.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isIndex()) {\n                        if (StringUtils.isNotEmpty(index.toString())) {\n                            index.append(\",\");\n                        }\n                        index.append(\"\" + name + \"\");\n                    }\n                    if (columnBean.isUnique()) {\n                        if (StringUtils.isNotEmpty(unique.toString())) {\n                            unique.append(\",\");\n                        }\n                        unique.append(\"\" + name + \"\");\n                    }\n                }\n            }\n        }\n        if (StringUtils.isNotEmpty(primary.toString())) {\n            query.append(\", PRIMARY KEY  (\");\n            query.append(primary);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(index.toString())) {\n            query.append(\", INDEX  (\");\n            query.append(index);\n            query.append(\")\");\n        }\n        if (StringUtils.isNotEmpty(unique.toString())) {\n            query.append(\", UNIQUE  (\");\n            query.append(unique);\n            query.append(\")\");\n        }\n        query.append(\")\");\n        if (StringUtils.isNotEmpty(createTableXmlBean.getComment())) {\n            query.append(\" COMMENT = '\" + createTableXmlBean.getComment() + \"' \");\n        }\n        querys.add(query.toString());\n        return querys;\n    }\n\n    public void dropUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP INDEX \" + keyName + \" \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void dropPrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, String keyName, String columnName) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addUnique(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD UNIQUE (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void addIndex(HttpServletRequest request, DBDataBean dataBean, String tableName, String field) {\n        String query = new String(\"ALTER TABLE \" + tableName + \" ADD INDEX (\" + field + \") \");\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public void changePrimary(HttpServletRequest request, DBDataBean dataBean, String tableName, ArrayList columns) {\n        StringBuffer keys = new StringBuffer(\"\");\n        for (int i = 0; i < columns.size(); i++) {\n            ColumnBean columnBean = (ColumnBean) columns.get(i);\n            if (columnBean.isKey()) {\n                if (StringUtils.isNotEmpty(keys.toString())) {\n                    keys.append(\",\");\n                }\n                keys.append(\"\" + columnBean.getName() + \"\");\n            }\n        }\n        String query = \"ALTER TABLE \" + tableName + \" DROP PRIMARY KEY , ADD PRIMARY KEY (\" + keys.toString() + \") \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverTableStructure_2Test.java",
		"test_prompt": "// SqlserverTableStructure_2Test.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.TableStatusBean;\nimport com.gbshape.dbe.struts.bean.TableStructureBean;\nimport com.gbshape.dbe.struts.form.ColumnForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.xml.CreateTableXmlBean;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverTableStructure}.\n* It contains ten unit test cases for the {@link SqlserverTableStructure#create(HttpServletRequest, DBDataBean, CreateTableXmlBean)} method.\n*/\nclass SqlserverTableStructure_2Test {"
	},
	{
		"original_code": "// SqlserverViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SqlserverViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(SqlserverViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverViewStructure_0Test.java",
		"test_prompt": "// SqlserverViewStructure_0Test.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverViewStructure}.\n* It contains ten unit test cases for the {@link SqlserverViewStructure#create(HttpServletRequest, DBDataBean, String, String)} method.\n*/\nclass SqlserverViewStructure_0Test {"
	},
	{
		"original_code": "// SqlserverViewStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SqlserverViewStructure implements ViewStructure {\n\n    private static Logger log = Logger.getLogger(SqlserverViewStructure.class.getName());\n\n    public ViewStructureBean getStructure(DBDataBean dataBean, String viewName) {\n        ViewStructureBean viewStructureBean = new ViewStructureBean();\n        viewStructureBean.setViewName(viewName);\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            String query = \"select c.* from sys.SYSVIEWS c, sys.SYSTABLES t where t.TABLEID = c.TABLEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \";\n            ResultSet rsV = stmt.executeQuery(query);\n            while (rsV.next()) {\n                String definition = rsV.getString(\"VIEWDEFINITION\");\n                viewStructureBean.setDefinition(definition);\n            }\n            ResultSet rs = stmt.executeQuery(\"select c.* from sys.SYSCOLUMNS c, sys.SYSTABLES t where t.TABLEID = c.REFERENCEID and t.TABLETYPE = 'V' and t.TABLENAME = '\" + viewName + \"' \");\n            ArrayList columns = new ArrayList();\n            while (rs.next()) {\n                ViewColumnBean columnBean = new ViewColumnBean();\n                String columnName = rs.getString(\"COLUMNNAME\");\n                columnBean.setName(columnName);\n                columns.add(columnBean);\n            }\n            viewStructureBean.setColumns(columns);\n            stmt.close();\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return viewStructureBean;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String viewName) {\n        String query = \"DROP VIEW \" + viewName + \" \";\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, query);\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n    }\n\n    public String create(HttpServletRequest request, DBDataBean dataBean, String viewName, String query) {\n        String createQuery = \"CREATE VIEW \" + viewName + \" AS \" + query;\n        NonSelectResultBean nonSelectResultBean = NonSelect.executeQuery(dataBean, createQuery.toUpperCase());\n        DBEHelper.setLogs(request, nonSelectResultBean.getMessages());\n        return nonSelectResultBean.getErrorMessage();\n    }\n\n    public ViewStatusBean getStatus(DBDataBean dataBean, String name) {\n        ViewStatusBean viewStatusBean = new ViewStatusBean();\n        viewStatusBean.setName(name);\n        return viewStatusBean;\n    }\n\n    public boolean isView(DBDataBean dataBean, String viewName) {\n        boolean isView = false;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(\"select count(*) c from sys.systables where TABLETYPE = 'V' and TABLENAME = '\" + viewName + \"' \");\n            while (rs.next()) {\n                int count = rs.getInt(\"c\");\n                if (count > 0) {\n                    isView = true;\n                }\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return isView;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverViewStructure_1Test.java",
		"test_prompt": "// SqlserverViewStructure_1Test.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport com.gbshape.dbe.sql.NonSelect;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.struts.bean.ViewColumnBean;\nimport com.gbshape.dbe.struts.bean.ViewStatusBean;\nimport com.gbshape.dbe.struts.bean.ViewStructureBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverViewStructure}.\n* It contains ten unit test cases for the {@link SqlserverViewStructure#isView(DBDataBean, String)} method.\n*/\nclass SqlserverViewStructure_1Test {"
	},
	{
		"original_code": "// SqlserverSequenceStructure.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SqlserverSequenceStructure implements SequenceStructure {\n\n    private static Logger log = Logger.getLogger(SqlserverSequenceStructure.class.getName());\n\n    public ArrayList getList(DBDataBean dataBean) {\n        ArrayList sequences = new ArrayList();\n        /*Connection connection = null;\n\t\ttry {\n\t\t\tconnection = DBEHelper.getConnection(dataBean);\n\n\t\t\tStatement stmt= connection.createStatement();\n\n\t\t\tResultSet rs=stmt.executeQuery(\"SHOW TABLE STATUS \");\n\n\t\t    while(rs.next()){\n\t\t    \tString name = rs.getString(\"NAME\");\n\t\t        String auto = rs.getString(\"Auto_Increment\");\n\t\t        if(auto != null) {\n\t\t        \tSequenceStructureBean sequenceStructureBean = new SequenceStructureBean();\n\t\t\t        sequenceStructureBean.setName(name);\n\t\t\t        sequenceStructureBean.setMinValue(1);\n\t\t\t        sequenceStructureBean.setMaxValue(\"\");\n\t\t\t        sequenceStructureBean.setIncrementBy(1);\n\t\t\t        sequenceStructureBean.setLastNumber(rs.getInt(\"Auto_Increment\"));\n\n\t\t\t        sequences.add(sequenceStructureBean);\n\t\t        }\n\t\t    }\n\n\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}*/\n        return sequences;\n    }\n\n    public void drop(HttpServletRequest request, DBDataBean dataBean, String sequence) {\n        // TODO Auto-generated method stub\n    }\n\n    public ArrayList create(HttpServletRequest request, DBDataBean dataBean, SequenceForm sequenceForm) {\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverSequenceStructure.java",
		"test_prompt": "// SqlserverSequenceStructureTest.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport javax.servlet.http.HttpServletRequest;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.SequenceStructureBean;\nimport com.gbshape.dbe.struts.form.SequenceForm;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverSequenceStructure}.\n* It contains ten unit test cases for the {@link SqlserverSequenceStructure#create(HttpServletRequest, DBDataBean, SequenceForm)} method.\n*/\nclass SqlserverSequenceStructureTest {"
	},
	{
		"original_code": "// SqlserverDataBase.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic class SqlserverDataBase implements DataBase {\n\n    private final static String LOGIN_QUERY = \"SELECT GETDATE() AS [CurrentDateTime]\";\n\n    public String testLogin(DBDataBean dataBean) {\n        String test = \"\";\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(LOGIN_QUERY);\n            while (rs.next()) {\n                String res = rs.getString(1);\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            test = e.getMessage();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                    test = e.getMessage();\n                }\n            }\n        }\n        return test;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sqlserver/SqlserverDataBase.java",
		"test_prompt": "// SqlserverDataBaseTest.java\npackage com.gbshape.dbe.sqlserver;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport com.gbshape.dbe.idb.DataBase;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SqlserverDataBase}.\n* It contains ten unit test cases for the {@link SqlserverDataBase#testLogin(DBDataBean)} method.\n*/\nclass SqlserverDataBaseTest {"
	},
	{
		"original_code": "// TableStructureFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\n\npublic final class TableStructureFactory {\n\n    private TableStructureFactory() {\n    }\n\n    public static TableStructure getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"TableStructure\");\n                TableStructure structure = (TableStructure) cl.newInstance();\n                return structure;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/TableStructureFactory.java",
		"test_prompt": "// TableStructureFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableStructure;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableStructureFactory}.\n* It contains ten unit test cases for the {@link TableStructureFactory#getInstance(String)} method.\n*/\nclass TableStructureFactoryTest {"
	},
	{
		"original_code": "// ViewStructureFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.ViewStructure;\n\npublic final class ViewStructureFactory {\n\n    private ViewStructureFactory() {\n    }\n\n    public static ViewStructure getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"ViewStructure\");\n                ViewStructure structure = (ViewStructure) cl.newInstance();\n                return structure;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/ViewStructureFactory.java",
		"test_prompt": "// ViewStructureFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.ViewStructure;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ViewStructureFactory}.\n* It contains ten unit test cases for the {@link ViewStructureFactory#getInstance(String)} method.\n*/\nclass ViewStructureFactoryTest {"
	},
	{
		"original_code": "// DataBaseFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.DataBase;\n\npublic final class DataBaseFactory {\n\n    private DataBaseFactory() {\n    }\n\n    public static DataBase getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"DataBase\");\n                DataBase dataBase = (DataBase) cl.newInstance();\n                return dataBase;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/DataBaseFactory.java",
		"test_prompt": "// DataBaseFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.DataBase;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataBaseFactory}.\n* It contains ten unit test cases for the {@link DataBaseFactory#getInstance(String)} method.\n*/\nclass DataBaseFactoryTest {"
	},
	{
		"original_code": "// SequenceStructureFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.SequenceStructure;\n\npublic final class SequenceStructureFactory {\n\n    private SequenceStructureFactory() {\n    }\n\n    public static SequenceStructure getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"SequenceStructure\");\n                SequenceStructure structure = (SequenceStructure) cl.newInstance();\n                return structure;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/SequenceStructureFactory.java",
		"test_prompt": "// SequenceStructureFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.SequenceStructure;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SequenceStructureFactory}.\n* It contains ten unit test cases for the {@link SequenceStructureFactory#getInstance(String)} method.\n*/\nclass SequenceStructureFactoryTest {"
	},
	{
		"original_code": "// TableListFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableList;\n\npublic final class TableListFactory {\n\n    private TableListFactory() {\n    }\n\n    public static TableList getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"TableList\");\n                TableList tableList = (TableList) cl.newInstance();\n                return tableList;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/TableListFactory.java",
		"test_prompt": "// TableListFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.TableList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TableListFactory}.\n* It contains ten unit test cases for the {@link TableListFactory#getInstance(String)} method.\n*/\nclass TableListFactoryTest {"
	},
	{
		"original_code": "// DataBaseListFactory.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.DataBaseList;\n\npublic final class DataBaseListFactory {\n\n    private DataBaseListFactory() {\n    }\n\n    public static DataBaseList getInstance(String dbType) {\n        if (StringUtils.isNotEmpty(dbType)) {\n            try {\n                Class cl = Class.forName(\"com.gbshape.dbe.\" + dbType + \".\" + StringUtils.capitalize(dbType) + \"DataBaseList\");\n                DataBaseList dataBaseList = (DataBaseList) cl.newInstance();\n                return dataBaseList;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/factory/DataBaseListFactory.java",
		"test_prompt": "// DataBaseListFactoryTest.java\npackage com.gbshape.dbe.factory;\n\nimport org.apache.commons.lang.StringUtils;\nimport com.gbshape.dbe.idb.DataBaseList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DataBaseListFactory}.\n* It contains ten unit test cases for the {@link DataBaseListFactory#getInstance(String)} method.\n*/\nclass DataBaseListFactoryTest {"
	},
	{
		"original_code": "// Select.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.FieldBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.utils.IteratorException;\nimport com.gbshape.dbe.utils.ValueListHandler;\n\npublic final class Select {\n\n    private Select() {\n    }\n\n    private static Logger log = Logger.getLogger(Select.class.getName());\n\n    public static SelectResultBean executeQuery(DBDataBean dataBean, String query) {\n        SelectResultBean result = new SelectResultBean();\n        ArrayList messages = new ArrayList();\n        messages.add(new MessageBean(query));\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(query);\n            ResultSetMetaData rmd = rs.getMetaData();\n            int columnCount = rmd.getColumnCount();\n            ColumnBean[] columnBeans = new ColumnBean[columnCount];\n            for (int i = 1; i <= columnCount; i++) {\n                /*out.println (rmd.getCatalogName(i));\n\t            out.println(rmd.getColumnName(i));\n\t            out.println(rmd.getColumnClassName(i));\n\t            out.println(rmd.getColumnDisplaySize(i));\n\t            out.println(rmd.getColumnType(i));\n\t            out.println(rmd.getColumnTypeName(i));\n\t            out.println(rmd.isSearchable(i));\n\t            out.println(rmd.isNullable(i));\n\t            out.println(\"<br>\");*/\n                ColumnBean columnBean = new ColumnBean();\n                String columnName = rmd.getColumnName(i);\n                if (StringUtils.contains(columnName, \"(\")) {\n                    columnName = \"EXPR\" + i;\n                }\n                columnBean.setName(columnName);\n                columnBean.setClassName(rmd.getColumnClassName(i));\n                columnBean.setDataType(rmd.getColumnTypeName(i));\n                int j = i - 1;\n                columnBeans[j] = columnBean;\n            }\n            result.setColumnBeans(columnBeans);\n            ArrayList list = new ArrayList();\n            while (rs.next()) {\n                FieldBean[] fieldBeans = new FieldBean[columnCount];\n                for (int i = 1; i <= columnCount; i++) {\n                    FieldBean fieldBean = new FieldBean();\n                    try {\n                        if (columnBeans[(i - 1)].getDataType().toLowerCase().indexOf(\"blob\") == -1) {\n                            fieldBean.setValue(rs.getString(i));\n                        } else {\n                            //int blobLength = rs.getBinaryStream(i).length;\n                            fieldBean.setValue(\"[BLOB]\");\n                        }\n                    } catch (SQLException e) {\n                        log.error(e.getMessage(), e);\n                        messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n                    }\n                    fieldBean.setClassName(rmd.getColumnClassName(i));\n                    fieldBean.setSize(rmd.getColumnDisplaySize(i));\n                    int j = i - 1;\n                    fieldBeans[j] = fieldBean;\n                }\n                list.add(fieldBeans);\n            }\n            ValueListHandler valueListHandler = new ValueListHandler();\n            valueListHandler.setList(list);\n            messages.add(new MessageBean(list.size() + \" results\"));\n            result.setValueListHandler(valueListHandler);\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n            result.setErrorMessage(e.getMessage());\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n            result.setErrorMessage(e.getMessage());\n        } catch (IteratorException e) {\n            log.error(e.getMessage(), e);\n            messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n            result.setErrorMessage(e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                    messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n                    result.setErrorMessage(e.getMessage());\n                }\n            }\n        }\n        result.setMessages(messages);\n        return result;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sql/Select.java",
		"test_prompt": "// SelectTest.java\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.ColumnBean;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.FieldBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.SelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport com.gbshape.dbe.utils.IteratorException;\nimport com.gbshape.dbe.utils.ValueListHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Select}.\n* It contains ten unit test cases for the {@link Select#executeQuery(DBDataBean, String)} method.\n*/\nclass SelectTest {"
	},
	{
		"original_code": "// SimpleCount.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic final class SimpleCount {\n\n    private SimpleCount() {\n    }\n\n    private static Logger log = Logger.getLogger(SimpleCount.class.getName());\n\n    public static int executeQuery(DBDataBean dataBean, String query) {\n        int result = 0;\n        Connection connection = null;\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            ResultSet rs = stmt.executeQuery(query);\n            while (rs.next()) {\n                result = rs.getInt(1);\n            }\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sql/SimpleCount.java",
		"test_prompt": "// SimpleCountTest.java\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCount}.\n* It contains ten unit test cases for the {@link SimpleCount#executeQuery(DBDataBean, String)} method.\n*/\nclass SimpleCountTest {"
	},
	{
		"original_code": "// NonSelect.java\n/*\nCopyright 2007 DB-Everywhere\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n \thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\n\npublic final class NonSelect {\n\n    private NonSelect() {\n    }\n\n    private static Logger log = Logger.getLogger(Select.class.getName());\n\n    public static NonSelectResultBean executeQuery(DBDataBean dataBean, String query) {\n        int rowCount = 0;\n        Connection connection = null;\n        NonSelectResultBean nonSelectResultBean = new NonSelectResultBean();\n        ArrayList messages = new ArrayList();\n        messages.add(new MessageBean(query));\n        try {\n            connection = DBEHelper.getConnection(dataBean);\n            Statement stmt = connection.createStatement();\n            rowCount = stmt.executeUpdate(query);\n            nonSelectResultBean.setRowCount(rowCount);\n            messages.add(new MessageBean(String.valueOf(rowCount)));\n        } catch (ClassNotFoundException e) {\n            log.error(e.getMessage(), e);\n            messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n            nonSelectResultBean.setErrorMessage(e.getMessage());\n        } catch (SQLException e) {\n            log.error(e.getMessage(), e);\n            messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n            nonSelectResultBean.setErrorMessage(e.getMessage());\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (SQLException e) {\n                    log.error(e.getMessage(), e);\n                    messages.add(new MessageBean(e.getMessage(), MessageBean.ERROR_TYPE));\n                    nonSelectResultBean.setErrorMessage(e.getMessage());\n                }\n            }\n        }\n        nonSelectResultBean.setMessages(messages);\n        return nonSelectResultBean;\n    }\n}\n",
		"id": "/EvoSuiteBenchmark/54_db-everywhere/src/main/java/com/gbshape/dbe/sql/NonSelect.java",
		"test_prompt": "// NonSelectTest.java\npackage com.gbshape.dbe.sql;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport org.apache.log4j.Logger;\nimport com.gbshape.dbe.struts.bean.DBDataBean;\nimport com.gbshape.dbe.struts.bean.MessageBean;\nimport com.gbshape.dbe.struts.bean.NonSelectResultBean;\nimport com.gbshape.dbe.utils.DBEHelper;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonSelect}.\n* It contains ten unit test cases for the {@link NonSelect#executeQuery(DBDataBean, String)} method.\n*/\nclass NonSelectTest {"
	}
]