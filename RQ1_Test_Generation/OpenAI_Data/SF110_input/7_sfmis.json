[
	{
		"original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    private String sql;\n\n    private String filepath;\n\n    private int start;\n\n    private int limit;\n\n    private int totalCount;\n\n    private String[] colNames;\n\n    private String[][] pas;\n\n    private String sort;\n\n    private String dir;\n\n    private final String XMLPATH = \"sqlfolder/\";\n\n    private Session session = null;\n\n    private Query query;\n\n    private List rs;\n\n    private boolean paging;\n\n    private ListRange range;\n\n    private String querySql;\n\n    private String queryValue;\n\n    public ListRange getRange() {\n        return range;\n    }\n\n    public void setRange(ListRange range) {\n        this.range = range;\n    }\n\n    public List getRs() {\n        return rs;\n    }\n\n    public void setRs(List rs) {\n        this.rs = rs;\n    }\n\n    public int getTotalCount() {\n        return totalCount;\n    }\n\n    public void setTotalCount(int totalCount) {\n        this.totalCount = totalCount;\n    }\n\n    public String[] getColNames() {\n        return colNames;\n    }\n\n    public void setColNames(String[] colNames) {\n        this.colNames = colNames;\n    }\n\n    public void run(BasePara basePara) {\n        filepath = basePara.getSqlpath();\n        if (paging = basePara.isPaging()) {\n            start = basePara.getStart();\n            limit = basePara.getLimit();\n        }\n        sort = basePara.getSort();\n        dir = basePara.getDir();\n        pas = basePara.single2plannar();\n        this.parseXML();\n        querySql = querySql == null ? basePara.getQuerySql() : querySql;\n        queryValue = basePara.getQueryValue();\n        this.getCount();\n        this.getColsName();\n        this.loadDataWithSql();\n    }\n\n    /**\n     * 从xml解析sql\n     */\n    public void parseXML() {\n        String pa = this.getClass().getResource(\"Loader.class\").toString();\n        String rootpath = pa.substring(pa.indexOf(\":\") + 2, pa.lastIndexOf(\"classes\") + 8).replaceAll(\"%20\", \" \");\n        String[] path = this.filepath.split(\"//\");\n        String filepath = rootpath + XMLPATH + path[0] + \".xml\";\n        File file = new File(filepath);\n        SAXReader reader = new SAXReader();\n        try {\n            Document doc = reader.read(file);\n            Element root = doc.getRootElement();\n            for (Iterator it = root.elementIterator(); it.hasNext(); ) {\n                Element el = (Element) it.next();\n                if (el.getName().equals(path[1])) {\n                    sql = el.elementText(\"main_sql\");\n                    querySql = el.elementText(\"query_sql\");\n                    break;\n                }\n            }\n        } catch (DocumentException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 获取总记录数\n     */\n    public void getCount() {\n        String subsql = \"\";\n        this.getQuerySql();\n        if (this.sql.lastIndexOf(\"group by\") != -1) {\n            subsql = this.sql.substring(this.sql.lastIndexOf(\"from\"), this.sql.lastIndexOf(\"group by\"));\n        } else {\n            subsql = this.sql.substring(this.sql.lastIndexOf(\"from\"));\n        }\n        session = HibernateSessionFactory.currentSession();\n        query = session.createSQLQuery(\"select count(1) \" + subsql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        totalCount = Integer.parseInt(query.uniqueResult() + \"\");\n        HibernateSessionFactory.closeSession();\n    }\n\n    /**\n     * 获取sql中的字段名集合\n     */\n    public void getColsName() {\n        String colssql = this.sql.substring(this.sql.lastIndexOf(\"select\") + 6, this.sql.lastIndexOf(\"from\"));\n        String[] cols = colssql.split(\",\");\n        colNames = new String[cols.length];\n        for (int i = 0; i < cols.length; i++) {\n            String[] subcols = new String[cols.length];\n            if (cols[i].indexOf(\" as \") > 0) {\n                subcols = cols[i].split(\"as\");\n                colNames[i] = subcols[1].trim();\n            } else {\n                if (cols[i].indexOf(\".\") > 0) {\n                    colNames[i] = cols[i].substring(cols[i].indexOf(\".\") + 1).trim();\n                } else {\n                    colNames[i] = cols[i].trim();\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询数据\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n\n    public void getQuerySql() {\n        int wherenum, ordernum, groupnum;\n        System.out.println(\"querySql:\" + querySql + \",sql:\" + sql);\n        if (querySql != null) {\n            wherenum = this.sql.indexOf(\"where\");\n            ordernum = this.sql.indexOf(\"order by\");\n            groupnum = this.sql.indexOf(\"group by\");\n            querySql = querySql.replace(\"?\", queryValue);\n            System.out.println(\"&&&&&&&&querySql:\" + querySql);\n            if (wherenum > 0) {\n                if (groupnum > 0) {\n                    this.sql = this.sql.substring(0, groupnum) + \" and (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum > 0) {\n                    this.sql = this.sql.substring(0, ordernum) + \" and (\" + querySql + \")\" + this.sql.substring(ordernum);\n                }\n            } else {\n                if (groupnum > 0) {\n                    this.sql = this.sql.substring(0, groupnum) + \" where (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum > 0) {\n                    this.sql = this.sql.substring(0, ordernum) + \" where (\" + querySql + \")\" + this.sql.substring(ordernum);\n                } else {\n                    this.sql = this.sql + \" where (\" + querySql + \")\";\n                }\n            }\n        }\n    }\n\n    /**\n     * 接收参数\n     */\n    public Query getParams(Query query, String[][] params) {\n        if (params != null) {\n            // 参数值\n            String[] pValue = params[0];\n            // 参数值类型\n            String[] pType = params[1];\n            for (int i = 0; i < pValue.length; i++) {\n                if (pType[i].equals(\"String\")) {\n                    query.setParameter(i, pValue[i]);\n                } else if (pType[i].equals(\"Long\")) {\n                    query.setParameter(i, Long.parseLong(pValue[i]));\n                } else if (pType[i].equals(\"Integer\")) {\n                    query.setParameter(i, Integer.parseInt(pValue[i]));\n                } else if (pType[i].equals(\"Double\")) {\n                    query.setParameter(i, Double.parseDouble(pValue[i]));\n                } else if (pType[i].equals(\"Date\")) {\n                    try {\n                        query.setParameter(i, new SimpleDateFormat(\"yyyy-MM-dd\").parse(pValue[i]));\n                    } catch (HibernateException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    } catch (ParseException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return query;\n    }\n\n    /**\n     * 首页Tree数据\n     */\n    public String getArrayResults() {\n        List rows = this.getRs();\n        if (rows.size() == 0) {\n            return \"\";\n        }\n        String jsonstr = \"\";\n        for (Iterator<?> it = rows.iterator(); it.hasNext(); ) {\n            Object[] obj = (Object[]) it.next();\n            String constr = \"{\";\n            for (int i = 0; i < obj.length; i++) {\n                if (i == obj.length - 1) {\n                    constr += '\"' + colNames[i] + '\"' + \":\" + '\"' + obj[i] + '\"';\n                } else {\n                    constr += '\"' + colNames[i] + '\"' + \":\" + '\"' + obj[i] + '\"' + \",\";\n                }\n            }\n            constr += \"}\";\n            jsonstr += constr + \",\";\n        }\n        jsonstr = \"[\" + jsonstr.substring(0, jsonstr.lastIndexOf(\",\")) + \"]\";\n        return jsonstr;\n    }\n\n    public void collectToMap(String flag) {\n        ArrayList<Object> al = null;\n        HashMap<String, Object> map = null;\n        String[] colNameArray = this.getColNames();\n        if (flag.equals(\"combo\")) {\n            colNameArray[0] = \"value\";\n            colNameArray[1] = \"text\";\n        }\n        al = new ArrayList<Object>();\n        List rs = this.getRs();\n        if (rs.size() > 0) {\n            al = new ArrayList<Object>();\n            for (Iterator<?> it = rs.iterator(); it.hasNext(); ) {\n                Object[] obj = null;\n                if (colNameArray.length == 1) {\n                    obj = new Object[] { it.next() };\n                } else {\n                    obj = (Object[]) it.next();\n                }\n                map = new HashMap<String, Object>();\n                for (int i = 0; i < colNameArray.length; i++) {\n                    String tag = colNameArray[i];\n                    map.put(tag, obj[i]);\n                }\n                al.add(map);\n            }\n        }\n        range = new ListRange();\n        range.setData(al);\n        range.setTotalSize(this.getTotalCount());\n    }\n\n    public void collectToMap() {\n        this.collectToMap(\"\");\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/LoaderTest.java",
		"test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {"
	},
	{
		"original_code": "// HibernateSessionFactory.java\npackage com.hf.sfm.util;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\n\npublic class HibernateSessionFactory {\n\n    private static Log log = LogFactory.getLog(HibernateSessionFactory.class);\n\n    private static SessionFactory sessionFactory;\n\n    static {\n        try {\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\n        } catch (HibernateException e) {\n            log.error(\"加载hibernate.cfg.xml失败！\");\n        }\n    }\n\n    public static final ThreadLocal<Session> threadSession = new ThreadLocal<Session>();\n\n    public static Session currentSession() {\n        Session s = threadSession.get();\n        try {\n            if (s == null) {\n                s = sessionFactory.openSession();\n                threadSession.set(s);\n                log.debug(\"创建session成功！\");\n            }\n        } catch (HibernateException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n            log.error(\"创建session失败！\");\n        }\n        return s;\n    }\n\n    public static void closeSession() {\n        Session s = threadSession.get();\n        threadSession.set(null);\n        try {\n            if (s != null) {\n                s.close();\n                log.debug(\"关闭session成功！\");\n            }\n        } catch (HibernateException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n            log.debug(\"关闭session失败！\");\n        }\n    }\n\n    public static void main(String[] args) {\n        HibernateSessionFactory.currentSession();\n        HibernateSessionFactory.closeSession();\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/HibernateSessionFactoryTest.java",
		"test_prompt": "// HibernateSessionFactoryTest.java\npackage com.hf.sfm.util;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.cfg.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HibernateSessionFactory}.\n* It contains ten unit test cases for the {@link HibernateSessionFactory#currentSession()} method.\n*/\nclass HibernateSessionFactoryTest {"
	},
	{
		"original_code": "// DaoFactory.java\npackage com.hf.sfm.util;\n\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n/**\n * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用\n */\nimport com.hf.sfm.crypt.Base64;\n\npublic class DaoFactory {\n\n    private static Log log = LogFactory.getLog(DaoFactory.class);\n\n    public Session session = null;\n\n    public CallableStatement ps = null;\n\n    public ResultSet rs = null;\n\n    public Connection conn = null;\n\n    private Transaction tx = null;\n\n    public DaoFactory() {\n    }\n\n    /**\n     * 创建会话session\n     */\n    public void currentSession() {\n        this.session = HibernateSessionFactory.currentSession();\n    }\n\n    /**\n     * 关闭session\n     */\n    public void closeSession() {\n        HibernateSessionFactory.closeSession();\n    }\n\n    /**\n     * 提交事务并关闭相关资源\n     */\n    public void commit() {\n        this.tx.commit();\n        closeAll();\n    }\n\n    /**\n     * 创建session开启事务\n     */\n    public void beginTransaction() {\n        currentSession();\n        tx = this.session.beginTransaction();\n    }\n\n    /**\n     * 回滚事务\n     */\n    public void rollback() {\n        tx.rollback();\n    }\n\n    /**\n     * 密码加密\n     */\n    public String encrypt(String str) {\n        return Base64.byteArrayToBase64(str.getBytes());\n    }\n\n    /**\n     * 密码解密\n     */\n    public String decrypt(String s) {\n        return new String(Base64.base64ToByteArray(s));\n    }\n\n    /**\n     * 持久化一个对象\n     * @param obj\n     */\n    public void save(Object obj) {\n        session.save(obj);\n    }\n\n    /**\n     * 更新一个对象\n     * @param obj\n     */\n    public void update(Object obj) {\n        session.update(obj);\n    }\n\n    /**\n     * 关闭数据库操作所使用的相关资源\n     */\n    public void closeAll() {\n        if (rs != null) {\n            try {\n                rs.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (ps != null) {\n            try {\n                ps.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null) {\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (session != null) {\n            session.close();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/DaoFactoryTest0.java",
		"test_prompt": "// DaoFactoryTest0.java\npackage com.hf.sfm.util;\n\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n/**\n * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用\n */\nimport com.hf.sfm.crypt.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DaoFactory}.\n* It contains ten unit test cases for the {@link DaoFactory#encrypt(String)} method.\n*/\nclass DaoFactoryTest0 {"
	},
	{
		"original_code": "// DaoFactory.java\npackage com.hf.sfm.util;\n\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n/**\n * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用\n */\nimport com.hf.sfm.crypt.Base64;\n\npublic class DaoFactory {\n\n    private static Log log = LogFactory.getLog(DaoFactory.class);\n\n    public Session session = null;\n\n    public CallableStatement ps = null;\n\n    public ResultSet rs = null;\n\n    public Connection conn = null;\n\n    private Transaction tx = null;\n\n    public DaoFactory() {\n    }\n\n    /**\n     * 创建会话session\n     */\n    public void currentSession() {\n        this.session = HibernateSessionFactory.currentSession();\n    }\n\n    /**\n     * 关闭session\n     */\n    public void closeSession() {\n        HibernateSessionFactory.closeSession();\n    }\n\n    /**\n     * 提交事务并关闭相关资源\n     */\n    public void commit() {\n        this.tx.commit();\n        closeAll();\n    }\n\n    /**\n     * 创建session开启事务\n     */\n    public void beginTransaction() {\n        currentSession();\n        tx = this.session.beginTransaction();\n    }\n\n    /**\n     * 回滚事务\n     */\n    public void rollback() {\n        tx.rollback();\n    }\n\n    /**\n     * 密码加密\n     */\n    public String encrypt(String str) {\n        return Base64.byteArrayToBase64(str.getBytes());\n    }\n\n    /**\n     * 密码解密\n     */\n    public String decrypt(String s) {\n        return new String(Base64.base64ToByteArray(s));\n    }\n\n    /**\n     * 持久化一个对象\n     * @param obj\n     */\n    public void save(Object obj) {\n        session.save(obj);\n    }\n\n    /**\n     * 更新一个对象\n     * @param obj\n     */\n    public void update(Object obj) {\n        session.update(obj);\n    }\n\n    /**\n     * 关闭数据库操作所使用的相关资源\n     */\n    public void closeAll() {\n        if (rs != null) {\n            try {\n                rs.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (ps != null) {\n            try {\n                ps.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (conn != null) {\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if (session != null) {\n            session.close();\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/DaoFactoryTest1.java",
		"test_prompt": "// DaoFactoryTest1.java\npackage com.hf.sfm.util;\n\nimport java.sql.CallableStatement;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n/**\n * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用\n */\nimport com.hf.sfm.crypt.Base64;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DaoFactory}.\n* It contains ten unit test cases for the {@link DaoFactory#decrypt(String)} method.\n*/\nclass DaoFactoryTest1 {"
	},
	{
		"original_code": "// BasePara.java\npackage com.hf.sfm.util;\n\npublic class BasePara {\n\n    private String sqlpath;\n\n    private int start;\n\n    private int limit;\n\n    private String sort;\n\n    private String dir;\n\n    private String[] queryparams;\n\n    private String[][] arr2params;\n\n    private String ordersql;\n\n    private String groupsql;\n\n    private String sql;\n\n    private boolean paging = false;\n\n    private String queryValue;\n\n    private String querySql;\n\n    public String getQuerySql() {\n        return querySql;\n    }\n\n    public void setQuerySql(String querySql) {\n        this.querySql = querySql;\n    }\n\n    public String getQueryValue() {\n        return queryValue;\n    }\n\n    public void setQueryValue(String queryValue) {\n        this.queryValue = queryValue;\n    }\n\n    public void setPaging(boolean paging) {\n        this.paging = paging;\n    }\n\n    public String getSqlpath() {\n        return sqlpath;\n    }\n\n    public void setSqlpath(String sqlpath) {\n        this.sqlpath = sqlpath;\n    }\n\n    public int getStart() {\n        return start;\n    }\n\n    public void setStart(int start) {\n        this.start = start;\n    }\n\n    public int getLimit() {\n        return limit;\n    }\n\n    public void setLimit(int limit) {\n        this.limit = limit;\n    }\n\n    public String getSort() {\n        return sort;\n    }\n\n    public void setSort(String sort) {\n        this.sort = sort;\n    }\n\n    public String getDir() {\n        return dir;\n    }\n\n    public void setDir(String dir) {\n        this.dir = dir;\n    }\n\n    public String[] getQueryparams() {\n        return queryparams;\n    }\n\n    public void setQueryparams(String[] queryparams) {\n        this.queryparams = queryparams;\n    }\n\n    public String[][] getArr2params() {\n        return arr2params;\n    }\n\n    public void setArr2params(String[][] arr2params) {\n        this.arr2params = arr2params;\n    }\n\n    public String getOrdersql() {\n        return ordersql;\n    }\n\n    public void setOrdersql(String ordersql) {\n        this.ordersql = ordersql;\n    }\n\n    public String getGroupsql() {\n        return groupsql;\n    }\n\n    public void setGroupsql(String groupsql) {\n        this.groupsql = groupsql;\n    }\n\n    public String getSql() {\n        return sql;\n    }\n\n    public void setSql(String sql) {\n        this.sql = sql;\n    }\n\n    public boolean isPaging() {\n        return this.paging;\n    }\n\n    public String[][] single2plannar() {\n        String[][] planarArr = null;\n        try {\n            if (queryparams == null) {\n                return null;\n            }\n            if (queryparams.length % 2 > 0) {\n                try {\n                    throw new OddParamsOfArrayInLoader(\"Loader加载数据时，所传进来的参数为奇数个！\");\n                } catch (OddParamsOfArrayInLoader e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            } else {\n                planarArr = new String[2][queryparams.length / 2];\n                for (int i = 0, j = 0; i < queryparams.length; i = i + 2, j++) {\n                    planarArr[0][j] = queryparams[i];\n                    planarArr[1][j] = queryparams[i + 1];\n                }\n            }\n        } catch (RuntimeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return planarArr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/BaseParaTest0.java",
		"test_prompt": "// BaseParaTest0.java\npackage com.hf.sfm.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BasePara}.\n* It contains ten unit test cases for the {@link BasePara#isPaging()} method.\n*/\nclass BaseParaTest0 {"
	},
	{
		"original_code": "// BasePara.java\npackage com.hf.sfm.util;\n\npublic class BasePara {\n\n    private String sqlpath;\n\n    private int start;\n\n    private int limit;\n\n    private String sort;\n\n    private String dir;\n\n    private String[] queryparams;\n\n    private String[][] arr2params;\n\n    private String ordersql;\n\n    private String groupsql;\n\n    private String sql;\n\n    private boolean paging = false;\n\n    private String queryValue;\n\n    private String querySql;\n\n    public String getQuerySql() {\n        return querySql;\n    }\n\n    public void setQuerySql(String querySql) {\n        this.querySql = querySql;\n    }\n\n    public String getQueryValue() {\n        return queryValue;\n    }\n\n    public void setQueryValue(String queryValue) {\n        this.queryValue = queryValue;\n    }\n\n    public void setPaging(boolean paging) {\n        this.paging = paging;\n    }\n\n    public String getSqlpath() {\n        return sqlpath;\n    }\n\n    public void setSqlpath(String sqlpath) {\n        this.sqlpath = sqlpath;\n    }\n\n    public int getStart() {\n        return start;\n    }\n\n    public void setStart(int start) {\n        this.start = start;\n    }\n\n    public int getLimit() {\n        return limit;\n    }\n\n    public void setLimit(int limit) {\n        this.limit = limit;\n    }\n\n    public String getSort() {\n        return sort;\n    }\n\n    public void setSort(String sort) {\n        this.sort = sort;\n    }\n\n    public String getDir() {\n        return dir;\n    }\n\n    public void setDir(String dir) {\n        this.dir = dir;\n    }\n\n    public String[] getQueryparams() {\n        return queryparams;\n    }\n\n    public void setQueryparams(String[] queryparams) {\n        this.queryparams = queryparams;\n    }\n\n    public String[][] getArr2params() {\n        return arr2params;\n    }\n\n    public void setArr2params(String[][] arr2params) {\n        this.arr2params = arr2params;\n    }\n\n    public String getOrdersql() {\n        return ordersql;\n    }\n\n    public void setOrdersql(String ordersql) {\n        this.ordersql = ordersql;\n    }\n\n    public String getGroupsql() {\n        return groupsql;\n    }\n\n    public void setGroupsql(String groupsql) {\n        this.groupsql = groupsql;\n    }\n\n    public String getSql() {\n        return sql;\n    }\n\n    public void setSql(String sql) {\n        this.sql = sql;\n    }\n\n    public boolean isPaging() {\n        return this.paging;\n    }\n\n    public String[][] single2plannar() {\n        String[][] planarArr = null;\n        try {\n            if (queryparams == null) {\n                return null;\n            }\n            if (queryparams.length % 2 > 0) {\n                try {\n                    throw new OddParamsOfArrayInLoader(\"Loader加载数据时，所传进来的参数为奇数个！\");\n                } catch (OddParamsOfArrayInLoader e) {\n                    // TODO Auto-generated catch block\n                    e.printStackTrace();\n                }\n            } else {\n                planarArr = new String[2][queryparams.length / 2];\n                for (int i = 0, j = 0; i < queryparams.length; i = i + 2, j++) {\n                    planarArr[0][j] = queryparams[i];\n                    planarArr[1][j] = queryparams[i + 1];\n                }\n            }\n        } catch (RuntimeException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        return planarArr;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/BaseParaTest1.java",
		"test_prompt": "// BaseParaTest1.java\npackage com.hf.sfm.util;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BasePara}.\n* It contains ten unit test cases for the {@link BasePara#single2plannar()} method.\n*/\nclass BaseParaTest1 {"
	},
	{
		"original_code": "// Base64.java\npackage com.hf.sfm.crypt;\n\npublic class Base64 {\n\n    private static final byte[] _$23169 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, 62, 9, 10, 11, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 13, 14, -1, 15, 63, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 18, 19, 21, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 22, 23, 24, 25 };\n\n    private static final byte[] _$23168 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n\n    private static final char[] _$23167 = { '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', ',', '-', '.', ':', ';', '<', '>', '@', '[', ']', '^', '`', '_', '{', '|', '}', '~', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '?' };\n\n    private static final char[] _$23166 = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };\n\n    public Base64() {\n    }\n\n    public static byte[] altBase64ToByteArray(String s) {\n        return _$23180(s, true);\n    }\n\n    private static byte[] _$23180(String s, boolean flag) {\n        byte[] bb = flag ? _$23169 : _$23168;\n        int i = s.length();\n        int j = i / 4;\n        if (4 * j != i)\n            throw new IllegalArgumentException(\"String length must be a multiple of four.\");\n        int k = 0;\n        int l = j;\n        if (i != 0) {\n            if (s.charAt(i - 1) == '=') {\n                k++;\n                l--;\n            }\n            if (s.charAt(i - 2) == '=')\n                k++;\n        }\n        byte[] bc = new byte[3 * j - k];\n        int i1 = 0;\n        int j1 = 0;\n        for (int k1 = 0; k1 < l; k1++) {\n            int l1 = _$23183(s.charAt(i1++), bb);\n            int j2 = _$23183(s.charAt(i1++), bb);\n            int l2 = _$23183(s.charAt(i1++), bb);\n            int j3 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (l1 << 2 | j2 >> 4);\n            bc[j1++] = (byte) (j2 << 4 | l2 >> 2);\n            bc[j1++] = (byte) (l2 << 6 | j3);\n        }\n        if (k != 0) {\n            int i2 = _$23183(s.charAt(i1++), bb);\n            int k2 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (i2 << 2 | k2 >> 4);\n            if (k == 1) {\n                int i3 = _$23183(s.charAt(i1++), bb);\n                bc[j1++] = (byte) (k2 << 4 | i3 >> 2);\n            }\n        }\n        return bc;\n    }\n\n    public static byte[] base64ToByteArray(String s) {\n        return _$23180(s, false);\n    }\n\n    private static int _$23183(char c, byte[] bb) {\n        byte b = bb[c];\n        if (b < 0)\n            throw new IllegalArgumentException(\"Illegal character \" + c);\n        else\n            return b;\n    }\n\n    public static String byteArrayToAltBase64(byte[] bb) {\n        return _$23170(bb, true);\n    }\n\n    private static String _$23170(byte[] bb, boolean flag) {\n        int i = bb.length;\n        int j = i / 3;\n        int k = i - 3 * j;\n        int l = 4 * ((i + 2) / 3);\n        StringBuffer stringbuffer = new StringBuffer(l);\n        char[] ac = flag ? _$23167 : _$23166;\n        int i1 = 0;\n        for (int j1 = 0; j1 < j; j1++) {\n            int k1 = bb[i1++] & 0xff;\n            int i2 = bb[i1++] & 0xff;\n            int k2 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[k1 >> 2]);\n            stringbuffer.append(ac[k1 << 4 & 0x3f | i2 >> 4]);\n            stringbuffer.append(ac[i2 << 2 & 0x3f | k2 >> 6]);\n            stringbuffer.append(ac[k2 & 0x3f]);\n        }\n        if (k != 0) {\n            int l1 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[l1 >> 2]);\n            if (k == 1) {\n                stringbuffer.append(ac[l1 << 4 & 0x3f]);\n                stringbuffer.append(\"==\");\n            } else {\n                int j2 = bb[i1++] & 0xff;\n                stringbuffer.append(ac[l1 << 4 & 0x3f | j2 >> 4]);\n                stringbuffer.append(ac[j2 << 2 & 0x3f]);\n                stringbuffer.append('=');\n            }\n        }\n        return stringbuffer.toString();\n    }\n\n    public static String byteArrayToBase64(byte[] bb) {\n        return _$23170(bb, false);\n    }\n\n    public static void main(String[] args) {\n        String s = \"0123456789\";\n        byte[] b = s.getBytes();\n        s = byteArrayToBase64(b);\n        System.out.println(s);\n        b = base64ToByteArray(s);\n        System.out.println(new String(b));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/crypt/Base64Test0.java",
		"test_prompt": "// Base64Test0.java\npackage com.hf.sfm.crypt;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64}.\n* It contains ten unit test cases for the {@link Base64#altBase64ToByteArray(String)} method.\n*/\nclass Base64Test0 {"
	},
	{
		"original_code": "// Base64.java\npackage com.hf.sfm.crypt;\n\npublic class Base64 {\n\n    private static final byte[] _$23169 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, 62, 9, 10, 11, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 13, 14, -1, 15, 63, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 18, 19, 21, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 22, 23, 24, 25 };\n\n    private static final byte[] _$23168 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n\n    private static final char[] _$23167 = { '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', ',', '-', '.', ':', ';', '<', '>', '@', '[', ']', '^', '`', '_', '{', '|', '}', '~', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '?' };\n\n    private static final char[] _$23166 = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };\n\n    public Base64() {\n    }\n\n    public static byte[] altBase64ToByteArray(String s) {\n        return _$23180(s, true);\n    }\n\n    private static byte[] _$23180(String s, boolean flag) {\n        byte[] bb = flag ? _$23169 : _$23168;\n        int i = s.length();\n        int j = i / 4;\n        if (4 * j != i)\n            throw new IllegalArgumentException(\"String length must be a multiple of four.\");\n        int k = 0;\n        int l = j;\n        if (i != 0) {\n            if (s.charAt(i - 1) == '=') {\n                k++;\n                l--;\n            }\n            if (s.charAt(i - 2) == '=')\n                k++;\n        }\n        byte[] bc = new byte[3 * j - k];\n        int i1 = 0;\n        int j1 = 0;\n        for (int k1 = 0; k1 < l; k1++) {\n            int l1 = _$23183(s.charAt(i1++), bb);\n            int j2 = _$23183(s.charAt(i1++), bb);\n            int l2 = _$23183(s.charAt(i1++), bb);\n            int j3 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (l1 << 2 | j2 >> 4);\n            bc[j1++] = (byte) (j2 << 4 | l2 >> 2);\n            bc[j1++] = (byte) (l2 << 6 | j3);\n        }\n        if (k != 0) {\n            int i2 = _$23183(s.charAt(i1++), bb);\n            int k2 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (i2 << 2 | k2 >> 4);\n            if (k == 1) {\n                int i3 = _$23183(s.charAt(i1++), bb);\n                bc[j1++] = (byte) (k2 << 4 | i3 >> 2);\n            }\n        }\n        return bc;\n    }\n\n    public static byte[] base64ToByteArray(String s) {\n        return _$23180(s, false);\n    }\n\n    private static int _$23183(char c, byte[] bb) {\n        byte b = bb[c];\n        if (b < 0)\n            throw new IllegalArgumentException(\"Illegal character \" + c);\n        else\n            return b;\n    }\n\n    public static String byteArrayToAltBase64(byte[] bb) {\n        return _$23170(bb, true);\n    }\n\n    private static String _$23170(byte[] bb, boolean flag) {\n        int i = bb.length;\n        int j = i / 3;\n        int k = i - 3 * j;\n        int l = 4 * ((i + 2) / 3);\n        StringBuffer stringbuffer = new StringBuffer(l);\n        char[] ac = flag ? _$23167 : _$23166;\n        int i1 = 0;\n        for (int j1 = 0; j1 < j; j1++) {\n            int k1 = bb[i1++] & 0xff;\n            int i2 = bb[i1++] & 0xff;\n            int k2 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[k1 >> 2]);\n            stringbuffer.append(ac[k1 << 4 & 0x3f | i2 >> 4]);\n            stringbuffer.append(ac[i2 << 2 & 0x3f | k2 >> 6]);\n            stringbuffer.append(ac[k2 & 0x3f]);\n        }\n        if (k != 0) {\n            int l1 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[l1 >> 2]);\n            if (k == 1) {\n                stringbuffer.append(ac[l1 << 4 & 0x3f]);\n                stringbuffer.append(\"==\");\n            } else {\n                int j2 = bb[i1++] & 0xff;\n                stringbuffer.append(ac[l1 << 4 & 0x3f | j2 >> 4]);\n                stringbuffer.append(ac[j2 << 2 & 0x3f]);\n                stringbuffer.append('=');\n            }\n        }\n        return stringbuffer.toString();\n    }\n\n    public static String byteArrayToBase64(byte[] bb) {\n        return _$23170(bb, false);\n    }\n\n    public static void main(String[] args) {\n        String s = \"0123456789\";\n        byte[] b = s.getBytes();\n        s = byteArrayToBase64(b);\n        System.out.println(s);\n        b = base64ToByteArray(s);\n        System.out.println(new String(b));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/crypt/Base64Test1.java",
		"test_prompt": "// Base64Test1.java\npackage com.hf.sfm.crypt;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64}.\n* It contains ten unit test cases for the {@link Base64#base64ToByteArray(String)} method.\n*/\nclass Base64Test1 {"
	},
	{
		"original_code": "// Base64.java\npackage com.hf.sfm.crypt;\n\npublic class Base64 {\n\n    private static final byte[] _$23169 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, 62, 9, 10, 11, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 13, 14, -1, 15, 63, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 18, 19, 21, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 22, 23, 24, 25 };\n\n    private static final byte[] _$23168 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n\n    private static final char[] _$23167 = { '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', ',', '-', '.', ':', ';', '<', '>', '@', '[', ']', '^', '`', '_', '{', '|', '}', '~', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '?' };\n\n    private static final char[] _$23166 = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };\n\n    public Base64() {\n    }\n\n    public static byte[] altBase64ToByteArray(String s) {\n        return _$23180(s, true);\n    }\n\n    private static byte[] _$23180(String s, boolean flag) {\n        byte[] bb = flag ? _$23169 : _$23168;\n        int i = s.length();\n        int j = i / 4;\n        if (4 * j != i)\n            throw new IllegalArgumentException(\"String length must be a multiple of four.\");\n        int k = 0;\n        int l = j;\n        if (i != 0) {\n            if (s.charAt(i - 1) == '=') {\n                k++;\n                l--;\n            }\n            if (s.charAt(i - 2) == '=')\n                k++;\n        }\n        byte[] bc = new byte[3 * j - k];\n        int i1 = 0;\n        int j1 = 0;\n        for (int k1 = 0; k1 < l; k1++) {\n            int l1 = _$23183(s.charAt(i1++), bb);\n            int j2 = _$23183(s.charAt(i1++), bb);\n            int l2 = _$23183(s.charAt(i1++), bb);\n            int j3 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (l1 << 2 | j2 >> 4);\n            bc[j1++] = (byte) (j2 << 4 | l2 >> 2);\n            bc[j1++] = (byte) (l2 << 6 | j3);\n        }\n        if (k != 0) {\n            int i2 = _$23183(s.charAt(i1++), bb);\n            int k2 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (i2 << 2 | k2 >> 4);\n            if (k == 1) {\n                int i3 = _$23183(s.charAt(i1++), bb);\n                bc[j1++] = (byte) (k2 << 4 | i3 >> 2);\n            }\n        }\n        return bc;\n    }\n\n    public static byte[] base64ToByteArray(String s) {\n        return _$23180(s, false);\n    }\n\n    private static int _$23183(char c, byte[] bb) {\n        byte b = bb[c];\n        if (b < 0)\n            throw new IllegalArgumentException(\"Illegal character \" + c);\n        else\n            return b;\n    }\n\n    public static String byteArrayToAltBase64(byte[] bb) {\n        return _$23170(bb, true);\n    }\n\n    private static String _$23170(byte[] bb, boolean flag) {\n        int i = bb.length;\n        int j = i / 3;\n        int k = i - 3 * j;\n        int l = 4 * ((i + 2) / 3);\n        StringBuffer stringbuffer = new StringBuffer(l);\n        char[] ac = flag ? _$23167 : _$23166;\n        int i1 = 0;\n        for (int j1 = 0; j1 < j; j1++) {\n            int k1 = bb[i1++] & 0xff;\n            int i2 = bb[i1++] & 0xff;\n            int k2 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[k1 >> 2]);\n            stringbuffer.append(ac[k1 << 4 & 0x3f | i2 >> 4]);\n            stringbuffer.append(ac[i2 << 2 & 0x3f | k2 >> 6]);\n            stringbuffer.append(ac[k2 & 0x3f]);\n        }\n        if (k != 0) {\n            int l1 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[l1 >> 2]);\n            if (k == 1) {\n                stringbuffer.append(ac[l1 << 4 & 0x3f]);\n                stringbuffer.append(\"==\");\n            } else {\n                int j2 = bb[i1++] & 0xff;\n                stringbuffer.append(ac[l1 << 4 & 0x3f | j2 >> 4]);\n                stringbuffer.append(ac[j2 << 2 & 0x3f]);\n                stringbuffer.append('=');\n            }\n        }\n        return stringbuffer.toString();\n    }\n\n    public static String byteArrayToBase64(byte[] bb) {\n        return _$23170(bb, false);\n    }\n\n    public static void main(String[] args) {\n        String s = \"0123456789\";\n        byte[] b = s.getBytes();\n        s = byteArrayToBase64(b);\n        System.out.println(s);\n        b = base64ToByteArray(s);\n        System.out.println(new String(b));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/crypt/Base64Test2.java",
		"test_prompt": "// Base64Test2.java\npackage com.hf.sfm.crypt;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64}.\n* It contains ten unit test cases for the {@link Base64#byteArrayToAltBase64(byte[])} method.\n*/\nclass Base64Test2 {"
	},
	{
		"original_code": "// Base64.java\npackage com.hf.sfm.crypt;\n\npublic class Base64 {\n\n    private static final byte[] _$23169 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, -1, 62, 9, 10, 11, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 12, 13, 14, -1, 15, 63, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, 18, 19, 21, 20, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 22, 23, 24, 25 };\n\n    private static final byte[] _$23168 = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n\n    private static final char[] _$23167 = { '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', ',', '-', '.', ':', ';', '<', '>', '@', '[', ']', '^', '`', '_', '{', '|', '}', '~', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '?' };\n\n    private static final char[] _$23166 = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };\n\n    public Base64() {\n    }\n\n    public static byte[] altBase64ToByteArray(String s) {\n        return _$23180(s, true);\n    }\n\n    private static byte[] _$23180(String s, boolean flag) {\n        byte[] bb = flag ? _$23169 : _$23168;\n        int i = s.length();\n        int j = i / 4;\n        if (4 * j != i)\n            throw new IllegalArgumentException(\"String length must be a multiple of four.\");\n        int k = 0;\n        int l = j;\n        if (i != 0) {\n            if (s.charAt(i - 1) == '=') {\n                k++;\n                l--;\n            }\n            if (s.charAt(i - 2) == '=')\n                k++;\n        }\n        byte[] bc = new byte[3 * j - k];\n        int i1 = 0;\n        int j1 = 0;\n        for (int k1 = 0; k1 < l; k1++) {\n            int l1 = _$23183(s.charAt(i1++), bb);\n            int j2 = _$23183(s.charAt(i1++), bb);\n            int l2 = _$23183(s.charAt(i1++), bb);\n            int j3 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (l1 << 2 | j2 >> 4);\n            bc[j1++] = (byte) (j2 << 4 | l2 >> 2);\n            bc[j1++] = (byte) (l2 << 6 | j3);\n        }\n        if (k != 0) {\n            int i2 = _$23183(s.charAt(i1++), bb);\n            int k2 = _$23183(s.charAt(i1++), bb);\n            bc[j1++] = (byte) (i2 << 2 | k2 >> 4);\n            if (k == 1) {\n                int i3 = _$23183(s.charAt(i1++), bb);\n                bc[j1++] = (byte) (k2 << 4 | i3 >> 2);\n            }\n        }\n        return bc;\n    }\n\n    public static byte[] base64ToByteArray(String s) {\n        return _$23180(s, false);\n    }\n\n    private static int _$23183(char c, byte[] bb) {\n        byte b = bb[c];\n        if (b < 0)\n            throw new IllegalArgumentException(\"Illegal character \" + c);\n        else\n            return b;\n    }\n\n    public static String byteArrayToAltBase64(byte[] bb) {\n        return _$23170(bb, true);\n    }\n\n    private static String _$23170(byte[] bb, boolean flag) {\n        int i = bb.length;\n        int j = i / 3;\n        int k = i - 3 * j;\n        int l = 4 * ((i + 2) / 3);\n        StringBuffer stringbuffer = new StringBuffer(l);\n        char[] ac = flag ? _$23167 : _$23166;\n        int i1 = 0;\n        for (int j1 = 0; j1 < j; j1++) {\n            int k1 = bb[i1++] & 0xff;\n            int i2 = bb[i1++] & 0xff;\n            int k2 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[k1 >> 2]);\n            stringbuffer.append(ac[k1 << 4 & 0x3f | i2 >> 4]);\n            stringbuffer.append(ac[i2 << 2 & 0x3f | k2 >> 6]);\n            stringbuffer.append(ac[k2 & 0x3f]);\n        }\n        if (k != 0) {\n            int l1 = bb[i1++] & 0xff;\n            stringbuffer.append(ac[l1 >> 2]);\n            if (k == 1) {\n                stringbuffer.append(ac[l1 << 4 & 0x3f]);\n                stringbuffer.append(\"==\");\n            } else {\n                int j2 = bb[i1++] & 0xff;\n                stringbuffer.append(ac[l1 << 4 & 0x3f | j2 >> 4]);\n                stringbuffer.append(ac[j2 << 2 & 0x3f]);\n                stringbuffer.append('=');\n            }\n        }\n        return stringbuffer.toString();\n    }\n\n    public static String byteArrayToBase64(byte[] bb) {\n        return _$23170(bb, false);\n    }\n\n    public static void main(String[] args) {\n        String s = \"0123456789\";\n        byte[] b = s.getBytes();\n        s = byteArrayToBase64(b);\n        System.out.println(s);\n        b = base64ToByteArray(s);\n        System.out.println(new String(b));\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/crypt/Base64Test3.java",
		"test_prompt": "// Base64Test3.java\npackage com.hf.sfm.crypt;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64}.\n* It contains ten unit test cases for the {@link Base64#byteArrayToBase64(byte[])} method.\n*/\nclass Base64Test3 {"
	},
	{
		"original_code": "// MenuManage.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.system.pdo.Menu;\nimport com.hf.sfm.util.DaoFactory;\n\npublic class MenuManage extends DaoFactory {\n\n    public String saveOrUpdate(Menu menu) {\n        System.out.println(\"******:idno:\" + menu.getIdno() + \",\\nname:\" + menu.getName() + \",\\nimg:\" + menu.getImg() + \",\\nstatus:\" + menu.getStatus());\n        String rtn = \"0\";\n        Transaction tran = null;\n        try {\n            this.currentSession();\n            tran = this.session.beginTransaction();\n            if (menu.getIdno() == null || menu.getIdno().equals(\"\")) {\n                this.session.save(menu);\n            } else {\n                this.session.update(menu);\n            }\n            tran.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            tran.rollback();\n            System.out.println(\"操作失败！\");\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    public String del(String[] idnos) {\n        String rtn = \"0\";\n        Transaction tran = null;\n        String delsql = \"delete from Menu where idno=?\";\n        try {\n            this.currentSession();\n            tran = this.session.beginTransaction();\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(delsql).setString(0, idnos[i]).executeUpdate();\n            }\n            tran.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            tran.rollback();\n            System.out.println(\"删除失败！\");\n            e.printStackTrace();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/MenuManageTest0.java",
		"test_prompt": "// MenuManageTest0.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.system.pdo.Menu;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MenuManage}.\n* It contains ten unit test cases for the {@link MenuManage#saveOrUpdate(Menu)} method.\n*/\nclass MenuManageTest0 {"
	},
	{
		"original_code": "// MenuManage.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.system.pdo.Menu;\nimport com.hf.sfm.util.DaoFactory;\n\npublic class MenuManage extends DaoFactory {\n\n    public String saveOrUpdate(Menu menu) {\n        System.out.println(\"******:idno:\" + menu.getIdno() + \",\\nname:\" + menu.getName() + \",\\nimg:\" + menu.getImg() + \",\\nstatus:\" + menu.getStatus());\n        String rtn = \"0\";\n        Transaction tran = null;\n        try {\n            this.currentSession();\n            tran = this.session.beginTransaction();\n            if (menu.getIdno() == null || menu.getIdno().equals(\"\")) {\n                this.session.save(menu);\n            } else {\n                this.session.update(menu);\n            }\n            tran.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            tran.rollback();\n            System.out.println(\"操作失败！\");\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    public String del(String[] idnos) {\n        String rtn = \"0\";\n        Transaction tran = null;\n        String delsql = \"delete from Menu where idno=?\";\n        try {\n            this.currentSession();\n            tran = this.session.beginTransaction();\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(delsql).setString(0, idnos[i]).executeUpdate();\n            }\n            tran.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            // TODO Auto-generated catch block\n            tran.rollback();\n            System.out.println(\"删除失败！\");\n            e.printStackTrace();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/MenuManageTest1.java",
		"test_prompt": "// MenuManageTest1.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.system.pdo.Menu;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MenuManage}.\n* It contains ten unit test cases for the {@link MenuManage#del(String[])} method.\n*/\nclass MenuManageTest1 {"
	},
	{
		"original_code": "// WorkerMgr.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;\nimport com.hf.sfm.system.pdo.AWorker;\nimport com.hf.sfm.util.DaoFactory;\n\n/**\n * @author 忧里修斯\n * 用户登录信息管理\n */\npublic class WorkerMgr extends DaoFactory {\n\n    /**\n     * 增加或更新用户登录信息\n     * @param pInfo\n     */\n    public String saveOrUpdate(AWorker worker) {\n        //密码加密\n        worker.setPassword(encrypt(worker.getPassword()));\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            if (worker.getIdno() == null || worker.getIdno().equalsIgnoreCase(\"\")) {\n                //新增\n                this.save(worker);\n            } else {\n                //更新\n                this.update(worker);\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    /**\n     * 删除用户登录的信息\n     * @param idnos\n     */\n    public String deleteByIds(String[] idnos) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            String hql = \"delete from AWorker where idno=?\";\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/WorkerMgrTest0.java",
		"test_prompt": "// WorkerMgrTest0.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;\nimport com.hf.sfm.system.pdo.AWorker;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkerMgr}.\n* It contains ten unit test cases for the {@link WorkerMgr#saveOrUpdate(AWorker)} method.\n*/\nclass WorkerMgrTest0 {"
	},
	{
		"original_code": "// WorkerMgr.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;\nimport com.hf.sfm.system.pdo.AWorker;\nimport com.hf.sfm.util.DaoFactory;\n\n/**\n * @author 忧里修斯\n * 用户登录信息管理\n */\npublic class WorkerMgr extends DaoFactory {\n\n    /**\n     * 增加或更新用户登录信息\n     * @param pInfo\n     */\n    public String saveOrUpdate(AWorker worker) {\n        //密码加密\n        worker.setPassword(encrypt(worker.getPassword()));\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            if (worker.getIdno() == null || worker.getIdno().equalsIgnoreCase(\"\")) {\n                //新增\n                this.save(worker);\n            } else {\n                //更新\n                this.update(worker);\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    /**\n     * 删除用户登录的信息\n     * @param idnos\n     */\n    public String deleteByIds(String[] idnos) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            String hql = \"delete from AWorker where idno=?\";\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/WorkerMgrTest1.java",
		"test_prompt": "// WorkerMgrTest1.java\npackage com.hf.sfm.system.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;\nimport com.hf.sfm.system.pdo.AWorker;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WorkerMgr}.\n* It contains ten unit test cases for the {@link WorkerMgr#deleteByIds(String[])} method.\n*/\nclass WorkerMgrTest1 {"
	},
	{
		"original_code": "// PersonInfoMgr.java\npackage com.hf.sfm.sfmis.personinfo.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;\nimport com.hf.sfm.util.DaoFactory;\n\n/**\n * @author 忧里修斯\n * 用户信息的管理\n */\npublic class PersonInfoMgr extends DaoFactory {\n\n    /**\n     * 增加或更新用户的信息\n     * @param pInfo\n     */\n    public String saveOrUpdate(APersonInfo pInfo) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            if (pInfo.getPersonid() == null || pInfo.getPersonid().equalsIgnoreCase(\"\")) {\n                //新增\n                this.save(pInfo);\n            } else {\n                this.update(pInfo);\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    /**\n     * 删除用户的信息\n     * @param pInfo\n     */\n    public String deleteByIds(String[] idnos) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            String hql = \"delete from APersonInfo where personid=?\";\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/sfmis/personinfo/business/PersonInfoMgrTest0.java",
		"test_prompt": "// PersonInfoMgrTest0.java\npackage com.hf.sfm.sfmis.personinfo.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PersonInfoMgr}.\n* It contains ten unit test cases for the {@link PersonInfoMgr#saveOrUpdate(APersonInfo)} method.\n*/\nclass PersonInfoMgrTest0 {"
	},
	{
		"original_code": "// PersonInfoMgr.java\npackage com.hf.sfm.sfmis.personinfo.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;\nimport com.hf.sfm.util.DaoFactory;\n\n/**\n * @author 忧里修斯\n * 用户信息的管理\n */\npublic class PersonInfoMgr extends DaoFactory {\n\n    /**\n     * 增加或更新用户的信息\n     * @param pInfo\n     */\n    public String saveOrUpdate(APersonInfo pInfo) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            if (pInfo.getPersonid() == null || pInfo.getPersonid().equalsIgnoreCase(\"\")) {\n                //新增\n                this.save(pInfo);\n            } else {\n                this.update(pInfo);\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n\n    /**\n     * 删除用户的信息\n     * @param pInfo\n     */\n    public String deleteByIds(String[] idnos) {\n        //0为执行失败，1为执行成功\n        String rtn = \"0\";\n        Transaction tx = null;\n        try {\n            this.currentSession();\n            tx = this.session.beginTransaction();\n            String hql = \"delete from APersonInfo where personid=?\";\n            for (int i = 0; i < idnos.length; i++) {\n                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();\n            }\n            tx.commit();\n            rtn = \"1\";\n        } catch (Exception e) {\n            tx.rollback();\n            e.printStackTrace();\n        } finally {\n            this.closeSession();\n        }\n        return rtn;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/sfmis/personinfo/business/PersonInfoMgrTest1.java",
		"test_prompt": "// PersonInfoMgrTest1.java\npackage com.hf.sfm.sfmis.personinfo.business;\n\nimport org.hibernate.Transaction;\nimport com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;\nimport com.hf.sfm.util.DaoFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PersonInfoMgr}.\n* It contains ten unit test cases for the {@link PersonInfoMgr#deleteByIds(String[])} method.\n*/\nclass PersonInfoMgrTest1 {"
	}
]