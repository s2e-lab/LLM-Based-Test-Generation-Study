[
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest0.java",
		"test_prompt": "// GeomConverterTest0.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertPoint(Coordinate[])} method.\n*/\nclass GeomConverterTest0 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest1.java",
		"test_prompt": "// GeomConverterTest1.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertLine(Coordinate[])} method.\n*/\nclass GeomConverterTest1 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest2.java",
		"test_prompt": "// GeomConverterTest2.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertPolygon(Coordinate[])} method.\n*/\nclass GeomConverterTest2 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest3.java",
		"test_prompt": "// GeomConverterTest3.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertPolygonWithAltitude(Coordinate[], double)} method.\n*/\nclass GeomConverterTest3 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest4.java",
		"test_prompt": "// GeomConverterTest4.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertLineWithAltitude(Coordinate[], double)} method.\n*/\nclass GeomConverterTest4 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest5.java",
		"test_prompt": "// GeomConverterTest5.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#convertPointWithAltitude(Coordinate[], double)} method.\n*/\nclass GeomConverterTest5 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest6.java",
		"test_prompt": "// GeomConverterTest6.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#getLinearRingKML(Coordinate[])} method.\n*/\nclass GeomConverterTest6 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest7.java",
		"test_prompt": "// GeomConverterTest7.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#getCoordinatesKML(Coordinate[])} method.\n*/\nclass GeomConverterTest7 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest8.java",
		"test_prompt": "// GeomConverterTest8.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#getPlacemarkKML(Geometry, String, String, double)} method.\n*/\nclass GeomConverterTest8 {"
	},
	{
		"original_code": "// GeomConverter.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class GeomConverter {\n\n    public static String convertPoint(Coordinate[] coords) {\n        return GeomConverter.convertPointWithAltitude(coords, 0);\n    }\n\n    public static String convertLine(Coordinate[] coords) {\n        return GeomConverter.convertLineWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygon(Coordinate[] coords) {\n        return GeomConverter.convertPolygonWithAltitude(coords, 0);\n    }\n\n    public static String convertPolygonWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Polygon><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        ArrayList coordsTemp = new ArrayList();\n        int indexOfFirst = 0;\n        int currentIndex = 0;\n        while (currentIndex < coords.length) {\n            coordsTemp.add(coords[currentIndex]);\n            if (indexOfFirst != currentIndex && Math.abs(indexOfFirst - currentIndex) > 2 && coords[currentIndex].equals(coords[indexOfFirst])) {\n                str += GeomConverter.getLinearRingKML((Coordinate[]) coordsTemp.toArray(new Coordinate[0]));\n                coordsTemp.clear();\n                indexOfFirst = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n        str += \"</Polygon>\";\n        return str;\n    }\n\n    public static String convertLineWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<LineString><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</LineString>\";\n        return str;\n    }\n\n    public static String convertPointWithAltitude(Coordinate[] coords, double altitude) {\n        String str = \"<Point><extrude>\" + altitude + \"</extrude><altitudeMode>relativeToGround</altitudeMode>\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str += \"</Point>\";\n        return str;\n    }\n\n    public static String getLinearRingKML(Coordinate[] coords) {\n        String str = \"\";\n        str += GeomConverter.getCoordinatesKML(coords);\n        str = \"<LinearRing>\" + str + \"</LinearRing>\";\n        // TODO make sure this isn't inverted\n        if (!CGAlgorithms.isCCW(coords)) {\n            str = \"<outerBoundaryIs>\" + str + \"</outerBoundaryIs>\";\n        } else {\n            str = \"<innerBoundaryIs>\" + str + \"</innerBoundaryIs>\";\n        }\n        return str;\n    }\n\n    public static String getCoordinatesKML(Coordinate[] coords) {\n        String str = \"<coordinates>\";\n        for (int i = 0; i < coords.length; i++) {\n            str += coords[i].x + \",\" + coords[i].y + \",0 \";\n        }\n        str += \"</coordinates>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom, String name, String description, double altitude) {\n        Coordinate[] coords = geom.getCoordinates();\n        String str = \"<Placemark><description><![CDATA[\" + description + \"]]></description><name>\" + name + \"</name>\";\n        switch(geom.getDimension()) {\n            case 0:\n                // handle a point geometry\n                str += GeomConverter.convertPointWithAltitude(coords, altitude);\n                break;\n            case 1:\n                // handle a line geometry\n                str += GeomConverter.convertLineWithAltitude(coords, altitude);\n                break;\n            case 2:\n                // handle a polygon geometry\n                str += GeomConverter.convertPolygonWithAltitude(coords, altitude);\n                break;\n        }\n        str += \"</Placemark>\";\n        return str;\n    }\n\n    public static String getPlacemarkKML(Geometry geom) {\n        return GeomConverter.getPlacemarkKML(geom, \"\", \"\", 0);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/GeomConverterTest9.java",
		"test_prompt": "// GeomConverterTest9.java\npackage net.sourceforge.shp2kml;\n\nimport java.util.ArrayList;\nimport com.vividsolutions.jts.algorithm.*;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GeomConverter}.\n* It contains ten unit test cases for the {@link GeomConverter#getPlacemarkKML(Geometry)} method.\n*/\nclass GeomConverterTest9 {"
	},
	{
		"original_code": "// Converter.java\npackage net.sourceforge.shp2kml;\n\nimport java.net.URL;\nimport org.geotools.data.shapefile.ShapefileDataStore;\nimport org.geotools.feature.Feature;\nimport org.geotools.feature.FeatureCollection;\nimport org.geotools.feature.FeatureIterator;\nimport com.vividsolutions.jts.geom.Geometry;\n\npublic class Converter {\n\n    public static void main(String[] args) {\n        /*\n\t\t * for testing purposes, swap out the \"default args\" with \"args2\"\n\t\t */\n        //String[] args2 = new String[1];\n        //args2[0] = \"file:///Users/atheken/Documents/test_data/MA_Data/sn25_d00_Project.shp\";\n        //args = args2;\n        switch(args.length) {\n            case 0:\n                Thread trd = new Thread(new Shp2KMLGUI());\n                trd.start();\n                break;\n            default:\n                System.out.println(\"Usage: java -jar ./shp2kml.jar shapefile_name.shp\");\n                Converter.convertShp(args[0]);\n                break;\n        }\n    }\n\n    public static boolean convertShp(String shpUrl) {\n        boolean retval = false;\n        try {\n            URL u = new URL(shpUrl);\n            ShapefileDataStore sfds = new ShapefileDataStore(u);\n            long start = System.currentTimeMillis();\n            FeatureCollection fc = sfds.getFeatureSource().getFeatures();\n            FeatureIterator fi = fc.features();\n            Feature currFeature;\n            Geometry currGeometry;\n            int readcount = 0;\n            KMLObject outObject = new KMLObject(u.getFile() + \".kml\");\n            outObject.StartWrite();\n            while (fi.hasNext()) {\n                readcount++;\n                currFeature = fi.next();\n                int featCount = currFeature.getNumberOfAttributes();\n                for (int i = 0; i < featCount; i++) {\n                    System.out.print(currFeature.getAttribute(i));\n                }\n                System.out.println(currFeature.getAttribute(1));\n                currGeometry = currFeature.getDefaultGeometry();\n                outObject.addPlacemark(GeomConverter.getPlacemarkKML(currGeometry));\n            }\n            outObject.FinishWrite();\n            System.out.println(\"Read \" + readcount + \" geometries in \" + ((double) (System.currentTimeMillis() - start) / 1000) + \" seconds.\");\n            fi.close();\n            retval = true;\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            retval = false;\n        }\n        return retval;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/ConverterTest.java",
		"test_prompt": "// ConverterTest.java\npackage net.sourceforge.shp2kml;\n\nimport java.net.URL;\nimport org.geotools.data.shapefile.ShapefileDataStore;\nimport org.geotools.feature.Feature;\nimport org.geotools.feature.FeatureCollection;\nimport org.geotools.feature.FeatureIterator;\nimport com.vividsolutions.jts.geom.Geometry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Converter}.\n* It contains ten unit test cases for the {@link Converter#convertShp(String)} method.\n*/\nclass ConverterTest {"
	},
	{
		"original_code": "// KMLObject.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic class KMLObject {\n\n    private String placemarks = \"\";\n\n    private String KML = \"\";\n\n    private FileWriter fwr;\n\n    public KMLObject(String file_path) {\n        this.KML = file_path;\n    }\n\n    public boolean StartWrite() {\n        boolean retval = false;\n        try {\n            this.fwr = new FileWriter(this.KML);\n            this.fwr.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><kml xmlns=\\\"http://earth.google.com/kml/2.0\\\"><Document>\\n\");\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to create KML file\");\n        }\n        return retval;\n    }\n\n    public boolean FinishWrite() {\n        boolean retval = false;\n        try {\n            this.fwr.write(\"\\n</Document></kml>\");\n            this.fwr.close();\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write the KML footer.\");\n        }\n        return retval;\n    }\n\n    public boolean addPlacemark(String place) {\n        boolean retval = false;\n        try {\n            this.fwr.write('\\n');\n            this.fwr.write(place);\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write placemark\");\n        }\n        return retval;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/KMLObjectTest0.java",
		"test_prompt": "// KMLObjectTest0.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KMLObject}.\n* It contains ten unit test cases for the {@link KMLObject#StartWrite()} method.\n*/\nclass KMLObjectTest0 {"
	},
	{
		"original_code": "// KMLObject.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic class KMLObject {\n\n    private String placemarks = \"\";\n\n    private String KML = \"\";\n\n    private FileWriter fwr;\n\n    public KMLObject(String file_path) {\n        this.KML = file_path;\n    }\n\n    public boolean StartWrite() {\n        boolean retval = false;\n        try {\n            this.fwr = new FileWriter(this.KML);\n            this.fwr.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><kml xmlns=\\\"http://earth.google.com/kml/2.0\\\"><Document>\\n\");\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to create KML file\");\n        }\n        return retval;\n    }\n\n    public boolean FinishWrite() {\n        boolean retval = false;\n        try {\n            this.fwr.write(\"\\n</Document></kml>\");\n            this.fwr.close();\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write the KML footer.\");\n        }\n        return retval;\n    }\n\n    public boolean addPlacemark(String place) {\n        boolean retval = false;\n        try {\n            this.fwr.write('\\n');\n            this.fwr.write(place);\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write placemark\");\n        }\n        return retval;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/KMLObjectTest1.java",
		"test_prompt": "// KMLObjectTest1.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KMLObject}.\n* It contains ten unit test cases for the {@link KMLObject#FinishWrite()} method.\n*/\nclass KMLObjectTest1 {"
	},
	{
		"original_code": "// KMLObject.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic class KMLObject {\n\n    private String placemarks = \"\";\n\n    private String KML = \"\";\n\n    private FileWriter fwr;\n\n    public KMLObject(String file_path) {\n        this.KML = file_path;\n    }\n\n    public boolean StartWrite() {\n        boolean retval = false;\n        try {\n            this.fwr = new FileWriter(this.KML);\n            this.fwr.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><kml xmlns=\\\"http://earth.google.com/kml/2.0\\\"><Document>\\n\");\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to create KML file\");\n        }\n        return retval;\n    }\n\n    public boolean FinishWrite() {\n        boolean retval = false;\n        try {\n            this.fwr.write(\"\\n</Document></kml>\");\n            this.fwr.close();\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write the KML footer.\");\n        }\n        return retval;\n    }\n\n    public boolean addPlacemark(String place) {\n        boolean retval = false;\n        try {\n            this.fwr.write('\\n');\n            this.fwr.write(place);\n            retval = true;\n        } catch (Exception ex) {\n            System.err.print(\"Unable to write placemark\");\n        }\n        return retval;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/53_shp2kml/src/main/java/net/sourceforge/shp2kml/KMLObjectTest2.java",
		"test_prompt": "// KMLObjectTest2.java\npackage net.sourceforge.shp2kml;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.StringWriter;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link KMLObject}.\n* It contains ten unit test cases for the {@link KMLObject#addPlacemark(String)} method.\n*/\nclass KMLObjectTest2 {"
	}
]