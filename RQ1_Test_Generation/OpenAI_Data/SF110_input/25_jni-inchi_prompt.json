[
	{
		"original_code": "// JniInchiStereo0D.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\n/**\r\n * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiStereo0D {\r\n\r\n    /**\r\n     * Indicates non-existent (central) atom. Value from inchi_api.h.\r\n     */\r\n    public static final int NO_ATOM = -1;\r\n\r\n    /**\r\n     * Neighbouring atoms.\r\n     */\r\n    private JniInchiAtom[] neighbors = new JniInchiAtom[4];\r\n\r\n    /**\r\n     * Central atom.\r\n     */\r\n    private JniInchiAtom centralAtom;\r\n\r\n    /**\r\n     * Stereo parity type.\r\n     */\r\n    private INCHI_STEREOTYPE type;\r\n\r\n    /**\r\n     * Parity.\r\n     */\r\n    private INCHI_PARITY parity;\r\n\r\n    /**\r\n     * Second parity (for disconnected systems).\r\n     */\r\n    private INCHI_PARITY disconParity = INCHI_PARITY.NONE;\r\n\r\n    /**\r\n     * Constructor.  See <tt>inchi_api.h</tt> for details of usage.\r\n     *\r\n     * @see createNewTetrahedralStereo0D()\r\n     * @see createNewDoublebondStereo0D()\r\n     *\r\n     * @param atC    Central atom\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param type          Stereo parity type\r\n     * @param parity    Parity\r\n     */\r\n    public JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_STEREOTYPE type, final INCHI_PARITY parity) {\r\n        centralAtom = atC;\r\n        neighbors[0] = at0;\r\n        neighbors[1] = at1;\r\n        neighbors[2] = at2;\r\n        neighbors[3] = at3;\r\n        this.type = type;\r\n        this.parity = parity;\r\n    }\r\n\r\n    JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final int type, final int parity) {\r\n        this(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.getValue(type), INCHI_PARITY.getValue(parity));\r\n    }\r\n\r\n    /**\r\n     * Set second parity (for disconnected systems)\r\n     * @param parity\r\n     */\r\n    public void setDisconnectedParity(final INCHI_PARITY parity) {\r\n        this.disconParity = parity;\r\n    }\r\n\r\n    /**\r\n     * Returns central atom of stereo parity.\r\n     * @return\r\n     */\r\n    public JniInchiAtom getCentralAtom() {\r\n        return centralAtom;\r\n    }\r\n\r\n    /**\r\n     * Returns neighboring atoms of stereo parity.\r\n     * @return\r\n     */\r\n    public JniInchiAtom[] getNeighbors() {\r\n        return neighbors;\r\n    }\r\n\r\n    public JniInchiAtom getNeighbor(int i) {\r\n        return neighbors[i];\r\n    }\r\n\r\n    /**\r\n     * Returns parity.\r\n     * @return\r\n     */\r\n    public INCHI_PARITY getParity() {\r\n        return parity;\r\n    }\r\n\r\n    /**\r\n     * Returns disconnected parity.\r\n     * @return\r\n     */\r\n    public INCHI_PARITY getDisconnectedParity() {\r\n        return disconParity;\r\n    }\r\n\r\n    /**\r\n     * Returns type of stereochemistry.\r\n     * @return\r\n     */\r\n    public INCHI_STEREOTYPE getStereoType() {\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Generates string representation of information on stereo parity,\r\n     * for debugging purposes.\r\n     */\r\n    public String getDebugString() {\r\n        return (\"InChI Stereo0D: \" + (centralAtom == null ? \"-\" : centralAtom.getElementType()) + \" [\" + neighbors[0].getElementType() + \",\" + neighbors[1].getElementType() + \",\" + neighbors[2].getElementType() + \",\" + neighbors[3].getElementType() + \"] \" + \"Type::\" + type + \" // \" + \"Parity:\" + parity);\r\n    }\r\n\r\n    /**\r\n     * Outputs information on stereo parity, for debugging purposes.\r\n     */\r\n    public void debug() {\r\n        System.out.println(getDebugString());\r\n    }\r\n\r\n    /**\r\n     * <p>Convenience method for generating 0D stereo parities at tetrahedral\r\n     * atom centres.\r\n     *\r\n     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>\r\n     * <pre>\r\n     *  4 neighbors\r\n     *\r\n     *           X                    neighbor[4] : {#W, #X, #Y, #Z}\r\n     *           |                    central_atom: #A\r\n     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral\r\n     *           |\r\n     *           Z\r\n     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is 'e' otherwise 'o'\r\n     *  Example (see AXYZW above): if W is above the plane XYZ then parity = 'e'\r\n     *\r\n     *  3 neighbors\r\n     *\r\n     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}\r\n     *            /          /        central_atom: #A\r\n     *        X--A  (e.g. O=S   )     type        : INCHI_StereoType_Tetrahedral\r\n     *            \\          \\\r\n     *             Z          Z\r\n     *\r\n     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is 'e',\r\n     *                                                         otherwise 'o'\r\n     *  unknown parity = 'u'\r\n     *  Example (see AXYZ above): if A is above the plane XYZ then parity = 'e'\r\n     *  This approach may be used also in case of an implicit H attached to A.\r\n     *\r\n     *  ==============================================\r\n     *  Note. Correspondence to CML 0D stereo parities\r\n     *  ==============================================\r\n     *  a list of 4 atoms corresponds to CML atomRefs4\r\n     *\r\n     *  tetrahedral atom\r\n     *  ================\r\n     *  CML atomParity > 0 <=> INCHI_PARITY_EVEN\r\n     *  CML atomParity < 0 <=> INCHI_PARITY_ODD\r\n     *\r\n     *                               | 1   1   1   1  |  where xW is x-coordinate of\r\n     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a\r\n     *  CML atomParity = determinant | yW  yX  yY  yZ |  'right-handed' Cartesian\r\n     *                               | zW  zX  xY  zZ |  coordinate system)\r\n     * </pre>\r\n     *\r\n     * @param atC    Central atom\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param parity Parity\r\n     */\r\n    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {\r\n        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);\r\n        return stereo;\r\n    }\r\n\r\n    /**\r\n     * <p>Convenience method for generating 0D stereo parities at stereogenic\r\n     * double bonds.\r\n     *\r\n     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>\r\n     * <pre>\r\n     *  =============================================\r\n     *  stereogenic bond >A=B< or cumulene >A=C=C=B<\r\n     *  =============================================\r\n     *\r\n     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order\r\n     *  X                           central_atom : NO_ATOM\r\n     *   \\            X      Y      type         : INCHI_StereoType_DoubleBond\r\n     *    A==B         \\    /\r\n     *        \\         A==B\r\n     *         Y\r\n     *\r\n     *  parity= 'e'    parity= 'o'   unknown parity = 'u'\r\n     *\r\n     *  ==============================================\r\n     *  Note. Correspondence to CML 0D stereo parities\r\n     *  ==============================================\r\n     *\r\n     *  stereogenic double bond and (not yet defined in CML) cumulenes\r\n     *  ==============================================================\r\n     *  CML 'C' (cis)      <=> INCHI_PARITY_ODD\r\n     *  CML 'T' (trans)    <=> INCHI_PARITY_EVEN\r\n     * </pre>\r\n     *\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param parity Parity\r\n     * @return\r\n     */\r\n    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {\r\n        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);\r\n        return stereo;\r\n    }\r\n\r\n    int getInchiStereoType() {\r\n        return type.getIndx();\r\n    }\r\n\r\n    int getInchiParity() {\r\n        return parity.getIndx();\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_0Test.java",
		"test_prompt": "// JniInchiStereo0D_0Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_0Test {"
	},
	{
		"original_code": "// JniInchiStereo0D.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\n/**\r\n * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiStereo0D {\r\n\r\n    /**\r\n     * Indicates non-existent (central) atom. Value from inchi_api.h.\r\n     */\r\n    public static final int NO_ATOM = -1;\r\n\r\n    /**\r\n     * Neighbouring atoms.\r\n     */\r\n    private JniInchiAtom[] neighbors = new JniInchiAtom[4];\r\n\r\n    /**\r\n     * Central atom.\r\n     */\r\n    private JniInchiAtom centralAtom;\r\n\r\n    /**\r\n     * Stereo parity type.\r\n     */\r\n    private INCHI_STEREOTYPE type;\r\n\r\n    /**\r\n     * Parity.\r\n     */\r\n    private INCHI_PARITY parity;\r\n\r\n    /**\r\n     * Second parity (for disconnected systems).\r\n     */\r\n    private INCHI_PARITY disconParity = INCHI_PARITY.NONE;\r\n\r\n    /**\r\n     * Constructor.  See <tt>inchi_api.h</tt> for details of usage.\r\n     *\r\n     * @see createNewTetrahedralStereo0D()\r\n     * @see createNewDoublebondStereo0D()\r\n     *\r\n     * @param atC    Central atom\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param type          Stereo parity type\r\n     * @param parity    Parity\r\n     */\r\n    public JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_STEREOTYPE type, final INCHI_PARITY parity) {\r\n        centralAtom = atC;\r\n        neighbors[0] = at0;\r\n        neighbors[1] = at1;\r\n        neighbors[2] = at2;\r\n        neighbors[3] = at3;\r\n        this.type = type;\r\n        this.parity = parity;\r\n    }\r\n\r\n    JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final int type, final int parity) {\r\n        this(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.getValue(type), INCHI_PARITY.getValue(parity));\r\n    }\r\n\r\n    /**\r\n     * Set second parity (for disconnected systems)\r\n     * @param parity\r\n     */\r\n    public void setDisconnectedParity(final INCHI_PARITY parity) {\r\n        this.disconParity = parity;\r\n    }\r\n\r\n    /**\r\n     * Returns central atom of stereo parity.\r\n     * @return\r\n     */\r\n    public JniInchiAtom getCentralAtom() {\r\n        return centralAtom;\r\n    }\r\n\r\n    /**\r\n     * Returns neighboring atoms of stereo parity.\r\n     * @return\r\n     */\r\n    public JniInchiAtom[] getNeighbors() {\r\n        return neighbors;\r\n    }\r\n\r\n    public JniInchiAtom getNeighbor(int i) {\r\n        return neighbors[i];\r\n    }\r\n\r\n    /**\r\n     * Returns parity.\r\n     * @return\r\n     */\r\n    public INCHI_PARITY getParity() {\r\n        return parity;\r\n    }\r\n\r\n    /**\r\n     * Returns disconnected parity.\r\n     * @return\r\n     */\r\n    public INCHI_PARITY getDisconnectedParity() {\r\n        return disconParity;\r\n    }\r\n\r\n    /**\r\n     * Returns type of stereochemistry.\r\n     * @return\r\n     */\r\n    public INCHI_STEREOTYPE getStereoType() {\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Generates string representation of information on stereo parity,\r\n     * for debugging purposes.\r\n     */\r\n    public String getDebugString() {\r\n        return (\"InChI Stereo0D: \" + (centralAtom == null ? \"-\" : centralAtom.getElementType()) + \" [\" + neighbors[0].getElementType() + \",\" + neighbors[1].getElementType() + \",\" + neighbors[2].getElementType() + \",\" + neighbors[3].getElementType() + \"] \" + \"Type::\" + type + \" // \" + \"Parity:\" + parity);\r\n    }\r\n\r\n    /**\r\n     * Outputs information on stereo parity, for debugging purposes.\r\n     */\r\n    public void debug() {\r\n        System.out.println(getDebugString());\r\n    }\r\n\r\n    /**\r\n     * <p>Convenience method for generating 0D stereo parities at tetrahedral\r\n     * atom centres.\r\n     *\r\n     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>\r\n     * <pre>\r\n     *  4 neighbors\r\n     *\r\n     *           X                    neighbor[4] : {#W, #X, #Y, #Z}\r\n     *           |                    central_atom: #A\r\n     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral\r\n     *           |\r\n     *           Z\r\n     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is 'e' otherwise 'o'\r\n     *  Example (see AXYZW above): if W is above the plane XYZ then parity = 'e'\r\n     *\r\n     *  3 neighbors\r\n     *\r\n     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}\r\n     *            /          /        central_atom: #A\r\n     *        X--A  (e.g. O=S   )     type        : INCHI_StereoType_Tetrahedral\r\n     *            \\          \\\r\n     *             Z          Z\r\n     *\r\n     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is 'e',\r\n     *                                                         otherwise 'o'\r\n     *  unknown parity = 'u'\r\n     *  Example (see AXYZ above): if A is above the plane XYZ then parity = 'e'\r\n     *  This approach may be used also in case of an implicit H attached to A.\r\n     *\r\n     *  ==============================================\r\n     *  Note. Correspondence to CML 0D stereo parities\r\n     *  ==============================================\r\n     *  a list of 4 atoms corresponds to CML atomRefs4\r\n     *\r\n     *  tetrahedral atom\r\n     *  ================\r\n     *  CML atomParity > 0 <=> INCHI_PARITY_EVEN\r\n     *  CML atomParity < 0 <=> INCHI_PARITY_ODD\r\n     *\r\n     *                               | 1   1   1   1  |  where xW is x-coordinate of\r\n     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a\r\n     *  CML atomParity = determinant | yW  yX  yY  yZ |  'right-handed' Cartesian\r\n     *                               | zW  zX  xY  zZ |  coordinate system)\r\n     * </pre>\r\n     *\r\n     * @param atC    Central atom\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param parity Parity\r\n     */\r\n    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {\r\n        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);\r\n        return stereo;\r\n    }\r\n\r\n    /**\r\n     * <p>Convenience method for generating 0D stereo parities at stereogenic\r\n     * double bonds.\r\n     *\r\n     * <p><b>Usage notes from <i>inchi_api.h</i>:</b>\r\n     * <pre>\r\n     *  =============================================\r\n     *  stereogenic bond >A=B< or cumulene >A=C=C=B<\r\n     *  =============================================\r\n     *\r\n     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order\r\n     *  X                           central_atom : NO_ATOM\r\n     *   \\            X      Y      type         : INCHI_StereoType_DoubleBond\r\n     *    A==B         \\    /\r\n     *        \\         A==B\r\n     *         Y\r\n     *\r\n     *  parity= 'e'    parity= 'o'   unknown parity = 'u'\r\n     *\r\n     *  ==============================================\r\n     *  Note. Correspondence to CML 0D stereo parities\r\n     *  ==============================================\r\n     *\r\n     *  stereogenic double bond and (not yet defined in CML) cumulenes\r\n     *  ==============================================================\r\n     *  CML 'C' (cis)      <=> INCHI_PARITY_ODD\r\n     *  CML 'T' (trans)    <=> INCHI_PARITY_EVEN\r\n     * </pre>\r\n     *\r\n     * @param at0    Neighbour atom 0\r\n     * @param at1    Neighbour atom 1\r\n     * @param at2    Neighbour atom 2\r\n     * @param at3    Neighbour atom 3\r\n     * @param parity Parity\r\n     * @return\r\n     */\r\n    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {\r\n        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);\r\n        return stereo;\r\n    }\r\n\r\n    int getInchiStereoType() {\r\n        return type.getIndx();\r\n    }\r\n\r\n    int getInchiParity() {\r\n        return parity.getIndx();\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_1Test.java",
		"test_prompt": "// JniInchiStereo0D_1Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_1Test {"
	},
	{
		"original_code": "// JniInchiStructure.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiStructure {\r\n\r\n    /**\r\n     * List of atoms.\r\n     */\r\n    private List atomList = new ArrayList();\r\n\r\n    /**\r\n     * List of bonds.\r\n     */\r\n    private List bondList = new ArrayList();\r\n\r\n    /**\r\n     * List of stero parities.\r\n     */\r\n    private List stereoList = new ArrayList();\r\n\r\n    /**\r\n     * Returns number of atoms in structure.\r\n     */\r\n    public int getNumAtoms() {\r\n        return atomList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of bonds in structure.\r\n     */\r\n    public int getNumBonds() {\r\n        return bondList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of stereo parities in strucuture.\r\n     */\r\n    public int getNumStereo0D() {\r\n        return stereoList.size();\r\n    }\r\n\r\n    /**\r\n     * Adds atom to inchi molecule.\r\n     *\r\n     * @param atom  Atom to add\r\n     * @return      Added atom\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiAtom addAtom(JniInchiAtom atom) {\r\n        atomList.add(atom);\r\n        return atom;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple atoms to molecule.\r\n     * @param atoms\r\n     */\r\n    public void addAtoms(JniInchiAtom... atoms) {\r\n        for (JniInchiAtom atom : atoms) {\r\n            addAtom(atom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds bond to inchi molecule.\r\n     *\r\n     * @param bond  Bond to add\r\n     * @return      Added bond\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiBond addBond(JniInchiBond bond) {\r\n        bondList.add(bond);\r\n        return bond;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple bonds to molecule.\r\n     * @param bonds\r\n     */\r\n    public void addBonds(JniInchiBond... bonds) {\r\n        for (JniInchiBond bond : bonds) {\r\n            addBond(bond);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds 0D stereo parity to inchi molecule.\r\n     *\r\n     * @param parity  Parity to add\r\n     * @return        Added parity\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {\r\n        stereoList.add(parity);\r\n        return parity;\r\n    }\r\n\r\n    /**\r\n     * Returns atom from structure.\r\n     * @param i    Index of atom to return.\r\n     * @return\r\n     */\r\n    public JniInchiAtom getAtom(final int i) {\r\n        return (JniInchiAtom) atomList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns bond from structure.\r\n     * @param i    Index of bond to return.\r\n     * @return\r\n     */\r\n    public JniInchiBond getBond(final int i) {\r\n        return (JniInchiBond) bondList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns stereo parity from structure.\r\n     * @param i    Index of stereo parity to return.\r\n     * @return\r\n     */\r\n    public JniInchiStereo0D getStereo0D(final int i) {\r\n        return (JniInchiStereo0D) stereoList.get(i);\r\n    }\r\n\r\n    public void setStructure(JniInchiStructure structure) {\r\n        this.atomList = structure.atomList;\r\n        this.bondList = structure.bondList;\r\n        this.stereoList = structure.stereoList;\r\n    }\r\n\r\n    int getAtomIndex(JniInchiAtom atom) {\r\n        return atomList.indexOf(atom);\r\n    }\r\n\r\n    int getStereo0DIndex(JniInchiStereo0D stereo) {\r\n        return stereoList.indexOf(stereo);\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_0Test.java",
		"test_prompt": "// JniInchiStructure_0Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.\n*/\nclass JniInchiStructure_0Test {"
	},
	{
		"original_code": "// JniInchiStructure.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiStructure {\r\n\r\n    /**\r\n     * List of atoms.\r\n     */\r\n    private List atomList = new ArrayList();\r\n\r\n    /**\r\n     * List of bonds.\r\n     */\r\n    private List bondList = new ArrayList();\r\n\r\n    /**\r\n     * List of stero parities.\r\n     */\r\n    private List stereoList = new ArrayList();\r\n\r\n    /**\r\n     * Returns number of atoms in structure.\r\n     */\r\n    public int getNumAtoms() {\r\n        return atomList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of bonds in structure.\r\n     */\r\n    public int getNumBonds() {\r\n        return bondList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of stereo parities in strucuture.\r\n     */\r\n    public int getNumStereo0D() {\r\n        return stereoList.size();\r\n    }\r\n\r\n    /**\r\n     * Adds atom to inchi molecule.\r\n     *\r\n     * @param atom  Atom to add\r\n     * @return      Added atom\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiAtom addAtom(JniInchiAtom atom) {\r\n        atomList.add(atom);\r\n        return atom;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple atoms to molecule.\r\n     * @param atoms\r\n     */\r\n    public void addAtoms(JniInchiAtom... atoms) {\r\n        for (JniInchiAtom atom : atoms) {\r\n            addAtom(atom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds bond to inchi molecule.\r\n     *\r\n     * @param bond  Bond to add\r\n     * @return      Added bond\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiBond addBond(JniInchiBond bond) {\r\n        bondList.add(bond);\r\n        return bond;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple bonds to molecule.\r\n     * @param bonds\r\n     */\r\n    public void addBonds(JniInchiBond... bonds) {\r\n        for (JniInchiBond bond : bonds) {\r\n            addBond(bond);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds 0D stereo parity to inchi molecule.\r\n     *\r\n     * @param parity  Parity to add\r\n     * @return        Added parity\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {\r\n        stereoList.add(parity);\r\n        return parity;\r\n    }\r\n\r\n    /**\r\n     * Returns atom from structure.\r\n     * @param i    Index of atom to return.\r\n     * @return\r\n     */\r\n    public JniInchiAtom getAtom(final int i) {\r\n        return (JniInchiAtom) atomList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns bond from structure.\r\n     * @param i    Index of bond to return.\r\n     * @return\r\n     */\r\n    public JniInchiBond getBond(final int i) {\r\n        return (JniInchiBond) bondList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns stereo parity from structure.\r\n     * @param i    Index of stereo parity to return.\r\n     * @return\r\n     */\r\n    public JniInchiStereo0D getStereo0D(final int i) {\r\n        return (JniInchiStereo0D) stereoList.get(i);\r\n    }\r\n\r\n    public void setStructure(JniInchiStructure structure) {\r\n        this.atomList = structure.atomList;\r\n        this.bondList = structure.bondList;\r\n        this.stereoList = structure.stereoList;\r\n    }\r\n\r\n    int getAtomIndex(JniInchiAtom atom) {\r\n        return atomList.indexOf(atom);\r\n    }\r\n\r\n    int getStereo0DIndex(JniInchiStereo0D stereo) {\r\n        return stereoList.indexOf(stereo);\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_1Test.java",
		"test_prompt": "// JniInchiStructure_1Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.\n*/\nclass JniInchiStructure_1Test {"
	},
	{
		"original_code": "// JniInchiStructure.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiStructure {\r\n\r\n    /**\r\n     * List of atoms.\r\n     */\r\n    private List atomList = new ArrayList();\r\n\r\n    /**\r\n     * List of bonds.\r\n     */\r\n    private List bondList = new ArrayList();\r\n\r\n    /**\r\n     * List of stero parities.\r\n     */\r\n    private List stereoList = new ArrayList();\r\n\r\n    /**\r\n     * Returns number of atoms in structure.\r\n     */\r\n    public int getNumAtoms() {\r\n        return atomList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of bonds in structure.\r\n     */\r\n    public int getNumBonds() {\r\n        return bondList.size();\r\n    }\r\n\r\n    /**\r\n     * Returns number of stereo parities in strucuture.\r\n     */\r\n    public int getNumStereo0D() {\r\n        return stereoList.size();\r\n    }\r\n\r\n    /**\r\n     * Adds atom to inchi molecule.\r\n     *\r\n     * @param atom  Atom to add\r\n     * @return      Added atom\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiAtom addAtom(JniInchiAtom atom) {\r\n        atomList.add(atom);\r\n        return atom;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple atoms to molecule.\r\n     * @param atoms\r\n     */\r\n    public void addAtoms(JniInchiAtom... atoms) {\r\n        for (JniInchiAtom atom : atoms) {\r\n            addAtom(atom);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds bond to inchi molecule.\r\n     *\r\n     * @param bond  Bond to add\r\n     * @return      Added bond\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiBond addBond(JniInchiBond bond) {\r\n        bondList.add(bond);\r\n        return bond;\r\n    }\r\n\r\n    /**\r\n     * Convenience method to add multiple bonds to molecule.\r\n     * @param bonds\r\n     */\r\n    public void addBonds(JniInchiBond... bonds) {\r\n        for (JniInchiBond bond : bonds) {\r\n            addBond(bond);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds 0D stereo parity to inchi molecule.\r\n     *\r\n     * @param parity  Parity to add\r\n     * @return        Added parity\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {\r\n        stereoList.add(parity);\r\n        return parity;\r\n    }\r\n\r\n    /**\r\n     * Returns atom from structure.\r\n     * @param i    Index of atom to return.\r\n     * @return\r\n     */\r\n    public JniInchiAtom getAtom(final int i) {\r\n        return (JniInchiAtom) atomList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns bond from structure.\r\n     * @param i    Index of bond to return.\r\n     * @return\r\n     */\r\n    public JniInchiBond getBond(final int i) {\r\n        return (JniInchiBond) bondList.get(i);\r\n    }\r\n\r\n    /**\r\n     * Returns stereo parity from structure.\r\n     * @param i    Index of stereo parity to return.\r\n     * @return\r\n     */\r\n    public JniInchiStereo0D getStereo0D(final int i) {\r\n        return (JniInchiStereo0D) stereoList.get(i);\r\n    }\r\n\r\n    public void setStructure(JniInchiStructure structure) {\r\n        this.atomList = structure.atomList;\r\n        this.bondList = structure.bondList;\r\n        this.stereoList = structure.stereoList;\r\n    }\r\n\r\n    int getAtomIndex(JniInchiAtom atom) {\r\n        return atomList.indexOf(atom);\r\n    }\r\n\r\n    int getStereo0DIndex(JniInchiStereo0D stereo) {\r\n        return stereoList.indexOf(stereo);\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_2Test.java",
		"test_prompt": "// JniInchiStructure_2Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.\n*/\nclass JniInchiStructure_2Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_0Test.java",
		"test_prompt": "// JniInchiWrapper_0Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInchi(JniInchiInput)} method.\n*/\nclass JniInchiWrapper_0Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_1Test.java",
		"test_prompt": "// JniInchiWrapper_1Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getStdInchi(JniInchiInput)} method.\n*/\nclass JniInchiWrapper_1Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_2Test.java",
		"test_prompt": "// JniInchiWrapper_2Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiFromInchi(JniInchiInputInchi)} method.\n*/\nclass JniInchiWrapper_2Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_3Test.java",
		"test_prompt": "// JniInchiWrapper_3Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getStructureFromInchi(JniInchiInputInchi)} method.\n*/\nclass JniInchiWrapper_3Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_4Test.java",
		"test_prompt": "// JniInchiWrapper_4Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.\n*/\nclass JniInchiWrapper_4Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_5Test.java",
		"test_prompt": "// JniInchiWrapper_5Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchiKey(String)} method.\n*/\nclass JniInchiWrapper_5Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_6Test.java",
		"test_prompt": "// JniInchiWrapper_6Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.\n*/\nclass JniInchiWrapper_6Test {"
	},
	{
		"original_code": "// JniInchiWrapper.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport net.sf.jnati.NativeCodeException;\r\nimport net.sf.jnati.deploy.NativeLibraryLoader;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.TimeoutException;\r\nimport java.util.concurrent.locks.Lock;\r\nimport java.util.concurrent.locks.ReentrantLock;\r\n\r\n/**\r\n * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.\r\n *\r\n * <p>This class is not intended to be used directly, but should be accessed\r\n * through subclasses that read data formats and load them into the InChI\r\n * data structures.\r\n *\r\n * <p>Subclasses should load data through the addAtom, addBond and addParity\r\n * methods. Once the molecule is fully loaded then the generateInchi method\r\n * should be called. Ideally this should all take place within the subclass's\r\n * constructor. The public get methods will all return null until this has\r\n * happened.\r\n *\r\n * <p>See <tt>inchi_api.h</tt>.\r\n *\r\n * @author Sam Adams\r\n */\r\npublic class JniInchiWrapper {\r\n\r\n    private static final String ID = \"jniinchi\";\r\n\r\n    private static final String VERSION = \"1.03_1\";\r\n\r\n    /**\r\n     * Maximum time to wait for a lock (in seconds).\r\n     */\r\n    private static final int MAX_LOCK_TIMEOUT = 15;\r\n\r\n    /**\r\n     * Flag indicating windows or linux.\r\n     */\r\n    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\r\n\r\n    /**\r\n     * Switch character for passing options. / in windows, - on other systems.\r\n     */\r\n    static final String flagChar = IS_WINDOWS ? \"/\" : \"-\";\r\n\r\n    /**\r\n     * Records whether native library has been loaded by system.\r\n     */\r\n    private static boolean libraryLoaded = false;\r\n\r\n    private static JniInchiWrapper inchiWrapper;\r\n\r\n    private static final Lock lock = new ReentrantLock(true);\r\n\r\n    /**\r\n     * Loads native library.\r\n     * @throws JniInchiException Library failed to load\r\n     */\r\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException {\r\n        if (!libraryLoaded) {\r\n            try {\r\n                NativeLibraryLoader.loadLibrary(ID, VERSION);\r\n                // Check expected version of native code loaded\r\n                // Throws NativeCodeException if unable to make call / wrong version\r\n                checkNativeCodeVersion();\r\n                // Everything is set up!\r\n                libraryLoaded = true;\r\n            } catch (NativeCodeException ex) {\r\n                System.err.println();\r\n                System.err.println(\"Error loading JNI InChI native code.\");\r\n                System.err.println(\"You may need to compile the native code for your platform.\");\r\n                System.err.println(\"See http://jni-inchi.sourceforge.net for instructions.\");\r\n                System.err.println();\r\n                throw new LoadNativeLibraryException(ex);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the expected native code version has been loaded.\r\n     * @throws NativeCodeException\r\n     */\r\n    private static void checkNativeCodeVersion() throws NativeCodeException {\r\n        // Get native code version string\r\n        String nativeVersion;\r\n        try {\r\n            nativeVersion = JniInchiWrapper.LibInchiGetVersion();\r\n        } catch (UnsatisfiedLinkError e) {\r\n            throw new NativeCodeException(\"Unable get native code version\", e);\r\n        }\r\n        // Compare to expected version\r\n        if (!VERSION.equals(nativeVersion)) {\r\n            throw new NativeCodeException(\"JNI InChI native code version mismatch: expected \" + VERSION + \", found \" + nativeVersion);\r\n        }\r\n    }\r\n\r\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException {\r\n        if (inchiWrapper == null) {\r\n            loadLibrary();\r\n            init();\r\n            inchiWrapper = new JniInchiWrapper();\r\n        }\r\n        return inchiWrapper;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    private JniInchiWrapper() throws LoadNativeLibraryException {\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops  List of INCHI_OPTION\r\n     */\r\n    protected static String checkOptions(List<INCHI_OPTION> ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuffer sbOptions = new StringBuffer();\r\n        for (int i = 0; i < ops.size(); i++) {\r\n            Object op = ops.get(i);\r\n            if (op instanceof INCHI_OPTION) {\r\n                sbOptions.append(flagChar + ((INCHI_OPTION) op).name() + \" \");\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * Checks and canonicalises options.\r\n     *\r\n     * @param ops          Space delimited string of options to pass to InChI library.\r\n     *                     Each option may optionally be preceded by a command line\r\n     *                     switch (/ or -).\r\n     */\r\n    protected static String checkOptions(final String ops) throws JniInchiException {\r\n        if (ops == null) {\r\n            throw new IllegalArgumentException(\"Null options\");\r\n        }\r\n        StringBuilder sbOptions = new StringBuilder();\r\n        StringTokenizer tok = new StringTokenizer(ops);\r\n        while (tok.hasMoreTokens()) {\r\n            String op = tok.nextToken();\r\n            if (op.startsWith(\"-\") || op.startsWith(\"/\")) {\r\n                op = op.substring(1);\r\n            }\r\n            INCHI_OPTION option = INCHI_OPTION.valueOfIgnoreCase(op);\r\n            if (option != null) {\r\n                sbOptions.append(flagChar + option.name());\r\n                if (tok.hasMoreTokens()) {\r\n                    sbOptions.append(\" \");\r\n                }\r\n            } else {\r\n                throw new JniInchiException(\"Unrecognised InChI option\");\r\n            }\r\n        }\r\n        return sbOptions.toString();\r\n    }\r\n\r\n    /**\r\n     * <p>Generates the InChI for a chemical structure.</p>\r\n     *\r\n     * <p>If no InChI creation/stereo modification options are specified then a standard\r\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.</p>\r\n     *\r\n     * <p><b>Valid options:</b></p>\r\n     * <pre>\r\n     *  Structure perception (compatible with stdInChI):\r\n     *    /NEWPSOFF   /DoNotAddH   /SNon\r\n     *  Stereo interpretation (lead to generation of non-standard InChI)\r\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\r\n     *  InChI creation options (lead to generation of non-standard InChI)\r\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\r\n     * </pre>\r\n     *\r\n     * <p><b>Other options:</b></p>\r\n     * <pre>\r\n     *  /AuxNone    Omit auxiliary information (default: Include)\r\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\r\n     *              In InChI library the default value is unlimited\r\n     *  /OutputSDF  Output SDfile instead of InChI\r\n     *  /WarnOnEmptyStructure\r\n     *              Warn and produce empty InChI for empty structure\r\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\r\n     * </pre>\r\n     *\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Calculates the Standard InChI string for a chemical structure.</p>\r\n     * <p>The only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\r\n     * perception options are specified then the calculation will fail.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    @SuppressWarnings(\"unchecked\")\r\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStdINCHI(input);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Converts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).</p>\r\n     * <p>This method may also be used to filter out specific layers. For instance, /Snon would remove the\r\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\r\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.</p>\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIfromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated 0D structure from an InChI string.\r\n     * @param input\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException {\r\n        if (input == null) {\r\n            throw new IllegalArgumentException(\"Null input\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetStructFromINCHI(input.getInchi(), input.getOptions());\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the InChIKey for an InChI string.\r\n     * @param inchi     source InChI string\r\n     * @return  InChIKey output\r\n     * @throws  JniInchiException\r\n     */\r\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIKeyFromINCHI(inchi);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a string represents valid InChIKey.\r\n     * @param key\r\n     * @return\r\n     * @throws JniInchiException\r\n     */\r\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException {\r\n        if (key == null) {\r\n            throw new IllegalArgumentException(\"Null InChI key\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHIKey(key);\r\n            INCHI_KEY_STATUS retStatus = INCHI_KEY_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * <p>Checks if the string represents valid InChI/standard InChI.</p>\r\n     *\r\n     * @param inchi  source InChI\r\n     * @param strict if <code>false</code>, just briefly check for proper layout (prefix, version, etc.) The result\r\n     *               may not be strict.\r\n     *               If <code>true</code>, try to perform InChI2InChI conversion and returns success if a resulting\r\n     *               InChI string exactly match source. The result may be 'false alarm' due to imperfectness of\r\n     */\r\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {\r\n        if (inchi == null) {\r\n            throw new IllegalArgumentException(\"Null InChI\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            int ret = wrapper.CheckINCHI(inchi, strict);\r\n            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);\r\n            if (retStatus == null) {\r\n                throw new JniInchiException(\"Unknown return status: \" + ret);\r\n            }\r\n            return retStatus;\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException {\r\n        if (auxInfo == null) {\r\n            throw new IllegalArgumentException(\"Null AuxInfo\");\r\n        }\r\n        JniInchiWrapper wrapper = getWrapper();\r\n        wrapper.getLock();\r\n        try {\r\n            return wrapper.GetINCHIInputFromAuxInfo(auxInfo, false, false);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n    }\r\n\r\n    private static synchronized void getLock() throws JniInchiException {\r\n        try {\r\n            if (!lock.tryLock(MAX_LOCK_TIMEOUT, TimeUnit.SECONDS)) {\r\n                throw new TimeoutException(\"Unable to get lock\");\r\n            }\r\n        } catch (TimeoutException ex) {\r\n            throw new JniInchiException(ex);\r\n        } catch (InterruptedException ex) {\r\n            throw new JniInchiException(ex);\r\n        }\r\n    }\r\n\r\n    protected native static String LibInchiGetVersion();\r\n\r\n    private native static void init();\r\n\r\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\r\n\r\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\r\n\r\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\r\n\r\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\r\n\r\n    private native int CheckINCHIKey(String key);\r\n\r\n    private native int CheckINCHI(String inchi, boolean strict);\r\n\r\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_7Test.java",
		"test_prompt": "// JniInchiWrapper_7Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInputFromAuxInfo(String)} method.\n*/\nclass JniInchiWrapper_7Test {"
	},
	{
		"original_code": "// Main.java\n/*\r\n * Copyright 2006-2011 Sam Adams <sea36 at users.sourceforge.net>\r\n *\r\n * This file is part of JNI-InChI.\r\n *\r\n * JNI-InChI is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU Lesser General Public License as published\r\n * by the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * JNI-InChI is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public License\r\n * along with JNI-InChI.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\npackage net.sf.jniinchi;\r\n\r\nimport org.apache.log4j.ConsoleAppender;\r\nimport org.apache.log4j.Level;\r\nimport org.apache.log4j.Logger;\r\nimport org.apache.log4j.PatternLayout;\r\n\r\n/**\r\n * Simple test class, for debugging purposes.\r\n * @author sea36\r\n */\r\npublic class Main {\r\n\r\n    /**\r\n     * Provide test structure.\r\n     * @return\r\n     */\r\n    public static JniInchiStructure getTestMolecule() {\r\n        JniInchiStructure struct = new JniInchiStructure();\r\n        JniInchiAtom a1 = struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, \"C\"));\r\n        JniInchiAtom a2 = struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, \"C\"));\r\n        JniInchiAtom a3 = struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, \"N\"));\r\n        JniInchiAtom a4 = struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, \"C\"));\r\n        JniInchiAtom a5 = struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, \"O\"));\r\n        JniInchiAtom a6 = struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, \"O\"));\r\n        a1.setImplicitH(1);\r\n        a3.setImplicitH(2);\r\n        a4.setImplicitH(3);\r\n        a5.setImplicitH(1);\r\n        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));\r\n        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);\r\n        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));\r\n        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));\r\n        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));\r\n        return struct;\r\n    }\r\n\r\n    public static void runChecks() throws JniInchiException {\r\n        System.err.println(\"Loading native code\");\r\n        System.err.println();\r\n        try {\r\n            JniInchiWrapper.loadLibrary();\r\n            System.err.println();\r\n            System.err.println(\"Native code version: \" + JniInchiWrapper.LibInchiGetVersion());\r\n            System.err.println();\r\n            System.err.println(\"Running checks\");\r\n            System.err.println();\r\n            System.err.println(\"Generating InChI from structure\");\r\n            JniInchiStructure mol = getTestMolecule();\r\n            JniInchiOutput out1 = JniInchiWrapper.getInchi(new JniInchiInput(mol));\r\n            if (\"InChI=1S/C3H7NO2/c1-2(4)3(5)6/h2H,4H2,1H3,(H,5,6)/t2-/m0/s1\".equals(out1.getInchi())) {\r\n                System.err.println(\" - OKAY\");\r\n            } else {\r\n                System.err.println(\" - ERROR\");\r\n                System.err.println(out1.getInchi());\r\n            }\r\n            System.err.println(\"Generating structure from InChI\");\r\n            JniInchiOutputStructure out2 = JniInchiWrapper.getStructureFromInchi(new JniInchiInputInchi(\"InChI=1/C3H7NO2/c1-2(4)3(5)6/h2H,4H2,1H3,(H,5,6)\"));\r\n            if (out2.getNumAtoms() == 6 && out2.getNumBonds() == 5) {\r\n                System.err.println(\" - OKAY\");\r\n            } else {\r\n                System.err.println(\" - ERROR\");\r\n            }\r\n            System.err.println(\"Converting structure back to InChI\");\r\n            JniInchiOutput out3 = JniInchiWrapper.getInchi(new JniInchiInput(out2));\r\n            if (\"InChI=1S/C3H7NO2/c1-2(4)3(5)6/h2H,4H2,1H3,(H,5,6)\".equals(out3.getInchi())) {\r\n                System.err.println(\" - OKAY\");\r\n            } else {\r\n                System.err.println(\" - ERROR\");\r\n                System.err.println(out3.getInchi());\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\" - ERROR\");\r\n            e.printStackTrace();\r\n        }\r\n        //        System.err.println(\"Running memtest\");\r\n        //        for (int i = 0; i < 1000000; i++) {\r\n        //            if (i % 1000 == 0) {\r\n        //                System.err.println(i+\"\\t\"+((int)(Runtime.getRuntime().totalMemory()/1024)));\r\n        //            }\r\n        //            JniInchiStructure mol = getTestMolecule();\r\n        //            JniInchiWrapper.getInchi(new JniInchiInput(mol));\r\n        //        }\r\n        System.err.println();\r\n        System.err.println(\"Checks done.\");\r\n        System.err.println();\r\n    }\r\n\r\n    public static void main(final String[] args) throws Exception {\r\n        // Output header message\r\n        System.err.println();\r\n        System.err.println(\"** JniInchi debugger **\");\r\n        System.err.println();\r\n        // Set up logging\r\n        Logger root = Logger.getRootLogger();\r\n        if (args.length == 1 && \"-debug\".equals(args[0])) {\r\n            root.setLevel(Level.ALL);\r\n        } else {\r\n            root.setLevel(Level.INFO);\r\n        }\r\n        root.removeAllAppenders();\r\n        PatternLayout layout = new PatternLayout(\"%-5p %c - %m%n\");\r\n        // Create console appender\r\n        ConsoleAppender aconn = new ConsoleAppender(layout, ConsoleAppender.SYSTEM_ERR);\r\n        aconn.setThreshold(Level.ALL);\r\n        root.addAppender(aconn);\r\n        runChecks();\r\n    }\r\n}\r\n",
		"id": "/EvoSuiteBenchmark/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java",
		"test_prompt": "// MainTest.java\npackage net.sf.jniinchi;\n\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.\n*/\nclass MainTest {"
	}
]