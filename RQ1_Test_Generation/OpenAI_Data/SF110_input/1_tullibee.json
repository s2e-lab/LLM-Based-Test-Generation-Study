[
	{
		"original_code": "// Contract.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Contract.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Contract implements Cloneable {\n\n    public int m_conId;\n\n    public String m_symbol;\n\n    public String m_secType;\n\n    public String m_expiry;\n\n    public double m_strike;\n\n    public String m_right;\n\n    public String m_multiplier;\n\n    public String m_exchange;\n\n    public String m_currency;\n\n    public String m_localSymbol;\n\n    // pick a non-aggregate (ie not the SMART exchange) exchange that the contract trades on.  DO NOT SET TO SMART.\n    public String m_primaryExch;\n\n    // can not be set to true for orders.\n    public boolean m_includeExpired;\n\n    // CUSIP;SEDOL;ISIN;RIC\n    public String m_secIdType;\n\n    public String m_secId;\n\n    // COMBOS\n    // received in open order version 14 and up for all combos\n    public String m_comboLegsDescrip;\n\n    public Vector m_comboLegs = new Vector();\n\n    // delta neutral\n    public UnderComp m_underComp;\n\n    public Contract() {\n        m_conId = 0;\n        m_strike = 0;\n        m_includeExpired = false;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        Contract retval = (Contract) super.clone();\n        retval.m_comboLegs = (Vector) retval.m_comboLegs.clone();\n        return retval;\n    }\n\n    public Contract(int p_conId, String p_symbol, String p_secType, String p_expiry, double p_strike, String p_right, String p_multiplier, String p_exchange, String p_currency, String p_localSymbol, Vector p_comboLegs, String p_primaryExch, boolean p_includeExpired, String p_secIdType, String p_secId) {\n        m_conId = p_conId;\n        m_symbol = p_symbol;\n        m_secType = p_secType;\n        m_expiry = p_expiry;\n        m_strike = p_strike;\n        m_right = p_right;\n        m_multiplier = p_multiplier;\n        m_exchange = p_exchange;\n        m_currency = p_currency;\n        m_includeExpired = p_includeExpired;\n        m_localSymbol = p_localSymbol;\n        m_comboLegs = p_comboLegs;\n        m_primaryExch = p_primaryExch;\n        m_secIdType = p_secIdType;\n        m_secId = p_secId;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other) {\n            return true;\n        }\n        if (p_other == null || !(p_other instanceof Contract)) {\n            return false;\n        }\n        Contract l_theOther = (Contract) p_other;\n        if (m_conId != l_theOther.m_conId) {\n            return false;\n        }\n        if (Util.StringCompare(m_secType, l_theOther.m_secType) != 0) {\n            return false;\n        }\n        if (Util.StringCompare(m_symbol, l_theOther.m_symbol) != 0 || Util.StringCompare(m_exchange, l_theOther.m_exchange) != 0 || Util.StringCompare(m_primaryExch, l_theOther.m_primaryExch) != 0 || Util.StringCompare(m_currency, l_theOther.m_currency) != 0) {\n            return false;\n        }\n        if (!Util.NormalizeString(m_secType).equals(\"BOND\")) {\n            if (m_strike != l_theOther.m_strike) {\n                return false;\n            }\n            if (Util.StringCompare(m_expiry, l_theOther.m_expiry) != 0 || Util.StringCompare(m_right, l_theOther.m_right) != 0 || Util.StringCompare(m_multiplier, l_theOther.m_multiplier) != 0 || Util.StringCompare(m_localSymbol, l_theOther.m_localSymbol) != 0) {\n                return false;\n            }\n        }\n        if (Util.StringCompare(m_secIdType, l_theOther.m_secIdType) != 0) {\n            return false;\n        }\n        if (Util.StringCompare(m_secId, l_theOther.m_secId) != 0) {\n            return false;\n        }\n        // compare combo legs\n        if (!Util.VectorEqualsUnordered(m_comboLegs, l_theOther.m_comboLegs)) {\n            return false;\n        }\n        if (m_underComp != l_theOther.m_underComp) {\n            if (m_underComp == null || l_theOther.m_underComp == null) {\n                return false;\n            }\n            if (!m_underComp.equals(l_theOther.m_underComp)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ContractTest0.java",
		"test_prompt": "// ContractTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Contract.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Contract}.\n* It contains ten unit test cases for the {@link Contract#clone()} method.\n*/\nclass ContractTest0 {"
	},
	{
		"original_code": "// Contract.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Contract.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Contract implements Cloneable {\n\n    public int m_conId;\n\n    public String m_symbol;\n\n    public String m_secType;\n\n    public String m_expiry;\n\n    public double m_strike;\n\n    public String m_right;\n\n    public String m_multiplier;\n\n    public String m_exchange;\n\n    public String m_currency;\n\n    public String m_localSymbol;\n\n    // pick a non-aggregate (ie not the SMART exchange) exchange that the contract trades on.  DO NOT SET TO SMART.\n    public String m_primaryExch;\n\n    // can not be set to true for orders.\n    public boolean m_includeExpired;\n\n    // CUSIP;SEDOL;ISIN;RIC\n    public String m_secIdType;\n\n    public String m_secId;\n\n    // COMBOS\n    // received in open order version 14 and up for all combos\n    public String m_comboLegsDescrip;\n\n    public Vector m_comboLegs = new Vector();\n\n    // delta neutral\n    public UnderComp m_underComp;\n\n    public Contract() {\n        m_conId = 0;\n        m_strike = 0;\n        m_includeExpired = false;\n    }\n\n    public Object clone() throws CloneNotSupportedException {\n        Contract retval = (Contract) super.clone();\n        retval.m_comboLegs = (Vector) retval.m_comboLegs.clone();\n        return retval;\n    }\n\n    public Contract(int p_conId, String p_symbol, String p_secType, String p_expiry, double p_strike, String p_right, String p_multiplier, String p_exchange, String p_currency, String p_localSymbol, Vector p_comboLegs, String p_primaryExch, boolean p_includeExpired, String p_secIdType, String p_secId) {\n        m_conId = p_conId;\n        m_symbol = p_symbol;\n        m_secType = p_secType;\n        m_expiry = p_expiry;\n        m_strike = p_strike;\n        m_right = p_right;\n        m_multiplier = p_multiplier;\n        m_exchange = p_exchange;\n        m_currency = p_currency;\n        m_includeExpired = p_includeExpired;\n        m_localSymbol = p_localSymbol;\n        m_comboLegs = p_comboLegs;\n        m_primaryExch = p_primaryExch;\n        m_secIdType = p_secIdType;\n        m_secId = p_secId;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other) {\n            return true;\n        }\n        if (p_other == null || !(p_other instanceof Contract)) {\n            return false;\n        }\n        Contract l_theOther = (Contract) p_other;\n        if (m_conId != l_theOther.m_conId) {\n            return false;\n        }\n        if (Util.StringCompare(m_secType, l_theOther.m_secType) != 0) {\n            return false;\n        }\n        if (Util.StringCompare(m_symbol, l_theOther.m_symbol) != 0 || Util.StringCompare(m_exchange, l_theOther.m_exchange) != 0 || Util.StringCompare(m_primaryExch, l_theOther.m_primaryExch) != 0 || Util.StringCompare(m_currency, l_theOther.m_currency) != 0) {\n            return false;\n        }\n        if (!Util.NormalizeString(m_secType).equals(\"BOND\")) {\n            if (m_strike != l_theOther.m_strike) {\n                return false;\n            }\n            if (Util.StringCompare(m_expiry, l_theOther.m_expiry) != 0 || Util.StringCompare(m_right, l_theOther.m_right) != 0 || Util.StringCompare(m_multiplier, l_theOther.m_multiplier) != 0 || Util.StringCompare(m_localSymbol, l_theOther.m_localSymbol) != 0) {\n                return false;\n            }\n        }\n        if (Util.StringCompare(m_secIdType, l_theOther.m_secIdType) != 0) {\n            return false;\n        }\n        if (Util.StringCompare(m_secId, l_theOther.m_secId) != 0) {\n            return false;\n        }\n        // compare combo legs\n        if (!Util.VectorEqualsUnordered(m_comboLegs, l_theOther.m_comboLegs)) {\n            return false;\n        }\n        if (m_underComp != l_theOther.m_underComp) {\n            if (m_underComp == null || l_theOther.m_underComp == null) {\n                return false;\n            }\n            if (!m_underComp.equals(l_theOther.m_underComp)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ContractTest1.java",
		"test_prompt": "// ContractTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Contract.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Contract}.\n* It contains ten unit test cases for the {@link Contract#equals(Object)} method.\n*/\nclass ContractTest1 {"
	},
	{
		"original_code": "// Execution.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Execution.java\n *\n */\npackage com.ib.client;\n\npublic class Execution {\n\n    public int m_orderId;\n\n    public int m_clientId;\n\n    public String m_execId;\n\n    public String m_time;\n\n    public String m_acctNumber;\n\n    public String m_exchange;\n\n    public String m_side;\n\n    public int m_shares;\n\n    public double m_price;\n\n    public int m_permId;\n\n    public int m_liquidation;\n\n    public int m_cumQty;\n\n    public double m_avgPrice;\n\n    public Execution() {\n        m_orderId = 0;\n        m_clientId = 0;\n        m_shares = 0;\n        m_price = 0;\n        m_permId = 0;\n        m_liquidation = 0;\n        m_cumQty = 0;\n        m_avgPrice = 0;\n    }\n\n    public Execution(int p_orderId, int p_clientId, String p_execId, String p_time, String p_acctNumber, String p_exchange, String p_side, int p_shares, double p_price, int p_permId, int p_liquidation, int p_cumQty, double p_avgPrice) {\n        m_orderId = p_orderId;\n        m_clientId = p_clientId;\n        m_execId = p_execId;\n        m_time = p_time;\n        m_acctNumber = p_acctNumber;\n        m_exchange = p_exchange;\n        m_side = p_side;\n        m_shares = p_shares;\n        m_price = p_price;\n        m_permId = p_permId;\n        m_liquidation = p_liquidation;\n        m_cumQty = p_cumQty;\n        m_avgPrice = p_avgPrice;\n    }\n\n    public boolean equals(Object p_other) {\n        boolean l_bRetVal = false;\n        if (p_other == null) {\n            l_bRetVal = false;\n        } else if (this == p_other) {\n            l_bRetVal = true;\n        } else {\n            Execution l_theOther = (Execution) p_other;\n            l_bRetVal = m_execId.equals(l_theOther.m_execId);\n        }\n        return l_bRetVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ExecutionTest.java",
		"test_prompt": "// ExecutionTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Execution.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Execution}.\n* It contains ten unit test cases for the {@link Execution#equals(Object)} method.\n*/\nclass ExecutionTest {"
	},
	{
		"original_code": "// Order.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Order.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Order {\n\n    final public static int CUSTOMER = 0;\n\n    final public static int FIRM = 1;\n\n    final public static char OPT_UNKNOWN = '?';\n\n    final public static char OPT_BROKER_DEALER = 'b';\n\n    final public static char OPT_CUSTOMER = 'c';\n\n    final public static char OPT_FIRM = 'f';\n\n    final public static char OPT_ISEMM = 'm';\n\n    final public static char OPT_FARMM = 'n';\n\n    final public static char OPT_SPECIALIST = 'y';\n\n    final public static int AUCTION_MATCH = 1;\n\n    final public static int AUCTION_IMPROVEMENT = 2;\n\n    final public static int AUCTION_TRANSPARENT = 3;\n\n    final public static String EMPTY_STR = \"\";\n\n    // main order fields\n    public int m_orderId;\n\n    public int m_clientId;\n\n    public int m_permId;\n\n    public String m_action;\n\n    public int m_totalQuantity;\n\n    public String m_orderType;\n\n    public double m_lmtPrice;\n\n    public double m_auxPrice;\n\n    // extended order fields\n    // \"Time in Force\" - DAY, GTC, etc.\n    public String m_tif;\n\n    // one cancels all group name\n    public String m_ocaGroup;\n\n    // 1 = CANCEL_WITH_BLOCK, 2 = REDUCE_WITH_BLOCK, 3 = REDUCE_NON_BLOCK\n    public int m_ocaType;\n\n    public String m_orderRef;\n\n    // if false, order will be created but not transmited\n    public boolean m_transmit;\n\n    // Parent order Id, to associate Auto STP or TRAIL orders with the original order.\n    public int m_parentId;\n\n    public boolean m_blockOrder;\n\n    public boolean m_sweepToFill;\n\n    public int m_displaySize;\n\n    // 0=Default, 1=Double_Bid_Ask, 2=Last, 3=Double_Last, 4=Bid_Ask, 7=Last_or_Bid_Ask, 8=Mid-point\n    public int m_triggerMethod;\n\n    public boolean m_outsideRth;\n\n    public boolean m_hidden;\n\n    // FORMAT: 20060505 08:00:00 {time zone}\n    public String m_goodAfterTime;\n\n    // FORMAT: 20060505 08:00:00 {time zone}\n    public String m_goodTillDate;\n\n    public boolean m_overridePercentageConstraints;\n\n    // Individual = 'I', Agency = 'A', AgentOtherMember = 'W', IndividualPTIA = 'J', AgencyPTIA = 'U', AgentOtherMemberPTIA = 'M', IndividualPT = 'K', AgencyPT = 'Y', AgentOtherMemberPT = 'N'\n    public String m_rule80A;\n\n    public boolean m_allOrNone;\n\n    public int m_minQty;\n\n    // REL orders only\n    public double m_percentOffset;\n\n    // for TRAILLIMIT orders only\n    public double m_trailStopPrice;\n\n    // Financial advisors only\n    public String m_faGroup;\n\n    public String m_faProfile;\n\n    public String m_faMethod;\n\n    public String m_faPercentage;\n\n    // Institutional orders only\n    // O=Open, C=Close\n    public String m_openClose;\n\n    // 0=Customer, 1=Firm\n    public int m_origin;\n\n    // 1 if you hold the shares, 2 if they will be delivered from elsewhere.  Only for Action=\"SSHORT\n    public int m_shortSaleSlot;\n\n    // set when slot=2 only.\n    public String m_designatedLocation;\n\n    // SMART routing only\n    public double m_discretionaryAmt;\n\n    public boolean m_eTradeOnly;\n\n    public boolean m_firmQuoteOnly;\n\n    public double m_nbboPriceCap;\n\n    // BOX or VOL ORDERS ONLY\n    // 1=AUCTION_MATCH, 2=AUCTION_IMPROVEMENT, 3=AUCTION_TRANSPARENT\n    public int m_auctionStrategy;\n\n    // BOX ORDERS ONLY\n    public double m_startingPrice;\n\n    public double m_stockRefPrice;\n\n    public double m_delta;\n\n    // pegged to stock or VOL orders\n    public double m_stockRangeLower;\n\n    public double m_stockRangeUpper;\n\n    // VOLATILITY ORDERS ONLY\n    public double m_volatility;\n\n    // 1=daily, 2=annual\n    public int m_volatilityType;\n\n    public int m_continuousUpdate;\n\n    // 1=Average, 2 = BidOrAsk\n    public int m_referencePriceType;\n\n    public String m_deltaNeutralOrderType;\n\n    public double m_deltaNeutralAuxPrice;\n\n    // COMBO ORDERS ONLY\n    // EFP orders only\n    public double m_basisPoints;\n\n    // EFP orders only\n    public int m_basisPointsType;\n\n    // SCALE ORDERS ONLY\n    public int m_scaleInitLevelSize;\n\n    public int m_scaleSubsLevelSize;\n\n    public double m_scalePriceIncrement;\n\n    // Clearing info\n    // IB account\n    public String m_account;\n\n    public String m_settlingFirm;\n\n    // True beneficiary of the order\n    public String m_clearingAccount;\n\n    // \"\" (Default), \"IB\", \"Away\", \"PTA\" (PostTrade)\n    public String m_clearingIntent;\n\n    // ALGO ORDERS ONLY\n    public String m_algoStrategy;\n\n    public Vector m_algoParams;\n\n    // What-if\n    public boolean m_whatIf;\n\n    // Not Held\n    public boolean m_notHeld;\n\n    public Order() {\n        m_outsideRth = false;\n        m_openClose = \"O\";\n        m_origin = CUSTOMER;\n        m_transmit = true;\n        m_designatedLocation = EMPTY_STR;\n        m_minQty = Integer.MAX_VALUE;\n        m_percentOffset = Double.MAX_VALUE;\n        m_nbboPriceCap = Double.MAX_VALUE;\n        m_startingPrice = Double.MAX_VALUE;\n        m_stockRefPrice = Double.MAX_VALUE;\n        m_delta = Double.MAX_VALUE;\n        m_stockRangeLower = Double.MAX_VALUE;\n        m_stockRangeUpper = Double.MAX_VALUE;\n        m_volatility = Double.MAX_VALUE;\n        m_volatilityType = Integer.MAX_VALUE;\n        m_deltaNeutralOrderType = EMPTY_STR;\n        m_deltaNeutralAuxPrice = Double.MAX_VALUE;\n        m_referencePriceType = Integer.MAX_VALUE;\n        m_trailStopPrice = Double.MAX_VALUE;\n        m_basisPoints = Double.MAX_VALUE;\n        m_basisPointsType = Integer.MAX_VALUE;\n        m_scaleInitLevelSize = Integer.MAX_VALUE;\n        m_scaleSubsLevelSize = Integer.MAX_VALUE;\n        m_scalePriceIncrement = Double.MAX_VALUE;\n        m_whatIf = false;\n        m_notHeld = false;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other)\n            return true;\n        if (p_other == null)\n            return false;\n        Order l_theOther = (Order) p_other;\n        if (m_permId == l_theOther.m_permId) {\n            return true;\n        }\n        if (m_orderId != l_theOther.m_orderId || m_clientId != l_theOther.m_clientId || m_totalQuantity != l_theOther.m_totalQuantity || m_lmtPrice != l_theOther.m_lmtPrice || m_auxPrice != l_theOther.m_auxPrice || m_ocaType != l_theOther.m_ocaType || m_transmit != l_theOther.m_transmit || m_parentId != l_theOther.m_parentId || m_blockOrder != l_theOther.m_blockOrder || m_sweepToFill != l_theOther.m_sweepToFill || m_displaySize != l_theOther.m_displaySize || m_triggerMethod != l_theOther.m_triggerMethod || m_outsideRth != l_theOther.m_outsideRth || m_hidden != l_theOther.m_hidden || m_overridePercentageConstraints != l_theOther.m_overridePercentageConstraints || m_allOrNone != l_theOther.m_allOrNone || m_minQty != l_theOther.m_minQty || m_percentOffset != l_theOther.m_percentOffset || m_trailStopPrice != l_theOther.m_trailStopPrice || m_origin != l_theOther.m_origin || m_shortSaleSlot != l_theOther.m_shortSaleSlot || m_discretionaryAmt != l_theOther.m_discretionaryAmt || m_eTradeOnly != l_theOther.m_eTradeOnly || m_firmQuoteOnly != l_theOther.m_firmQuoteOnly || m_nbboPriceCap != l_theOther.m_nbboPriceCap || m_auctionStrategy != l_theOther.m_auctionStrategy || m_startingPrice != l_theOther.m_startingPrice || m_stockRefPrice != l_theOther.m_stockRefPrice || m_delta != l_theOther.m_delta || m_stockRangeLower != l_theOther.m_stockRangeLower || m_stockRangeUpper != l_theOther.m_stockRangeUpper || m_volatility != l_theOther.m_volatility || m_volatilityType != l_theOther.m_volatilityType || m_continuousUpdate != l_theOther.m_continuousUpdate || m_referencePriceType != l_theOther.m_referencePriceType || m_deltaNeutralAuxPrice != l_theOther.m_deltaNeutralAuxPrice || m_basisPoints != l_theOther.m_basisPoints || m_basisPointsType != l_theOther.m_basisPointsType || m_scaleInitLevelSize != l_theOther.m_scaleInitLevelSize || m_scaleSubsLevelSize != l_theOther.m_scaleSubsLevelSize || m_scalePriceIncrement != l_theOther.m_scalePriceIncrement || m_whatIf != l_theOther.m_whatIf || m_notHeld != l_theOther.m_notHeld) {\n            return false;\n        }\n        if (Util.StringCompare(m_action, l_theOther.m_action) != 0 || Util.StringCompare(m_orderType, l_theOther.m_orderType) != 0 || Util.StringCompare(m_tif, l_theOther.m_tif) != 0 || Util.StringCompare(m_ocaGroup, l_theOther.m_ocaGroup) != 0 || Util.StringCompare(m_orderRef, l_theOther.m_orderRef) != 0 || Util.StringCompare(m_goodAfterTime, l_theOther.m_goodAfterTime) != 0 || Util.StringCompare(m_goodTillDate, l_theOther.m_goodTillDate) != 0 || Util.StringCompare(m_rule80A, l_theOther.m_rule80A) != 0 || Util.StringCompare(m_faGroup, l_theOther.m_faGroup) != 0 || Util.StringCompare(m_faProfile, l_theOther.m_faProfile) != 0 || Util.StringCompare(m_faMethod, l_theOther.m_faMethod) != 0 || Util.StringCompare(m_faPercentage, l_theOther.m_faPercentage) != 0 || Util.StringCompare(m_openClose, l_theOther.m_openClose) != 0 || Util.StringCompare(m_designatedLocation, l_theOther.m_designatedLocation) != 0 || Util.StringCompare(m_deltaNeutralOrderType, l_theOther.m_deltaNeutralOrderType) != 0 || Util.StringCompare(m_account, l_theOther.m_account) != 0 || Util.StringCompare(m_settlingFirm, l_theOther.m_settlingFirm) != 0 || Util.StringCompare(m_clearingAccount, l_theOther.m_clearingAccount) != 0 || Util.StringCompare(m_clearingIntent, l_theOther.m_clearingIntent) != 0 || Util.StringCompare(m_algoStrategy, l_theOther.m_algoStrategy) != 0) {\n            return false;\n        }\n        if (!Util.VectorEqualsUnordered(m_algoParams, l_theOther.m_algoParams)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/OrderTest.java",
		"test_prompt": "// OrderTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Order.java\n *\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Order}.\n* It contains ten unit test cases for the {@link Order#equals(Object)} method.\n*/\nclass OrderTest {"
	},
	{
		"original_code": "// OrderState.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * OrderState.java\n */\npackage com.ib.client;\n\npublic class OrderState {\n\n    public String m_status;\n\n    public String m_initMargin;\n\n    public String m_maintMargin;\n\n    public String m_equityWithLoan;\n\n    public double m_commission;\n\n    public double m_minCommission;\n\n    public double m_maxCommission;\n\n    public String m_commissionCurrency;\n\n    public String m_warningText;\n\n    OrderState() {\n        this(null, null, null, null, 0.0, 0.0, 0.0, null, null);\n    }\n\n    OrderState(String status, String initMargin, String maintMargin, String equityWithLoan, double commission, double minCommission, double maxCommission, String commissionCurrency, String warningText) {\n        m_initMargin = initMargin;\n        m_maintMargin = maintMargin;\n        m_equityWithLoan = equityWithLoan;\n        m_commission = commission;\n        m_minCommission = minCommission;\n        m_maxCommission = maxCommission;\n        m_commissionCurrency = commissionCurrency;\n        m_warningText = warningText;\n    }\n\n    public boolean equals(Object other) {\n        if (this == other)\n            return true;\n        if (other == null)\n            return false;\n        OrderState state = (OrderState) other;\n        if (m_commission != state.m_commission || m_minCommission != state.m_minCommission || m_maxCommission != state.m_maxCommission) {\n            return false;\n        }\n        if (Util.StringCompare(m_status, state.m_status) != 0 || Util.StringCompare(m_initMargin, state.m_initMargin) != 0 || Util.StringCompare(m_maintMargin, state.m_maintMargin) != 0 || Util.StringCompare(m_equityWithLoan, state.m_equityWithLoan) != 0 || Util.StringCompare(m_commissionCurrency, state.m_commissionCurrency) != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/OrderStateTest.java",
		"test_prompt": "// OrderStateTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * OrderState.java\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OrderState}.\n* It contains ten unit test cases for the {@link OrderState#equals(Object)} method.\n*/\nclass OrderStateTest {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest0.java",
		"test_prompt": "// UtilTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#StringIsEmpty(String)} method.\n*/\nclass UtilTest0 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest1.java",
		"test_prompt": "// UtilTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#NormalizeString(String)} method.\n*/\nclass UtilTest1 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest2.java",
		"test_prompt": "// UtilTest2.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#StringCompare(String, String)} method.\n*/\nclass UtilTest2 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest3.java",
		"test_prompt": "// UtilTest3.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#StringCompareIgnCase(String, String)} method.\n*/\nclass UtilTest3 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest4.java",
		"test_prompt": "// UtilTest4.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#VectorEqualsUnordered(Vector, Vector)} method.\n*/\nclass UtilTest4 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest5.java",
		"test_prompt": "// UtilTest5.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#IntMaxString(int)} method.\n*/\nclass UtilTest5 {"
	},
	{
		"original_code": "// Util.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\n\npublic class Util {\n\n    public static boolean StringIsEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n\n    public static String NormalizeString(String str) {\n        return str != null ? str : \"\";\n    }\n\n    public static int StringCompare(String lhs, String rhs) {\n        return NormalizeString(lhs).compareTo(NormalizeString(rhs));\n    }\n\n    public static int StringCompareIgnCase(String lhs, String rhs) {\n        return NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\n    }\n\n    public static boolean VectorEqualsUnordered(Vector lhs, Vector rhs) {\n        if (lhs == rhs)\n            return true;\n        int lhsCount = lhs == null ? 0 : lhs.size();\n        int rhsCount = rhs == null ? 0 : rhs.size();\n        if (lhsCount != rhsCount)\n            return false;\n        if (lhsCount == 0)\n            return true;\n        boolean[] matchedRhsElems = new boolean[rhsCount];\n        for (int lhsIdx = 0; lhsIdx < lhsCount; ++lhsIdx) {\n            Object lhsElem = lhs.get(lhsIdx);\n            int rhsIdx = 0;\n            for (; rhsIdx < rhsCount; ++rhsIdx) {\n                if (matchedRhsElems[rhsIdx]) {\n                    continue;\n                }\n                if (lhsElem.equals(rhs.get(rhsIdx))) {\n                    matchedRhsElems[rhsIdx] = true;\n                    break;\n                }\n            }\n            if (rhsIdx >= rhsCount) {\n                // no matching elem found\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static String IntMaxString(int value) {\n        return (value == Integer.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n\n    public static String DoubleMaxString(double value) {\n        return (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UtilTest6.java",
		"test_prompt": "// UtilTest6.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * Util.java\n */\npackage com.ib.client;\n\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Util}.\n* It contains ten unit test cases for the {@link Util#DoubleMaxString(double)} method.\n*/\nclass UtilTest6 {"
	},
	{
		"original_code": "// UnderComp.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * UnderComp.java\n *\n */\npackage com.ib.client;\n\npublic class UnderComp {\n\n    public int m_conId;\n\n    public double m_delta;\n\n    public double m_price;\n\n    public UnderComp() {\n        m_conId = 0;\n        m_delta = 0;\n        m_price = 0;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other) {\n            return true;\n        }\n        if (p_other == null || !(p_other instanceof UnderComp)) {\n            return false;\n        }\n        UnderComp l_theOther = (UnderComp) p_other;\n        if (m_conId != l_theOther.m_conId) {\n            return false;\n        }\n        if (m_delta != l_theOther.m_delta) {\n            return false;\n        }\n        if (m_price != l_theOther.m_price) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/UnderCompTest.java",
		"test_prompt": "// UnderCompTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * UnderComp.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UnderComp}.\n* It contains ten unit test cases for the {@link UnderComp#equals(Object)} method.\n*/\nclass UnderCompTest {"
	},
	{
		"original_code": "// TagValue.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * UnderComp.java\n *\n */\npackage com.ib.client;\n\npublic class TagValue {\n\n    public String m_tag;\n\n    public String m_value;\n\n    public TagValue() {\n    }\n\n    public TagValue(String p_tag, String p_value) {\n        m_tag = p_tag;\n        m_value = p_value;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other)\n            return true;\n        if (p_other == null)\n            return false;\n        TagValue l_theOther = (TagValue) p_other;\n        if (Util.StringCompare(m_tag, l_theOther.m_tag) != 0 || Util.StringCompare(m_value, l_theOther.m_value) != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/TagValueTest.java",
		"test_prompt": "// TagValueTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * UnderComp.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TagValue}.\n* It contains ten unit test cases for the {@link TagValue#equals(Object)} method.\n*/\nclass TagValueTest {"
	},
	{
		"original_code": "// AnyWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class AnyWrapperMsgGenerator {\n\n    public static String error(Exception ex) {\n        return \"Error - \" + ex;\n    }\n\n    public static String error(String str) {\n        return str;\n    }\n\n    public static String error(int id, int errorCode, String errorMsg) {\n        String err = Integer.toString(id);\n        err += \" | \";\n        err += Integer.toString(errorCode);\n        err += \" | \";\n        err += errorMsg;\n        return err;\n    }\n\n    public static String connectionClosed() {\n        return \"Connection Closed\";\n    }\n\n    public static String ioError(Exception ex) {\n        return error(ex);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/AnyWrapperMsgGeneratorTest0.java",
		"test_prompt": "// AnyWrapperMsgGeneratorTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link AnyWrapperMsgGenerator#error(Exception)} method.\n*/\nclass AnyWrapperMsgGeneratorTest0 {"
	},
	{
		"original_code": "// AnyWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class AnyWrapperMsgGenerator {\n\n    public static String error(Exception ex) {\n        return \"Error - \" + ex;\n    }\n\n    public static String error(String str) {\n        return str;\n    }\n\n    public static String error(int id, int errorCode, String errorMsg) {\n        String err = Integer.toString(id);\n        err += \" | \";\n        err += Integer.toString(errorCode);\n        err += \" | \";\n        err += errorMsg;\n        return err;\n    }\n\n    public static String connectionClosed() {\n        return \"Connection Closed\";\n    }\n\n    public static String ioError(Exception ex) {\n        return error(ex);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/AnyWrapperMsgGeneratorTest1.java",
		"test_prompt": "// AnyWrapperMsgGeneratorTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link AnyWrapperMsgGenerator#error(String)} method.\n*/\nclass AnyWrapperMsgGeneratorTest1 {"
	},
	{
		"original_code": "// AnyWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class AnyWrapperMsgGenerator {\n\n    public static String error(Exception ex) {\n        return \"Error - \" + ex;\n    }\n\n    public static String error(String str) {\n        return str;\n    }\n\n    public static String error(int id, int errorCode, String errorMsg) {\n        String err = Integer.toString(id);\n        err += \" | \";\n        err += Integer.toString(errorCode);\n        err += \" | \";\n        err += errorMsg;\n        return err;\n    }\n\n    public static String connectionClosed() {\n        return \"Connection Closed\";\n    }\n\n    public static String ioError(Exception ex) {\n        return error(ex);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/AnyWrapperMsgGeneratorTest2.java",
		"test_prompt": "// AnyWrapperMsgGeneratorTest2.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link AnyWrapperMsgGenerator#error(int, int, String)} method.\n*/\nclass AnyWrapperMsgGeneratorTest2 {"
	},
	{
		"original_code": "// AnyWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class AnyWrapperMsgGenerator {\n\n    public static String error(Exception ex) {\n        return \"Error - \" + ex;\n    }\n\n    public static String error(String str) {\n        return str;\n    }\n\n    public static String error(int id, int errorCode, String errorMsg) {\n        String err = Integer.toString(id);\n        err += \" | \";\n        err += Integer.toString(errorCode);\n        err += \" | \";\n        err += errorMsg;\n        return err;\n    }\n\n    public static String connectionClosed() {\n        return \"Connection Closed\";\n    }\n\n    public static String ioError(Exception ex) {\n        return error(ex);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/AnyWrapperMsgGeneratorTest3.java",
		"test_prompt": "// AnyWrapperMsgGeneratorTest3.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link AnyWrapperMsgGenerator#connectionClosed()} method.\n*/\nclass AnyWrapperMsgGeneratorTest3 {"
	},
	{
		"original_code": "// AnyWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class AnyWrapperMsgGenerator {\n\n    public static String error(Exception ex) {\n        return \"Error - \" + ex;\n    }\n\n    public static String error(String str) {\n        return str;\n    }\n\n    public static String error(int id, int errorCode, String errorMsg) {\n        String err = Integer.toString(id);\n        err += \" | \";\n        err += Integer.toString(errorCode);\n        err += \" | \";\n        err += errorMsg;\n        return err;\n    }\n\n    public static String connectionClosed() {\n        return \"Connection Closed\";\n    }\n\n    public static String ioError(Exception ex) {\n        return error(ex);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/AnyWrapperMsgGeneratorTest4.java",
		"test_prompt": "// AnyWrapperMsgGeneratorTest4.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link AnyWrapperMsgGenerator#ioError(Exception)} method.\n*/\nclass AnyWrapperMsgGeneratorTest4 {"
	},
	{
		"original_code": "// ComboLeg.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * ComboLeg.java\n *\n */\npackage com.ib.client;\n\npublic class ComboLeg {\n\n    // open/close leg value is same as combo\n    public final static int SAME = 0;\n\n    public final static int OPEN = 1;\n\n    public final static int CLOSE = 2;\n\n    public final static int UNKNOWN = 3;\n\n    public int m_conId;\n\n    public int m_ratio;\n\n    // BUY/SELL/SSHORT\n    public String m_action;\n\n    public String m_exchange;\n\n    public int m_openClose;\n\n    // for stock legs when doing short sale\n    // 1 = clearing broker, 2 = third party\n    public int m_shortSaleSlot;\n\n    public String m_designatedLocation;\n\n    public ComboLeg() {\n        this(/* conId */\n        0, /* ratio */\n        0, /* action */\n        null, /* exchange */\n        null, /* openClose */\n        0, /* shortSaleSlot */\n        0, /* designatedLocation*/\n        null);\n    }\n\n    public ComboLeg(int p_conId, int p_ratio, String p_action, String p_exchange, int p_openClose) {\n        this(p_conId, p_ratio, p_action, p_exchange, p_openClose, /* shortSaleSlot */\n        0, /* designatedLocation*/\n        null);\n    }\n\n    public ComboLeg(int p_conId, int p_ratio, String p_action, String p_exchange, int p_openClose, int p_shortSaleSlot, String p_designatedLocation) {\n        m_conId = p_conId;\n        m_ratio = p_ratio;\n        m_action = p_action;\n        m_exchange = p_exchange;\n        m_openClose = p_openClose;\n        m_shortSaleSlot = p_shortSaleSlot;\n        m_designatedLocation = p_designatedLocation;\n    }\n\n    public boolean equals(Object p_other) {\n        if (this == p_other) {\n            return true;\n        } else if (p_other == null) {\n            return false;\n        }\n        ComboLeg l_theOther = (ComboLeg) p_other;\n        if (m_conId != l_theOther.m_conId || m_ratio != l_theOther.m_ratio || m_openClose != l_theOther.m_openClose || m_shortSaleSlot != l_theOther.m_shortSaleSlot) {\n            return false;\n        }\n        if (Util.StringCompareIgnCase(m_action, l_theOther.m_action) != 0 || Util.StringCompareIgnCase(m_exchange, l_theOther.m_exchange) != 0 || Util.StringCompareIgnCase(m_designatedLocation, l_theOther.m_designatedLocation) != 0) {\n            return false;\n        }\n        return true;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ComboLegTest.java",
		"test_prompt": "// ComboLegTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * ComboLeg.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ComboLeg}.\n* It contains ten unit test cases for the {@link ComboLeg#equals(Object)} method.\n*/\nclass ComboLegTest {"
	},
	{
		"original_code": "// EClientSocket.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\n\npublic class EClientSocket {\n\n    // Client version history\n    //\n    // 6 = Added parentId to orderStatus\n    // 7 = The new execDetails event returned for an order filled status and\n    // reqExecDetails\n    // Also market depth is available.\n    // 8 = Added lastFillPrice to orderStatus() event and permId to execution\n    // details\n    // 9 = Added 'averageCost', 'unrealizedPNL', and 'unrealizedPNL' to\n    // updatePortfolio event\n    // 10 = Added 'serverId' to the 'open order' & 'order status' events.\n    // We send back all the API open orders upon connection.\n    // Added new methods reqAllOpenOrders, reqAutoOpenOrders()\n    // Added FA support - reqExecution has filter.\n    // - reqAccountUpdates takes acct code.\n    // 11 = Added permId to openOrder event.\n    // 12 = requsting open order attributes ignoreRth, hidden, and discretionary\n    // 13 = added goodAfterTime\n    // 14 = always send size on bid/ask/last tick\n    // 15 = send allocation description string on openOrder\n    // 16 = can receive account name in account and portfolio updates, and fa\n    // params in openOrder\n    // 17 = can receive liquidation field in exec reports, and notAutoAvailable\n    // field in mkt data\n    // 18 = can receive good till date field in open order messages, and request\n    // intraday backfill\n    // 19 = can receive rthOnly flag in ORDER_STATUS\n    // 20 = expects TWS time string on connection after server version >= 20.\n    // 21 = can receive bond contract details.\n    // 22 = can receive price magnifier in version 2 contract details message\n    // 23 = support for scanner\n    // 24 = can receive volatility order parameters in open order messages\n    // 25 = can receive HMDS query start and end times\n    // 26 = can receive option vols in option market data messages\n    // 27 = can receive delta neutral order type and delta neutral aux price in\n    // place order version 20: API 8.85\n    // 28 = can receive option model computation ticks: API 8.9\n    // 29 = can receive trail stop limit price in open order and can place them:\n    // API 8.91\n    // 30 = can receive extended bond contract def, new ticks, and trade count\n    // in bars\n    // 31 = can receive EFP extensions to scanner and market data, and combo\n    // legs on open orders\n    // ; can receive RT bars\n    // 32 = can receive TickType.LAST_TIMESTAMP\n    // ; can receive \"whyHeld\" in order status messages\n    // 33 = can receive ScaleNumComponents and ScaleComponentSize is open order\n    // messages\n    // 34 = can receive whatIf orders / order state\n    // 35 = can receive contId field for Contract objects\n    // 36 = can receive outsideRth field for Order objects\n    // 37 = can receive clearingAccount and clearingIntent for Order objects\n    // 38 = can receive multiplier and primaryExchange in portfolio updates\n    // ; can receive cumQty and avgPrice in execution\n    // ; can receive fundamental data\n    // ; can receive underComp for Contract objects\n    // ; can receive reqId and end marker in contractDetails/bondContractDetails\n    // ; can receive ScaleInitComponentSize and ScaleSubsComponentSize for Order\n    // objects\n    // 39 = can receive underConId in contractDetails\n    // 40 = can receive algoStrategy/algoParams in openOrder\n    // 41 = can receive end marker for openOrder\n    // ; can receive end marker for account download\n    // ; can receive end marker for executions download\n    // 42 = can receive deltaNeutralValidation\n    // 43 = can receive longName(companyName)\n    // ; can receive listingExchange\n    // ; can receive RTVolume tick\n    // 44 = can receive end market for ticker snapshot\n    // 45 = can receive notHeld field in openOrder\n    // 46 = can receive contractMonth, industry, category, subcategory fields in\n    // contractDetails\n    // ; can receive timeZoneId, tradingHours, liquidHours fields in\n    // contractDetails\n    private static final int CLIENT_VERSION = 46;\n\n    private static final int SERVER_VERSION = 38;\n\n    private static final byte[] EOL = { 0 };\n\n    private static final String BAG_SEC_TYPE = \"BAG\";\n\n    // FA msg data types\n    public static final int GROUPS = 1;\n\n    public static final int PROFILES = 2;\n\n    public static final int ALIASES = 3;\n\n    public static String faMsgTypeName(int faDataType) {\n        switch(faDataType) {\n            case GROUPS:\n                return \"GROUPS\";\n            case PROFILES:\n                return \"PROFILES\";\n            case ALIASES:\n                return \"ALIASES\";\n        }\n        return null;\n    }\n\n    // outgoing msg id's\n    private static final int REQ_MKT_DATA = 1;\n\n    private static final int CANCEL_MKT_DATA = 2;\n\n    private static final int PLACE_ORDER = 3;\n\n    private static final int CANCEL_ORDER = 4;\n\n    private static final int REQ_OPEN_ORDERS = 5;\n\n    private static final int REQ_ACCOUNT_DATA = 6;\n\n    private static final int REQ_EXECUTIONS = 7;\n\n    private static final int REQ_IDS = 8;\n\n    private static final int REQ_CONTRACT_DATA = 9;\n\n    private static final int REQ_MKT_DEPTH = 10;\n\n    private static final int CANCEL_MKT_DEPTH = 11;\n\n    private static final int REQ_NEWS_BULLETINS = 12;\n\n    private static final int CANCEL_NEWS_BULLETINS = 13;\n\n    private static final int SET_SERVER_LOGLEVEL = 14;\n\n    private static final int REQ_AUTO_OPEN_ORDERS = 15;\n\n    private static final int REQ_ALL_OPEN_ORDERS = 16;\n\n    private static final int REQ_MANAGED_ACCTS = 17;\n\n    private static final int REQ_FA = 18;\n\n    private static final int REPLACE_FA = 19;\n\n    private static final int REQ_HISTORICAL_DATA = 20;\n\n    private static final int EXERCISE_OPTIONS = 21;\n\n    private static final int REQ_SCANNER_SUBSCRIPTION = 22;\n\n    private static final int CANCEL_SCANNER_SUBSCRIPTION = 23;\n\n    private static final int REQ_SCANNER_PARAMETERS = 24;\n\n    private static final int CANCEL_HISTORICAL_DATA = 25;\n\n    private static final int REQ_CURRENT_TIME = 49;\n\n    private static final int REQ_REAL_TIME_BARS = 50;\n\n    private static final int CANCEL_REAL_TIME_BARS = 51;\n\n    private static final int REQ_FUNDAMENTAL_DATA = 52;\n\n    private static final int CANCEL_FUNDAMENTAL_DATA = 53;\n\n    private static final int MIN_SERVER_VER_REAL_TIME_BARS = 34;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS = 35;\n\n    private static final int MIN_SERVER_VER_SNAPSHOT_MKT_DATA = 35;\n\n    private static final int MIN_SERVER_VER_SSHORT_COMBO_LEGS = 35;\n\n    private static final int MIN_SERVER_VER_WHAT_IF_ORDERS = 36;\n\n    private static final int MIN_SERVER_VER_CONTRACT_CONID = 37;\n\n    private static final int MIN_SERVER_VER_PTA_ORDERS = 39;\n\n    private static final int MIN_SERVER_VER_FUNDAMENTAL_DATA = 40;\n\n    private static final int MIN_SERVER_VER_UNDER_COMP = 40;\n\n    private static final int MIN_SERVER_VER_CONTRACT_DATA_CHAIN = 40;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS2 = 40;\n\n    private static final int MIN_SERVER_VER_ALGO_ORDERS = 41;\n\n    private static final int MIN_SERVER_VER_EXECUTION_DATA_CHAIN = 42;\n\n    private static final int MIN_SERVER_VER_NOT_HELD = 44;\n\n    private static final int MIN_SERVER_VER_SEC_ID_TYPE = 45;\n\n    private Socket m_socket;\n\n    // the socket output stream\n    private DataOutputStream m_dos;\n\n    private DataInputStream m_dis;\n\n    private int m_serverVersion;\n\n    private String m_TwsTime;\n\n    public synchronized int serverVersion() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_serverVersion;\n    }\n\n    public synchronized String TwsConnectionTime() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_TwsTime;\n    }\n\n    public synchronized boolean isConnected() {\n        return m_socket != null && m_socket.isConnected() && !m_socket.isClosed();\n    }\n\n    public synchronized void eConnect(String host, int port, int clientId) throws IOException, EException {\n        if (isConnected()) {\n            throw createEException(NO_VALID_ID, ALREADY_CONNECTED);\n        }\n        m_socket = createSocket(host, port);\n        m_dis = createDataInputStream(m_socket);\n        m_dos = createDataOutputStream(m_socket);\n        send(CLIENT_VERSION);\n        m_serverVersion = readInt(m_dis);\n        if (m_serverVersion < SERVER_VERSION) {\n            throw createEException(NO_VALID_ID, UPDATE_TWS);\n        }\n        if (m_serverVersion >= 20) {\n            m_TwsTime = readStr(m_dis);\n        }\n        // Send the client id\n        if (m_serverVersion >= 3) {\n            send(clientId);\n        }\n    }\n\n    EException createEException(int id, CodeMsgPair codeMsgPair) {\n        return new EException(id, codeMsgPair);\n    }\n\n    public synchronized void eDisconnect() throws IOException {\n        Socket socket = m_socket;\n        m_socket = null;\n        m_dis = null;\n        m_dos = null;\n        m_serverVersion = 0;\n        m_TwsTime = null;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public synchronized void cancelScannerSubscription(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqScannerParameters() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_SCANNER_PARAMETERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqScannerSubscription(int tickerId, ScannerSubscription subscription) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 3;\n        send(REQ_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n        sendMax(subscription.numberOfRows());\n        send(subscription.instrument());\n        send(subscription.locationCode());\n        send(subscription.scanCode());\n        sendMax(subscription.abovePrice());\n        sendMax(subscription.belowPrice());\n        sendMax(subscription.aboveVolume());\n        sendMax(subscription.marketCapAbove());\n        sendMax(subscription.marketCapBelow());\n        send(subscription.moodyRatingAbove());\n        send(subscription.moodyRatingBelow());\n        send(subscription.spRatingAbove());\n        send(subscription.spRatingBelow());\n        send(subscription.maturityDateAbove());\n        send(subscription.maturityDateBelow());\n        sendMax(subscription.couponRateAbove());\n        sendMax(subscription.couponRateBelow());\n        send(subscription.excludeConvertible());\n        if (m_serverVersion >= 25) {\n            send(subscription.averageOptionVolumeAbove());\n            send(subscription.scannerSettingPairs());\n        }\n        if (m_serverVersion >= 27) {\n            send(subscription.stockTypeFilter());\n        }\n    }\n\n    public synchronized void reqMktData(int tickerId, Contract contract, String genericTickList, boolean snapshot) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SNAPSHOT_MKT_DATA && snapshot) {\n            error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support snapshot market data requests.\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        final int VERSION = 8;\n        // send req mkt data msg\n        send(REQ_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= 31) {\n            /*\n\t\t\t * Note: Even though SHORTABLE tick type supported only starting\n\t\t\t * server version 33 it would be relatively expensive to expose this\n\t\t\t * restriction here.\n\t\t\t * \n\t\t\t * Therefore we are relying on TWS doing validation.\n\t\t\t */\n            send(genericTickList);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SNAPSHOT_MKT_DATA) {\n            send(snapshot);\n        }\n    }\n\n    public synchronized void cancelHistoricalData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelRealTimeBars(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support realtime bar data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqHistoricalData(int tickerId, Contract contract, String endDateTime, String durationStr, String barSizeSetting, String whatToShow, int useRTH, int formatDate) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 4;\n        if (m_serverVersion < 16) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data backfill.\");\n            return;\n        }\n        send(REQ_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired ? 1 : 0);\n        }\n        if (m_serverVersion >= 20) {\n            send(endDateTime);\n            send(barSizeSetting);\n        }\n        send(durationStr);\n        send(useRTH);\n        send(whatToShow);\n        if (m_serverVersion > 16) {\n            send(formatDate);\n        }\n        if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n    }\n\n    public synchronized void reqRealTimeBars(int tickerId, Contract contract, int barSize, String whatToShow, boolean useRTH) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support real time bars.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(REQ_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(barSize);\n        send(whatToShow);\n        send(useRTH);\n    }\n\n    public synchronized void reqContractDetails(int reqId, Contract contract) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=4\n        if (m_serverVersion < 4) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        final int VERSION = 6;\n        // send req mkt data msg\n        send(REQ_CONTRACT_DATA);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_DATA_CHAIN) {\n            send(reqId);\n        }\n        // send contract fields\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_CONID) {\n            send(contract.m_conId);\n        }\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n    }\n\n    public synchronized void reqMktDepth(int tickerId, Contract contract, int numRows) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 3;\n        // send req mkt data msg\n        send(REQ_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 19) {\n            send(numRows);\n        }\n    }\n\n    public synchronized void cancelMktData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelMktDepth(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void exerciseOptions(int tickerId, Contract contract, int exerciseAction, int exerciseQuantity, String account, int override) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        if (m_serverVersion < 21) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support options exercise from the API.\");\n            return;\n        }\n        send(EXERCISE_OPTIONS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(exerciseAction);\n        send(exerciseQuantity);\n        send(account);\n        send(override);\n    }\n\n    public synchronized void placeOrder(int id, Contract contract, Order order) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS) {\n            if (order.m_scaleInitLevelSize != Integer.MAX_VALUE || order.m_scalePriceIncrement != Double.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n            if (!contract.m_comboLegs.isEmpty()) {\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    if (comboLeg.m_shortSaleSlot != 0 || !IsEmpty(comboLeg.m_designatedLocation)) {\n                        error(id, EClientErrors.UPDATE_TWS, \"  It does not support SSHORT flag for combo legs.\");\n                        return;\n                    }\n                }\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            if (order.m_whatIf) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support what-if orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS2) {\n            if (order.m_scaleSubsLevelSize != Integer.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Subsequent Level Size for Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_ALGO_ORDERS) {\n            if (!IsEmpty(order.m_algoStrategy)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support algo orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_NOT_HELD) {\n            if (order.m_notHeld) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support notHeld parameter.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        int VERSION = (m_serverVersion < MIN_SERVER_VER_NOT_HELD) ? 27 : 29;\n        // send place order msg\n        send(PLACE_ORDER);\n        send(VERSION);\n        send(id);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n        // send main order fields\n        send(order.m_action);\n        send(order.m_totalQuantity);\n        send(order.m_orderType);\n        send(order.m_lmtPrice);\n        send(order.m_auxPrice);\n        // send extended order fields\n        send(order.m_tif);\n        send(order.m_ocaGroup);\n        send(order.m_account);\n        send(order.m_openClose);\n        send(order.m_origin);\n        send(order.m_orderRef);\n        send(order.m_transmit);\n        if (m_serverVersion >= 4) {\n            send(order.m_parentId);\n        }\n        if (m_serverVersion >= 5) {\n            send(order.m_blockOrder);\n            send(order.m_sweepToFill);\n            send(order.m_displaySize);\n            send(order.m_triggerMethod);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_ignoreRth */\n                false);\n            } else {\n                send(order.m_outsideRth);\n            }\n        }\n        if (m_serverVersion >= 7) {\n            send(order.m_hidden);\n        }\n        // Send combo legs for BAG requests\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                    send(comboLeg.m_openClose);\n                    if (m_serverVersion >= MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n                        send(comboLeg.m_shortSaleSlot);\n                        send(comboLeg.m_designatedLocation);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= 9) {\n            // send deprecated sharesAllocation field\n            send(\"\");\n        }\n        if (m_serverVersion >= 10) {\n            send(order.m_discretionaryAmt);\n        }\n        if (m_serverVersion >= 11) {\n            send(order.m_goodAfterTime);\n        }\n        if (m_serverVersion >= 12) {\n            send(order.m_goodTillDate);\n        }\n        if (m_serverVersion >= 13) {\n            send(order.m_faGroup);\n            send(order.m_faMethod);\n            send(order.m_faPercentage);\n            send(order.m_faProfile);\n        }\n        if (m_serverVersion >= 18) {\n            // institutional short sale slot\n            // fields.\n            // 0 only for retail, 1 or 2 only\n            send(order.m_shortSaleSlot);\n            // for institution.\n            // only populate when\n            send(order.m_designatedLocation);\n            // order.m_shortSaleSlot =\n            // 2.\n        }\n        if (m_serverVersion >= 19) {\n            send(order.m_ocaType);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_rthOnly */\n                false);\n            }\n            send(order.m_rule80A);\n            send(order.m_settlingFirm);\n            send(order.m_allOrNone);\n            sendMax(order.m_minQty);\n            sendMax(order.m_percentOffset);\n            send(order.m_eTradeOnly);\n            send(order.m_firmQuoteOnly);\n            sendMax(order.m_nbboPriceCap);\n            sendMax(order.m_auctionStrategy);\n            sendMax(order.m_startingPrice);\n            sendMax(order.m_stockRefPrice);\n            sendMax(order.m_delta);\n            // Volatility orders had specific watermark price attribs in\n            // server version 26\n            double lower = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeLower;\n            double upper = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeUpper;\n            sendMax(lower);\n            sendMax(upper);\n        }\n        if (m_serverVersion >= 22) {\n            send(order.m_overridePercentageConstraints);\n        }\n        if (m_serverVersion >= 26) {\n            // Volatility orders\n            sendMax(order.m_volatility);\n            sendMax(order.m_volatilityType);\n            if (m_serverVersion < 28) {\n                send(order.m_deltaNeutralOrderType.equalsIgnoreCase(\"MKT\"));\n            } else {\n                send(order.m_deltaNeutralOrderType);\n                sendMax(order.m_deltaNeutralAuxPrice);\n            }\n            send(order.m_continuousUpdate);\n            if (m_serverVersion == 26) {\n                // Volatility orders had specific watermark price attribs in\n                // server version 26\n                double lower = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeLower : Double.MAX_VALUE;\n                double upper = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeUpper : Double.MAX_VALUE;\n                sendMax(lower);\n                sendMax(upper);\n            }\n            sendMax(order.m_referencePriceType);\n        }\n        if (m_serverVersion >= 30) {\n            // TRAIL_STOP_LIMIT stop price\n            sendMax(order.m_trailStopPrice);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS) {\n            if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS2) {\n                sendMax(order.m_scaleInitLevelSize);\n                sendMax(order.m_scaleSubsLevelSize);\n            } else {\n                send(\"\");\n                sendMax(order.m_scaleInitLevelSize);\n            }\n            sendMax(order.m_scalePriceIncrement);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_PTA_ORDERS) {\n            send(order.m_clearingAccount);\n            send(order.m_clearingIntent);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_NOT_HELD) {\n            send(order.m_notHeld);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_ALGO_ORDERS) {\n            send(order.m_algoStrategy);\n            if (!IsEmpty(order.m_algoStrategy)) {\n                java.util.Vector algoParams = order.m_algoParams;\n                int algoParamsCount = algoParams == null ? 0 : algoParams.size();\n                send(algoParamsCount);\n                if (algoParamsCount > 0) {\n                    for (int i = 0; i < algoParamsCount; ++i) {\n                        TagValue tagValue = (TagValue) algoParams.get(i);\n                        send(tagValue.m_tag);\n                        send(tagValue.m_value);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            send(order.m_whatIf);\n        }\n    }\n\n    public synchronized void reqAccountUpdates(boolean subscribe, String acctCode) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 2;\n        // send cancel order msg\n        send(REQ_ACCOUNT_DATA);\n        send(VERSION);\n        send(subscribe);\n        // Send the account code. This will only be used for FA clients\n        if (m_serverVersion >= 9) {\n            send(acctCode);\n        }\n    }\n\n    public synchronized void reqExecutions(int reqId, ExecutionFilter filter) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 3;\n        // send cancel order msg\n        send(REQ_EXECUTIONS);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_EXECUTION_DATA_CHAIN) {\n            send(reqId);\n        }\n        // Send the execution rpt filter data\n        if (m_serverVersion >= 9) {\n            send(filter.m_clientId);\n            send(filter.m_acctCode);\n            // Note that the valid format for m_time is \"yyyymmdd-hh:mm:ss\"\n            send(filter.m_time);\n            send(filter.m_symbol);\n            send(filter.m_secType);\n            send(filter.m_exchange);\n            send(filter.m_side);\n        }\n    }\n\n    public synchronized void cancelOrder(int id) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_ORDER);\n        send(VERSION);\n        send(id);\n    }\n\n    public synchronized void reqOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(REQ_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqIds(int numIds) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_IDS);\n        send(VERSION);\n        send(numIds);\n    }\n\n    public synchronized void reqNewsBulletins(boolean allMsgs) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_NEWS_BULLETINS);\n        send(VERSION);\n        send(allMsgs);\n    }\n\n    public synchronized void cancelNewsBulletins() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_NEWS_BULLETINS);\n        send(VERSION);\n    }\n\n    public synchronized void setServerLogLevel(int logLevel) throws IOException, EException {\n        final int VERSION = 1;\n        // send the set server logging level message\n        send(SET_SERVER_LOGLEVEL);\n        send(VERSION);\n        send(logLevel);\n    }\n\n    public synchronized void reqAutoOpenOrders(boolean bAutoBind) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req open orders msg\n        send(REQ_AUTO_OPEN_ORDERS);\n        send(VERSION);\n        send(bAutoBind);\n    }\n\n    public synchronized void reqAllOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req all open orders msg\n        send(REQ_ALL_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqManagedAccts() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req FA managed accounts msg\n        send(REQ_MANAGED_ACCTS);\n        send(VERSION);\n    }\n\n    public synchronized void requestFA(int faDataType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_FA);\n        send(VERSION);\n        send(faDataType);\n    }\n\n    public synchronized void replaceFA(int faDataType, String xml) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REPLACE_FA);\n        send(VERSION);\n        send(faDataType);\n        send(xml);\n    }\n\n    public synchronized void reqCurrentTime() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 33\n        if (m_serverVersion < 33) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support current time requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_CURRENT_TIME);\n        send(VERSION);\n    }\n\n    public synchronized void reqFundamentalData(int reqId, Contract contract, String reportType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req fund data msg\n        send(REQ_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(reportType);\n    }\n\n    public synchronized void cancelFundamentalData(int reqId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(CANCEL_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n    }\n\n    protected void error(String err) throws EException {\n        throw new EException(err);\n    }\n\n    protected void error(int id, int errorCode, String errorMsg) throws EException {\n        throw new EException(id, errorCode, errorMsg);\n    }\n\n    protected void close() {\n    }\n\n    private void error(int id, EClientErrors.CodeMsgPair pair, String tail) throws EException {\n        error(id, pair.code(), pair.msg() + tail);\n    }\n\n    protected void send(String str) throws IOException {\n        // write string to data buffer; writer thread will\n        // write it to socket\n        if (!IsEmpty(str)) {\n            m_dos.write(str.getBytes());\n        }\n        sendEOL();\n    }\n\n    private void sendEOL() throws IOException {\n        m_dos.write(EOL);\n    }\n\n    protected void send(int val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(char val) throws IOException {\n        m_dos.write(val);\n        sendEOL();\n    }\n\n    protected void send(double val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(long val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    private void sendMax(double val) throws IOException {\n        if (val == Double.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    private void sendMax(int val) throws IOException {\n        if (val == Integer.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    protected void send(boolean val) throws IOException {\n        send(val ? 1 : 0);\n    }\n\n    private static boolean IsEmpty(String str) {\n        return Util.StringIsEmpty(str);\n    }\n\n    public DataInputStream dataInputStream() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_dis;\n    }\n\n    DataInputStream createDataInputStream(Socket socket) throws IOException {\n        return new DataInputStream(socket.getInputStream());\n    }\n\n    DataOutputStream createDataOutputStream(Socket socket) throws IOException {\n        return new DataOutputStream(socket.getOutputStream());\n    }\n\n    Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EClientSocketTest0.java",
		"test_prompt": "// EClientSocketTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EClientSocket}.\n* It contains ten unit test cases for the {@link EClientSocket#faMsgTypeName(int)} method.\n*/\nclass EClientSocketTest0 {"
	},
	{
		"original_code": "// EClientSocket.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\n\npublic class EClientSocket {\n\n    // Client version history\n    //\n    // 6 = Added parentId to orderStatus\n    // 7 = The new execDetails event returned for an order filled status and\n    // reqExecDetails\n    // Also market depth is available.\n    // 8 = Added lastFillPrice to orderStatus() event and permId to execution\n    // details\n    // 9 = Added 'averageCost', 'unrealizedPNL', and 'unrealizedPNL' to\n    // updatePortfolio event\n    // 10 = Added 'serverId' to the 'open order' & 'order status' events.\n    // We send back all the API open orders upon connection.\n    // Added new methods reqAllOpenOrders, reqAutoOpenOrders()\n    // Added FA support - reqExecution has filter.\n    // - reqAccountUpdates takes acct code.\n    // 11 = Added permId to openOrder event.\n    // 12 = requsting open order attributes ignoreRth, hidden, and discretionary\n    // 13 = added goodAfterTime\n    // 14 = always send size on bid/ask/last tick\n    // 15 = send allocation description string on openOrder\n    // 16 = can receive account name in account and portfolio updates, and fa\n    // params in openOrder\n    // 17 = can receive liquidation field in exec reports, and notAutoAvailable\n    // field in mkt data\n    // 18 = can receive good till date field in open order messages, and request\n    // intraday backfill\n    // 19 = can receive rthOnly flag in ORDER_STATUS\n    // 20 = expects TWS time string on connection after server version >= 20.\n    // 21 = can receive bond contract details.\n    // 22 = can receive price magnifier in version 2 contract details message\n    // 23 = support for scanner\n    // 24 = can receive volatility order parameters in open order messages\n    // 25 = can receive HMDS query start and end times\n    // 26 = can receive option vols in option market data messages\n    // 27 = can receive delta neutral order type and delta neutral aux price in\n    // place order version 20: API 8.85\n    // 28 = can receive option model computation ticks: API 8.9\n    // 29 = can receive trail stop limit price in open order and can place them:\n    // API 8.91\n    // 30 = can receive extended bond contract def, new ticks, and trade count\n    // in bars\n    // 31 = can receive EFP extensions to scanner and market data, and combo\n    // legs on open orders\n    // ; can receive RT bars\n    // 32 = can receive TickType.LAST_TIMESTAMP\n    // ; can receive \"whyHeld\" in order status messages\n    // 33 = can receive ScaleNumComponents and ScaleComponentSize is open order\n    // messages\n    // 34 = can receive whatIf orders / order state\n    // 35 = can receive contId field for Contract objects\n    // 36 = can receive outsideRth field for Order objects\n    // 37 = can receive clearingAccount and clearingIntent for Order objects\n    // 38 = can receive multiplier and primaryExchange in portfolio updates\n    // ; can receive cumQty and avgPrice in execution\n    // ; can receive fundamental data\n    // ; can receive underComp for Contract objects\n    // ; can receive reqId and end marker in contractDetails/bondContractDetails\n    // ; can receive ScaleInitComponentSize and ScaleSubsComponentSize for Order\n    // objects\n    // 39 = can receive underConId in contractDetails\n    // 40 = can receive algoStrategy/algoParams in openOrder\n    // 41 = can receive end marker for openOrder\n    // ; can receive end marker for account download\n    // ; can receive end marker for executions download\n    // 42 = can receive deltaNeutralValidation\n    // 43 = can receive longName(companyName)\n    // ; can receive listingExchange\n    // ; can receive RTVolume tick\n    // 44 = can receive end market for ticker snapshot\n    // 45 = can receive notHeld field in openOrder\n    // 46 = can receive contractMonth, industry, category, subcategory fields in\n    // contractDetails\n    // ; can receive timeZoneId, tradingHours, liquidHours fields in\n    // contractDetails\n    private static final int CLIENT_VERSION = 46;\n\n    private static final int SERVER_VERSION = 38;\n\n    private static final byte[] EOL = { 0 };\n\n    private static final String BAG_SEC_TYPE = \"BAG\";\n\n    // FA msg data types\n    public static final int GROUPS = 1;\n\n    public static final int PROFILES = 2;\n\n    public static final int ALIASES = 3;\n\n    public static String faMsgTypeName(int faDataType) {\n        switch(faDataType) {\n            case GROUPS:\n                return \"GROUPS\";\n            case PROFILES:\n                return \"PROFILES\";\n            case ALIASES:\n                return \"ALIASES\";\n        }\n        return null;\n    }\n\n    // outgoing msg id's\n    private static final int REQ_MKT_DATA = 1;\n\n    private static final int CANCEL_MKT_DATA = 2;\n\n    private static final int PLACE_ORDER = 3;\n\n    private static final int CANCEL_ORDER = 4;\n\n    private static final int REQ_OPEN_ORDERS = 5;\n\n    private static final int REQ_ACCOUNT_DATA = 6;\n\n    private static final int REQ_EXECUTIONS = 7;\n\n    private static final int REQ_IDS = 8;\n\n    private static final int REQ_CONTRACT_DATA = 9;\n\n    private static final int REQ_MKT_DEPTH = 10;\n\n    private static final int CANCEL_MKT_DEPTH = 11;\n\n    private static final int REQ_NEWS_BULLETINS = 12;\n\n    private static final int CANCEL_NEWS_BULLETINS = 13;\n\n    private static final int SET_SERVER_LOGLEVEL = 14;\n\n    private static final int REQ_AUTO_OPEN_ORDERS = 15;\n\n    private static final int REQ_ALL_OPEN_ORDERS = 16;\n\n    private static final int REQ_MANAGED_ACCTS = 17;\n\n    private static final int REQ_FA = 18;\n\n    private static final int REPLACE_FA = 19;\n\n    private static final int REQ_HISTORICAL_DATA = 20;\n\n    private static final int EXERCISE_OPTIONS = 21;\n\n    private static final int REQ_SCANNER_SUBSCRIPTION = 22;\n\n    private static final int CANCEL_SCANNER_SUBSCRIPTION = 23;\n\n    private static final int REQ_SCANNER_PARAMETERS = 24;\n\n    private static final int CANCEL_HISTORICAL_DATA = 25;\n\n    private static final int REQ_CURRENT_TIME = 49;\n\n    private static final int REQ_REAL_TIME_BARS = 50;\n\n    private static final int CANCEL_REAL_TIME_BARS = 51;\n\n    private static final int REQ_FUNDAMENTAL_DATA = 52;\n\n    private static final int CANCEL_FUNDAMENTAL_DATA = 53;\n\n    private static final int MIN_SERVER_VER_REAL_TIME_BARS = 34;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS = 35;\n\n    private static final int MIN_SERVER_VER_SNAPSHOT_MKT_DATA = 35;\n\n    private static final int MIN_SERVER_VER_SSHORT_COMBO_LEGS = 35;\n\n    private static final int MIN_SERVER_VER_WHAT_IF_ORDERS = 36;\n\n    private static final int MIN_SERVER_VER_CONTRACT_CONID = 37;\n\n    private static final int MIN_SERVER_VER_PTA_ORDERS = 39;\n\n    private static final int MIN_SERVER_VER_FUNDAMENTAL_DATA = 40;\n\n    private static final int MIN_SERVER_VER_UNDER_COMP = 40;\n\n    private static final int MIN_SERVER_VER_CONTRACT_DATA_CHAIN = 40;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS2 = 40;\n\n    private static final int MIN_SERVER_VER_ALGO_ORDERS = 41;\n\n    private static final int MIN_SERVER_VER_EXECUTION_DATA_CHAIN = 42;\n\n    private static final int MIN_SERVER_VER_NOT_HELD = 44;\n\n    private static final int MIN_SERVER_VER_SEC_ID_TYPE = 45;\n\n    private Socket m_socket;\n\n    // the socket output stream\n    private DataOutputStream m_dos;\n\n    private DataInputStream m_dis;\n\n    private int m_serverVersion;\n\n    private String m_TwsTime;\n\n    public synchronized int serverVersion() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_serverVersion;\n    }\n\n    public synchronized String TwsConnectionTime() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_TwsTime;\n    }\n\n    public synchronized boolean isConnected() {\n        return m_socket != null && m_socket.isConnected() && !m_socket.isClosed();\n    }\n\n    public synchronized void eConnect(String host, int port, int clientId) throws IOException, EException {\n        if (isConnected()) {\n            throw createEException(NO_VALID_ID, ALREADY_CONNECTED);\n        }\n        m_socket = createSocket(host, port);\n        m_dis = createDataInputStream(m_socket);\n        m_dos = createDataOutputStream(m_socket);\n        send(CLIENT_VERSION);\n        m_serverVersion = readInt(m_dis);\n        if (m_serverVersion < SERVER_VERSION) {\n            throw createEException(NO_VALID_ID, UPDATE_TWS);\n        }\n        if (m_serverVersion >= 20) {\n            m_TwsTime = readStr(m_dis);\n        }\n        // Send the client id\n        if (m_serverVersion >= 3) {\n            send(clientId);\n        }\n    }\n\n    EException createEException(int id, CodeMsgPair codeMsgPair) {\n        return new EException(id, codeMsgPair);\n    }\n\n    public synchronized void eDisconnect() throws IOException {\n        Socket socket = m_socket;\n        m_socket = null;\n        m_dis = null;\n        m_dos = null;\n        m_serverVersion = 0;\n        m_TwsTime = null;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public synchronized void cancelScannerSubscription(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqScannerParameters() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_SCANNER_PARAMETERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqScannerSubscription(int tickerId, ScannerSubscription subscription) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 3;\n        send(REQ_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n        sendMax(subscription.numberOfRows());\n        send(subscription.instrument());\n        send(subscription.locationCode());\n        send(subscription.scanCode());\n        sendMax(subscription.abovePrice());\n        sendMax(subscription.belowPrice());\n        sendMax(subscription.aboveVolume());\n        sendMax(subscription.marketCapAbove());\n        sendMax(subscription.marketCapBelow());\n        send(subscription.moodyRatingAbove());\n        send(subscription.moodyRatingBelow());\n        send(subscription.spRatingAbove());\n        send(subscription.spRatingBelow());\n        send(subscription.maturityDateAbove());\n        send(subscription.maturityDateBelow());\n        sendMax(subscription.couponRateAbove());\n        sendMax(subscription.couponRateBelow());\n        send(subscription.excludeConvertible());\n        if (m_serverVersion >= 25) {\n            send(subscription.averageOptionVolumeAbove());\n            send(subscription.scannerSettingPairs());\n        }\n        if (m_serverVersion >= 27) {\n            send(subscription.stockTypeFilter());\n        }\n    }\n\n    public synchronized void reqMktData(int tickerId, Contract contract, String genericTickList, boolean snapshot) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SNAPSHOT_MKT_DATA && snapshot) {\n            error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support snapshot market data requests.\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        final int VERSION = 8;\n        // send req mkt data msg\n        send(REQ_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= 31) {\n            /*\n\t\t\t * Note: Even though SHORTABLE tick type supported only starting\n\t\t\t * server version 33 it would be relatively expensive to expose this\n\t\t\t * restriction here.\n\t\t\t * \n\t\t\t * Therefore we are relying on TWS doing validation.\n\t\t\t */\n            send(genericTickList);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SNAPSHOT_MKT_DATA) {\n            send(snapshot);\n        }\n    }\n\n    public synchronized void cancelHistoricalData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelRealTimeBars(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support realtime bar data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqHistoricalData(int tickerId, Contract contract, String endDateTime, String durationStr, String barSizeSetting, String whatToShow, int useRTH, int formatDate) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 4;\n        if (m_serverVersion < 16) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data backfill.\");\n            return;\n        }\n        send(REQ_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired ? 1 : 0);\n        }\n        if (m_serverVersion >= 20) {\n            send(endDateTime);\n            send(barSizeSetting);\n        }\n        send(durationStr);\n        send(useRTH);\n        send(whatToShow);\n        if (m_serverVersion > 16) {\n            send(formatDate);\n        }\n        if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n    }\n\n    public synchronized void reqRealTimeBars(int tickerId, Contract contract, int barSize, String whatToShow, boolean useRTH) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support real time bars.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(REQ_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(barSize);\n        send(whatToShow);\n        send(useRTH);\n    }\n\n    public synchronized void reqContractDetails(int reqId, Contract contract) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=4\n        if (m_serverVersion < 4) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        final int VERSION = 6;\n        // send req mkt data msg\n        send(REQ_CONTRACT_DATA);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_DATA_CHAIN) {\n            send(reqId);\n        }\n        // send contract fields\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_CONID) {\n            send(contract.m_conId);\n        }\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n    }\n\n    public synchronized void reqMktDepth(int tickerId, Contract contract, int numRows) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 3;\n        // send req mkt data msg\n        send(REQ_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 19) {\n            send(numRows);\n        }\n    }\n\n    public synchronized void cancelMktData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelMktDepth(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void exerciseOptions(int tickerId, Contract contract, int exerciseAction, int exerciseQuantity, String account, int override) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        if (m_serverVersion < 21) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support options exercise from the API.\");\n            return;\n        }\n        send(EXERCISE_OPTIONS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(exerciseAction);\n        send(exerciseQuantity);\n        send(account);\n        send(override);\n    }\n\n    public synchronized void placeOrder(int id, Contract contract, Order order) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS) {\n            if (order.m_scaleInitLevelSize != Integer.MAX_VALUE || order.m_scalePriceIncrement != Double.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n            if (!contract.m_comboLegs.isEmpty()) {\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    if (comboLeg.m_shortSaleSlot != 0 || !IsEmpty(comboLeg.m_designatedLocation)) {\n                        error(id, EClientErrors.UPDATE_TWS, \"  It does not support SSHORT flag for combo legs.\");\n                        return;\n                    }\n                }\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            if (order.m_whatIf) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support what-if orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS2) {\n            if (order.m_scaleSubsLevelSize != Integer.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Subsequent Level Size for Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_ALGO_ORDERS) {\n            if (!IsEmpty(order.m_algoStrategy)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support algo orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_NOT_HELD) {\n            if (order.m_notHeld) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support notHeld parameter.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        int VERSION = (m_serverVersion < MIN_SERVER_VER_NOT_HELD) ? 27 : 29;\n        // send place order msg\n        send(PLACE_ORDER);\n        send(VERSION);\n        send(id);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n        // send main order fields\n        send(order.m_action);\n        send(order.m_totalQuantity);\n        send(order.m_orderType);\n        send(order.m_lmtPrice);\n        send(order.m_auxPrice);\n        // send extended order fields\n        send(order.m_tif);\n        send(order.m_ocaGroup);\n        send(order.m_account);\n        send(order.m_openClose);\n        send(order.m_origin);\n        send(order.m_orderRef);\n        send(order.m_transmit);\n        if (m_serverVersion >= 4) {\n            send(order.m_parentId);\n        }\n        if (m_serverVersion >= 5) {\n            send(order.m_blockOrder);\n            send(order.m_sweepToFill);\n            send(order.m_displaySize);\n            send(order.m_triggerMethod);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_ignoreRth */\n                false);\n            } else {\n                send(order.m_outsideRth);\n            }\n        }\n        if (m_serverVersion >= 7) {\n            send(order.m_hidden);\n        }\n        // Send combo legs for BAG requests\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                    send(comboLeg.m_openClose);\n                    if (m_serverVersion >= MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n                        send(comboLeg.m_shortSaleSlot);\n                        send(comboLeg.m_designatedLocation);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= 9) {\n            // send deprecated sharesAllocation field\n            send(\"\");\n        }\n        if (m_serverVersion >= 10) {\n            send(order.m_discretionaryAmt);\n        }\n        if (m_serverVersion >= 11) {\n            send(order.m_goodAfterTime);\n        }\n        if (m_serverVersion >= 12) {\n            send(order.m_goodTillDate);\n        }\n        if (m_serverVersion >= 13) {\n            send(order.m_faGroup);\n            send(order.m_faMethod);\n            send(order.m_faPercentage);\n            send(order.m_faProfile);\n        }\n        if (m_serverVersion >= 18) {\n            // institutional short sale slot\n            // fields.\n            // 0 only for retail, 1 or 2 only\n            send(order.m_shortSaleSlot);\n            // for institution.\n            // only populate when\n            send(order.m_designatedLocation);\n            // order.m_shortSaleSlot =\n            // 2.\n        }\n        if (m_serverVersion >= 19) {\n            send(order.m_ocaType);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_rthOnly */\n                false);\n            }\n            send(order.m_rule80A);\n            send(order.m_settlingFirm);\n            send(order.m_allOrNone);\n            sendMax(order.m_minQty);\n            sendMax(order.m_percentOffset);\n            send(order.m_eTradeOnly);\n            send(order.m_firmQuoteOnly);\n            sendMax(order.m_nbboPriceCap);\n            sendMax(order.m_auctionStrategy);\n            sendMax(order.m_startingPrice);\n            sendMax(order.m_stockRefPrice);\n            sendMax(order.m_delta);\n            // Volatility orders had specific watermark price attribs in\n            // server version 26\n            double lower = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeLower;\n            double upper = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeUpper;\n            sendMax(lower);\n            sendMax(upper);\n        }\n        if (m_serverVersion >= 22) {\n            send(order.m_overridePercentageConstraints);\n        }\n        if (m_serverVersion >= 26) {\n            // Volatility orders\n            sendMax(order.m_volatility);\n            sendMax(order.m_volatilityType);\n            if (m_serverVersion < 28) {\n                send(order.m_deltaNeutralOrderType.equalsIgnoreCase(\"MKT\"));\n            } else {\n                send(order.m_deltaNeutralOrderType);\n                sendMax(order.m_deltaNeutralAuxPrice);\n            }\n            send(order.m_continuousUpdate);\n            if (m_serverVersion == 26) {\n                // Volatility orders had specific watermark price attribs in\n                // server version 26\n                double lower = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeLower : Double.MAX_VALUE;\n                double upper = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeUpper : Double.MAX_VALUE;\n                sendMax(lower);\n                sendMax(upper);\n            }\n            sendMax(order.m_referencePriceType);\n        }\n        if (m_serverVersion >= 30) {\n            // TRAIL_STOP_LIMIT stop price\n            sendMax(order.m_trailStopPrice);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS) {\n            if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS2) {\n                sendMax(order.m_scaleInitLevelSize);\n                sendMax(order.m_scaleSubsLevelSize);\n            } else {\n                send(\"\");\n                sendMax(order.m_scaleInitLevelSize);\n            }\n            sendMax(order.m_scalePriceIncrement);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_PTA_ORDERS) {\n            send(order.m_clearingAccount);\n            send(order.m_clearingIntent);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_NOT_HELD) {\n            send(order.m_notHeld);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_ALGO_ORDERS) {\n            send(order.m_algoStrategy);\n            if (!IsEmpty(order.m_algoStrategy)) {\n                java.util.Vector algoParams = order.m_algoParams;\n                int algoParamsCount = algoParams == null ? 0 : algoParams.size();\n                send(algoParamsCount);\n                if (algoParamsCount > 0) {\n                    for (int i = 0; i < algoParamsCount; ++i) {\n                        TagValue tagValue = (TagValue) algoParams.get(i);\n                        send(tagValue.m_tag);\n                        send(tagValue.m_value);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            send(order.m_whatIf);\n        }\n    }\n\n    public synchronized void reqAccountUpdates(boolean subscribe, String acctCode) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 2;\n        // send cancel order msg\n        send(REQ_ACCOUNT_DATA);\n        send(VERSION);\n        send(subscribe);\n        // Send the account code. This will only be used for FA clients\n        if (m_serverVersion >= 9) {\n            send(acctCode);\n        }\n    }\n\n    public synchronized void reqExecutions(int reqId, ExecutionFilter filter) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 3;\n        // send cancel order msg\n        send(REQ_EXECUTIONS);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_EXECUTION_DATA_CHAIN) {\n            send(reqId);\n        }\n        // Send the execution rpt filter data\n        if (m_serverVersion >= 9) {\n            send(filter.m_clientId);\n            send(filter.m_acctCode);\n            // Note that the valid format for m_time is \"yyyymmdd-hh:mm:ss\"\n            send(filter.m_time);\n            send(filter.m_symbol);\n            send(filter.m_secType);\n            send(filter.m_exchange);\n            send(filter.m_side);\n        }\n    }\n\n    public synchronized void cancelOrder(int id) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_ORDER);\n        send(VERSION);\n        send(id);\n    }\n\n    public synchronized void reqOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(REQ_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqIds(int numIds) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_IDS);\n        send(VERSION);\n        send(numIds);\n    }\n\n    public synchronized void reqNewsBulletins(boolean allMsgs) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_NEWS_BULLETINS);\n        send(VERSION);\n        send(allMsgs);\n    }\n\n    public synchronized void cancelNewsBulletins() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_NEWS_BULLETINS);\n        send(VERSION);\n    }\n\n    public synchronized void setServerLogLevel(int logLevel) throws IOException, EException {\n        final int VERSION = 1;\n        // send the set server logging level message\n        send(SET_SERVER_LOGLEVEL);\n        send(VERSION);\n        send(logLevel);\n    }\n\n    public synchronized void reqAutoOpenOrders(boolean bAutoBind) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req open orders msg\n        send(REQ_AUTO_OPEN_ORDERS);\n        send(VERSION);\n        send(bAutoBind);\n    }\n\n    public synchronized void reqAllOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req all open orders msg\n        send(REQ_ALL_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqManagedAccts() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req FA managed accounts msg\n        send(REQ_MANAGED_ACCTS);\n        send(VERSION);\n    }\n\n    public synchronized void requestFA(int faDataType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_FA);\n        send(VERSION);\n        send(faDataType);\n    }\n\n    public synchronized void replaceFA(int faDataType, String xml) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REPLACE_FA);\n        send(VERSION);\n        send(faDataType);\n        send(xml);\n    }\n\n    public synchronized void reqCurrentTime() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 33\n        if (m_serverVersion < 33) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support current time requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_CURRENT_TIME);\n        send(VERSION);\n    }\n\n    public synchronized void reqFundamentalData(int reqId, Contract contract, String reportType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req fund data msg\n        send(REQ_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(reportType);\n    }\n\n    public synchronized void cancelFundamentalData(int reqId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(CANCEL_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n    }\n\n    protected void error(String err) throws EException {\n        throw new EException(err);\n    }\n\n    protected void error(int id, int errorCode, String errorMsg) throws EException {\n        throw new EException(id, errorCode, errorMsg);\n    }\n\n    protected void close() {\n    }\n\n    private void error(int id, EClientErrors.CodeMsgPair pair, String tail) throws EException {\n        error(id, pair.code(), pair.msg() + tail);\n    }\n\n    protected void send(String str) throws IOException {\n        // write string to data buffer; writer thread will\n        // write it to socket\n        if (!IsEmpty(str)) {\n            m_dos.write(str.getBytes());\n        }\n        sendEOL();\n    }\n\n    private void sendEOL() throws IOException {\n        m_dos.write(EOL);\n    }\n\n    protected void send(int val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(char val) throws IOException {\n        m_dos.write(val);\n        sendEOL();\n    }\n\n    protected void send(double val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(long val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    private void sendMax(double val) throws IOException {\n        if (val == Double.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    private void sendMax(int val) throws IOException {\n        if (val == Integer.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    protected void send(boolean val) throws IOException {\n        send(val ? 1 : 0);\n    }\n\n    private static boolean IsEmpty(String str) {\n        return Util.StringIsEmpty(str);\n    }\n\n    public DataInputStream dataInputStream() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_dis;\n    }\n\n    DataInputStream createDataInputStream(Socket socket) throws IOException {\n        return new DataInputStream(socket.getInputStream());\n    }\n\n    DataOutputStream createDataOutputStream(Socket socket) throws IOException {\n        return new DataOutputStream(socket.getOutputStream());\n    }\n\n    Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EClientSocketTest1.java",
		"test_prompt": "// EClientSocketTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EClientSocket}.\n* It contains ten unit test cases for the {@link EClientSocket#serverVersion()} method.\n*/\nclass EClientSocketTest1 {"
	},
	{
		"original_code": "// EClientSocket.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\n\npublic class EClientSocket {\n\n    // Client version history\n    //\n    // 6 = Added parentId to orderStatus\n    // 7 = The new execDetails event returned for an order filled status and\n    // reqExecDetails\n    // Also market depth is available.\n    // 8 = Added lastFillPrice to orderStatus() event and permId to execution\n    // details\n    // 9 = Added 'averageCost', 'unrealizedPNL', and 'unrealizedPNL' to\n    // updatePortfolio event\n    // 10 = Added 'serverId' to the 'open order' & 'order status' events.\n    // We send back all the API open orders upon connection.\n    // Added new methods reqAllOpenOrders, reqAutoOpenOrders()\n    // Added FA support - reqExecution has filter.\n    // - reqAccountUpdates takes acct code.\n    // 11 = Added permId to openOrder event.\n    // 12 = requsting open order attributes ignoreRth, hidden, and discretionary\n    // 13 = added goodAfterTime\n    // 14 = always send size on bid/ask/last tick\n    // 15 = send allocation description string on openOrder\n    // 16 = can receive account name in account and portfolio updates, and fa\n    // params in openOrder\n    // 17 = can receive liquidation field in exec reports, and notAutoAvailable\n    // field in mkt data\n    // 18 = can receive good till date field in open order messages, and request\n    // intraday backfill\n    // 19 = can receive rthOnly flag in ORDER_STATUS\n    // 20 = expects TWS time string on connection after server version >= 20.\n    // 21 = can receive bond contract details.\n    // 22 = can receive price magnifier in version 2 contract details message\n    // 23 = support for scanner\n    // 24 = can receive volatility order parameters in open order messages\n    // 25 = can receive HMDS query start and end times\n    // 26 = can receive option vols in option market data messages\n    // 27 = can receive delta neutral order type and delta neutral aux price in\n    // place order version 20: API 8.85\n    // 28 = can receive option model computation ticks: API 8.9\n    // 29 = can receive trail stop limit price in open order and can place them:\n    // API 8.91\n    // 30 = can receive extended bond contract def, new ticks, and trade count\n    // in bars\n    // 31 = can receive EFP extensions to scanner and market data, and combo\n    // legs on open orders\n    // ; can receive RT bars\n    // 32 = can receive TickType.LAST_TIMESTAMP\n    // ; can receive \"whyHeld\" in order status messages\n    // 33 = can receive ScaleNumComponents and ScaleComponentSize is open order\n    // messages\n    // 34 = can receive whatIf orders / order state\n    // 35 = can receive contId field for Contract objects\n    // 36 = can receive outsideRth field for Order objects\n    // 37 = can receive clearingAccount and clearingIntent for Order objects\n    // 38 = can receive multiplier and primaryExchange in portfolio updates\n    // ; can receive cumQty and avgPrice in execution\n    // ; can receive fundamental data\n    // ; can receive underComp for Contract objects\n    // ; can receive reqId and end marker in contractDetails/bondContractDetails\n    // ; can receive ScaleInitComponentSize and ScaleSubsComponentSize for Order\n    // objects\n    // 39 = can receive underConId in contractDetails\n    // 40 = can receive algoStrategy/algoParams in openOrder\n    // 41 = can receive end marker for openOrder\n    // ; can receive end marker for account download\n    // ; can receive end marker for executions download\n    // 42 = can receive deltaNeutralValidation\n    // 43 = can receive longName(companyName)\n    // ; can receive listingExchange\n    // ; can receive RTVolume tick\n    // 44 = can receive end market for ticker snapshot\n    // 45 = can receive notHeld field in openOrder\n    // 46 = can receive contractMonth, industry, category, subcategory fields in\n    // contractDetails\n    // ; can receive timeZoneId, tradingHours, liquidHours fields in\n    // contractDetails\n    private static final int CLIENT_VERSION = 46;\n\n    private static final int SERVER_VERSION = 38;\n\n    private static final byte[] EOL = { 0 };\n\n    private static final String BAG_SEC_TYPE = \"BAG\";\n\n    // FA msg data types\n    public static final int GROUPS = 1;\n\n    public static final int PROFILES = 2;\n\n    public static final int ALIASES = 3;\n\n    public static String faMsgTypeName(int faDataType) {\n        switch(faDataType) {\n            case GROUPS:\n                return \"GROUPS\";\n            case PROFILES:\n                return \"PROFILES\";\n            case ALIASES:\n                return \"ALIASES\";\n        }\n        return null;\n    }\n\n    // outgoing msg id's\n    private static final int REQ_MKT_DATA = 1;\n\n    private static final int CANCEL_MKT_DATA = 2;\n\n    private static final int PLACE_ORDER = 3;\n\n    private static final int CANCEL_ORDER = 4;\n\n    private static final int REQ_OPEN_ORDERS = 5;\n\n    private static final int REQ_ACCOUNT_DATA = 6;\n\n    private static final int REQ_EXECUTIONS = 7;\n\n    private static final int REQ_IDS = 8;\n\n    private static final int REQ_CONTRACT_DATA = 9;\n\n    private static final int REQ_MKT_DEPTH = 10;\n\n    private static final int CANCEL_MKT_DEPTH = 11;\n\n    private static final int REQ_NEWS_BULLETINS = 12;\n\n    private static final int CANCEL_NEWS_BULLETINS = 13;\n\n    private static final int SET_SERVER_LOGLEVEL = 14;\n\n    private static final int REQ_AUTO_OPEN_ORDERS = 15;\n\n    private static final int REQ_ALL_OPEN_ORDERS = 16;\n\n    private static final int REQ_MANAGED_ACCTS = 17;\n\n    private static final int REQ_FA = 18;\n\n    private static final int REPLACE_FA = 19;\n\n    private static final int REQ_HISTORICAL_DATA = 20;\n\n    private static final int EXERCISE_OPTIONS = 21;\n\n    private static final int REQ_SCANNER_SUBSCRIPTION = 22;\n\n    private static final int CANCEL_SCANNER_SUBSCRIPTION = 23;\n\n    private static final int REQ_SCANNER_PARAMETERS = 24;\n\n    private static final int CANCEL_HISTORICAL_DATA = 25;\n\n    private static final int REQ_CURRENT_TIME = 49;\n\n    private static final int REQ_REAL_TIME_BARS = 50;\n\n    private static final int CANCEL_REAL_TIME_BARS = 51;\n\n    private static final int REQ_FUNDAMENTAL_DATA = 52;\n\n    private static final int CANCEL_FUNDAMENTAL_DATA = 53;\n\n    private static final int MIN_SERVER_VER_REAL_TIME_BARS = 34;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS = 35;\n\n    private static final int MIN_SERVER_VER_SNAPSHOT_MKT_DATA = 35;\n\n    private static final int MIN_SERVER_VER_SSHORT_COMBO_LEGS = 35;\n\n    private static final int MIN_SERVER_VER_WHAT_IF_ORDERS = 36;\n\n    private static final int MIN_SERVER_VER_CONTRACT_CONID = 37;\n\n    private static final int MIN_SERVER_VER_PTA_ORDERS = 39;\n\n    private static final int MIN_SERVER_VER_FUNDAMENTAL_DATA = 40;\n\n    private static final int MIN_SERVER_VER_UNDER_COMP = 40;\n\n    private static final int MIN_SERVER_VER_CONTRACT_DATA_CHAIN = 40;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS2 = 40;\n\n    private static final int MIN_SERVER_VER_ALGO_ORDERS = 41;\n\n    private static final int MIN_SERVER_VER_EXECUTION_DATA_CHAIN = 42;\n\n    private static final int MIN_SERVER_VER_NOT_HELD = 44;\n\n    private static final int MIN_SERVER_VER_SEC_ID_TYPE = 45;\n\n    private Socket m_socket;\n\n    // the socket output stream\n    private DataOutputStream m_dos;\n\n    private DataInputStream m_dis;\n\n    private int m_serverVersion;\n\n    private String m_TwsTime;\n\n    public synchronized int serverVersion() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_serverVersion;\n    }\n\n    public synchronized String TwsConnectionTime() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_TwsTime;\n    }\n\n    public synchronized boolean isConnected() {\n        return m_socket != null && m_socket.isConnected() && !m_socket.isClosed();\n    }\n\n    public synchronized void eConnect(String host, int port, int clientId) throws IOException, EException {\n        if (isConnected()) {\n            throw createEException(NO_VALID_ID, ALREADY_CONNECTED);\n        }\n        m_socket = createSocket(host, port);\n        m_dis = createDataInputStream(m_socket);\n        m_dos = createDataOutputStream(m_socket);\n        send(CLIENT_VERSION);\n        m_serverVersion = readInt(m_dis);\n        if (m_serverVersion < SERVER_VERSION) {\n            throw createEException(NO_VALID_ID, UPDATE_TWS);\n        }\n        if (m_serverVersion >= 20) {\n            m_TwsTime = readStr(m_dis);\n        }\n        // Send the client id\n        if (m_serverVersion >= 3) {\n            send(clientId);\n        }\n    }\n\n    EException createEException(int id, CodeMsgPair codeMsgPair) {\n        return new EException(id, codeMsgPair);\n    }\n\n    public synchronized void eDisconnect() throws IOException {\n        Socket socket = m_socket;\n        m_socket = null;\n        m_dis = null;\n        m_dos = null;\n        m_serverVersion = 0;\n        m_TwsTime = null;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public synchronized void cancelScannerSubscription(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqScannerParameters() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_SCANNER_PARAMETERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqScannerSubscription(int tickerId, ScannerSubscription subscription) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 3;\n        send(REQ_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n        sendMax(subscription.numberOfRows());\n        send(subscription.instrument());\n        send(subscription.locationCode());\n        send(subscription.scanCode());\n        sendMax(subscription.abovePrice());\n        sendMax(subscription.belowPrice());\n        sendMax(subscription.aboveVolume());\n        sendMax(subscription.marketCapAbove());\n        sendMax(subscription.marketCapBelow());\n        send(subscription.moodyRatingAbove());\n        send(subscription.moodyRatingBelow());\n        send(subscription.spRatingAbove());\n        send(subscription.spRatingBelow());\n        send(subscription.maturityDateAbove());\n        send(subscription.maturityDateBelow());\n        sendMax(subscription.couponRateAbove());\n        sendMax(subscription.couponRateBelow());\n        send(subscription.excludeConvertible());\n        if (m_serverVersion >= 25) {\n            send(subscription.averageOptionVolumeAbove());\n            send(subscription.scannerSettingPairs());\n        }\n        if (m_serverVersion >= 27) {\n            send(subscription.stockTypeFilter());\n        }\n    }\n\n    public synchronized void reqMktData(int tickerId, Contract contract, String genericTickList, boolean snapshot) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SNAPSHOT_MKT_DATA && snapshot) {\n            error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support snapshot market data requests.\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        final int VERSION = 8;\n        // send req mkt data msg\n        send(REQ_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= 31) {\n            /*\n\t\t\t * Note: Even though SHORTABLE tick type supported only starting\n\t\t\t * server version 33 it would be relatively expensive to expose this\n\t\t\t * restriction here.\n\t\t\t * \n\t\t\t * Therefore we are relying on TWS doing validation.\n\t\t\t */\n            send(genericTickList);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SNAPSHOT_MKT_DATA) {\n            send(snapshot);\n        }\n    }\n\n    public synchronized void cancelHistoricalData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelRealTimeBars(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support realtime bar data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqHistoricalData(int tickerId, Contract contract, String endDateTime, String durationStr, String barSizeSetting, String whatToShow, int useRTH, int formatDate) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 4;\n        if (m_serverVersion < 16) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data backfill.\");\n            return;\n        }\n        send(REQ_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired ? 1 : 0);\n        }\n        if (m_serverVersion >= 20) {\n            send(endDateTime);\n            send(barSizeSetting);\n        }\n        send(durationStr);\n        send(useRTH);\n        send(whatToShow);\n        if (m_serverVersion > 16) {\n            send(formatDate);\n        }\n        if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n    }\n\n    public synchronized void reqRealTimeBars(int tickerId, Contract contract, int barSize, String whatToShow, boolean useRTH) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support real time bars.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(REQ_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(barSize);\n        send(whatToShow);\n        send(useRTH);\n    }\n\n    public synchronized void reqContractDetails(int reqId, Contract contract) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=4\n        if (m_serverVersion < 4) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        final int VERSION = 6;\n        // send req mkt data msg\n        send(REQ_CONTRACT_DATA);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_DATA_CHAIN) {\n            send(reqId);\n        }\n        // send contract fields\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_CONID) {\n            send(contract.m_conId);\n        }\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n    }\n\n    public synchronized void reqMktDepth(int tickerId, Contract contract, int numRows) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 3;\n        // send req mkt data msg\n        send(REQ_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 19) {\n            send(numRows);\n        }\n    }\n\n    public synchronized void cancelMktData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelMktDepth(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void exerciseOptions(int tickerId, Contract contract, int exerciseAction, int exerciseQuantity, String account, int override) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        if (m_serverVersion < 21) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support options exercise from the API.\");\n            return;\n        }\n        send(EXERCISE_OPTIONS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(exerciseAction);\n        send(exerciseQuantity);\n        send(account);\n        send(override);\n    }\n\n    public synchronized void placeOrder(int id, Contract contract, Order order) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS) {\n            if (order.m_scaleInitLevelSize != Integer.MAX_VALUE || order.m_scalePriceIncrement != Double.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n            if (!contract.m_comboLegs.isEmpty()) {\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    if (comboLeg.m_shortSaleSlot != 0 || !IsEmpty(comboLeg.m_designatedLocation)) {\n                        error(id, EClientErrors.UPDATE_TWS, \"  It does not support SSHORT flag for combo legs.\");\n                        return;\n                    }\n                }\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            if (order.m_whatIf) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support what-if orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS2) {\n            if (order.m_scaleSubsLevelSize != Integer.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Subsequent Level Size for Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_ALGO_ORDERS) {\n            if (!IsEmpty(order.m_algoStrategy)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support algo orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_NOT_HELD) {\n            if (order.m_notHeld) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support notHeld parameter.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        int VERSION = (m_serverVersion < MIN_SERVER_VER_NOT_HELD) ? 27 : 29;\n        // send place order msg\n        send(PLACE_ORDER);\n        send(VERSION);\n        send(id);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n        // send main order fields\n        send(order.m_action);\n        send(order.m_totalQuantity);\n        send(order.m_orderType);\n        send(order.m_lmtPrice);\n        send(order.m_auxPrice);\n        // send extended order fields\n        send(order.m_tif);\n        send(order.m_ocaGroup);\n        send(order.m_account);\n        send(order.m_openClose);\n        send(order.m_origin);\n        send(order.m_orderRef);\n        send(order.m_transmit);\n        if (m_serverVersion >= 4) {\n            send(order.m_parentId);\n        }\n        if (m_serverVersion >= 5) {\n            send(order.m_blockOrder);\n            send(order.m_sweepToFill);\n            send(order.m_displaySize);\n            send(order.m_triggerMethod);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_ignoreRth */\n                false);\n            } else {\n                send(order.m_outsideRth);\n            }\n        }\n        if (m_serverVersion >= 7) {\n            send(order.m_hidden);\n        }\n        // Send combo legs for BAG requests\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                    send(comboLeg.m_openClose);\n                    if (m_serverVersion >= MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n                        send(comboLeg.m_shortSaleSlot);\n                        send(comboLeg.m_designatedLocation);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= 9) {\n            // send deprecated sharesAllocation field\n            send(\"\");\n        }\n        if (m_serverVersion >= 10) {\n            send(order.m_discretionaryAmt);\n        }\n        if (m_serverVersion >= 11) {\n            send(order.m_goodAfterTime);\n        }\n        if (m_serverVersion >= 12) {\n            send(order.m_goodTillDate);\n        }\n        if (m_serverVersion >= 13) {\n            send(order.m_faGroup);\n            send(order.m_faMethod);\n            send(order.m_faPercentage);\n            send(order.m_faProfile);\n        }\n        if (m_serverVersion >= 18) {\n            // institutional short sale slot\n            // fields.\n            // 0 only for retail, 1 or 2 only\n            send(order.m_shortSaleSlot);\n            // for institution.\n            // only populate when\n            send(order.m_designatedLocation);\n            // order.m_shortSaleSlot =\n            // 2.\n        }\n        if (m_serverVersion >= 19) {\n            send(order.m_ocaType);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_rthOnly */\n                false);\n            }\n            send(order.m_rule80A);\n            send(order.m_settlingFirm);\n            send(order.m_allOrNone);\n            sendMax(order.m_minQty);\n            sendMax(order.m_percentOffset);\n            send(order.m_eTradeOnly);\n            send(order.m_firmQuoteOnly);\n            sendMax(order.m_nbboPriceCap);\n            sendMax(order.m_auctionStrategy);\n            sendMax(order.m_startingPrice);\n            sendMax(order.m_stockRefPrice);\n            sendMax(order.m_delta);\n            // Volatility orders had specific watermark price attribs in\n            // server version 26\n            double lower = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeLower;\n            double upper = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeUpper;\n            sendMax(lower);\n            sendMax(upper);\n        }\n        if (m_serverVersion >= 22) {\n            send(order.m_overridePercentageConstraints);\n        }\n        if (m_serverVersion >= 26) {\n            // Volatility orders\n            sendMax(order.m_volatility);\n            sendMax(order.m_volatilityType);\n            if (m_serverVersion < 28) {\n                send(order.m_deltaNeutralOrderType.equalsIgnoreCase(\"MKT\"));\n            } else {\n                send(order.m_deltaNeutralOrderType);\n                sendMax(order.m_deltaNeutralAuxPrice);\n            }\n            send(order.m_continuousUpdate);\n            if (m_serverVersion == 26) {\n                // Volatility orders had specific watermark price attribs in\n                // server version 26\n                double lower = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeLower : Double.MAX_VALUE;\n                double upper = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeUpper : Double.MAX_VALUE;\n                sendMax(lower);\n                sendMax(upper);\n            }\n            sendMax(order.m_referencePriceType);\n        }\n        if (m_serverVersion >= 30) {\n            // TRAIL_STOP_LIMIT stop price\n            sendMax(order.m_trailStopPrice);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS) {\n            if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS2) {\n                sendMax(order.m_scaleInitLevelSize);\n                sendMax(order.m_scaleSubsLevelSize);\n            } else {\n                send(\"\");\n                sendMax(order.m_scaleInitLevelSize);\n            }\n            sendMax(order.m_scalePriceIncrement);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_PTA_ORDERS) {\n            send(order.m_clearingAccount);\n            send(order.m_clearingIntent);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_NOT_HELD) {\n            send(order.m_notHeld);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_ALGO_ORDERS) {\n            send(order.m_algoStrategy);\n            if (!IsEmpty(order.m_algoStrategy)) {\n                java.util.Vector algoParams = order.m_algoParams;\n                int algoParamsCount = algoParams == null ? 0 : algoParams.size();\n                send(algoParamsCount);\n                if (algoParamsCount > 0) {\n                    for (int i = 0; i < algoParamsCount; ++i) {\n                        TagValue tagValue = (TagValue) algoParams.get(i);\n                        send(tagValue.m_tag);\n                        send(tagValue.m_value);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            send(order.m_whatIf);\n        }\n    }\n\n    public synchronized void reqAccountUpdates(boolean subscribe, String acctCode) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 2;\n        // send cancel order msg\n        send(REQ_ACCOUNT_DATA);\n        send(VERSION);\n        send(subscribe);\n        // Send the account code. This will only be used for FA clients\n        if (m_serverVersion >= 9) {\n            send(acctCode);\n        }\n    }\n\n    public synchronized void reqExecutions(int reqId, ExecutionFilter filter) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 3;\n        // send cancel order msg\n        send(REQ_EXECUTIONS);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_EXECUTION_DATA_CHAIN) {\n            send(reqId);\n        }\n        // Send the execution rpt filter data\n        if (m_serverVersion >= 9) {\n            send(filter.m_clientId);\n            send(filter.m_acctCode);\n            // Note that the valid format for m_time is \"yyyymmdd-hh:mm:ss\"\n            send(filter.m_time);\n            send(filter.m_symbol);\n            send(filter.m_secType);\n            send(filter.m_exchange);\n            send(filter.m_side);\n        }\n    }\n\n    public synchronized void cancelOrder(int id) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_ORDER);\n        send(VERSION);\n        send(id);\n    }\n\n    public synchronized void reqOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(REQ_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqIds(int numIds) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_IDS);\n        send(VERSION);\n        send(numIds);\n    }\n\n    public synchronized void reqNewsBulletins(boolean allMsgs) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_NEWS_BULLETINS);\n        send(VERSION);\n        send(allMsgs);\n    }\n\n    public synchronized void cancelNewsBulletins() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_NEWS_BULLETINS);\n        send(VERSION);\n    }\n\n    public synchronized void setServerLogLevel(int logLevel) throws IOException, EException {\n        final int VERSION = 1;\n        // send the set server logging level message\n        send(SET_SERVER_LOGLEVEL);\n        send(VERSION);\n        send(logLevel);\n    }\n\n    public synchronized void reqAutoOpenOrders(boolean bAutoBind) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req open orders msg\n        send(REQ_AUTO_OPEN_ORDERS);\n        send(VERSION);\n        send(bAutoBind);\n    }\n\n    public synchronized void reqAllOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req all open orders msg\n        send(REQ_ALL_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqManagedAccts() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req FA managed accounts msg\n        send(REQ_MANAGED_ACCTS);\n        send(VERSION);\n    }\n\n    public synchronized void requestFA(int faDataType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_FA);\n        send(VERSION);\n        send(faDataType);\n    }\n\n    public synchronized void replaceFA(int faDataType, String xml) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REPLACE_FA);\n        send(VERSION);\n        send(faDataType);\n        send(xml);\n    }\n\n    public synchronized void reqCurrentTime() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 33\n        if (m_serverVersion < 33) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support current time requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_CURRENT_TIME);\n        send(VERSION);\n    }\n\n    public synchronized void reqFundamentalData(int reqId, Contract contract, String reportType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req fund data msg\n        send(REQ_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(reportType);\n    }\n\n    public synchronized void cancelFundamentalData(int reqId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(CANCEL_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n    }\n\n    protected void error(String err) throws EException {\n        throw new EException(err);\n    }\n\n    protected void error(int id, int errorCode, String errorMsg) throws EException {\n        throw new EException(id, errorCode, errorMsg);\n    }\n\n    protected void close() {\n    }\n\n    private void error(int id, EClientErrors.CodeMsgPair pair, String tail) throws EException {\n        error(id, pair.code(), pair.msg() + tail);\n    }\n\n    protected void send(String str) throws IOException {\n        // write string to data buffer; writer thread will\n        // write it to socket\n        if (!IsEmpty(str)) {\n            m_dos.write(str.getBytes());\n        }\n        sendEOL();\n    }\n\n    private void sendEOL() throws IOException {\n        m_dos.write(EOL);\n    }\n\n    protected void send(int val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(char val) throws IOException {\n        m_dos.write(val);\n        sendEOL();\n    }\n\n    protected void send(double val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(long val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    private void sendMax(double val) throws IOException {\n        if (val == Double.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    private void sendMax(int val) throws IOException {\n        if (val == Integer.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    protected void send(boolean val) throws IOException {\n        send(val ? 1 : 0);\n    }\n\n    private static boolean IsEmpty(String str) {\n        return Util.StringIsEmpty(str);\n    }\n\n    public DataInputStream dataInputStream() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_dis;\n    }\n\n    DataInputStream createDataInputStream(Socket socket) throws IOException {\n        return new DataInputStream(socket.getInputStream());\n    }\n\n    DataOutputStream createDataOutputStream(Socket socket) throws IOException {\n        return new DataOutputStream(socket.getOutputStream());\n    }\n\n    Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EClientSocketTest2.java",
		"test_prompt": "// EClientSocketTest2.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EClientSocket}.\n* It contains ten unit test cases for the {@link EClientSocket#TwsConnectionTime()} method.\n*/\nclass EClientSocketTest2 {"
	},
	{
		"original_code": "// EClientSocket.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\n\npublic class EClientSocket {\n\n    // Client version history\n    //\n    // 6 = Added parentId to orderStatus\n    // 7 = The new execDetails event returned for an order filled status and\n    // reqExecDetails\n    // Also market depth is available.\n    // 8 = Added lastFillPrice to orderStatus() event and permId to execution\n    // details\n    // 9 = Added 'averageCost', 'unrealizedPNL', and 'unrealizedPNL' to\n    // updatePortfolio event\n    // 10 = Added 'serverId' to the 'open order' & 'order status' events.\n    // We send back all the API open orders upon connection.\n    // Added new methods reqAllOpenOrders, reqAutoOpenOrders()\n    // Added FA support - reqExecution has filter.\n    // - reqAccountUpdates takes acct code.\n    // 11 = Added permId to openOrder event.\n    // 12 = requsting open order attributes ignoreRth, hidden, and discretionary\n    // 13 = added goodAfterTime\n    // 14 = always send size on bid/ask/last tick\n    // 15 = send allocation description string on openOrder\n    // 16 = can receive account name in account and portfolio updates, and fa\n    // params in openOrder\n    // 17 = can receive liquidation field in exec reports, and notAutoAvailable\n    // field in mkt data\n    // 18 = can receive good till date field in open order messages, and request\n    // intraday backfill\n    // 19 = can receive rthOnly flag in ORDER_STATUS\n    // 20 = expects TWS time string on connection after server version >= 20.\n    // 21 = can receive bond contract details.\n    // 22 = can receive price magnifier in version 2 contract details message\n    // 23 = support for scanner\n    // 24 = can receive volatility order parameters in open order messages\n    // 25 = can receive HMDS query start and end times\n    // 26 = can receive option vols in option market data messages\n    // 27 = can receive delta neutral order type and delta neutral aux price in\n    // place order version 20: API 8.85\n    // 28 = can receive option model computation ticks: API 8.9\n    // 29 = can receive trail stop limit price in open order and can place them:\n    // API 8.91\n    // 30 = can receive extended bond contract def, new ticks, and trade count\n    // in bars\n    // 31 = can receive EFP extensions to scanner and market data, and combo\n    // legs on open orders\n    // ; can receive RT bars\n    // 32 = can receive TickType.LAST_TIMESTAMP\n    // ; can receive \"whyHeld\" in order status messages\n    // 33 = can receive ScaleNumComponents and ScaleComponentSize is open order\n    // messages\n    // 34 = can receive whatIf orders / order state\n    // 35 = can receive contId field for Contract objects\n    // 36 = can receive outsideRth field for Order objects\n    // 37 = can receive clearingAccount and clearingIntent for Order objects\n    // 38 = can receive multiplier and primaryExchange in portfolio updates\n    // ; can receive cumQty and avgPrice in execution\n    // ; can receive fundamental data\n    // ; can receive underComp for Contract objects\n    // ; can receive reqId and end marker in contractDetails/bondContractDetails\n    // ; can receive ScaleInitComponentSize and ScaleSubsComponentSize for Order\n    // objects\n    // 39 = can receive underConId in contractDetails\n    // 40 = can receive algoStrategy/algoParams in openOrder\n    // 41 = can receive end marker for openOrder\n    // ; can receive end marker for account download\n    // ; can receive end marker for executions download\n    // 42 = can receive deltaNeutralValidation\n    // 43 = can receive longName(companyName)\n    // ; can receive listingExchange\n    // ; can receive RTVolume tick\n    // 44 = can receive end market for ticker snapshot\n    // 45 = can receive notHeld field in openOrder\n    // 46 = can receive contractMonth, industry, category, subcategory fields in\n    // contractDetails\n    // ; can receive timeZoneId, tradingHours, liquidHours fields in\n    // contractDetails\n    private static final int CLIENT_VERSION = 46;\n\n    private static final int SERVER_VERSION = 38;\n\n    private static final byte[] EOL = { 0 };\n\n    private static final String BAG_SEC_TYPE = \"BAG\";\n\n    // FA msg data types\n    public static final int GROUPS = 1;\n\n    public static final int PROFILES = 2;\n\n    public static final int ALIASES = 3;\n\n    public static String faMsgTypeName(int faDataType) {\n        switch(faDataType) {\n            case GROUPS:\n                return \"GROUPS\";\n            case PROFILES:\n                return \"PROFILES\";\n            case ALIASES:\n                return \"ALIASES\";\n        }\n        return null;\n    }\n\n    // outgoing msg id's\n    private static final int REQ_MKT_DATA = 1;\n\n    private static final int CANCEL_MKT_DATA = 2;\n\n    private static final int PLACE_ORDER = 3;\n\n    private static final int CANCEL_ORDER = 4;\n\n    private static final int REQ_OPEN_ORDERS = 5;\n\n    private static final int REQ_ACCOUNT_DATA = 6;\n\n    private static final int REQ_EXECUTIONS = 7;\n\n    private static final int REQ_IDS = 8;\n\n    private static final int REQ_CONTRACT_DATA = 9;\n\n    private static final int REQ_MKT_DEPTH = 10;\n\n    private static final int CANCEL_MKT_DEPTH = 11;\n\n    private static final int REQ_NEWS_BULLETINS = 12;\n\n    private static final int CANCEL_NEWS_BULLETINS = 13;\n\n    private static final int SET_SERVER_LOGLEVEL = 14;\n\n    private static final int REQ_AUTO_OPEN_ORDERS = 15;\n\n    private static final int REQ_ALL_OPEN_ORDERS = 16;\n\n    private static final int REQ_MANAGED_ACCTS = 17;\n\n    private static final int REQ_FA = 18;\n\n    private static final int REPLACE_FA = 19;\n\n    private static final int REQ_HISTORICAL_DATA = 20;\n\n    private static final int EXERCISE_OPTIONS = 21;\n\n    private static final int REQ_SCANNER_SUBSCRIPTION = 22;\n\n    private static final int CANCEL_SCANNER_SUBSCRIPTION = 23;\n\n    private static final int REQ_SCANNER_PARAMETERS = 24;\n\n    private static final int CANCEL_HISTORICAL_DATA = 25;\n\n    private static final int REQ_CURRENT_TIME = 49;\n\n    private static final int REQ_REAL_TIME_BARS = 50;\n\n    private static final int CANCEL_REAL_TIME_BARS = 51;\n\n    private static final int REQ_FUNDAMENTAL_DATA = 52;\n\n    private static final int CANCEL_FUNDAMENTAL_DATA = 53;\n\n    private static final int MIN_SERVER_VER_REAL_TIME_BARS = 34;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS = 35;\n\n    private static final int MIN_SERVER_VER_SNAPSHOT_MKT_DATA = 35;\n\n    private static final int MIN_SERVER_VER_SSHORT_COMBO_LEGS = 35;\n\n    private static final int MIN_SERVER_VER_WHAT_IF_ORDERS = 36;\n\n    private static final int MIN_SERVER_VER_CONTRACT_CONID = 37;\n\n    private static final int MIN_SERVER_VER_PTA_ORDERS = 39;\n\n    private static final int MIN_SERVER_VER_FUNDAMENTAL_DATA = 40;\n\n    private static final int MIN_SERVER_VER_UNDER_COMP = 40;\n\n    private static final int MIN_SERVER_VER_CONTRACT_DATA_CHAIN = 40;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS2 = 40;\n\n    private static final int MIN_SERVER_VER_ALGO_ORDERS = 41;\n\n    private static final int MIN_SERVER_VER_EXECUTION_DATA_CHAIN = 42;\n\n    private static final int MIN_SERVER_VER_NOT_HELD = 44;\n\n    private static final int MIN_SERVER_VER_SEC_ID_TYPE = 45;\n\n    private Socket m_socket;\n\n    // the socket output stream\n    private DataOutputStream m_dos;\n\n    private DataInputStream m_dis;\n\n    private int m_serverVersion;\n\n    private String m_TwsTime;\n\n    public synchronized int serverVersion() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_serverVersion;\n    }\n\n    public synchronized String TwsConnectionTime() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_TwsTime;\n    }\n\n    public synchronized boolean isConnected() {\n        return m_socket != null && m_socket.isConnected() && !m_socket.isClosed();\n    }\n\n    public synchronized void eConnect(String host, int port, int clientId) throws IOException, EException {\n        if (isConnected()) {\n            throw createEException(NO_VALID_ID, ALREADY_CONNECTED);\n        }\n        m_socket = createSocket(host, port);\n        m_dis = createDataInputStream(m_socket);\n        m_dos = createDataOutputStream(m_socket);\n        send(CLIENT_VERSION);\n        m_serverVersion = readInt(m_dis);\n        if (m_serverVersion < SERVER_VERSION) {\n            throw createEException(NO_VALID_ID, UPDATE_TWS);\n        }\n        if (m_serverVersion >= 20) {\n            m_TwsTime = readStr(m_dis);\n        }\n        // Send the client id\n        if (m_serverVersion >= 3) {\n            send(clientId);\n        }\n    }\n\n    EException createEException(int id, CodeMsgPair codeMsgPair) {\n        return new EException(id, codeMsgPair);\n    }\n\n    public synchronized void eDisconnect() throws IOException {\n        Socket socket = m_socket;\n        m_socket = null;\n        m_dis = null;\n        m_dos = null;\n        m_serverVersion = 0;\n        m_TwsTime = null;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public synchronized void cancelScannerSubscription(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqScannerParameters() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_SCANNER_PARAMETERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqScannerSubscription(int tickerId, ScannerSubscription subscription) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 3;\n        send(REQ_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n        sendMax(subscription.numberOfRows());\n        send(subscription.instrument());\n        send(subscription.locationCode());\n        send(subscription.scanCode());\n        sendMax(subscription.abovePrice());\n        sendMax(subscription.belowPrice());\n        sendMax(subscription.aboveVolume());\n        sendMax(subscription.marketCapAbove());\n        sendMax(subscription.marketCapBelow());\n        send(subscription.moodyRatingAbove());\n        send(subscription.moodyRatingBelow());\n        send(subscription.spRatingAbove());\n        send(subscription.spRatingBelow());\n        send(subscription.maturityDateAbove());\n        send(subscription.maturityDateBelow());\n        sendMax(subscription.couponRateAbove());\n        sendMax(subscription.couponRateBelow());\n        send(subscription.excludeConvertible());\n        if (m_serverVersion >= 25) {\n            send(subscription.averageOptionVolumeAbove());\n            send(subscription.scannerSettingPairs());\n        }\n        if (m_serverVersion >= 27) {\n            send(subscription.stockTypeFilter());\n        }\n    }\n\n    public synchronized void reqMktData(int tickerId, Contract contract, String genericTickList, boolean snapshot) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SNAPSHOT_MKT_DATA && snapshot) {\n            error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support snapshot market data requests.\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        final int VERSION = 8;\n        // send req mkt data msg\n        send(REQ_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= 31) {\n            /*\n\t\t\t * Note: Even though SHORTABLE tick type supported only starting\n\t\t\t * server version 33 it would be relatively expensive to expose this\n\t\t\t * restriction here.\n\t\t\t * \n\t\t\t * Therefore we are relying on TWS doing validation.\n\t\t\t */\n            send(genericTickList);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SNAPSHOT_MKT_DATA) {\n            send(snapshot);\n        }\n    }\n\n    public synchronized void cancelHistoricalData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelRealTimeBars(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support realtime bar data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqHistoricalData(int tickerId, Contract contract, String endDateTime, String durationStr, String barSizeSetting, String whatToShow, int useRTH, int formatDate) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 4;\n        if (m_serverVersion < 16) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data backfill.\");\n            return;\n        }\n        send(REQ_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired ? 1 : 0);\n        }\n        if (m_serverVersion >= 20) {\n            send(endDateTime);\n            send(barSizeSetting);\n        }\n        send(durationStr);\n        send(useRTH);\n        send(whatToShow);\n        if (m_serverVersion > 16) {\n            send(formatDate);\n        }\n        if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n    }\n\n    public synchronized void reqRealTimeBars(int tickerId, Contract contract, int barSize, String whatToShow, boolean useRTH) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support real time bars.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(REQ_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(barSize);\n        send(whatToShow);\n        send(useRTH);\n    }\n\n    public synchronized void reqContractDetails(int reqId, Contract contract) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=4\n        if (m_serverVersion < 4) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        final int VERSION = 6;\n        // send req mkt data msg\n        send(REQ_CONTRACT_DATA);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_DATA_CHAIN) {\n            send(reqId);\n        }\n        // send contract fields\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_CONID) {\n            send(contract.m_conId);\n        }\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n    }\n\n    public synchronized void reqMktDepth(int tickerId, Contract contract, int numRows) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 3;\n        // send req mkt data msg\n        send(REQ_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 19) {\n            send(numRows);\n        }\n    }\n\n    public synchronized void cancelMktData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelMktDepth(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void exerciseOptions(int tickerId, Contract contract, int exerciseAction, int exerciseQuantity, String account, int override) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        if (m_serverVersion < 21) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support options exercise from the API.\");\n            return;\n        }\n        send(EXERCISE_OPTIONS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(exerciseAction);\n        send(exerciseQuantity);\n        send(account);\n        send(override);\n    }\n\n    public synchronized void placeOrder(int id, Contract contract, Order order) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS) {\n            if (order.m_scaleInitLevelSize != Integer.MAX_VALUE || order.m_scalePriceIncrement != Double.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n            if (!contract.m_comboLegs.isEmpty()) {\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    if (comboLeg.m_shortSaleSlot != 0 || !IsEmpty(comboLeg.m_designatedLocation)) {\n                        error(id, EClientErrors.UPDATE_TWS, \"  It does not support SSHORT flag for combo legs.\");\n                        return;\n                    }\n                }\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            if (order.m_whatIf) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support what-if orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS2) {\n            if (order.m_scaleSubsLevelSize != Integer.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Subsequent Level Size for Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_ALGO_ORDERS) {\n            if (!IsEmpty(order.m_algoStrategy)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support algo orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_NOT_HELD) {\n            if (order.m_notHeld) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support notHeld parameter.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        int VERSION = (m_serverVersion < MIN_SERVER_VER_NOT_HELD) ? 27 : 29;\n        // send place order msg\n        send(PLACE_ORDER);\n        send(VERSION);\n        send(id);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n        // send main order fields\n        send(order.m_action);\n        send(order.m_totalQuantity);\n        send(order.m_orderType);\n        send(order.m_lmtPrice);\n        send(order.m_auxPrice);\n        // send extended order fields\n        send(order.m_tif);\n        send(order.m_ocaGroup);\n        send(order.m_account);\n        send(order.m_openClose);\n        send(order.m_origin);\n        send(order.m_orderRef);\n        send(order.m_transmit);\n        if (m_serverVersion >= 4) {\n            send(order.m_parentId);\n        }\n        if (m_serverVersion >= 5) {\n            send(order.m_blockOrder);\n            send(order.m_sweepToFill);\n            send(order.m_displaySize);\n            send(order.m_triggerMethod);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_ignoreRth */\n                false);\n            } else {\n                send(order.m_outsideRth);\n            }\n        }\n        if (m_serverVersion >= 7) {\n            send(order.m_hidden);\n        }\n        // Send combo legs for BAG requests\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                    send(comboLeg.m_openClose);\n                    if (m_serverVersion >= MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n                        send(comboLeg.m_shortSaleSlot);\n                        send(comboLeg.m_designatedLocation);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= 9) {\n            // send deprecated sharesAllocation field\n            send(\"\");\n        }\n        if (m_serverVersion >= 10) {\n            send(order.m_discretionaryAmt);\n        }\n        if (m_serverVersion >= 11) {\n            send(order.m_goodAfterTime);\n        }\n        if (m_serverVersion >= 12) {\n            send(order.m_goodTillDate);\n        }\n        if (m_serverVersion >= 13) {\n            send(order.m_faGroup);\n            send(order.m_faMethod);\n            send(order.m_faPercentage);\n            send(order.m_faProfile);\n        }\n        if (m_serverVersion >= 18) {\n            // institutional short sale slot\n            // fields.\n            // 0 only for retail, 1 or 2 only\n            send(order.m_shortSaleSlot);\n            // for institution.\n            // only populate when\n            send(order.m_designatedLocation);\n            // order.m_shortSaleSlot =\n            // 2.\n        }\n        if (m_serverVersion >= 19) {\n            send(order.m_ocaType);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_rthOnly */\n                false);\n            }\n            send(order.m_rule80A);\n            send(order.m_settlingFirm);\n            send(order.m_allOrNone);\n            sendMax(order.m_minQty);\n            sendMax(order.m_percentOffset);\n            send(order.m_eTradeOnly);\n            send(order.m_firmQuoteOnly);\n            sendMax(order.m_nbboPriceCap);\n            sendMax(order.m_auctionStrategy);\n            sendMax(order.m_startingPrice);\n            sendMax(order.m_stockRefPrice);\n            sendMax(order.m_delta);\n            // Volatility orders had specific watermark price attribs in\n            // server version 26\n            double lower = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeLower;\n            double upper = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeUpper;\n            sendMax(lower);\n            sendMax(upper);\n        }\n        if (m_serverVersion >= 22) {\n            send(order.m_overridePercentageConstraints);\n        }\n        if (m_serverVersion >= 26) {\n            // Volatility orders\n            sendMax(order.m_volatility);\n            sendMax(order.m_volatilityType);\n            if (m_serverVersion < 28) {\n                send(order.m_deltaNeutralOrderType.equalsIgnoreCase(\"MKT\"));\n            } else {\n                send(order.m_deltaNeutralOrderType);\n                sendMax(order.m_deltaNeutralAuxPrice);\n            }\n            send(order.m_continuousUpdate);\n            if (m_serverVersion == 26) {\n                // Volatility orders had specific watermark price attribs in\n                // server version 26\n                double lower = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeLower : Double.MAX_VALUE;\n                double upper = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeUpper : Double.MAX_VALUE;\n                sendMax(lower);\n                sendMax(upper);\n            }\n            sendMax(order.m_referencePriceType);\n        }\n        if (m_serverVersion >= 30) {\n            // TRAIL_STOP_LIMIT stop price\n            sendMax(order.m_trailStopPrice);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS) {\n            if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS2) {\n                sendMax(order.m_scaleInitLevelSize);\n                sendMax(order.m_scaleSubsLevelSize);\n            } else {\n                send(\"\");\n                sendMax(order.m_scaleInitLevelSize);\n            }\n            sendMax(order.m_scalePriceIncrement);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_PTA_ORDERS) {\n            send(order.m_clearingAccount);\n            send(order.m_clearingIntent);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_NOT_HELD) {\n            send(order.m_notHeld);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_ALGO_ORDERS) {\n            send(order.m_algoStrategy);\n            if (!IsEmpty(order.m_algoStrategy)) {\n                java.util.Vector algoParams = order.m_algoParams;\n                int algoParamsCount = algoParams == null ? 0 : algoParams.size();\n                send(algoParamsCount);\n                if (algoParamsCount > 0) {\n                    for (int i = 0; i < algoParamsCount; ++i) {\n                        TagValue tagValue = (TagValue) algoParams.get(i);\n                        send(tagValue.m_tag);\n                        send(tagValue.m_value);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            send(order.m_whatIf);\n        }\n    }\n\n    public synchronized void reqAccountUpdates(boolean subscribe, String acctCode) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 2;\n        // send cancel order msg\n        send(REQ_ACCOUNT_DATA);\n        send(VERSION);\n        send(subscribe);\n        // Send the account code. This will only be used for FA clients\n        if (m_serverVersion >= 9) {\n            send(acctCode);\n        }\n    }\n\n    public synchronized void reqExecutions(int reqId, ExecutionFilter filter) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 3;\n        // send cancel order msg\n        send(REQ_EXECUTIONS);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_EXECUTION_DATA_CHAIN) {\n            send(reqId);\n        }\n        // Send the execution rpt filter data\n        if (m_serverVersion >= 9) {\n            send(filter.m_clientId);\n            send(filter.m_acctCode);\n            // Note that the valid format for m_time is \"yyyymmdd-hh:mm:ss\"\n            send(filter.m_time);\n            send(filter.m_symbol);\n            send(filter.m_secType);\n            send(filter.m_exchange);\n            send(filter.m_side);\n        }\n    }\n\n    public synchronized void cancelOrder(int id) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_ORDER);\n        send(VERSION);\n        send(id);\n    }\n\n    public synchronized void reqOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(REQ_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqIds(int numIds) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_IDS);\n        send(VERSION);\n        send(numIds);\n    }\n\n    public synchronized void reqNewsBulletins(boolean allMsgs) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_NEWS_BULLETINS);\n        send(VERSION);\n        send(allMsgs);\n    }\n\n    public synchronized void cancelNewsBulletins() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_NEWS_BULLETINS);\n        send(VERSION);\n    }\n\n    public synchronized void setServerLogLevel(int logLevel) throws IOException, EException {\n        final int VERSION = 1;\n        // send the set server logging level message\n        send(SET_SERVER_LOGLEVEL);\n        send(VERSION);\n        send(logLevel);\n    }\n\n    public synchronized void reqAutoOpenOrders(boolean bAutoBind) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req open orders msg\n        send(REQ_AUTO_OPEN_ORDERS);\n        send(VERSION);\n        send(bAutoBind);\n    }\n\n    public synchronized void reqAllOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req all open orders msg\n        send(REQ_ALL_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqManagedAccts() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req FA managed accounts msg\n        send(REQ_MANAGED_ACCTS);\n        send(VERSION);\n    }\n\n    public synchronized void requestFA(int faDataType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_FA);\n        send(VERSION);\n        send(faDataType);\n    }\n\n    public synchronized void replaceFA(int faDataType, String xml) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REPLACE_FA);\n        send(VERSION);\n        send(faDataType);\n        send(xml);\n    }\n\n    public synchronized void reqCurrentTime() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 33\n        if (m_serverVersion < 33) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support current time requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_CURRENT_TIME);\n        send(VERSION);\n    }\n\n    public synchronized void reqFundamentalData(int reqId, Contract contract, String reportType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req fund data msg\n        send(REQ_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(reportType);\n    }\n\n    public synchronized void cancelFundamentalData(int reqId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(CANCEL_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n    }\n\n    protected void error(String err) throws EException {\n        throw new EException(err);\n    }\n\n    protected void error(int id, int errorCode, String errorMsg) throws EException {\n        throw new EException(id, errorCode, errorMsg);\n    }\n\n    protected void close() {\n    }\n\n    private void error(int id, EClientErrors.CodeMsgPair pair, String tail) throws EException {\n        error(id, pair.code(), pair.msg() + tail);\n    }\n\n    protected void send(String str) throws IOException {\n        // write string to data buffer; writer thread will\n        // write it to socket\n        if (!IsEmpty(str)) {\n            m_dos.write(str.getBytes());\n        }\n        sendEOL();\n    }\n\n    private void sendEOL() throws IOException {\n        m_dos.write(EOL);\n    }\n\n    protected void send(int val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(char val) throws IOException {\n        m_dos.write(val);\n        sendEOL();\n    }\n\n    protected void send(double val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(long val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    private void sendMax(double val) throws IOException {\n        if (val == Double.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    private void sendMax(int val) throws IOException {\n        if (val == Integer.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    protected void send(boolean val) throws IOException {\n        send(val ? 1 : 0);\n    }\n\n    private static boolean IsEmpty(String str) {\n        return Util.StringIsEmpty(str);\n    }\n\n    public DataInputStream dataInputStream() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_dis;\n    }\n\n    DataInputStream createDataInputStream(Socket socket) throws IOException {\n        return new DataInputStream(socket.getInputStream());\n    }\n\n    DataOutputStream createDataOutputStream(Socket socket) throws IOException {\n        return new DataOutputStream(socket.getOutputStream());\n    }\n\n    Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EClientSocketTest3.java",
		"test_prompt": "// EClientSocketTest3.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EClientSocket}.\n* It contains ten unit test cases for the {@link EClientSocket#isConnected()} method.\n*/\nclass EClientSocketTest3 {"
	},
	{
		"original_code": "// EClientSocket.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\n\npublic class EClientSocket {\n\n    // Client version history\n    //\n    // 6 = Added parentId to orderStatus\n    // 7 = The new execDetails event returned for an order filled status and\n    // reqExecDetails\n    // Also market depth is available.\n    // 8 = Added lastFillPrice to orderStatus() event and permId to execution\n    // details\n    // 9 = Added 'averageCost', 'unrealizedPNL', and 'unrealizedPNL' to\n    // updatePortfolio event\n    // 10 = Added 'serverId' to the 'open order' & 'order status' events.\n    // We send back all the API open orders upon connection.\n    // Added new methods reqAllOpenOrders, reqAutoOpenOrders()\n    // Added FA support - reqExecution has filter.\n    // - reqAccountUpdates takes acct code.\n    // 11 = Added permId to openOrder event.\n    // 12 = requsting open order attributes ignoreRth, hidden, and discretionary\n    // 13 = added goodAfterTime\n    // 14 = always send size on bid/ask/last tick\n    // 15 = send allocation description string on openOrder\n    // 16 = can receive account name in account and portfolio updates, and fa\n    // params in openOrder\n    // 17 = can receive liquidation field in exec reports, and notAutoAvailable\n    // field in mkt data\n    // 18 = can receive good till date field in open order messages, and request\n    // intraday backfill\n    // 19 = can receive rthOnly flag in ORDER_STATUS\n    // 20 = expects TWS time string on connection after server version >= 20.\n    // 21 = can receive bond contract details.\n    // 22 = can receive price magnifier in version 2 contract details message\n    // 23 = support for scanner\n    // 24 = can receive volatility order parameters in open order messages\n    // 25 = can receive HMDS query start and end times\n    // 26 = can receive option vols in option market data messages\n    // 27 = can receive delta neutral order type and delta neutral aux price in\n    // place order version 20: API 8.85\n    // 28 = can receive option model computation ticks: API 8.9\n    // 29 = can receive trail stop limit price in open order and can place them:\n    // API 8.91\n    // 30 = can receive extended bond contract def, new ticks, and trade count\n    // in bars\n    // 31 = can receive EFP extensions to scanner and market data, and combo\n    // legs on open orders\n    // ; can receive RT bars\n    // 32 = can receive TickType.LAST_TIMESTAMP\n    // ; can receive \"whyHeld\" in order status messages\n    // 33 = can receive ScaleNumComponents and ScaleComponentSize is open order\n    // messages\n    // 34 = can receive whatIf orders / order state\n    // 35 = can receive contId field for Contract objects\n    // 36 = can receive outsideRth field for Order objects\n    // 37 = can receive clearingAccount and clearingIntent for Order objects\n    // 38 = can receive multiplier and primaryExchange in portfolio updates\n    // ; can receive cumQty and avgPrice in execution\n    // ; can receive fundamental data\n    // ; can receive underComp for Contract objects\n    // ; can receive reqId and end marker in contractDetails/bondContractDetails\n    // ; can receive ScaleInitComponentSize and ScaleSubsComponentSize for Order\n    // objects\n    // 39 = can receive underConId in contractDetails\n    // 40 = can receive algoStrategy/algoParams in openOrder\n    // 41 = can receive end marker for openOrder\n    // ; can receive end marker for account download\n    // ; can receive end marker for executions download\n    // 42 = can receive deltaNeutralValidation\n    // 43 = can receive longName(companyName)\n    // ; can receive listingExchange\n    // ; can receive RTVolume tick\n    // 44 = can receive end market for ticker snapshot\n    // 45 = can receive notHeld field in openOrder\n    // 46 = can receive contractMonth, industry, category, subcategory fields in\n    // contractDetails\n    // ; can receive timeZoneId, tradingHours, liquidHours fields in\n    // contractDetails\n    private static final int CLIENT_VERSION = 46;\n\n    private static final int SERVER_VERSION = 38;\n\n    private static final byte[] EOL = { 0 };\n\n    private static final String BAG_SEC_TYPE = \"BAG\";\n\n    // FA msg data types\n    public static final int GROUPS = 1;\n\n    public static final int PROFILES = 2;\n\n    public static final int ALIASES = 3;\n\n    public static String faMsgTypeName(int faDataType) {\n        switch(faDataType) {\n            case GROUPS:\n                return \"GROUPS\";\n            case PROFILES:\n                return \"PROFILES\";\n            case ALIASES:\n                return \"ALIASES\";\n        }\n        return null;\n    }\n\n    // outgoing msg id's\n    private static final int REQ_MKT_DATA = 1;\n\n    private static final int CANCEL_MKT_DATA = 2;\n\n    private static final int PLACE_ORDER = 3;\n\n    private static final int CANCEL_ORDER = 4;\n\n    private static final int REQ_OPEN_ORDERS = 5;\n\n    private static final int REQ_ACCOUNT_DATA = 6;\n\n    private static final int REQ_EXECUTIONS = 7;\n\n    private static final int REQ_IDS = 8;\n\n    private static final int REQ_CONTRACT_DATA = 9;\n\n    private static final int REQ_MKT_DEPTH = 10;\n\n    private static final int CANCEL_MKT_DEPTH = 11;\n\n    private static final int REQ_NEWS_BULLETINS = 12;\n\n    private static final int CANCEL_NEWS_BULLETINS = 13;\n\n    private static final int SET_SERVER_LOGLEVEL = 14;\n\n    private static final int REQ_AUTO_OPEN_ORDERS = 15;\n\n    private static final int REQ_ALL_OPEN_ORDERS = 16;\n\n    private static final int REQ_MANAGED_ACCTS = 17;\n\n    private static final int REQ_FA = 18;\n\n    private static final int REPLACE_FA = 19;\n\n    private static final int REQ_HISTORICAL_DATA = 20;\n\n    private static final int EXERCISE_OPTIONS = 21;\n\n    private static final int REQ_SCANNER_SUBSCRIPTION = 22;\n\n    private static final int CANCEL_SCANNER_SUBSCRIPTION = 23;\n\n    private static final int REQ_SCANNER_PARAMETERS = 24;\n\n    private static final int CANCEL_HISTORICAL_DATA = 25;\n\n    private static final int REQ_CURRENT_TIME = 49;\n\n    private static final int REQ_REAL_TIME_BARS = 50;\n\n    private static final int CANCEL_REAL_TIME_BARS = 51;\n\n    private static final int REQ_FUNDAMENTAL_DATA = 52;\n\n    private static final int CANCEL_FUNDAMENTAL_DATA = 53;\n\n    private static final int MIN_SERVER_VER_REAL_TIME_BARS = 34;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS = 35;\n\n    private static final int MIN_SERVER_VER_SNAPSHOT_MKT_DATA = 35;\n\n    private static final int MIN_SERVER_VER_SSHORT_COMBO_LEGS = 35;\n\n    private static final int MIN_SERVER_VER_WHAT_IF_ORDERS = 36;\n\n    private static final int MIN_SERVER_VER_CONTRACT_CONID = 37;\n\n    private static final int MIN_SERVER_VER_PTA_ORDERS = 39;\n\n    private static final int MIN_SERVER_VER_FUNDAMENTAL_DATA = 40;\n\n    private static final int MIN_SERVER_VER_UNDER_COMP = 40;\n\n    private static final int MIN_SERVER_VER_CONTRACT_DATA_CHAIN = 40;\n\n    private static final int MIN_SERVER_VER_SCALE_ORDERS2 = 40;\n\n    private static final int MIN_SERVER_VER_ALGO_ORDERS = 41;\n\n    private static final int MIN_SERVER_VER_EXECUTION_DATA_CHAIN = 42;\n\n    private static final int MIN_SERVER_VER_NOT_HELD = 44;\n\n    private static final int MIN_SERVER_VER_SEC_ID_TYPE = 45;\n\n    private Socket m_socket;\n\n    // the socket output stream\n    private DataOutputStream m_dos;\n\n    private DataInputStream m_dis;\n\n    private int m_serverVersion;\n\n    private String m_TwsTime;\n\n    public synchronized int serverVersion() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_serverVersion;\n    }\n\n    public synchronized String TwsConnectionTime() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_TwsTime;\n    }\n\n    public synchronized boolean isConnected() {\n        return m_socket != null && m_socket.isConnected() && !m_socket.isClosed();\n    }\n\n    public synchronized void eConnect(String host, int port, int clientId) throws IOException, EException {\n        if (isConnected()) {\n            throw createEException(NO_VALID_ID, ALREADY_CONNECTED);\n        }\n        m_socket = createSocket(host, port);\n        m_dis = createDataInputStream(m_socket);\n        m_dos = createDataOutputStream(m_socket);\n        send(CLIENT_VERSION);\n        m_serverVersion = readInt(m_dis);\n        if (m_serverVersion < SERVER_VERSION) {\n            throw createEException(NO_VALID_ID, UPDATE_TWS);\n        }\n        if (m_serverVersion >= 20) {\n            m_TwsTime = readStr(m_dis);\n        }\n        // Send the client id\n        if (m_serverVersion >= 3) {\n            send(clientId);\n        }\n    }\n\n    EException createEException(int id, CodeMsgPair codeMsgPair) {\n        return new EException(id, codeMsgPair);\n    }\n\n    public synchronized void eDisconnect() throws IOException {\n        Socket socket = m_socket;\n        m_socket = null;\n        m_dis = null;\n        m_dos = null;\n        m_serverVersion = 0;\n        m_TwsTime = null;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public synchronized void cancelScannerSubscription(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqScannerParameters() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_SCANNER_PARAMETERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqScannerSubscription(int tickerId, ScannerSubscription subscription) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support API scanner subscription.\");\n            return;\n        }\n        final int VERSION = 3;\n        send(REQ_SCANNER_SUBSCRIPTION);\n        send(VERSION);\n        send(tickerId);\n        sendMax(subscription.numberOfRows());\n        send(subscription.instrument());\n        send(subscription.locationCode());\n        send(subscription.scanCode());\n        sendMax(subscription.abovePrice());\n        sendMax(subscription.belowPrice());\n        sendMax(subscription.aboveVolume());\n        sendMax(subscription.marketCapAbove());\n        sendMax(subscription.marketCapBelow());\n        send(subscription.moodyRatingAbove());\n        send(subscription.moodyRatingBelow());\n        send(subscription.spRatingAbove());\n        send(subscription.spRatingBelow());\n        send(subscription.maturityDateAbove());\n        send(subscription.maturityDateBelow());\n        sendMax(subscription.couponRateAbove());\n        sendMax(subscription.couponRateBelow());\n        send(subscription.excludeConvertible());\n        if (m_serverVersion >= 25) {\n            send(subscription.averageOptionVolumeAbove());\n            send(subscription.scannerSettingPairs());\n        }\n        if (m_serverVersion >= 27) {\n            send(subscription.stockTypeFilter());\n        }\n    }\n\n    public synchronized void reqMktData(int tickerId, Contract contract, String genericTickList, boolean snapshot) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SNAPSHOT_MKT_DATA && snapshot) {\n            error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support snapshot market data requests.\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(tickerId, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        final int VERSION = 8;\n        // send req mkt data msg\n        send(REQ_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= 31) {\n            /*\n\t\t\t * Note: Even though SHORTABLE tick type supported only starting\n\t\t\t * server version 33 it would be relatively expensive to expose this\n\t\t\t * restriction here.\n\t\t\t * \n\t\t\t * Therefore we are relying on TWS doing validation.\n\t\t\t */\n            send(genericTickList);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SNAPSHOT_MKT_DATA) {\n            send(snapshot);\n        }\n    }\n\n    public synchronized void cancelHistoricalData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < 24) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelRealTimeBars(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support realtime bar data query cancellation.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void reqHistoricalData(int tickerId, Contract contract, String endDateTime, String durationStr, String barSizeSetting, String whatToShow, int useRTH, int formatDate) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 4;\n        if (m_serverVersion < 16) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support historical data backfill.\");\n            return;\n        }\n        send(REQ_HISTORICAL_DATA);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired ? 1 : 0);\n        }\n        if (m_serverVersion >= 20) {\n            send(endDateTime);\n            send(barSizeSetting);\n        }\n        send(durationStr);\n        send(useRTH);\n        send(whatToShow);\n        if (m_serverVersion > 16) {\n            send(formatDate);\n        }\n        if (BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                }\n            }\n        }\n    }\n\n    public synchronized void reqRealTimeBars(int tickerId, Contract contract, int barSize, String whatToShow, boolean useRTH) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_REAL_TIME_BARS) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support real time bars.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(REQ_REAL_TIME_BARS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(barSize);\n        send(whatToShow);\n        send(useRTH);\n    }\n\n    public synchronized void reqContractDetails(int reqId, Contract contract) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=4\n        if (m_serverVersion < 4) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        final int VERSION = 6;\n        // send req mkt data msg\n        send(REQ_CONTRACT_DATA);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_DATA_CHAIN) {\n            send(reqId);\n        }\n        // send contract fields\n        if (m_serverVersion >= MIN_SERVER_VER_CONTRACT_CONID) {\n            send(contract.m_conId);\n        }\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 31) {\n            send(contract.m_includeExpired);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n    }\n\n    public synchronized void reqMktDepth(int tickerId, Contract contract, int numRows) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 3;\n        // send req mkt data msg\n        send(REQ_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        if (m_serverVersion >= 19) {\n            send(numRows);\n        }\n    }\n\n    public synchronized void cancelMktData(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DATA);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void cancelMktDepth(int tickerId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >=6\n        if (m_serverVersion < 6) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel mkt data msg\n        send(CANCEL_MKT_DEPTH);\n        send(VERSION);\n        send(tickerId);\n    }\n\n    public synchronized void exerciseOptions(int tickerId, Contract contract, int exerciseAction, int exerciseQuantity, String account, int override) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        if (m_serverVersion < 21) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support options exercise from the API.\");\n            return;\n        }\n        send(EXERCISE_OPTIONS);\n        send(VERSION);\n        send(tickerId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        send(contract.m_multiplier);\n        send(contract.m_exchange);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(exerciseAction);\n        send(exerciseQuantity);\n        send(account);\n        send(override);\n    }\n\n    public synchronized void placeOrder(int id, Contract contract, Order order) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS) {\n            if (order.m_scaleInitLevelSize != Integer.MAX_VALUE || order.m_scalePriceIncrement != Double.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n            if (!contract.m_comboLegs.isEmpty()) {\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); ++i) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    if (comboLeg.m_shortSaleSlot != 0 || !IsEmpty(comboLeg.m_designatedLocation)) {\n                        error(id, EClientErrors.UPDATE_TWS, \"  It does not support SSHORT flag for combo legs.\");\n                        return;\n                    }\n                }\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            if (order.m_whatIf) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support what-if orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support delta-neutral orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SCALE_ORDERS2) {\n            if (order.m_scaleSubsLevelSize != Integer.MAX_VALUE) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support Subsequent Level Size for Scale orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_ALGO_ORDERS) {\n            if (!IsEmpty(order.m_algoStrategy)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support algo orders.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_NOT_HELD) {\n            if (order.m_notHeld) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support notHeld parameter.\");\n                return;\n            }\n        }\n        if (m_serverVersion < MIN_SERVER_VER_SEC_ID_TYPE) {\n            if (!IsEmpty(contract.m_secIdType) || !IsEmpty(contract.m_secId)) {\n                error(id, EClientErrors.UPDATE_TWS, \"  It does not support secIdType and secId parameters.\");\n                return;\n            }\n        }\n        int VERSION = (m_serverVersion < MIN_SERVER_VER_NOT_HELD) ? 27 : 29;\n        // send place order msg\n        send(PLACE_ORDER);\n        send(VERSION);\n        send(id);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_expiry);\n        send(contract.m_strike);\n        send(contract.m_right);\n        if (m_serverVersion >= 15) {\n            send(contract.m_multiplier);\n        }\n        send(contract.m_exchange);\n        if (m_serverVersion >= 14) {\n            send(contract.m_primaryExch);\n        }\n        send(contract.m_currency);\n        if (m_serverVersion >= 2) {\n            send(contract.m_localSymbol);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SEC_ID_TYPE) {\n            send(contract.m_secIdType);\n            send(contract.m_secId);\n        }\n        // send main order fields\n        send(order.m_action);\n        send(order.m_totalQuantity);\n        send(order.m_orderType);\n        send(order.m_lmtPrice);\n        send(order.m_auxPrice);\n        // send extended order fields\n        send(order.m_tif);\n        send(order.m_ocaGroup);\n        send(order.m_account);\n        send(order.m_openClose);\n        send(order.m_origin);\n        send(order.m_orderRef);\n        send(order.m_transmit);\n        if (m_serverVersion >= 4) {\n            send(order.m_parentId);\n        }\n        if (m_serverVersion >= 5) {\n            send(order.m_blockOrder);\n            send(order.m_sweepToFill);\n            send(order.m_displaySize);\n            send(order.m_triggerMethod);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_ignoreRth */\n                false);\n            } else {\n                send(order.m_outsideRth);\n            }\n        }\n        if (m_serverVersion >= 7) {\n            send(order.m_hidden);\n        }\n        // Send combo legs for BAG requests\n        if (m_serverVersion >= 8 && BAG_SEC_TYPE.equalsIgnoreCase(contract.m_secType)) {\n            if (contract.m_comboLegs == null) {\n                send(0);\n            } else {\n                send(contract.m_comboLegs.size());\n                ComboLeg comboLeg;\n                for (int i = 0; i < contract.m_comboLegs.size(); i++) {\n                    comboLeg = (ComboLeg) contract.m_comboLegs.get(i);\n                    send(comboLeg.m_conId);\n                    send(comboLeg.m_ratio);\n                    send(comboLeg.m_action);\n                    send(comboLeg.m_exchange);\n                    send(comboLeg.m_openClose);\n                    if (m_serverVersion >= MIN_SERVER_VER_SSHORT_COMBO_LEGS) {\n                        send(comboLeg.m_shortSaleSlot);\n                        send(comboLeg.m_designatedLocation);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= 9) {\n            // send deprecated sharesAllocation field\n            send(\"\");\n        }\n        if (m_serverVersion >= 10) {\n            send(order.m_discretionaryAmt);\n        }\n        if (m_serverVersion >= 11) {\n            send(order.m_goodAfterTime);\n        }\n        if (m_serverVersion >= 12) {\n            send(order.m_goodTillDate);\n        }\n        if (m_serverVersion >= 13) {\n            send(order.m_faGroup);\n            send(order.m_faMethod);\n            send(order.m_faPercentage);\n            send(order.m_faProfile);\n        }\n        if (m_serverVersion >= 18) {\n            // institutional short sale slot\n            // fields.\n            // 0 only for retail, 1 or 2 only\n            send(order.m_shortSaleSlot);\n            // for institution.\n            // only populate when\n            send(order.m_designatedLocation);\n            // order.m_shortSaleSlot =\n            // 2.\n        }\n        if (m_serverVersion >= 19) {\n            send(order.m_ocaType);\n            if (m_serverVersion < 38) {\n                // will never happen\n                send(/* order.m_rthOnly */\n                false);\n            }\n            send(order.m_rule80A);\n            send(order.m_settlingFirm);\n            send(order.m_allOrNone);\n            sendMax(order.m_minQty);\n            sendMax(order.m_percentOffset);\n            send(order.m_eTradeOnly);\n            send(order.m_firmQuoteOnly);\n            sendMax(order.m_nbboPriceCap);\n            sendMax(order.m_auctionStrategy);\n            sendMax(order.m_startingPrice);\n            sendMax(order.m_stockRefPrice);\n            sendMax(order.m_delta);\n            // Volatility orders had specific watermark price attribs in\n            // server version 26\n            double lower = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeLower;\n            double upper = (m_serverVersion == 26 && order.m_orderType.equals(\"VOL\")) ? Double.MAX_VALUE : order.m_stockRangeUpper;\n            sendMax(lower);\n            sendMax(upper);\n        }\n        if (m_serverVersion >= 22) {\n            send(order.m_overridePercentageConstraints);\n        }\n        if (m_serverVersion >= 26) {\n            // Volatility orders\n            sendMax(order.m_volatility);\n            sendMax(order.m_volatilityType);\n            if (m_serverVersion < 28) {\n                send(order.m_deltaNeutralOrderType.equalsIgnoreCase(\"MKT\"));\n            } else {\n                send(order.m_deltaNeutralOrderType);\n                sendMax(order.m_deltaNeutralAuxPrice);\n            }\n            send(order.m_continuousUpdate);\n            if (m_serverVersion == 26) {\n                // Volatility orders had specific watermark price attribs in\n                // server version 26\n                double lower = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeLower : Double.MAX_VALUE;\n                double upper = order.m_orderType.equals(\"VOL\") ? order.m_stockRangeUpper : Double.MAX_VALUE;\n                sendMax(lower);\n                sendMax(upper);\n            }\n            sendMax(order.m_referencePriceType);\n        }\n        if (m_serverVersion >= 30) {\n            // TRAIL_STOP_LIMIT stop price\n            sendMax(order.m_trailStopPrice);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS) {\n            if (m_serverVersion >= MIN_SERVER_VER_SCALE_ORDERS2) {\n                sendMax(order.m_scaleInitLevelSize);\n                sendMax(order.m_scaleSubsLevelSize);\n            } else {\n                send(\"\");\n                sendMax(order.m_scaleInitLevelSize);\n            }\n            sendMax(order.m_scalePriceIncrement);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_PTA_ORDERS) {\n            send(order.m_clearingAccount);\n            send(order.m_clearingIntent);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_NOT_HELD) {\n            send(order.m_notHeld);\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_UNDER_COMP) {\n            if (contract.m_underComp != null) {\n                UnderComp underComp = contract.m_underComp;\n                send(true);\n                send(underComp.m_conId);\n                send(underComp.m_delta);\n                send(underComp.m_price);\n            } else {\n                send(false);\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_ALGO_ORDERS) {\n            send(order.m_algoStrategy);\n            if (!IsEmpty(order.m_algoStrategy)) {\n                java.util.Vector algoParams = order.m_algoParams;\n                int algoParamsCount = algoParams == null ? 0 : algoParams.size();\n                send(algoParamsCount);\n                if (algoParamsCount > 0) {\n                    for (int i = 0; i < algoParamsCount; ++i) {\n                        TagValue tagValue = (TagValue) algoParams.get(i);\n                        send(tagValue.m_tag);\n                        send(tagValue.m_value);\n                    }\n                }\n            }\n        }\n        if (m_serverVersion >= MIN_SERVER_VER_WHAT_IF_ORDERS) {\n            send(order.m_whatIf);\n        }\n    }\n\n    public synchronized void reqAccountUpdates(boolean subscribe, String acctCode) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 2;\n        // send cancel order msg\n        send(REQ_ACCOUNT_DATA);\n        send(VERSION);\n        send(subscribe);\n        // Send the account code. This will only be used for FA clients\n        if (m_serverVersion >= 9) {\n            send(acctCode);\n        }\n    }\n\n    public synchronized void reqExecutions(int reqId, ExecutionFilter filter) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 3;\n        // send cancel order msg\n        send(REQ_EXECUTIONS);\n        send(VERSION);\n        if (m_serverVersion >= MIN_SERVER_VER_EXECUTION_DATA_CHAIN) {\n            send(reqId);\n        }\n        // Send the execution rpt filter data\n        if (m_serverVersion >= 9) {\n            send(filter.m_clientId);\n            send(filter.m_acctCode);\n            // Note that the valid format for m_time is \"yyyymmdd-hh:mm:ss\"\n            send(filter.m_time);\n            send(filter.m_symbol);\n            send(filter.m_secType);\n            send(filter.m_exchange);\n            send(filter.m_side);\n        }\n    }\n\n    public synchronized void cancelOrder(int id) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_ORDER);\n        send(VERSION);\n        send(id);\n    }\n\n    public synchronized void reqOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(REQ_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqIds(int numIds) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_IDS);\n        send(VERSION);\n        send(numIds);\n    }\n\n    public synchronized void reqNewsBulletins(boolean allMsgs) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_NEWS_BULLETINS);\n        send(VERSION);\n        send(allMsgs);\n    }\n\n    public synchronized void cancelNewsBulletins() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send cancel order msg\n        send(CANCEL_NEWS_BULLETINS);\n        send(VERSION);\n    }\n\n    public synchronized void setServerLogLevel(int logLevel) throws IOException, EException {\n        final int VERSION = 1;\n        // send the set server logging level message\n        send(SET_SERVER_LOGLEVEL);\n        send(VERSION);\n        send(logLevel);\n    }\n\n    public synchronized void reqAutoOpenOrders(boolean bAutoBind) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req open orders msg\n        send(REQ_AUTO_OPEN_ORDERS);\n        send(VERSION);\n        send(bAutoBind);\n    }\n\n    public synchronized void reqAllOpenOrders() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req all open orders msg\n        send(REQ_ALL_OPEN_ORDERS);\n        send(VERSION);\n    }\n\n    public synchronized void reqManagedAccts() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req FA managed accounts msg\n        send(REQ_MANAGED_ACCTS);\n        send(VERSION);\n    }\n\n    public synchronized void requestFA(int faDataType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_FA);\n        send(VERSION);\n        send(faDataType);\n    }\n\n    public synchronized void replaceFA(int faDataType, String xml) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 13\n        if (m_serverVersion < 13) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS.code(), EClientErrors.UPDATE_TWS.msg());\n            return;\n        }\n        final int VERSION = 1;\n        send(REPLACE_FA);\n        send(VERSION);\n        send(faDataType);\n        send(xml);\n    }\n\n    public synchronized void reqCurrentTime() throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        // This feature is only available for versions of TWS >= 33\n        if (m_serverVersion < 33) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.UPDATE_TWS, \"  It does not support current time requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        send(REQ_CURRENT_TIME);\n        send(VERSION);\n    }\n\n    public synchronized void reqFundamentalData(int reqId, Contract contract, String reportType) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req fund data msg\n        send(REQ_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n        // send contract fields\n        send(contract.m_symbol);\n        send(contract.m_secType);\n        send(contract.m_exchange);\n        send(contract.m_primaryExch);\n        send(contract.m_currency);\n        send(contract.m_localSymbol);\n        send(reportType);\n    }\n\n    public synchronized void cancelFundamentalData(int reqId) throws IOException, EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n            return;\n        }\n        if (m_serverVersion < MIN_SERVER_VER_FUNDAMENTAL_DATA) {\n            error(reqId, EClientErrors.UPDATE_TWS, \"  It does not support fundamental data requests.\");\n            return;\n        }\n        final int VERSION = 1;\n        // send req mkt data msg\n        send(CANCEL_FUNDAMENTAL_DATA);\n        send(VERSION);\n        send(reqId);\n    }\n\n    protected void error(String err) throws EException {\n        throw new EException(err);\n    }\n\n    protected void error(int id, int errorCode, String errorMsg) throws EException {\n        throw new EException(id, errorCode, errorMsg);\n    }\n\n    protected void close() {\n    }\n\n    private void error(int id, EClientErrors.CodeMsgPair pair, String tail) throws EException {\n        error(id, pair.code(), pair.msg() + tail);\n    }\n\n    protected void send(String str) throws IOException {\n        // write string to data buffer; writer thread will\n        // write it to socket\n        if (!IsEmpty(str)) {\n            m_dos.write(str.getBytes());\n        }\n        sendEOL();\n    }\n\n    private void sendEOL() throws IOException {\n        m_dos.write(EOL);\n    }\n\n    protected void send(int val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(char val) throws IOException {\n        m_dos.write(val);\n        sendEOL();\n    }\n\n    protected void send(double val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    protected void send(long val) throws IOException {\n        send(String.valueOf(val));\n    }\n\n    private void sendMax(double val) throws IOException {\n        if (val == Double.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    private void sendMax(int val) throws IOException {\n        if (val == Integer.MAX_VALUE) {\n            sendEOL();\n        } else {\n            send(String.valueOf(val));\n        }\n    }\n\n    protected void send(boolean val) throws IOException {\n        send(val ? 1 : 0);\n    }\n\n    private static boolean IsEmpty(String str) {\n        return Util.StringIsEmpty(str);\n    }\n\n    public DataInputStream dataInputStream() throws EException {\n        // not connected?\n        if (!isConnected()) {\n            error(EClientErrors.NO_VALID_ID, EClientErrors.NOT_CONNECTED, \"\");\n        }\n        return m_dis;\n    }\n\n    DataInputStream createDataInputStream(Socket socket) throws IOException {\n        return new DataInputStream(socket.getInputStream());\n    }\n\n    DataOutputStream createDataOutputStream(Socket socket) throws IOException {\n        return new DataOutputStream(socket.getOutputStream());\n    }\n\n    Socket createSocket(String host, int port) throws IOException {\n        return new Socket(host, port);\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EClientSocketTest4.java",
		"test_prompt": "// EClientSocketTest4.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * EClientSocket.java\n *\n */\npackage com.ib.client;\n\nimport static com.ib.client.EClientErrors.ALREADY_CONNECTED;\nimport static com.ib.client.EClientErrors.NO_VALID_ID;\nimport static com.ib.client.EClientErrors.UPDATE_TWS;\nimport static com.ib.client.EReader.readInt;\nimport static com.ib.client.EReader.readStr;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport com.ib.client.EClientErrors.CodeMsgPair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EClientSocket}.\n* It contains ten unit test cases for the {@link EClientSocket#dataInputStream()} method.\n*/\nclass EClientSocketTest4 {"
	},
	{
		"original_code": "// TickType.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * TickType.java\n *\n */\npackage com.ib.client;\n\npublic class TickType {\n\n    // constants - tick types\n    public static final int BID_SIZE = 0;\n\n    public static final int BID = 1;\n\n    public static final int ASK = 2;\n\n    public static final int ASK_SIZE = 3;\n\n    public static final int LAST = 4;\n\n    public static final int LAST_SIZE = 5;\n\n    public static final int HIGH = 6;\n\n    public static final int LOW = 7;\n\n    public static final int VOLUME = 8;\n\n    public static final int CLOSE = 9;\n\n    public static final int BID_OPTION = 10;\n\n    public static final int ASK_OPTION = 11;\n\n    public static final int LAST_OPTION = 12;\n\n    public static final int MODEL_OPTION = 13;\n\n    public static final int OPEN = 14;\n\n    public static final int LOW_13_WEEK = 15;\n\n    public static final int HIGH_13_WEEK = 16;\n\n    public static final int LOW_26_WEEK = 17;\n\n    public static final int HIGH_26_WEEK = 18;\n\n    public static final int LOW_52_WEEK = 19;\n\n    public static final int HIGH_52_WEEK = 20;\n\n    public static final int AVG_VOLUME = 21;\n\n    public static final int OPEN_INTEREST = 22;\n\n    public static final int OPTION_HISTORICAL_VOL = 23;\n\n    public static final int OPTION_IMPLIED_VOL = 24;\n\n    public static final int OPTION_BID_EXCH = 25;\n\n    public static final int OPTION_ASK_EXCH = 26;\n\n    public static final int OPTION_CALL_OPEN_INTEREST = 27;\n\n    public static final int OPTION_PUT_OPEN_INTEREST = 28;\n\n    public static final int OPTION_CALL_VOLUME = 29;\n\n    public static final int OPTION_PUT_VOLUME = 30;\n\n    public static final int INDEX_FUTURE_PREMIUM = 31;\n\n    public static final int BID_EXCH = 32;\n\n    public static final int ASK_EXCH = 33;\n\n    public static final int AUCTION_VOLUME = 34;\n\n    public static final int AUCTION_PRICE = 35;\n\n    public static final int AUCTION_IMBALANCE = 36;\n\n    public static final int MARK_PRICE = 37;\n\n    public static final int BID_EFP_COMPUTATION = 38;\n\n    public static final int ASK_EFP_COMPUTATION = 39;\n\n    public static final int LAST_EFP_COMPUTATION = 40;\n\n    public static final int OPEN_EFP_COMPUTATION = 41;\n\n    public static final int HIGH_EFP_COMPUTATION = 42;\n\n    public static final int LOW_EFP_COMPUTATION = 43;\n\n    public static final int CLOSE_EFP_COMPUTATION = 44;\n\n    public static final int LAST_TIMESTAMP = 45;\n\n    public static final int SHORTABLE = 46;\n\n    public static final int FUNDAMENTAL_RATIOS = 47;\n\n    public static final int RT_VOLUME = 48;\n\n    public static final int HALTED = 49;\n\n    public static String getField(int tickType) {\n        switch(tickType) {\n            case BID_SIZE:\n                return \"bidSize\";\n            case BID:\n                return \"bidPrice\";\n            case ASK:\n                return \"askPrice\";\n            case ASK_SIZE:\n                return \"askSize\";\n            case LAST:\n                return \"lastPrice\";\n            case LAST_SIZE:\n                return \"lastSize\";\n            case HIGH:\n                return \"high\";\n            case LOW:\n                return \"low\";\n            case VOLUME:\n                return \"volume\";\n            case CLOSE:\n                return \"close\";\n            case BID_OPTION:\n                return \"bidOptComp\";\n            case ASK_OPTION:\n                return \"askOptComp\";\n            case LAST_OPTION:\n                return \"lastOptComp\";\n            case MODEL_OPTION:\n                return \"modelOptComp\";\n            case OPEN:\n                return \"open\";\n            case LOW_13_WEEK:\n                return \"13WeekLow\";\n            case HIGH_13_WEEK:\n                return \"13WeekHigh\";\n            case LOW_26_WEEK:\n                return \"26WeekLow\";\n            case HIGH_26_WEEK:\n                return \"26WeekHigh\";\n            case LOW_52_WEEK:\n                return \"52WeekLow\";\n            case HIGH_52_WEEK:\n                return \"52WeekHigh\";\n            case AVG_VOLUME:\n                return \"AvgVolume\";\n            case OPEN_INTEREST:\n                return \"OpenInterest\";\n            case OPTION_HISTORICAL_VOL:\n                return \"OptionHistoricalVolatility\";\n            case OPTION_IMPLIED_VOL:\n                return \"OptionImpliedVolatility\";\n            case OPTION_BID_EXCH:\n                return \"OptionBidExchStr\";\n            case OPTION_ASK_EXCH:\n                return \"OptionAskExchStr\";\n            case OPTION_CALL_OPEN_INTEREST:\n                return \"OptionCallOpenInterest\";\n            case OPTION_PUT_OPEN_INTEREST:\n                return \"OptionPutOpenInterest\";\n            case OPTION_CALL_VOLUME:\n                return \"OptionCallVolume\";\n            case OPTION_PUT_VOLUME:\n                return \"OptionPutVolume\";\n            case INDEX_FUTURE_PREMIUM:\n                return \"IndexFuturePremium\";\n            case BID_EXCH:\n                return \"bidExch\";\n            case ASK_EXCH:\n                return \"askExch\";\n            case AUCTION_VOLUME:\n                return \"auctionVolume\";\n            case AUCTION_PRICE:\n                return \"auctionPrice\";\n            case AUCTION_IMBALANCE:\n                return \"auctionImbalance\";\n            case MARK_PRICE:\n                return \"markPrice\";\n            case BID_EFP_COMPUTATION:\n                return \"bidEFP\";\n            case ASK_EFP_COMPUTATION:\n                return \"askEFP\";\n            case LAST_EFP_COMPUTATION:\n                return \"lastEFP\";\n            case OPEN_EFP_COMPUTATION:\n                return \"openEFP\";\n            case HIGH_EFP_COMPUTATION:\n                return \"highEFP\";\n            case LOW_EFP_COMPUTATION:\n                return \"lowEFP\";\n            case CLOSE_EFP_COMPUTATION:\n                return \"closeEFP\";\n            case LAST_TIMESTAMP:\n                return \"lastTimestamp\";\n            case SHORTABLE:\n                return \"shortable\";\n            case FUNDAMENTAL_RATIOS:\n                return \"fundamentals\";\n            case RT_VOLUME:\n                return \"RTVolume\";\n            case HALTED:\n                return \"halted\";\n            default:\n                return \"unknown\";\n        }\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/TickTypeTest.java",
		"test_prompt": "// TickTypeTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * TickType.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TickType}.\n* It contains ten unit test cases for the {@link TickType#getField(int)} method.\n*/\nclass TickTypeTest {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest0.java",
		"test_prompt": "// ScannerSubscriptionTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#numberOfRows()} method.\n*/\nclass ScannerSubscriptionTest0 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest1.java",
		"test_prompt": "// ScannerSubscriptionTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#instrument()} method.\n*/\nclass ScannerSubscriptionTest1 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest2.java",
		"test_prompt": "// ScannerSubscriptionTest2.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#locationCode()} method.\n*/\nclass ScannerSubscriptionTest2 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest3.java",
		"test_prompt": "// ScannerSubscriptionTest3.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#scanCode()} method.\n*/\nclass ScannerSubscriptionTest3 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest4.java",
		"test_prompt": "// ScannerSubscriptionTest4.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#abovePrice()} method.\n*/\nclass ScannerSubscriptionTest4 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest5.java",
		"test_prompt": "// ScannerSubscriptionTest5.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#belowPrice()} method.\n*/\nclass ScannerSubscriptionTest5 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest6.java",
		"test_prompt": "// ScannerSubscriptionTest6.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#aboveVolume()} method.\n*/\nclass ScannerSubscriptionTest6 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest7.java",
		"test_prompt": "// ScannerSubscriptionTest7.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#averageOptionVolumeAbove()} method.\n*/\nclass ScannerSubscriptionTest7 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest8.java",
		"test_prompt": "// ScannerSubscriptionTest8.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#marketCapAbove()} method.\n*/\nclass ScannerSubscriptionTest8 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest9.java",
		"test_prompt": "// ScannerSubscriptionTest9.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#marketCapBelow()} method.\n*/\nclass ScannerSubscriptionTest9 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest10.java",
		"test_prompt": "// ScannerSubscriptionTest10.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#moodyRatingAbove()} method.\n*/\nclass ScannerSubscriptionTest10 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest11.java",
		"test_prompt": "// ScannerSubscriptionTest11.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#moodyRatingBelow()} method.\n*/\nclass ScannerSubscriptionTest11 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest12.java",
		"test_prompt": "// ScannerSubscriptionTest12.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#spRatingAbove()} method.\n*/\nclass ScannerSubscriptionTest12 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest13.java",
		"test_prompt": "// ScannerSubscriptionTest13.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#spRatingBelow()} method.\n*/\nclass ScannerSubscriptionTest13 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest14.java",
		"test_prompt": "// ScannerSubscriptionTest14.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#maturityDateAbove()} method.\n*/\nclass ScannerSubscriptionTest14 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest15.java",
		"test_prompt": "// ScannerSubscriptionTest15.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#maturityDateBelow()} method.\n*/\nclass ScannerSubscriptionTest15 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest16.java",
		"test_prompt": "// ScannerSubscriptionTest16.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#couponRateAbove()} method.\n*/\nclass ScannerSubscriptionTest16 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest17.java",
		"test_prompt": "// ScannerSubscriptionTest17.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#couponRateBelow()} method.\n*/\nclass ScannerSubscriptionTest17 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest18.java",
		"test_prompt": "// ScannerSubscriptionTest18.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#excludeConvertible()} method.\n*/\nclass ScannerSubscriptionTest18 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest19.java",
		"test_prompt": "// ScannerSubscriptionTest19.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#scannerSettingPairs()} method.\n*/\nclass ScannerSubscriptionTest19 {"
	},
	{
		"original_code": "// ScannerSubscription.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\npublic class ScannerSubscription {\n\n    public final static int NO_ROW_NUMBER_SPECIFIED = -1;\n\n    private int m_numberOfRows = NO_ROW_NUMBER_SPECIFIED;\n\n    private String m_instrument;\n\n    private String m_locationCode;\n\n    private String m_scanCode;\n\n    private double m_abovePrice = Double.MAX_VALUE;\n\n    private double m_belowPrice = Double.MAX_VALUE;\n\n    private int m_aboveVolume = Integer.MAX_VALUE;\n\n    private int m_averageOptionVolumeAbove = Integer.MAX_VALUE;\n\n    private double m_marketCapAbove = Double.MAX_VALUE;\n\n    private double m_marketCapBelow = Double.MAX_VALUE;\n\n    private String m_moodyRatingAbove;\n\n    private String m_moodyRatingBelow;\n\n    private String m_spRatingAbove;\n\n    private String m_spRatingBelow;\n\n    private String m_maturityDateAbove;\n\n    private String m_maturityDateBelow;\n\n    private double m_couponRateAbove = Double.MAX_VALUE;\n\n    private double m_couponRateBelow = Double.MAX_VALUE;\n\n    private String m_excludeConvertible;\n\n    private String m_scannerSettingPairs;\n\n    private String m_stockTypeFilter;\n\n    // Get\n    public int numberOfRows() {\n        return m_numberOfRows;\n    }\n\n    public String instrument() {\n        return m_instrument;\n    }\n\n    public String locationCode() {\n        return m_locationCode;\n    }\n\n    public String scanCode() {\n        return m_scanCode;\n    }\n\n    public double abovePrice() {\n        return m_abovePrice;\n    }\n\n    public double belowPrice() {\n        return m_belowPrice;\n    }\n\n    public int aboveVolume() {\n        return m_aboveVolume;\n    }\n\n    public int averageOptionVolumeAbove() {\n        return m_averageOptionVolumeAbove;\n    }\n\n    public double marketCapAbove() {\n        return m_marketCapAbove;\n    }\n\n    public double marketCapBelow() {\n        return m_marketCapBelow;\n    }\n\n    public String moodyRatingAbove() {\n        return m_moodyRatingAbove;\n    }\n\n    public String moodyRatingBelow() {\n        return m_moodyRatingBelow;\n    }\n\n    public String spRatingAbove() {\n        return m_spRatingAbove;\n    }\n\n    public String spRatingBelow() {\n        return m_spRatingBelow;\n    }\n\n    public String maturityDateAbove() {\n        return m_maturityDateAbove;\n    }\n\n    public String maturityDateBelow() {\n        return m_maturityDateBelow;\n    }\n\n    public double couponRateAbove() {\n        return m_couponRateAbove;\n    }\n\n    public double couponRateBelow() {\n        return m_couponRateBelow;\n    }\n\n    public String excludeConvertible() {\n        return m_excludeConvertible;\n    }\n\n    public String scannerSettingPairs() {\n        return m_scannerSettingPairs;\n    }\n\n    public String stockTypeFilter() {\n        return m_stockTypeFilter;\n    }\n\n    // Set\n    public void numberOfRows(int num) {\n        m_numberOfRows = num;\n    }\n\n    public void instrument(String txt) {\n        m_instrument = txt;\n    }\n\n    public void locationCode(String txt) {\n        m_locationCode = txt;\n    }\n\n    public void scanCode(String txt) {\n        m_scanCode = txt;\n    }\n\n    public void abovePrice(double price) {\n        m_abovePrice = price;\n    }\n\n    public void belowPrice(double price) {\n        m_belowPrice = price;\n    }\n\n    public void aboveVolume(int volume) {\n        m_aboveVolume = volume;\n    }\n\n    public void averageOptionVolumeAbove(int volume) {\n        m_averageOptionVolumeAbove = volume;\n    }\n\n    public void marketCapAbove(double cap) {\n        m_marketCapAbove = cap;\n    }\n\n    public void marketCapBelow(double cap) {\n        m_marketCapBelow = cap;\n    }\n\n    public void moodyRatingAbove(String r) {\n        m_moodyRatingAbove = r;\n    }\n\n    public void moodyRatingBelow(String r) {\n        m_moodyRatingBelow = r;\n    }\n\n    public void spRatingAbove(String r) {\n        m_spRatingAbove = r;\n    }\n\n    public void spRatingBelow(String r) {\n        m_spRatingBelow = r;\n    }\n\n    public void maturityDateAbove(String d) {\n        m_maturityDateAbove = d;\n    }\n\n    public void maturityDateBelow(String d) {\n        m_maturityDateBelow = d;\n    }\n\n    public void couponRateAbove(double r) {\n        m_couponRateAbove = r;\n    }\n\n    public void couponRateBelow(double r) {\n        m_couponRateBelow = r;\n    }\n\n    public void excludeConvertible(String c) {\n        m_excludeConvertible = c;\n    }\n\n    public void scannerSettingPairs(String val) {\n        m_scannerSettingPairs = val;\n    }\n\n    public void stockTypeFilter(String val) {\n        m_stockTypeFilter = val;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ScannerSubscriptionTest20.java",
		"test_prompt": "// ScannerSubscriptionTest20.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ScannerSubscription}.\n* It contains ten unit test cases for the {@link ScannerSubscription#stockTypeFilter()} method.\n*/\nclass ScannerSubscriptionTest20 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest0.java",
		"test_prompt": "// EWrapperMsgGeneratorTest0.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickPrice(int, int, double, int)} method.\n*/\nclass EWrapperMsgGeneratorTest0 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest1.java",
		"test_prompt": "// EWrapperMsgGeneratorTest1.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickSize(int, int, int)} method.\n*/\nclass EWrapperMsgGeneratorTest1 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest2.java",
		"test_prompt": "// EWrapperMsgGeneratorTest2.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickOptionComputation(int, int, double, double, double, double)} method.\n*/\nclass EWrapperMsgGeneratorTest2 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest3.java",
		"test_prompt": "// EWrapperMsgGeneratorTest3.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickGeneric(int, int, double)} method.\n*/\nclass EWrapperMsgGeneratorTest3 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest4.java",
		"test_prompt": "// EWrapperMsgGeneratorTest4.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickString(int, int, String)} method.\n*/\nclass EWrapperMsgGeneratorTest4 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest5.java",
		"test_prompt": "// EWrapperMsgGeneratorTest5.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickEFP(int, int, double, String, double, int, String, double, double)} method.\n*/\nclass EWrapperMsgGeneratorTest5 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest6.java",
		"test_prompt": "// EWrapperMsgGeneratorTest6.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#orderStatus(int, String, int, int, double, int, int, double, int, String)} method.\n*/\nclass EWrapperMsgGeneratorTest6 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest7.java",
		"test_prompt": "// EWrapperMsgGeneratorTest7.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#openOrder(int, Contract, Order, OrderState)} method.\n*/\nclass EWrapperMsgGeneratorTest7 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest8.java",
		"test_prompt": "// EWrapperMsgGeneratorTest8.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#openOrderEnd()} method.\n*/\nclass EWrapperMsgGeneratorTest8 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest9.java",
		"test_prompt": "// EWrapperMsgGeneratorTest9.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updateAccountValue(String, String, String, String)} method.\n*/\nclass EWrapperMsgGeneratorTest9 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest10.java",
		"test_prompt": "// EWrapperMsgGeneratorTest10.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updatePortfolio(Contract, int, double, double, double, double, double, String)} method.\n*/\nclass EWrapperMsgGeneratorTest10 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest11.java",
		"test_prompt": "// EWrapperMsgGeneratorTest11.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updateAccountTime(String)} method.\n*/\nclass EWrapperMsgGeneratorTest11 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest12.java",
		"test_prompt": "// EWrapperMsgGeneratorTest12.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#accountDownloadEnd(String)} method.\n*/\nclass EWrapperMsgGeneratorTest12 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest13.java",
		"test_prompt": "// EWrapperMsgGeneratorTest13.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#nextValidId(int)} method.\n*/\nclass EWrapperMsgGeneratorTest13 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest14.java",
		"test_prompt": "// EWrapperMsgGeneratorTest14.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#contractDetails(int, ContractDetails)} method.\n*/\nclass EWrapperMsgGeneratorTest14 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest15.java",
		"test_prompt": "// EWrapperMsgGeneratorTest15.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#contractMsg(Contract)} method.\n*/\nclass EWrapperMsgGeneratorTest15 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest16.java",
		"test_prompt": "// EWrapperMsgGeneratorTest16.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#bondContractDetails(int, ContractDetails)} method.\n*/\nclass EWrapperMsgGeneratorTest16 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest17.java",
		"test_prompt": "// EWrapperMsgGeneratorTest17.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#contractDetailsEnd(int)} method.\n*/\nclass EWrapperMsgGeneratorTest17 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest18.java",
		"test_prompt": "// EWrapperMsgGeneratorTest18.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#execDetails(int, Contract, Execution)} method.\n*/\nclass EWrapperMsgGeneratorTest18 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest19.java",
		"test_prompt": "// EWrapperMsgGeneratorTest19.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#execDetailsEnd(int)} method.\n*/\nclass EWrapperMsgGeneratorTest19 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest20.java",
		"test_prompt": "// EWrapperMsgGeneratorTest20.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updateMktDepth(int, int, int, int, double, int)} method.\n*/\nclass EWrapperMsgGeneratorTest20 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest21.java",
		"test_prompt": "// EWrapperMsgGeneratorTest21.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updateMktDepthL2(int, int, String, int, int, double, int)} method.\n*/\nclass EWrapperMsgGeneratorTest21 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest22.java",
		"test_prompt": "// EWrapperMsgGeneratorTest22.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#updateNewsBulletin(int, int, String, String)} method.\n*/\nclass EWrapperMsgGeneratorTest22 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest23.java",
		"test_prompt": "// EWrapperMsgGeneratorTest23.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#managedAccounts(String)} method.\n*/\nclass EWrapperMsgGeneratorTest23 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest24.java",
		"test_prompt": "// EWrapperMsgGeneratorTest24.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#receiveFA(int, String)} method.\n*/\nclass EWrapperMsgGeneratorTest24 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest25.java",
		"test_prompt": "// EWrapperMsgGeneratorTest25.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#historicalData(int, String, double, double, double, double, int, int, double, boolean)} method.\n*/\nclass EWrapperMsgGeneratorTest25 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest26.java",
		"test_prompt": "// EWrapperMsgGeneratorTest26.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#realtimeBar(int, long, double, double, double, double, long, double, int)} method.\n*/\nclass EWrapperMsgGeneratorTest26 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest27.java",
		"test_prompt": "// EWrapperMsgGeneratorTest27.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#scannerParameters(String)} method.\n*/\nclass EWrapperMsgGeneratorTest27 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest28.java",
		"test_prompt": "// EWrapperMsgGeneratorTest28.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#scannerData(int, int, ContractDetails, String, String, String, String)} method.\n*/\nclass EWrapperMsgGeneratorTest28 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest29.java",
		"test_prompt": "// EWrapperMsgGeneratorTest29.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#scannerDataEnd(int)} method.\n*/\nclass EWrapperMsgGeneratorTest29 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest30.java",
		"test_prompt": "// EWrapperMsgGeneratorTest30.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#currentTime(long)} method.\n*/\nclass EWrapperMsgGeneratorTest30 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest31.java",
		"test_prompt": "// EWrapperMsgGeneratorTest31.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#fundamentalData(int, String)} method.\n*/\nclass EWrapperMsgGeneratorTest31 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest32.java",
		"test_prompt": "// EWrapperMsgGeneratorTest32.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#deltaNeutralValidation(int, UnderComp)} method.\n*/\nclass EWrapperMsgGeneratorTest32 {"
	},
	{
		"original_code": "// EWrapperMsgGenerator.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\n\npublic class EWrapperMsgGenerator extends AnyWrapperMsgGenerator {\n\n    public static final String SCANNER_PARAMETERS = \"SCANNER PARAMETERS:\";\n\n    public static final String FINANCIAL_ADVISOR = \"FA:\";\n\n    static public String tickPrice(int tickerId, int field, double price, int canAutoExecute) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + price + \" \" + ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\n    }\n\n    static public String tickSize(int tickerId, int field, int size) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(field) + \"=\" + size;\n    }\n\n    static public String tickOptionComputation(int tickerId, int field, double impliedVol, double delta, double modelPrice, double pvDividend) {\n        String toAdd = \"id=\" + tickerId + \"  \" + TickType.getField(field) + \": vol = \" + ((impliedVol >= 0 && impliedVol != Double.MAX_VALUE) ? Double.toString(impliedVol) : \"N/A\") + \" delta = \" + ((Math.abs(delta) <= 1) ? Double.toString(delta) : \"N/A\");\n        if (field == TickType.MODEL_OPTION) {\n            toAdd += \": modelPrice = \" + ((modelPrice >= 0 && modelPrice != Double.MAX_VALUE) ? Double.toString(modelPrice) : \"N/A\");\n            toAdd += \": pvDividend = \" + ((pvDividend >= 0 && pvDividend != Double.MAX_VALUE) ? Double.toString(pvDividend) : \"N/A\");\n        }\n        return toAdd;\n    }\n\n    static public String tickGeneric(int tickerId, int tickType, double value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickString(int tickerId, int tickType, String value) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \"=\" + value;\n    }\n\n    static public String tickEFP(int tickerId, int tickType, double basisPoints, String formattedBasisPoints, double impliedFuture, int holdDays, String futureExpiry, double dividendImpact, double dividendsToExpiry) {\n        return \"id=\" + tickerId + \"  \" + TickType.getField(tickType) + \": basisPoints = \" + basisPoints + \"/\" + formattedBasisPoints + \" impliedFuture = \" + impliedFuture + \" holdDays = \" + holdDays + \" futureExpiry = \" + futureExpiry + \" dividendImpact = \" + dividendImpact + \" dividends to expiry = \" + dividendsToExpiry;\n    }\n\n    static public String orderStatus(int orderId, String status, int filled, int remaining, double avgFillPrice, int permId, int parentId, double lastFillPrice, int clientId, String whyHeld) {\n        return \"order status: orderId=\" + orderId + \" clientId=\" + clientId + \" permId=\" + permId + \" status=\" + status + \" filled=\" + filled + \" remaining=\" + remaining + \" avgFillPrice=\" + avgFillPrice + \" lastFillPrice=\" + lastFillPrice + \" parent Id=\" + parentId + \" whyHeld=\" + whyHeld;\n    }\n\n    static public String openOrder(int orderId, Contract contract, Order order, OrderState orderState) {\n        String msg = \"open order: orderId=\" + orderId + \" action=\" + order.m_action + \" quantity=\" + order.m_totalQuantity + \" symbol=\" + contract.m_symbol + \" exchange=\" + contract.m_exchange + \" secType=\" + contract.m_secType + \" type=\" + order.m_orderType + \" lmtPrice=\" + order.m_lmtPrice + \" auxPrice=\" + order.m_auxPrice + \" TIF=\" + order.m_tif + \" localSymbol=\" + contract.m_localSymbol + \" client Id=\" + order.m_clientId + \" parent Id=\" + order.m_parentId + \" permId=\" + order.m_permId + \" outsideRth=\" + order.m_outsideRth + \" hidden=\" + order.m_hidden + \" discretionaryAmt=\" + order.m_discretionaryAmt + \" triggerMethod=\" + order.m_triggerMethod + \" goodAfterTime=\" + order.m_goodAfterTime + \" goodTillDate=\" + order.m_goodTillDate + \" faGroup=\" + order.m_faGroup + \" faMethod=\" + order.m_faMethod + \" faPercentage=\" + order.m_faPercentage + \" faProfile=\" + order.m_faProfile + \" shortSaleSlot=\" + order.m_shortSaleSlot + \" designatedLocation=\" + order.m_designatedLocation + \" ocaGroup=\" + order.m_ocaGroup + \" ocaType=\" + order.m_ocaType + \" rule80A=\" + order.m_rule80A + \" allOrNone=\" + order.m_allOrNone + \" minQty=\" + order.m_minQty + \" percentOffset=\" + order.m_percentOffset + \" eTradeOnly=\" + order.m_eTradeOnly + \" firmQuoteOnly=\" + order.m_firmQuoteOnly + \" nbboPriceCap=\" + order.m_nbboPriceCap + \" auctionStrategy=\" + order.m_auctionStrategy + \" startingPrice=\" + order.m_startingPrice + \" stockRefPrice=\" + order.m_stockRefPrice + \" delta=\" + order.m_delta + \" stockRangeLower=\" + order.m_stockRangeLower + \" stockRangeUpper=\" + order.m_stockRangeUpper + \" volatility=\" + order.m_volatility + \" volatilityType=\" + order.m_volatilityType + \" deltaNeutralOrderType=\" + order.m_deltaNeutralOrderType + \" deltaNeutralAuxPrice=\" + order.m_deltaNeutralAuxPrice + \" continuousUpdate=\" + order.m_continuousUpdate + \" referencePriceType=\" + order.m_referencePriceType + \" trailStopPrice=\" + order.m_trailStopPrice + \" scaleInitLevelSize=\" + Util.IntMaxString(order.m_scaleInitLevelSize) + \" scaleSubsLevelSize=\" + Util.IntMaxString(order.m_scaleSubsLevelSize) + \" scalePriceIncrement=\" + Util.DoubleMaxString(order.m_scalePriceIncrement) + \" account=\" + order.m_account + \" settlingFirm=\" + order.m_settlingFirm + \" clearingAccount=\" + order.m_clearingAccount + \" clearingIntent=\" + order.m_clearingIntent + \" notHeld=\" + order.m_notHeld + \" whatIf=\" + order.m_whatIf;\n        if (\"BAG\".equals(contract.m_secType)) {\n            if (contract.m_comboLegsDescrip != null) {\n                msg += \" comboLegsDescrip=\" + contract.m_comboLegsDescrip;\n            }\n            if (order.m_basisPoints != Double.MAX_VALUE) {\n                msg += \" basisPoints=\" + order.m_basisPoints;\n                msg += \" basisPointsType=\" + order.m_basisPointsType;\n            }\n        }\n        if (contract.m_underComp != null) {\n            UnderComp underComp = contract.m_underComp;\n            msg += \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n        }\n        if (!Util.StringIsEmpty(order.m_algoStrategy)) {\n            msg += \" algoStrategy=\" + order.m_algoStrategy;\n            msg += \" algoParams={\";\n            if (order.m_algoParams != null) {\n                Vector algoParams = order.m_algoParams;\n                for (int i = 0; i < algoParams.size(); ++i) {\n                    TagValue param = (TagValue) algoParams.elementAt(i);\n                    if (i > 0) {\n                        msg += \",\";\n                    }\n                    msg += param.m_tag + \"=\" + param.m_value;\n                }\n            }\n            msg += \"}\";\n        }\n        String orderStateMsg = \" status=\" + orderState.m_status + \" initMargin=\" + orderState.m_initMargin + \" maintMargin=\" + orderState.m_maintMargin + \" equityWithLoan=\" + orderState.m_equityWithLoan + \" commission=\" + Util.DoubleMaxString(orderState.m_commission) + \" minCommission=\" + Util.DoubleMaxString(orderState.m_minCommission) + \" maxCommission=\" + Util.DoubleMaxString(orderState.m_maxCommission) + \" commissionCurrency=\" + orderState.m_commissionCurrency + \" warningText=\" + orderState.m_warningText;\n        return msg + orderStateMsg;\n    }\n\n    static public String openOrderEnd() {\n        return \" =============== end ===============\";\n    }\n\n    static public String updateAccountValue(String key, String value, String currency, String accountName) {\n        return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n    }\n\n    static public String updatePortfolio(Contract contract, int position, double marketPrice, double marketValue, double averageCost, double unrealizedPNL, double realizedPNL, String accountName) {\n        String msg = \"updatePortfolio: \" + contractMsg(contract) + position + \" \" + marketPrice + \" \" + marketValue + \" \" + averageCost + \" \" + unrealizedPNL + \" \" + realizedPNL + \" \" + accountName;\n        return msg;\n    }\n\n    static public String updateAccountTime(String timeStamp) {\n        return \"updateAccountTime: \" + timeStamp;\n    }\n\n    static public String accountDownloadEnd(String accountName) {\n        return \"accountDownloadEnd: \" + accountName;\n    }\n\n    static public String nextValidId(int orderId) {\n        return \"Next Valid Order ID: \" + orderId;\n    }\n\n    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Contract Details begin ----\\n\" + contractMsg(contract) + contractDetailsMsg(contractDetails) + \" ---- Contract Details End ----\\n\";\n        return msg;\n    }\n\n    private static String contractDetailsMsg(ContractDetails contractDetails) {\n        String msg = \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"price magnifier = \" + contractDetails.m_priceMagnifier + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"underConId = \" + contractDetails.m_underConId + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \"contractMonth = \" + contractDetails.m_contractMonth + \"\\n\" + \"industry = \" + contractDetails.m_industry + \"\\n\" + \"category = \" + contractDetails.m_category + \"\\n\" + \"subcategory = \" + contractDetails.m_subcategory + \"\\n\" + \"timeZoneId = \" + contractDetails.m_timeZoneId + \"\\n\" + \"tradingHours = \" + contractDetails.m_tradingHours + \"\\n\" + \"liquidHours = \" + contractDetails.m_liquidHours + \"\\n\";\n        return msg;\n    }\n\n    static public String contractMsg(Contract contract) {\n        String msg = \"conid = \" + contract.m_conId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"multiplier = \" + contract.m_multiplier + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"primaryExch = \" + contract.m_primaryExch + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\";\n        return msg;\n    }\n\n    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\" + \" ---- Bond Contract Details begin ----\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"cusip = \" + contractDetails.m_cusip + \"\\n\" + \"coupon = \" + contractDetails.m_coupon + \"\\n\" + \"maturity = \" + contractDetails.m_maturity + \"\\n\" + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\" + \"ratings = \" + contractDetails.m_ratings + \"\\n\" + \"bondType = \" + contractDetails.m_bondType + \"\\n\" + \"couponType = \" + contractDetails.m_couponType + \"\\n\" + \"convertible = \" + contractDetails.m_convertible + \"\\n\" + \"callable = \" + contractDetails.m_callable + \"\\n\" + \"putable = \" + contractDetails.m_putable + \"\\n\" + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\" + \"exchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"marketName = \" + contractDetails.m_marketName + \"\\n\" + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\" + \"conid = \" + contract.m_conId + \"\\n\" + \"minTick = \" + contractDetails.m_minTick + \"\\n\" + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\" + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\" + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\" + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\" + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\" + \"notes = \" + contractDetails.m_notes + \"\\n\" + \"longName = \" + contractDetails.m_longName + \"\\n\" + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }\n\n    static public String contractDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String execDetails(int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\" + \"reqId = \" + reqId + \"\\n\" + \"orderId = \" + execution.m_orderId + \"\\n\" + \"clientId = \" + execution.m_clientId + \"\\n\" + \"symbol = \" + contract.m_symbol + \"\\n\" + \"secType = \" + contract.m_secType + \"\\n\" + \"expiry = \" + contract.m_expiry + \"\\n\" + \"strike = \" + contract.m_strike + \"\\n\" + \"right = \" + contract.m_right + \"\\n\" + \"contractExchange = \" + contract.m_exchange + \"\\n\" + \"currency = \" + contract.m_currency + \"\\n\" + \"localSymbol = \" + contract.m_localSymbol + \"\\n\" + \"execId = \" + execution.m_execId + \"\\n\" + \"time = \" + execution.m_time + \"\\n\" + \"acctNumber = \" + execution.m_acctNumber + \"\\n\" + \"executionExchange = \" + execution.m_exchange + \"\\n\" + \"side = \" + execution.m_side + \"\\n\" + \"shares = \" + execution.m_shares + \"\\n\" + \"price = \" + execution.m_price + \"\\n\" + \"permId = \" + execution.m_permId + \"\\n\" + \"liquidation = \" + execution.m_liquidation + \"\\n\" + \"cumQty = \" + execution.m_cumQty + \"\\n\" + \"avgPrice = \" + execution.m_avgPrice + \"\\n\" + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }\n\n    static public String execDetailsEnd(int reqId) {\n        return \"reqId = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String updateMktDepth(int tickerId, int position, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateMktDepthL2(int tickerId, int position, String marketMaker, int operation, int side, double price, int size) {\n        return \"updateMktDepth: \" + tickerId + \" \" + position + \" \" + marketMaker + \" \" + operation + \" \" + side + \" \" + price + \" \" + size;\n    }\n\n    static public String updateNewsBulletin(int msgId, int msgType, String message, String origExchange) {\n        return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType + \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n    }\n\n    static public String managedAccounts(String accountsList) {\n        return \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n\n    static public String receiveFA(int faDataType, String xml) {\n        return FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }\n\n    static public String historicalData(int reqId, String date, double open, double high, double low, double close, int volume, int count, double WAP, boolean hasGaps) {\n        return \"id=\" + reqId + \" date = \" + date + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + WAP + \" hasGaps=\" + hasGaps;\n    }\n\n    public static String realtimeBar(int reqId, long time, double open, double high, double low, double close, long volume, double wap, int count) {\n        return \"id=\" + reqId + \" time = \" + time + \" open=\" + open + \" high=\" + high + \" low=\" + low + \" close=\" + close + \" volume=\" + volume + \" count=\" + count + \" WAP=\" + wap;\n    }\n\n    static public String scannerParameters(String xml) {\n        return SCANNER_PARAMETERS + \"\\n\" + xml;\n    }\n\n    static public String scannerData(int reqId, int rank, ContractDetails contractDetails, String distance, String benchmark, String projection, String legsStr) {\n        Contract contract = contractDetails.m_summary;\n        return \"id = \" + reqId + \" rank=\" + rank + \" symbol=\" + contract.m_symbol + \" secType=\" + contract.m_secType + \" expiry=\" + contract.m_expiry + \" strike=\" + contract.m_strike + \" right=\" + contract.m_right + \" exchange=\" + contract.m_exchange + \" currency=\" + contract.m_currency + \" localSymbol=\" + contract.m_localSymbol + \" marketName=\" + contractDetails.m_marketName + \" tradingClass=\" + contractDetails.m_tradingClass + \" distance=\" + distance + \" benchmark=\" + benchmark + \" projection=\" + projection + \" legsStr=\" + legsStr;\n    }\n\n    static public String scannerDataEnd(int reqId) {\n        return \"id = \" + reqId + \" =============== end ===============\";\n    }\n\n    static public String currentTime(long time) {\n        return \"current time = \" + time + \" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }\n\n    static public String fundamentalData(int reqId, String data) {\n        return \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\n    }\n\n    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n        return \"id = \" + reqId + \" underComp.conId =\" + underComp.m_conId + \" underComp.delta =\" + underComp.m_delta + \" underComp.price =\" + underComp.m_price;\n    }\n\n    static public String tickSnapshotEnd(int tickerId) {\n        return \"id=\" + tickerId + \" =============== end ===============\";\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/EWrapperMsgGeneratorTest33.java",
		"test_prompt": "// EWrapperMsgGeneratorTest33.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\npackage com.ib.client;\n\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EWrapperMsgGenerator}.\n* It contains ten unit test cases for the {@link EWrapperMsgGenerator#tickSnapshotEnd(int)} method.\n*/\nclass EWrapperMsgGeneratorTest33 {"
	},
	{
		"original_code": "// ExecutionFilter.java\n// Copyright 2010-2012 Christopher Redekop\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * ExecutionFilter.java\n *\n */\npackage com.ib.client;\n\npublic class ExecutionFilter {\n\n    public int m_clientId;\n\n    public String m_acctCode;\n\n    public String m_time;\n\n    public String m_symbol;\n\n    public String m_secType;\n\n    public String m_exchange;\n\n    public String m_side;\n\n    public ExecutionFilter() {\n        m_clientId = 0;\n    }\n\n    public ExecutionFilter(int p_clientId, String p_acctCode, String p_time, String p_symbol, String p_secType, String p_exchange, String p_side) {\n        m_clientId = p_clientId;\n        m_acctCode = p_acctCode;\n        m_time = p_time;\n        m_symbol = p_symbol;\n        m_secType = p_secType;\n        m_exchange = p_exchange;\n        m_side = p_side;\n    }\n\n    public boolean equals(Object p_other) {\n        boolean l_bRetVal = false;\n        if (p_other == null) {\n            l_bRetVal = false;\n        } else if (this == p_other) {\n            l_bRetVal = true;\n        } else {\n            ExecutionFilter l_theOther = (ExecutionFilter) p_other;\n            l_bRetVal = (m_clientId == l_theOther.m_clientId && m_acctCode.equalsIgnoreCase(l_theOther.m_acctCode) && m_time.equalsIgnoreCase(l_theOther.m_time) && m_symbol.equalsIgnoreCase(l_theOther.m_symbol) && m_secType.equalsIgnoreCase(l_theOther.m_secType) && m_exchange.equalsIgnoreCase(l_theOther.m_exchange) && m_side.equalsIgnoreCase(l_theOther.m_side));\n        }\n        return l_bRetVal;\n    }\n}\n",
		"id": "EvoSuiteBenchmark/1_tullibee/src/main/java/com/ib/client/ExecutionFilterTest.java",
		"test_prompt": "// ExecutionFilterTest.java\n//\n// This file is part of the Tullibee API, a modified version of Interactive\n// Brokers' Java API (the IB API).\n//\n// The Tullibee API is free software: you can redistribute it and/or modify it\n// under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or (at your\n// option) any later version.\n//\n// The Tullibee API is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n// or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public\n// License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with the Tullibee API.  If not, see <http://www.gnu.org/licenses/>.\n/*\n * ExecutionFilter.java\n *\n */\npackage com.ib.client;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExecutionFilter}.\n* It contains ten unit test cases for the {@link ExecutionFilter#equals(Object)} method.\n*/\nclass ExecutionFilterTest {"
	}
]