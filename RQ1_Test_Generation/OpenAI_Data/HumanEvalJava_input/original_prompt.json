[
	{
		"original_code": "// CorrectBracketing.java\npackage original;\n\nclass CorrectBracketing {\n\n    /**\n     * Brackets is a string of \"<\" and \">\".\n     * return true if every opening bracket has a corresponding closing bracket.\n     *\n     * > correctBracketing(\"<>\")\n     * true\n     * > correctBracketing(\"<<><>>\")\n     * true\n     * > correctBracketing(\"<><><<><>><>\")\n     * true\n     * > correctBracketing(\"<><><<<><><>><>><<><><<>>>\")\n     * true\n     * > correctBracketing(\"<<<><>>>>\")\n     * false\n     * > correctBracketing(\"><<>\")\n     * false\n     * > correctBracketing(\"<\")\n     * false\n     * > correctBracketing(\"<<<<\")\n     * false\n     * > correctBracketing(\">\")\n     * false\n     * > correctBracketing(\"<<>\")\n     * false\n     * > correctBracketing(\"<><><<><>><>><<>\")\n     * false\n     * > correctBracketing(\"<><><<><>><>>><>\")\n     * false\n     */\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
		"id": "56",
		"test_prompt": "// CorrectBracketingTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing}.\n* It contains ten unit test cases for the {@link CorrectBracketing#correctBracketing(String)} method.\n*/\nclass CorrectBracketingTest {"
	},
	{
		"original_code": "// TriplesSumToZero.java\npackage original;\n\nimport java.util.List;\n\nclass TriplesSumToZero {\n\n    /**\n     * triplesSumToZero takes a list of integers as an input.\n     * it returns True if there are three distinct elements in the list that\n     * sum to zero, and False otherwise.\n     *\n     * > triplesSumToZero([1, 3, 5, 0])\n     * false\n     * > triplesSumToZero([1, 3, 5, -1])\n     * false\n     * > triplesSumToZero([1, 3, -2, 1])\n     * true\n     * > triplesSumToZero([1, 2, 3, 7])\n     * false\n     * > triplesSumToZero([1, 2, 5, 7])\n     * false\n     * > triplesSumToZero([2, 4, -5, 3, 9, 7])\n     * true\n     * > triplesSumToZero([1])\n     * false\n     * > triplesSumToZero([1, 3, 5, -100])\n     * false\n     * > triplesSumToZero([100, 3, 5, -100])\n     * false\n     */\n    public static Boolean triplesSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "40",
		"test_prompt": "// TriplesSumToZeroTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriplesSumToZero}.\n* It contains ten unit test cases for the {@link TriplesSumToZero#triplesSumToZero(List)} method.\n*/\nclass TriplesSumToZeroTest {"
	},
	{
		"original_code": "// ParseMusic.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ParseMusic {\n\n    /**\n     * Input to this function is a string representing musical notes in a special ASCII format.\n     * Your task is to parse this string and return list of integers corresponding to how many beats  each does not last.\n     * Here is a legend:\n     * 'o' - whole note, lasts four beats\n     * 'o|' - half note, lasts two beats\n     * '.|' - quarter note, lasts one beat\n     *\n     * > parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n     * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     * > parseMusic(\"\")\n     * []\n     * > parseMusic(\"o o o o\")\n     * [4, 4, 4, 4]\n     * > parseMusic(\".| .| .| .|\")\n     * [1, 1, 1, 1]\n     * > parseMusic(\"o| o| .| .| o o o o\")\n     * [2, 2, 1, 1, 4, 4, 4, 4]\n     * > parseMusic(\"o| .| o| .| o o| o o|\")\n     * [2, 1, 2, 1, 4, 2, 4, 2]\n     */\n    public static List<Object> parseMusic(String musicString) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < musicString.length(); i++) {\n            if (musicString.charAt(i) == 'o') {\n                if (i < musicString.length() - 1 && musicString.charAt(i + 1) == '|') {\n                    result.add(2);\n                    i++;\n                } else {\n                    result.add(4);\n                }\n            } else if (musicString.charAt(i) == '.') {\n                result.add(1);\n                i++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "17",
		"test_prompt": "// ParseMusicTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseMusic}.\n* It contains ten unit test cases for the {@link ParseMusic#parseMusic(String)} method.\n*/\nclass ParseMusicTest {"
	},
	{
		"original_code": "// StartsOneEnds.java\npackage original;\n\nclass StartsOneEnds {\n\n    /**\n     * Given a positive integer n, return the count of the numbers of n-digit\n     * positive integers that start or end with 1.\n     *\n     * > startsOneEnds(1)\n     * 1\n     * > startsOneEnds(2)\n     * 18\n     * > startsOneEnds(3)\n     * 180\n     * > startsOneEnds(4)\n     * 1800\n     * > startsOneEnds(5)\n     * 18000\n     */\n    public static int startsOneEnds(int n) {\n        int count = 0;\n        int start = 1;\n        int end = 1;\n        for (int i = 1; i < n; i++) {\n            start *= 10;\n            end *= 10;\n        }\n        for (int i = start; i < end * 10; i++) {\n            if (i % 10 == 1 || i / start == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "83",
		"test_prompt": "// StartsOneEndsTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StartsOneEnds}.\n* It contains ten unit test cases for the {@link StartsOneEnds#startsOneEnds(int)} method.\n*/\nclass StartsOneEndsTest {"
	},
	{
		"original_code": "// SumProduct.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SumProduct {\n\n    /**\n     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n     * Empty sum should be equal to 0 and empty product should be equal to 1.\n     *\n     * > sumProduct([1, 2, 3, 4])\n     * [10, 24]\n     * > sumProduct([])\n     * [0, 1]\n     * > sumProduct([1, 1, 1])\n     * [3, 1]\n     * > sumProduct([100, 0])\n     * [100, 0]\n     * > sumProduct([3, 5, 7])\n     * [15, 105]\n     * > sumProduct([10])\n     * [10, 10]\n     */\n    public static List<Integer> sumProduct(List<Object> numbers) {\n        Integer sum = 0;\n        Integer product = 1;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                sum += (Integer) number;\n                product *= (Integer) number;\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}\n",
		"id": "8",
		"test_prompt": "// SumProductTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumProduct}.\n* It contains ten unit test cases for the {@link SumProduct#sumProduct(List)} method.\n*/\nclass SumProductTest {"
	},
	{
		"original_code": "// IntToMiniRoman.java\npackage original;\n\nclass IntToMiniRoman {\n\n    /**\n     * * Given a positive integer, obtain its roman numeral equivalent as a string,\n     * and return it in lowercase.\n     * Restrictions: 1 <= num <= 1000\n     *\n     * Examples:\n     * >>> intToMiniRoman(19) == 'xix'\n     * >>> intToMiniRoman(152) == 'clii'\n     * >>> intToMiniRoman(426) == 'cdxxvi'\n     *\n     * > intToMiniRoman(19)\n     * \"xix\"\n     * > intToMiniRoman(152)\n     * \"clii\"\n     * > intToMiniRoman(251)\n     * \"ccli\"\n     * > intToMiniRoman(426)\n     * \"cdxxvi\"\n     * > intToMiniRoman(500)\n     * \"d\"\n     * > intToMiniRoman(1)\n     * \"i\"\n     * > intToMiniRoman(4)\n     * \"iv\"\n     * > intToMiniRoman(43)\n     * \"xliii\"\n     * > intToMiniRoman(90)\n     * \"xc\"\n     * > intToMiniRoman(94)\n     * \"xciv\"\n     * > intToMiniRoman(532)\n     * \"dxxxii\"\n     * > intToMiniRoman(900)\n     * \"cm\"\n     * > intToMiniRoman(994)\n     * \"cmxciv\"\n     * > intToMiniRoman(1000)\n     * \"m\"\n     */\n    public static String intToMiniRoman(int number) {\n        String result = \"\";\n        int[] values = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        String[] symbols = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i = 0; i < values.length; i++) {\n            while (number >= values[i]) {\n                number -= values[i];\n                result += symbols[i];\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "156",
		"test_prompt": "// IntToMiniRomanTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IntToMiniRoman}.\n* It contains ten unit test cases for the {@link IntToMiniRoman#intToMiniRoman(int)} method.\n*/\nclass IntToMiniRomanTest {"
	},
	{
		"original_code": "// WordsString.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass WordsString {\n\n    /**\n     * * You will be given a string of words separated by commas or spaces. Your task is\n     * to split the string into words and return an array of the words.\n     *\n     * For example:\n     * wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     *\n     * > wordsString(\"Hi, my name is John\")\n     * [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n     * > wordsString(\"One, two, three, four, five, six\")\n     * [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     * > wordsString(\"Hi, my name\")\n     * [\"Hi\", \"my\", \"name\"]\n     * > wordsString(\"One,, two, three, four, five, six,\")\n     * [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     * > wordsString(\"\")\n     * []\n     * > wordsString(\"ahmed     , gamal\")\n     * [\"ahmed\", \"gamal\"]\n     */\n    public static List<Object> wordsString(String s) {\n        if (s.length() == 0)\n            return new ArrayList<Object>();\n        String[] words = s.split(\"[, ]+\");\n        return Arrays.asList(words);\n    }\n}\n",
		"id": "101",
		"test_prompt": "// WordsStringTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsString}.\n* It contains ten unit test cases for the {@link WordsString#wordsString(String)} method.\n*/\nclass WordsStringTest {"
	},
	{
		"original_code": "// SelectWords.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SelectWords {\n\n    /**\n     * Given a string s and a natural number n, you have been tasked to implement\n     * a function that returns a list of all words from string s that contain exactly\n     * n consonants, in order these words appear in the string s.\n     * If the string s is empty then the function should return an empty list.\n     * Note: you may assume the input string contains only letters and spaces.\n     * Examples:\n     * selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n     * selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n     * selectWords(\"simple white space\", 2) ==> []\n     * selectWords(\"Hello world\", 4) ==> [\"world\"]\n     * selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     *\n     * > selectWords(\"Mary had a little lamb\", 4)\n     * [\"little\"]\n     * > selectWords(\"Mary had a little lamb\", 3)\n     * [\"Mary\", \"lamb\"]\n     * > selectWords(\"simple white space\", 2)\n     * []\n     * > selectWords(\"Hello world\", 4)\n     * [\"world\"]\n     * > selectWords(\"Uncle sam\", 3)\n     * [\"Uncle\"]\n     * > selectWords(\"\", 4)\n     * []\n     * > selectWords(\"a b c d e f\", 1)\n     * [\"b\", \"c\", \"d\", \"f\"]\n     */\n    public static List<Object> selectWords(String s, int n) {\n        List<Object> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            int consonants = 0;\n            for (int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                    consonants++;\n                }\n            }\n            if (consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "117",
		"test_prompt": "// SelectWordsTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SelectWords}.\n* It contains ten unit test cases for the {@link SelectWords#selectWords(String, int)} method.\n*/\nclass SelectWordsTest {"
	},
	{
		"original_code": "// CheckDictCase.java\npackage original;\n\nimport java.util.Map;\n\nclass CheckDictCase {\n\n    /**\n     * * Given a dictionary, return True if all keys are strings in lower\n     * case or all keys are strings in upper case, else return False.\n     * The function should return False is the given dictionary is empty.\n     * Examples:\n     * check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n     * check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n     * check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n     * check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n     * check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\n     * > checkDictCase({\"p\": \"pineapple\", \"b\": \"banana\"})\n     * true\n     * > checkDictCase({\"p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"})\n     * false\n     * > checkDictCase({\"p\": \"pineapple\", 5: \"banana\", \"a\": \"apple\"})\n     * false\n     * > checkDictCase({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n     * false\n     * > checkDictCase({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n     * true\n     * > checkDictCase({\"fruit\": \"Orange\", \"taste\": \"Sweet\"})\n     * true\n     * > checkDictCase({})\n     * false\n     */\n    public static Boolean checkDictCase(Object dict) {\n        if (dict instanceof Map) {\n            Map m = (Map) dict;\n            if (m.size() == 0) {\n                return false;\n            }\n            boolean allLower = true;\n            boolean allUpper = true;\n            for (Object k : m.keySet()) {\n                if (k instanceof String) {\n                    String s = (String) k;\n                    if (!s.equals(s.toLowerCase())) {\n                        allLower = false;\n                    }\n                    if (!s.equals(s.toUpperCase())) {\n                        allUpper = false;\n                    }\n                } else {\n                    return false;\n                }\n            }\n            return allLower || allUpper;\n        }\n        return false;\n    }\n}\n",
		"id": "95",
		"test_prompt": "// CheckDictCaseTest.java\npackage original;\n\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckDictCase}.\n* It contains ten unit test cases for the {@link CheckDictCase#checkDictCase(Object)} method.\n*/\nclass CheckDictCaseTest {"
	},
	{
		"original_code": "// FixSpaces.java\npackage original;\n\nclass FixSpaces {\n\n    /**\n     * * Given a string text, replace all spaces in it with underscores,\n     * and if a string has more than 2 consecutive spaces,\n     * then replace all consecutive spaces with -\n     *\n     * fixSpaces(\"Example\") == \"Example\"\n     * fixSpaces(\"Example 1\") == \"Example_1\"\n     * fixSpaces(\" Example 2\") == \"_Example_2\"\n     * fixSpaces(\" Example   3\") == \"_Example-3\"\n     *\n     * > fixSpaces(\"Example\")\n     * \"Example\"\n     * > fixSpaces(\"Mudasir Hanif \")\n     * \"Mudasir_Hanif_\"\n     * > fixSpaces(\"Yellow Yellow  Dirty  Fellow\")\n     * \"Yellow_Yellow__Dirty__Fellow\"\n     * > fixSpaces(\"Exa   mple\")\n     * \"Exa-mple\"\n     * > fixSpaces(\"   Exa 1 2 2 mple\")\n     * \"-Exa_1_2_2_mple\"\n     */\n    public static String fixSpaces(String text) {\n        String new_text = \"\";\n        int i = 0;\n        int start = 0;\n        int end = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    new_text += \"-\" + text.charAt(i);\n                } else if (end - start > 0) {\n                    new_text += \"_\".repeat(end - start) + text.charAt(i);\n                } else {\n                    new_text += text.charAt(i);\n                }\n                start = i + 1;\n                end = i + 1;\n            }\n            i += 1;\n        }\n        if (end - start > 2) {\n            new_text += \"-\";\n        } else if (end - start > 0) {\n            new_text += \"_\";\n        }\n        return new_text;\n    }\n}\n",
		"id": "140",
		"test_prompt": "// FixSpacesTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FixSpaces}.\n* It contains ten unit test cases for the {@link FixSpaces#fixSpaces(String)} method.\n*/\nclass FixSpacesTest {"
	},
	{
		"original_code": "// CompareOne.java\npackage original;\n\nclass CompareOne {\n\n    /**\n     * Create a function that takes integers, floats, or strings representing\n     * real numbers, and returns the larger variable in its given variable type.\n     * Return null if the values are equal.\n     * Note: If a real number is represented as a string, the floating point might be . or ,\n     *\n     * compareOne(1, 2.5) ➞ 2.5\n     * compareOne(1, \"2,3\") ➞ \"2,3\"\n     * compareOne(\"5,1\", \"6\") ➞ \"6\"\n     * compareOne(\"1\", 1) ➞ None\n     *\n     * > compareOne(1, 2)\n     * 2\n     * > compareOne(1, 2.5)\n     * 2.5\n     * > compareOne(2, 3)\n     * 3\n     * > compareOne(5, 6)\n     * 6\n     * > compareOne(1, \"2,3\")\n     * \"2,3\"\n     * > compareOne(\"5,1\", \"6\")\n     * \"6\"\n     * > compareOne(\"1\", \"2\")\n     * \"2\"\n     * > compareOne(\"1\", 1)\n     * null\n     */\n    public static Object compareOne(Object a, Object b) {\n        Object temp_a = a;\n        Object temp_b = b;\n        if (temp_a instanceof String) {\n            temp_a = ((String) temp_a).replace(',', '.');\n        }\n        if (temp_b instanceof String) {\n            temp_b = ((String) temp_b).replace(',', '.');\n        }\n        if (Float.parseFloat(temp_a.toString()) == Float.parseFloat(temp_b.toString())) {\n            return null;\n        }\n        return Float.parseFloat(temp_a.toString()) > Float.parseFloat(temp_b.toString()) ? a : b;\n    }\n}\n",
		"id": "137",
		"test_prompt": "// CompareOneTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CompareOne}.\n* It contains ten unit test cases for the {@link CompareOne#compareOne(Object, Object)} method.\n*/\nclass CompareOneTest {"
	},
	{
		"original_code": "// Solution.java\npackage original;\n\nimport java.util.List;\n\nclass Solution {\n\n    /**\n     * Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n     *\n     * Examples\n     * solution([5, 8, 7, 1]) ==> 12\n     * solution([3, 3, 3, 3, 3]) ==> 9\n     * solution([30, 13, 24, 321]) ==>0\n     *\n     * > solution([3, 3, 3, 3, 3])\n     * 9\n     * > solution([30, 13, 24, 321])\n     * 0\n     * > solution([5, 9])\n     * 5\n     * > solution([2, 4, 8])\n     * 0\n     * > solution([30, 13, 23, 32])\n     * 23\n     * > solution([3, 13, 2, 9])\n     * 3\n     */\n    public static int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0 && lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "121",
		"test_prompt": "// SolutionTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solution}.\n* It contains ten unit test cases for the {@link Solution#solution(List)} method.\n*/\nclass SolutionTest {"
	},
	{
		"original_code": "// MeanAbsoluteDeviation.java\npackage original;\n\nimport java.util.List;\n\nclass MeanAbsoluteDeviation {\n\n    /**\n     * For a given list of input numbers, calculate Mean Absolute Deviation\n     * around the mean of this dataset.\n     * Mean Absolute Deviation is the average absolute difference between each\n     * element and a centerpoint (mean in this case):\n     * MAD = average | x - x_mean |\n     *\n     * > meanAbsoluteDeviation([1.0, 2.0, 3.0])\n     * 0.6666666666666666\n     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n     * 1.0\n     * > meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0])\n     * 1.2\n     */\n    public static Double meanAbsoluteDeviation(List<Double> numbers) {\n        Double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        Double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}\n",
		"id": "4",
		"test_prompt": "// MeanAbsoluteDeviationTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MeanAbsoluteDeviation}.\n* It contains ten unit test cases for the {@link MeanAbsoluteDeviation#meanAbsoluteDeviation(List)} method.\n*/\nclass MeanAbsoluteDeviationTest {"
	},
	{
		"original_code": "// SumToN.java\npackage original;\n\nclass SumToN {\n\n    /**\n     * sumToN is a function that sums numbers from 1 to n.\n     *\n     * > sumToN(5)\n     * 15\n     * > sumToN(10)\n     * 55\n     * > sumToN(1)\n     * 1\n     * > sumToN(6)\n     * 21\n     * > sumToN(11)\n     * 66\n     * > sumToN(30)\n     * 465\n     * > sumToN(100)\n     * 5050\n     */\n    public static int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
		"id": "60",
		"test_prompt": "// SumToNTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumToN}.\n* It contains ten unit test cases for the {@link SumToN#sumToN(int)} method.\n*/\nclass SumToNTest {"
	},
	{
		"original_code": "// SortEven.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass SortEven {\n\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the odd indices, while its values at the even indices are equal\n     * to the values of the even indices of l, but sorted.\n     *\n     * > sortEven([1, 2, 3])\n     * [1, 2, 3]\n     * > sortEven([5, 6, 3, 4])\n     * [3, 6, 5, 4]\n     * > sortEven([1, 2, 3])\n     * [1, 2, 3]\n     * > sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]\n     * > sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\n     * [-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]\n     */\n    public static List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 2 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 2));\n            }\n        }\n        return l2;\n    }\n}\n",
		"id": "37",
		"test_prompt": "// SortEvenTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortEven}.\n* It contains ten unit test cases for the {@link SortEven#sortEven(List)} method.\n*/\nclass SortEvenTest {"
	},
	{
		"original_code": "// RescaleToUnit.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RescaleToUnit {\n\n    /**\n     * Given list of numbers (of at least two elements), apply a linear transform to that list,\n     * such that the smallest number will become 0 and the largest will become 1\n     *\n     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     * > rescaleToUnit([2.0, 49.9])\n     * [0.0, 1.0]\n     * > rescaleToUnit([100.0, 49.9])\n     * [1.0, 0.0]\n     * > rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n     * [0.0, 0.25, 0.5, 0.75, 1.0]\n     * > rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])\n     * [0.25, 0.0, 1.0, 0.5, 0.75]\n     * > rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])\n     * [0.25, 0.0, 1.0, 0.5, 0.75]\n     */\n    public static List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add((numbers.get(i) - min) / (max - min));\n        }\n        return result;\n    }\n}\n",
		"id": "21",
		"test_prompt": "// RescaleToUnitTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RescaleToUnit}.\n* It contains ten unit test cases for the {@link RescaleToUnit#rescaleToUnit(List)} method.\n*/\nclass RescaleToUnitTest {"
	},
	{
		"original_code": "// ClosestInteger.java\npackage original;\n\nclass ClosestInteger {\n\n    /**\n     * * Create a function that takes a value (string) representing a number\n     * and returns the closest integer to it. If the number is equidistant\n     * from two integers, round it away from zero.\n     *\n     * Examples\n     * >>> closestInteger(\"10\")\n     * 10\n     * >>> closestInteger(\"15.3\")\n     * 15\n     *\n     * Note:\n     * Rounding away from zero means that if the given number is equidistant\n     * from two integers, the one you should return is the one that is the\n     * farthest from zero. For example closest_integer(\"14.5\") should\n     * return 15 and closest_integer(\"-14.5\") should return -15.\n     *\n     * > closestInteger(\"10\")\n     * 10\n     * > closestInteger(\"14.5\")\n     * 15\n     * > closestInteger(\"-15.5\")\n     * -16\n     * > closestInteger(\"15.3\")\n     * 15\n     * > closestInteger(\"0\")\n     * 0\n     */\n    public static int closestInteger(String value) {\n        double d = Double.parseDouble(value);\n        if (d > 0) {\n            return (int) Math.floor(d + 0.5);\n        } else {\n            return (int) Math.ceil(d - 0.5);\n        }\n    }\n}\n",
		"id": "99",
		"test_prompt": "// ClosestIntegerTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClosestInteger}.\n* It contains ten unit test cases for the {@link ClosestInteger#closestInteger(String)} method.\n*/\nclass ClosestIntegerTest {"
	},
	{
		"original_code": "// IsSimplePower.java\npackage original;\n\nclass IsSimplePower {\n\n    /**\n     * Your task is to write a function that returns true if a number x is a simple\n     * power of n and false in other cases.\n     * x is a simple power of n if n**int=x\n     * For example:\n     * isSimplePower(1, 4) => true\n     * isSimplePower(2, 2) => true\n     * isSimplePower(8, 2) => true\n     * isSimplePower(3, 2) => false\n     * isSimplePower(3, 1) => false\n     * isSimplePower(5, 3) => false\n     *\n     * > isSimplePower(16, 2)\n     * true\n     * > isSimplePower(143214, 16)\n     * false\n     * > isSimplePower(4, 2)\n     * true\n     * > isSimplePower(9, 3)\n     * true\n     * > isSimplePower(16, 4)\n     * true\n     * > isSimplePower(24, 2)\n     * false\n     * > isSimplePower(128, 4)\n     * false\n     * > isSimplePower(12, 6)\n     * false\n     * > isSimplePower(1, 1)\n     * true\n     * > isSimplePower(1, 12)\n     * true\n     */\n    public static Boolean isSimplePower(int x, int n) {\n        if (x == 1) {\n            return true;\n        }\n        if (n == 1) {\n            return false;\n        }\n        int y = n;\n        while (y < x) {\n            y *= n;\n        }\n        return y == x;\n    }\n}\n",
		"id": "76",
		"test_prompt": "// IsSimplePowerTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSimplePower}.\n* It contains ten unit test cases for the {@link IsSimplePower#isSimplePower(int, int)} method.\n*/\nclass IsSimplePowerTest {"
	},
	{
		"original_code": "// CountUpper.java\npackage original;\n\nclass CountUpper {\n\n    /**\n     * * Given a string s, count the number of uppercase vowels in even indices.\n     *\n     * For example:\n     * countUpper('aBCdEf') returns 1\n     * countUpper('abcdefg') returns 0\n     * countUpper('dBBE') returns 0\n     *\n     * > countUpper(\"abcdefg\")\n     * 0\n     * > countUpper(\"dBBE\")\n     * 0\n     * > countUpper(\"\")\n     * 0\n     * > countUpper(\"EEEE\")\n     * 2\n     */\n    public static int countUpper(String s) {\n        int result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (i % 2 == 0 && Character.isUpperCase(c) && \"AEIOU\".indexOf(c) >= 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "98",
		"test_prompt": "// CountUpperTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpper}.\n* It contains ten unit test cases for the {@link CountUpper#countUpper(String)} method.\n*/\nclass CountUpperTest {"
	},
	{
		"original_code": "// Iscube.java\npackage original;\n\nclass Iscube {\n\n    /**\n     * * Write a function that takes an integer a and returns True\n     * if this integer is a cube of some integer number.\n     * Note: you may assume the input is always valid.\n     * Examples:\n     * iscube(1) ==> True\n     * iscube(2) ==> False\n     * iscube(-1) ==> True\n     * iscube(64) ==> True\n     * iscube(0) ==> True\n     * iscube(180) ==> False\n     *\n     * > iscube(1)\n     * true\n     * > iscube(2)\n     * false\n     * > iscube(-1)\n     * true\n     * > iscube(64)\n     * true\n     * > iscube(180)\n     * false\n     * > iscube(1000)\n     * true\n     * > iscube(0)\n     * true\n     * > iscube(1729)\n     * false\n     */\n    public static Boolean iscube(int a) {\n        if (a < 0) {\n            return iscube(-a);\n        }\n        int i = 0;\n        while (i * i * i < a) {\n            i++;\n        }\n        return i * i * i == a;\n    }\n}\n",
		"id": "77",
		"test_prompt": "// IscubeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Iscube}.\n* It contains ten unit test cases for the {@link Iscube#iscube(int)} method.\n*/\nclass IscubeTest {"
	},
	{
		"original_code": "// FindClosestElements.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass FindClosestElements {\n\n    /**\n     * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n     * other and return them in order (smaller number, larger number).\n     *\n     * > findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\n     * [3.9, 4.0]\n     * > findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])\n     * [5.0, 5.9]\n     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n     * [2.0, 2.2]\n     * > findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n     * [2.0, 2.0]\n     * > findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])\n     * [2.2, 3.1]\n     */\n    public static List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double minDiff = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < minDiff) {\n                    minDiff = diff;\n                    result.clear();\n                    result.add(numbers.get(i));\n                    result.add(numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "20",
		"test_prompt": "// FindClosestElementsTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindClosestElements}.\n* It contains ten unit test cases for the {@link FindClosestElements#findClosestElements(List)} method.\n*/\nclass FindClosestElementsTest {"
	},
	{
		"original_code": "// FizzBuzz.java\npackage original;\n\nclass FizzBuzz {\n\n    /**\n     * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n     *\n     * > fizzBuzz(50)\n     * 0\n     * > fizzBuzz(78)\n     * 2\n     * > fizzBuzz(79)\n     * 3\n     * > fizzBuzz(50)\n     * 0\n     * > fizzBuzz(78)\n     * 2\n     * > fizzBuzz(79)\n     * 3\n     * > fizzBuzz(100)\n     * 3\n     * > fizzBuzz(200)\n     * 6\n     * > fizzBuzz(4000)\n     * 192\n     * > fizzBuzz(10000)\n     * 639\n     * > fizzBuzz(100000)\n     * 8026\n     */\n    public static int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                String s = Integer.toString(i);\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '7') {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "36",
		"test_prompt": "// FizzBuzzTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FizzBuzz}.\n* It contains ten unit test cases for the {@link FizzBuzz#fizzBuzz(int)} method.\n*/\nclass FizzBuzzTest {"
	},
	{
		"original_code": "// Intersperse.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Intersperse {\n\n    /**\n     * Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n     *\n     * > intersperse([], 4)\n     * []\n     * > intersperse([1, 2, 3], 4)\n     * [1, 4, 2, 4, 3]\n     * > intersperse([], 7)\n     * []\n     * > intersperse([5, 6, 3, 2], 8)\n     * [5, 8, 6, 8, 3, 8, 2]\n     * > intersperse([2, 2, 2], 2)\n     * [2, 2, 2, 2, 2]\n     */\n    public static List<Object> intersperse(List<Object> numbers, int delimiter) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i < numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "5",
		"test_prompt": "// IntersperseTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersperse}.\n* It contains ten unit test cases for the {@link Intersperse#intersperse(List, int)} method.\n*/\nclass IntersperseTest {"
	},
	{
		"original_code": "// CorrectBracketing1.java\npackage original;\n\nclass CorrectBracketing1 {\n\n    /**\n     * brackets is a string of \"(\" and \")\".\n     * return True if every opening bracket has a corresponding closing bracket.\n     *\n     * > correctBracketing(\"()\")\n     * true\n     * > correctBracketing(\"(()())\")\n     * true\n     * > correctBracketing(\"()()(()())()\")\n     * true\n     * > correctBracketing(\"()()((()()())())(()()(()))\")\n     * true\n     * > correctBracketing(\"((()())))\")\n     * false\n     * > correctBracketing(\")(()\")\n     * false\n     * > correctBracketing(\"(\")\n     * false\n     * > correctBracketing(\"((((\")\n     * false\n     * > correctBracketing(\")\")\n     * false\n     * > correctBracketing(\"(()\")\n     * false\n     * > correctBracketing(\"()()(()())())(()\")\n     * false\n     * > correctBracketing(\"()()(()())()))()\")\n     * false\n     */\n    public static Boolean correctBracketing(String brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return false;\n            }\n        }\n        return count == 0;\n    }\n}\n",
		"id": "61",
		"test_prompt": "// CorrectBracketing1Test.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CorrectBracketing1}.\n* It contains ten unit test cases for the {@link CorrectBracketing1#correctBracketing(String)} method.\n*/\nclass CorrectBracketing1Test {"
	},
	{
		"original_code": "// Maximum1.java\npackage original;\n\nimport java.util.*;\n\nclass Maximum1 {\n\n    /**\n     * * Given an array arr of integers and a positive integer k, return a sorted list\n     * of length k with the maximum k numbers in arr.\n     *\n     * Example 1:\n     *\n     * Input: arr = [-3, -4, 5], k = 3\n     * Output: [-4, -3, 5]\n     *\n     * Example 2:\n     *\n     * Input: arr = [4, -4, 4], k = 2\n     * Output: [4, 4]\n     *\n     * Example 3:\n     *\n     * Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     * Output: [2]\n     *\n     * Note:\n     * 1. The length of the array will be in the range of [1, 1000].\n     * 2. The elements in the array will be in the range of [-1000, 1000].\n     * 3. 0 <= k <= len(arr)\n     *\n     * > maximum([-3, -4, 5], 3)\n     * [-4, -3, 5]\n     * > maximum([4, -4, 4], 2)\n     * [4, 4]\n     * > maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n     * [2]\n     * > maximum([123, -123, 20, 0, 1, 2, -3], 3)\n     * [2, 20, 123]\n     * > maximum([-123, 20, 0, 1, 2, -3], 4)\n     * [0, 1, 2, 20]\n     * > maximum([5, 15, 0, 3, -13, -8, 0], 7)\n     * [-13, -8, 0, 0, 3, 5, 15]\n     * > maximum([-1, 0, 2, 5, 3, -10], 2)\n     * [3, 5]\n     * > maximum([1, 0, 5, -7], 1)\n     * [5]\n     * > maximum([4, -4], 2)\n     * [-4, 4]\n     * > maximum([-10, 10], 2)\n     * [-10, 10]\n     * > maximum([1, 2, 3, -23, 243, -400, 0], 0)\n     * []\n     */\n    public static List<Object> maximum(List<Integer> arr, int k) {\n        int n = arr.size();\n        if (n == 0 || k == 0) {\n            return new ArrayList<Object>();\n        }\n        if (n <= k) {\n            Collections.sort(arr);\n            return new ArrayList<Object>(arr);\n        }\n        List<Object> res = new ArrayList<Object>();\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(k);\n        for (int i = 0; i < n; i++) {\n            if (i < k) {\n                heap.add(arr.get(i));\n            } else {\n                if (arr.get(i) > heap.peek()) {\n                    heap.poll();\n                    heap.add(arr.get(i));\n                }\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            res.add(heap.poll());\n        }\n        Collections.sort(res, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                return (int) o1 - (int) o2;\n            }\n        });\n        return res;\n    }\n}\n",
		"id": "120",
		"test_prompt": "// Maximum1Test.java\npackage original;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Maximum1}.\n* It contains ten unit test cases for the {@link Maximum1#maximum(List, int)} method.\n*/\nclass Maximum1Test {"
	},
	{
		"original_code": "// Solve.java\npackage original;\n\nclass Solve {\n\n    /**\n     * You are given a string s.\n     * if s[i] is a letter, reverse its case from lower to upper or vise versa,\n     * otherwise keep it as it is.\n     * If the string contains no letters, reverse the string.\n     * The function should return the resulted string.\n     * Examples\n     * solve(\"1234\") = \"4321\"\n     * solve(\"ab\") = \"AB\"\n     * solve(\"#a@C\") = \"#A@c\"\n     *\n     * > solve(\"AsDf\")\n     * \"aSdF\"\n     * > solve(\"1234\")\n     * \"4321\"\n     * > solve(\"ab\")\n     * \"AB\"\n     * > solve(\"#a@C\")\n     * \"#A@c\"\n     * > solve(\"#AsdfW^45\")\n     * \"#aSDFw^45\"\n     * > solve(\"#6@2\")\n     * \"2@6#\"\n     * > solve(\"#$a^D\")\n     * \"#$A^d\"\n     * > solve(\"#ccc\")\n     * \"#CCC\"\n     */\n    public static String solve(String s) {\n        String result = \"\";\n        boolean hasLetters = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i))) {\n                hasLetters = true;\n                if (Character.isUpperCase(s.charAt(i))) {\n                    result += Character.toLowerCase(s.charAt(i));\n                } else {\n                    result += Character.toUpperCase(s.charAt(i));\n                }\n            } else {\n                result += s.charAt(i);\n            }\n        }\n        if (!hasLetters) {\n            result = new StringBuilder(result).reverse().toString();\n        }\n        return result;\n    }\n}\n",
		"id": "161",
		"test_prompt": "// SolveTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve}.\n* It contains ten unit test cases for the {@link Solve#solve(String)} method.\n*/\nclass SolveTest {"
	},
	{
		"original_code": "// LargestSmallestIntegers.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass LargestSmallestIntegers {\n\n    /**\n     * * Create a function that returns a tuple (a, b), where 'a' is\n     * the largest of negative integers, and 'b' is the smallest\n     * of positive integers in a list.\n     * If there is no negative or positive integers, return them as None.\n     *\n     * Examples:\n     * largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n     * largestSmallestIntegers([]) == (None, None)\n     * largestSmallestIntegers([0]) == (None, None)\n     *\n     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n     * [null, 1]\n     * > largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])\n     * [null, 1]\n     * > largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])\n     * [-2, 1]\n     * > largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])\n     * [-7, 2]\n     * > largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])\n     * [-9, 2]\n     * > largestSmallestIntegers([])\n     * [null, null]\n     * > largestSmallestIntegers([0])\n     * [null, null]\n     * > largestSmallestIntegers([-1, -3, -5, -6])\n     * [-1, null]\n     * > largestSmallestIntegers([-1, -3, -5, -6, 0])\n     * [-1, null]\n     * > largestSmallestIntegers([-6, -4, -4, -3, 1])\n     * [-3, 1]\n     * > largestSmallestIntegers([-6, -4, -4, -3, -100, 1])\n     * [-3, 1]\n     */\n    public static List<Integer> largestSmallestIntegers(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        int largestNegative = Integer.MIN_VALUE;\n        int smallestPositive = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int curr = (Integer) lst.get(i);\n            if (curr < 0) {\n                if (curr > largestNegative) {\n                    largestNegative = curr;\n                }\n            } else if (curr > 0) {\n                if (curr < smallestPositive) {\n                    smallestPositive = curr;\n                }\n            }\n        }\n        if (largestNegative == Integer.MIN_VALUE) {\n            result.add(null);\n        } else {\n            result.add(largestNegative);\n        }\n        if (smallestPositive == Integer.MAX_VALUE) {\n            result.add(null);\n        } else {\n            result.add(smallestPositive);\n        }\n        return result;\n    }\n}\n",
		"id": "136",
		"test_prompt": "// LargestSmallestIntegersTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestSmallestIntegers}.\n* It contains ten unit test cases for the {@link LargestSmallestIntegers#largestSmallestIntegers(List)} method.\n*/\nclass LargestSmallestIntegersTest {"
	},
	{
		"original_code": "// FileNameCheck.java\npackage original;\n\nimport java.util.Arrays;\n\nclass FileNameCheck {\n\n    /**\n     * Create a function which takes a string representing a file's name, and returns\n     * 'Yes' if the file's name is valid, and returns 'No' otherwise.\n     * A file's name is considered to be valid if and only if all the following conditions\n     * are met:\n     * - There should not be more than three digits ('0'-'9') in the file's name.\n     * - The file's name contains exactly one dot '.'\n     * - The substring before the dot should not be empty, and it starts with a letter from\n     * the latin alphabet ('a'-'z' and 'A'-'Z').\n     * - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n     * Examples:\n     * fileNameCheck(\"example.txt\") # => 'Yes'\n     * fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n     *\n     * > fileNameCheck(\"example.txt\")\n     * \"Yes\"\n     * > fileNameCheck(\"1example.dll\")\n     * \"No\"\n     * > fileNameCheck(\"s1sdf3.asd\")\n     * \"No\"\n     * > fileNameCheck(\"K.dll\")\n     * \"Yes\"\n     * > fileNameCheck(\"MY16FILE3.exe\")\n     * \"Yes\"\n     * > fileNameCheck(\"His12FILE94.exe\")\n     * \"No\"\n     * > fileNameCheck(\"_Y.txt\")\n     * \"No\"\n     * > fileNameCheck(\"?aREYA.exe\")\n     * \"No\"\n     * > fileNameCheck(\"/this_is_valid.dll\")\n     * \"No\"\n     * > fileNameCheck(\"this_is_valid.wow\")\n     * \"No\"\n     * > fileNameCheck(\"this_is_valid.txt\")\n     * \"Yes\"\n     * > fileNameCheck(\"this_is_valid.txtexe\")\n     * \"No\"\n     * > fileNameCheck(\"#this2_i4s_5valid.ten\")\n     * \"No\"\n     * > fileNameCheck(\"@this1_is6_valid.exe\")\n     * \"No\"\n     * > fileNameCheck(\"this_is_12valid.6exe4.txt\")\n     * \"No\"\n     * > fileNameCheck(\"all.exe.txt\")\n     * \"No\"\n     * > fileNameCheck(\"I563_No.exe\")\n     * \"Yes\"\n     * > fileNameCheck(\"Is3youfault.txt\")\n     * \"Yes\"\n     * > fileNameCheck(\"no_one#knows.dll\")\n     * \"Yes\"\n     * > fileNameCheck(\"1I563_Yes3.exe\")\n     * \"No\"\n     * > fileNameCheck(\"I563_Yes3.txtt\")\n     * \"No\"\n     * > fileNameCheck(\"final..txt\")\n     * \"No\"\n     * > fileNameCheck(\"final132\")\n     * \"No\"\n     * > fileNameCheck(\"_f4indsartal132.\")\n     * \"No\"\n     * > fileNameCheck(\".txt\")\n     * \"No\"\n     * > fileNameCheck(\"s.\")\n     * \"No\"\n     */\n    public static String fileNameCheck(String fileName) {\n        String[] suf = { \"txt\", \"exe\", \"dll\" };\n        String[] lst = fileName.split(\"\\\\.\");\n        if (lst.length != 2) {\n            return \"No\";\n        }\n        if (!Arrays.asList(suf).contains(lst[1])) {\n            return \"No\";\n        }\n        if (lst[0].length() == 0) {\n            return \"No\";\n        }\n        if (!Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = 0;\n        for (int i = 0; i < lst[0].length(); i++) {\n            if (Character.isDigit(lst[0].charAt(i))) {\n                t++;\n            }\n        }\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}\n",
		"id": "141",
		"test_prompt": "// FileNameCheckTest.java\npackage original;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FileNameCheck}.\n* It contains ten unit test cases for the {@link FileNameCheck#fileNameCheck(String)} method.\n*/\nclass FileNameCheckTest {"
	},
	{
		"original_code": "// Skjkasdkd.java\npackage original;\n\nimport java.util.List;\n\nclass Skjkasdkd {\n\n    /**\n     * You are given a list of integers.\n     * You need to find the largest prime value and return the sum of its digits.\n     *\n     * Examples:\n     * For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n     * For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n     * For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n     * For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n     * For lst = [0,81,12,3,1,21] the output should be 3\n     * For lst = [0,8,1,2,1,7] the output should be 7\n     *\n     * > skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n     * 10\n     * > skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n     * 25\n     * > skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n     * 13\n     * > skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n     * 11\n     * > skjkasdkd([0, 81, 12, 3, 1, 21])\n     * 3\n     * > skjkasdkd([0, 8, 1, 2, 1, 7])\n     * 7\n     * > skjkasdkd([8191])\n     * 19\n     * > skjkasdkd([8191, 123456, 127, 7])\n     * 19\n     * > skjkasdkd([127, 97, 8192])\n     * 10\n     */\n    public static int skjkasdkd(List<Integer> lst) {\n        int largestPrime = 0;\n        for (int value : lst) {\n            if (isPrime(value) && value > largestPrime) {\n                largestPrime = value;\n            }\n        }\n        int sum = 0;\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n        return sum;\n    }\n\n    private static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "94",
		"test_prompt": "// SkjkasdkdTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Skjkasdkd}.\n* It contains ten unit test cases for the {@link Skjkasdkd#skjkasdkd(List)} method.\n*/\nclass SkjkasdkdTest {"
	},
	{
		"original_code": "// SortArray.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortArray {\n\n    /**\n     * * In this Kata, you have to sort an array of non-negative integers according to\n     * number of ones in their binary representation in ascending order.\n     * For similar number of ones, sort based on decimal value.\n     *\n     * It must be implemented like this:\n     * >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n     * >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n     *\n     * > sortArray([1, 5, 2, 3, 4])\n     * [1, 2, 4, 3, 5]\n     * > sortArray([1, 0, 2, 3, 4])\n     * [0, 1, 2, 4, 3]\n     * > sortArray([])\n     * []\n     * > sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])\n     * [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n     * > sortArray([3, 6, 44, 12, 32, 5])\n     * [32, 3, 5, 6, 12, 44]\n     * > sortArray([2, 4, 8, 16, 32])\n     * [2, 4, 8, 16, 32]\n     * > sortArray([2, 4, 8, 16, 32])\n     * [2, 4, 8, 16, 32]\n     */\n    public static List<Object> sortArray(List<Object> arr) {\n        List<Object> sorted = new ArrayList<Object>();\n        for (int i = 0; i < arr.size(); i++) {\n            int num = ((Number) arr.get(i)).intValue();\n            int ones = 0;\n            while (num > 0) {\n                ones += num % 2;\n                num /= 2;\n            }\n            sorted.add(new int[] { ones, ((Number) arr.get(i)).intValue() });\n        }\n        Collections.sort(sorted, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                int[] a1 = (int[]) o1;\n                int[] a2 = (int[]) o2;\n                if (a1[0] == a2[0]) {\n                    return a1[1] - a2[1];\n                }\n                return a1[0] - a2[0];\n            }\n        });\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < sorted.size(); i++) {\n            result.add(((int[]) sorted.get(i))[1]);\n        }\n        return result;\n    }\n}\n",
		"id": "116",
		"test_prompt": "// SortArrayTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray}.\n* It contains ten unit test cases for the {@link SortArray#sortArray(List)} method.\n*/\nclass SortArrayTest {"
	},
	{
		"original_code": "// MakeAPile.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass MakeAPile {\n\n    /**\n     * * Given a positive integer n, you have to make a pile of n levels of stones.\n     * The first level has n stones.\n     * The number of stones in the next level is:\n     * - the next odd number if n is odd.\n     * - the next even number if n is even.\n     * Return the number of stones in each level in a list, where element at index\n     * i represents the number of stones in the level (i+1).\n     *\n     * Examples:\n     * >>> makeAPile(3)\n     * [3, 5, 7]\n     *\n     * > makeAPile(3)\n     * [3, 5, 7]\n     * > makeAPile(4)\n     * [4, 6, 8, 10]\n     * > makeAPile(5)\n     * [5, 7, 9, 11, 13]\n     * > makeAPile(6)\n     * [6, 8, 10, 12, 14, 16]\n     * > makeAPile(8)\n     * [8, 10, 12, 14, 16, 18, 20, 22]\n     */\n    public static List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (i == 1) {\n                result.add(n);\n            } else {\n                if (n % 2 == 0) {\n                    result.add(result.get(i - 2) + 2);\n                } else {\n                    result.add(result.get(i - 2) + 2);\n                }\n            }\n            i++;\n        }\n        return result;\n    }\n}\n",
		"id": "100",
		"test_prompt": "// MakeAPileTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakeAPile}.\n* It contains ten unit test cases for the {@link MakeAPile#makeAPile(int)} method.\n*/\nclass MakeAPileTest {"
	},
	{
		"original_code": "// RightAngleTriangle.java\npackage original;\n\nclass RightAngleTriangle {\n\n    /**\n     * Given the lengths of the three sides of a triangle. Return True if the three\n     * sides form a right-angled triangle, False otherwise.\n     * A right-angled triangle is a triangle in which one angle is right angle or\n     * 90 degree.\n     * Example:\n     * rightAngleTriangle(3, 4, 5) == True\n     * rightAngleTriangle(1, 2, 3) == False\n     *\n     * > rightAngleTriangle(3, 4, 5)\n     * true\n     * > rightAngleTriangle(1, 2, 3)\n     * false\n     * > rightAngleTriangle(10, 6, 8)\n     * true\n     * > rightAngleTriangle(2, 2, 2)\n     * false\n     * > rightAngleTriangle(7, 24, 25)\n     * true\n     * > rightAngleTriangle(10, 5, 7)\n     * false\n     * > rightAngleTriangle(5, 12, 13)\n     * true\n     * > rightAngleTriangle(15, 8, 17)\n     * true\n     * > rightAngleTriangle(48, 55, 73)\n     * true\n     * > rightAngleTriangle(1, 1, 1)\n     * false\n     * > rightAngleTriangle(2, 2, 10)\n     * false\n     */\n    public static Boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a > b && a > c) {\n            return a * a == b * b + c * c;\n        }\n        if (b > a && b > c) {\n            return b * b == a * a + c * c;\n        }\n        return c * c == a * a + b * b;\n    }\n}\n",
		"id": "157",
		"test_prompt": "// RightAngleTriangleTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RightAngleTriangle}.\n* It contains ten unit test cases for the {@link RightAngleTriangle#rightAngleTriangle(int, int, int)} method.\n*/\nclass RightAngleTriangleTest {"
	},
	{
		"original_code": "// PrimeLength.java\npackage original;\n\nclass PrimeLength {\n\n    /**\n     * Write a function that takes a string and returns True if the string\n     * length is a prime number or False otherwise\n     * Examples\n     * primeLength('Hello') == True\n     * primeLength('abcdcba') == True\n     * primeLength('kittens') == True\n     * primeLength('orange') == False\n     *\n     * > primeLength(\"Hello\")\n     * true\n     * > primeLength(\"abcdcba\")\n     * true\n     * > primeLength(\"kittens\")\n     * true\n     * > primeLength(\"orange\")\n     * false\n     * > primeLength(\"wow\")\n     * true\n     * > primeLength(\"world\")\n     * true\n     * > primeLength(\"MadaM\")\n     * true\n     * > primeLength(\"Wow\")\n     * true\n     * > primeLength(\"\")\n     * false\n     * > primeLength(\"HI\")\n     * true\n     * > primeLength(\"go\")\n     * true\n     * > primeLength(\"gogo\")\n     * false\n     * > primeLength(\"aaaaaaaaaaaaaaa\")\n     * false\n     * > primeLength(\"Madam\")\n     * true\n     * > primeLength(\"M\")\n     * false\n     * > primeLength(\"0\")\n     * false\n     */\n    public static Boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0 || length == 1) {\n            return false;\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "82",
		"test_prompt": "// PrimeLengthTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeLength}.\n* It contains ten unit test cases for the {@link PrimeLength#primeLength(String)} method.\n*/\nclass PrimeLengthTest {"
	},
	{
		"original_code": "// RollingMax.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RollingMax {\n\n    /**\n     * From a given list of integers, generate a list of rolling maximum element found until given moment\n     * in the sequence.\n     *\n     * > rollingMax([1, 2, 3, 2, 3, 4, 2])\n     * [1, 2, 3, 3, 3, 4, 4]\n     * > rollingMax([])\n     * []\n     * > rollingMax([1, 2, 3, 4])\n     * [1, 2, 3, 4]\n     * > rollingMax([4, 3, 2, 1])\n     * [4, 4, 4, 4]\n     * > rollingMax([3, 2, 3, 100, 3])\n     * [3, 3, 3, 100, 100]\n     */\n    public static List<Object> rollingMax(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        Integer max = null;\n        for (Object number : numbers) {\n            if (number instanceof Integer) {\n                if (max == null || (Integer) number > max) {\n                    max = (Integer) number;\n                }\n                result.add(max);\n            } else {\n                throw new IllegalArgumentException(\"Invalid number type\");\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "9",
		"test_prompt": "// RollingMaxTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RollingMax}.\n* It contains ten unit test cases for the {@link RollingMax#rollingMax(List)} method.\n*/\nclass RollingMaxTest {"
	},
	{
		"original_code": "// CountDistinctCharacters.java\npackage original;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass CountDistinctCharacters {\n\n    /**\n     * Given a string, find out how many distinct characters (regardless of case)  it consists  of.\n     *\n     * > countDistinctCharacters(\"xyzXYZ\")\n     * 3\n     * > countDistinctCharacters(\"Jerry\")\n     * 4\n     * > countDistinctCharacters(\"\")\n     * 0\n     * > countDistinctCharacters(\"abcde\")\n     * 5\n     * > countDistinctCharacters(\"abcdecadeCADE\")\n     * 5\n     * > countDistinctCharacters(\"aaaaAAAAaaaa\")\n     * 1\n     * > countDistinctCharacters(\"Jerry jERRY JeRRRY\")\n     * 5\n     */\n    public static int countDistinctCharacters(String string) {\n        Set<Character> distinctCharacters = new HashSet<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            distinctCharacters.add(Character.toLowerCase(string.charAt(i)));\n        }\n        return distinctCharacters.size();\n    }\n}\n",
		"id": "16",
		"test_prompt": "// CountDistinctCharactersTest.java\npackage original;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountDistinctCharacters}.\n* It contains ten unit test cases for the {@link CountDistinctCharacters#countDistinctCharacters(String)} method.\n*/\nclass CountDistinctCharactersTest {"
	},
	{
		"original_code": "// CarRaceCollision.java\npackage original;\n\nclass CarRaceCollision {\n\n    /**\n     * * Imagine a road that's a perfectly straight infinitely long line.\n     * n cars are driving left to right;  simultaneously, a different set of n cars\n     * are driving right to left.   The two sets of cars start out being very far from\n     * each other.  All cars move in the same speed.  Two cars are said to collide\n     * when a car that's moving left to right hits a car that's moving right to left.\n     * However, the cars are infinitely sturdy and strong; as a result, they continue moving\n     * in their trajectory as if they did not collide.\n     * This function outputs the number of such collisions.\n     *\n     * > carRaceCollision(2)\n     * 4\n     * > carRaceCollision(3)\n     * 9\n     * > carRaceCollision(4)\n     * 16\n     * > carRaceCollision(8)\n     * 64\n     * > carRaceCollision(10)\n     * 100\n     */\n    public static int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "41",
		"test_prompt": "// CarRaceCollisionTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CarRaceCollision}.\n* It contains ten unit test cases for the {@link CarRaceCollision#carRaceCollision(int)} method.\n*/\nclass CarRaceCollisionTest {"
	},
	{
		"original_code": "// Monotonic.java\npackage original;\n\nimport java.util.List;\n\nclass Monotonic {\n\n    /**\n     * Return True is list elements are monotonically increasing or decreasing.\n     *\n     * > monotonic([1, 2, 4, 10])\n     * true\n     * > monotonic([1, 2, 4, 20])\n     * true\n     * > monotonic([1, 20, 4, 10])\n     * false\n     * > monotonic([4, 1, 0, -10])\n     * true\n     * > monotonic([4, 1, 1, 0])\n     * true\n     * > monotonic([1, 2, 3, 2, 5, 60])\n     * false\n     * > monotonic([1, 2, 3, 4, 5, 60])\n     * true\n     * > monotonic([9, 9, 9, 9])\n     * true\n     */\n    public static Boolean monotonic(List<Integer> l) {\n        int size = l.size();\n        if (size == 1) {\n            return true;\n        }\n        int direction = l.get(1) - l.get(0);\n        for (int i = 1; i < size - 1; i++) {\n            if (direction == 0) {\n                direction = l.get(i + 1) - l.get(i);\n            } else if (direction > 0) {\n                if (l.get(i + 1) < l.get(i)) {\n                    return false;\n                }\n            } else {\n                if (l.get(i + 1) > l.get(i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "57",
		"test_prompt": "// MonotonicTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Monotonic}.\n* It contains ten unit test cases for the {@link Monotonic#monotonic(List)} method.\n*/\nclass MonotonicTest {"
	},
	{
		"original_code": "// Digits.java\npackage original;\n\nclass Digits {\n\n    /**\n     * Given a positive integer n, return the product of the odd digits.\n     * Return 0 if all digits are even.\n     * For example:\n     * digits(1)  == 1\n     * digits(4)  == 0\n     * digits(235) == 15\n     *\n     * > digits(5)\n     * 5\n     * > digits(54)\n     * 5\n     * > digits(120)\n     * 1\n     * > digits(5014)\n     * 5\n     * > digits(98765)\n     * 315\n     * > digits(5576543)\n     * 2625\n     * > digits(2468)\n     * 0\n     */\n    public static int digits(int n) {\n        int res = 1;\n        boolean hasOdd = false;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                res *= digit;\n                hasOdd = true;\n            }\n            n /= 10;\n        }\n        return hasOdd ? res : 0;\n    }\n}\n",
		"id": "131",
		"test_prompt": "// DigitsTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digits}.\n* It contains ten unit test cases for the {@link Digits#digits(int)} method.\n*/\nclass DigitsTest {"
	},
	{
		"original_code": "// Intersection.java\npackage original;\n\nimport java.util.List;\n\nclass Intersection {\n\n    /**\n     * You are given two intervals,\n     * where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n     * The given intervals are closed which means that the interval (start, end)\n     * includes both start and end.\n     * For each given interval, it is assumed that its start is less or equal its end.\n     * Your task is to determine whether the length of intersection of these two\n     * intervals is a prime number.\n     * Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n     * which its length is 1, which not a prime number.\n     * If the length of the intersection is a prime number, return \"YES\",\n     * otherwise, return \"NO\".\n     * If the two intervals don't intersect, return \"NO\".\n     *\n     * [input/output] samples:\n     * intersection((1, 2), (2, 3)) ==> \"NO\"\n     * intersection((-1, 1), (0, 4)) ==> \"NO\"\n     * intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     *\n     * > intersection([1, 2], [2, 3])\n     * \"NO\"\n     * > intersection([-1, 1], [0, 4])\n     * \"NO\"\n     * > intersection([-3, -1], [-5, 5])\n     * \"YES\"\n     * > intersection([-2, 2], [-4, 0])\n     * \"YES\"\n     * > intersection([-11, 2], [-1, -1])\n     * \"NO\"\n     * > intersection([1, 2], [3, 5])\n     * \"NO\"\n     * > intersection([1, 2], [1, 2])\n     * \"NO\"\n     * > intersection([-2, -2], [-3, -2])\n     * \"NO\"\n     */\n    public static String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int start = Math.max(interval1.get(0), interval2.get(0));\n        int end = Math.min(interval1.get(1), interval2.get(1));\n        if (start > end) {\n            return \"NO\";\n        }\n        if (isPrime(end - start)) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    private static boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "127",
		"test_prompt": "// IntersectionTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Intersection}.\n* It contains ten unit test cases for the {@link Intersection#intersection(List, List)} method.\n*/\nclass IntersectionTest {"
	},
	{
		"original_code": "// Encrypt.java\npackage original;\n\nclass Encrypt {\n\n    /**\n     * Create a function encrypt that takes a string as an argument and\n     * returns a string encrypted with the alphabet being rotated.\n     * The alphabet should be rotated in a manner such that the letters\n     * shift down by two multiplied to two places.\n     * For example:\n     * encrypt('hi') returns 'lm'\n     * encrypt('asdfghjkl') returns 'ewhjklnop'\n     * encrypt('gf') returns 'kj'\n     * encrypt('et') returns 'ix'\n     *\n     * > encrypt(\"hi\")\n     * \"lm\"\n     * > encrypt(\"asdfghjkl\")\n     * \"ewhjklnop\"\n     * > encrypt(\"gf\")\n     * \"kj\"\n     * > encrypt(\"et\")\n     * \"ix\"\n     * > encrypt(\"faewfawefaewg\")\n     * \"jeiajeaijeiak\"\n     * > encrypt(\"hellomyfriend\")\n     * \"lippsqcjvmirh\"\n     * > encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")\n     * \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\n     * > encrypt(\"a\")\n     * \"e\"\n     */\n    public static String encrypt(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c += 2 * 2;\n                if (c > 'z') {\n                    c -= 26;\n                }\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
		"id": "89",
		"test_prompt": "// EncryptTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encrypt}.\n* It contains ten unit test cases for the {@link Encrypt#encrypt(String)} method.\n*/\nclass EncryptTest {"
	},
	{
		"original_code": "// Digitsum.java\npackage original;\n\nclass Digitsum {\n\n    /**\n     * Write a function that takes a string as input and returns the sum of the upper characters only'\n     * ASCII codes.\n     * Examples:\n     * digitSum(\"\") => 0\n     * digitSum(\"abAB\") => 131\n     * digitSum(\"abcCd\") => 67\n     * digitSum(\"helloE\") => 69\n     * digitSum(\"woArBld\") => 131\n     * digitSum(\"aAaaaXa\") => 153\n     *\n     * > digitSum(\"\")\n     * 0\n     * > digitSum(\"abAB\")\n     * 131\n     * > digitSum(\"abcCd\")\n     * 67\n     * > digitSum(\"helloE\")\n     * 69\n     * > digitSum(\"woArBld\")\n     * 131\n     * > digitSum(\"aAaaaXa\")\n     * 153\n     * > digitSum(\" How are yOu?\")\n     * 151\n     * > digitSum(\"You arE Very Smart\")\n     * 327\n     */\n    public static int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "66",
		"test_prompt": "// DigitsumTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Digitsum}.\n* It contains ten unit test cases for the {@link Digitsum#digitSum(String)} method.\n*/\nclass DigitsumTest {"
	},
	{
		"original_code": "// TruncateNumber.java\npackage original;\n\nclass TruncateNumber {\n\n    /**\n     * Given a positive floating point number, it can be decomposed into and integer part\n     * (the largest integer smaller than given number) and decimals (leftover part always smaller than 1).\n     * Return the decimal part of the number.\n     *\n     * > truncateNumber(3.5)\n     * 0.5\n     * > truncateNumber(1.33)\n     * 0.33\n     * > truncateNumber(123.456)\n     * 0.456\n     */\n    // write a code with solving floating point issue\n    public static Double truncateNumber(Double number) {\n        // return number - Math.floor(number);\n        return Math.round((number - Math.floor(number)) * 1000.0) / 1000.0;\n    }\n}\n",
		"id": "2",
		"test_prompt": "// TruncateNumberTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TruncateNumber}.\n* It contains ten unit test cases for the {@link TruncateNumber#truncateNumber(Double)} method.\n*/\nclass TruncateNumberTest {"
	},
	{
		"original_code": "// IsPrime.java\npackage original;\n\nclass IsPrime {\n\n    /**\n     * Return true if a given number is prime, and false otherwise.\n     *\n     * > isPrime(6)\n     * false\n     * > isPrime(101)\n     * true\n     * > isPrime(11)\n     * true\n     * > isPrime(13441)\n     * true\n     * > isPrime(61)\n     * true\n     * > isPrime(4)\n     * false\n     * > isPrime(1)\n     * false\n     * > isPrime(5)\n     * true\n     * > isPrime(11)\n     * true\n     * > isPrime(17)\n     * true\n     * > isPrime(85)\n     * false\n     * > isPrime(77)\n     * false\n     * > isPrime(255379)\n     * false\n     */\n    public static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "31",
		"test_prompt": "// IsPrimeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPrime}.\n* It contains ten unit test cases for the {@link IsPrime#isPrime(int)} method.\n*/\nclass IsPrimeTest {"
	},
	{
		"original_code": "// FlipCase.java\npackage original;\n\nclass FlipCase {\n\n    /**\n     * For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n     *\n     * > flipCase(\"Hello\")\n     * \"hELLO\"\n     * > flipCase(\"\")\n     * \"\"\n     * > flipCase(\"Hello!\")\n     * \"hELLO!\"\n     * > flipCase(\"These violent delights have violent ends\")\n     * \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\n     */\n    public static String flipCase(String string) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                result.append(Character.toLowerCase(c));\n            } else {\n                result.append(Character.toUpperCase(c));\n            }\n        }\n        return result.toString();\n    }\n}\n",
		"id": "27",
		"test_prompt": "// FlipCaseTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FlipCase}.\n* It contains ten unit test cases for the {@link FlipCase#flipCase(String)} method.\n*/\nclass FlipCaseTest {"
	},
	{
		"original_code": "// StrangeSortList.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass StrangeSortList {\n\n    /**\n     * * Given list of integers, return list in strange order.\n     * Strange sorting, is when you start with the minimum value,\n     * then maximum of the remaining integers, then minimum and so on.\n     *\n     * Examples:\n     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n     * strange_sort_list([]) == []\n     *\n     * > strangeSortList([1, 2, 3, 4])\n     * [1, 4, 2, 3]\n     * > strangeSortList([5, 6, 7, 8, 9])\n     * [5, 9, 6, 8, 7]\n     * > strangeSortList([1, 2, 3, 4, 5])\n     * [1, 5, 2, 4, 3]\n     * > strangeSortList([5, 6, 7, 8, 9, 1])\n     * [1, 9, 5, 8, 6, 7]\n     * > strangeSortList([5, 5, 5, 5])\n     * [5, 5, 5, 5]\n     * > strangeSortList([])\n     * []\n     * > strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])\n     * [1, 8, 2, 7, 3, 6, 4, 5]\n     * > strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])\n     * [-5, 5, -5, 5, 0, 2, 2, 2]\n     * > strangeSortList([111111])\n     * [111111]\n     */\n    public static List<Object> strangeSortList(List<Object> lst) {\n        List<Object> result = new ArrayList<Object>();\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : lst) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        int i = 0;\n        int j = sorted.size() - 1;\n        while (i <= j) {\n            result.add(sorted.get(i));\n            if (i != j) {\n                result.add(sorted.get(j));\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
		"id": "70",
		"test_prompt": "// StrangeSortListTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrangeSortList}.\n* It contains ten unit test cases for the {@link StrangeSortList#strangeSortList(List)} method.\n*/\nclass StrangeSortListTest {"
	},
	{
		"original_code": "// Fib4.java\npackage original;\n\nclass Fib4 {\n\n    /**\n     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n     * fib4(0) -> 0\n     * fib4(1) -> 0\n     * fib4(2) -> 2\n     * fib4(3) -> 0\n     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n     *\n     * > fib4(5)\n     * 4\n     * > fib4(6)\n     * 8\n     * > fib4(7)\n     * 14\n     * > fib4(5)\n     * 4\n     * > fib4(8)\n     * 28\n     * > fib4(10)\n     * 104\n     * > fib4(12)\n     * 386\n     */\n    public static int fib4(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 2;\n        int d = 0;\n        int e = 0;\n        for (int i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d = e;\n        }\n        return e;\n    }\n}\n",
		"id": "46",
		"test_prompt": "// Fib4Test.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib4}.\n* It contains ten unit test cases for the {@link Fib4#fib4(int)} method.\n*/\nclass Fib4Test {"
	},
	{
		"original_code": "// StringXor.java\npackage original;\n\nclass StringXor {\n\n    /**\n     * Input are two strings a and b consisting only of 1s and 0s.\n     * Perform binary XOR on these inputs and return result also as a string.\n     *\n     * > stringXor(\"010\", \"110\")\n     * \"100\"\n     * > stringXor(\"111000\", \"101010\")\n     * \"010010\"\n     * > stringXor(\"1\", \"1\")\n     * \"0\"\n     * > stringXor(\"0101\", \"0000\")\n     * \"0101\"\n     */\n    public static String stringXor(String a, String b) {\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "11",
		"test_prompt": "// StringXorTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringXor}.\n* It contains ten unit test cases for the {@link StringXor#stringXor(String, String)} method.\n*/\nclass StringXorTest {"
	},
	{
		"original_code": "// Add1.java\npackage original;\n\nimport java.util.List;\n\nclass Add1 {\n\n    /**\n     * Given a non-empty list of integers lst. add the even elements that are at odd indices..\n     *\n     * Examples:\n     * add([4, 2, 6, 7]) ==> 2\n     *\n     * > add([4, 88])\n     * 88\n     * > add([4, 5, 6, 7, 2, 122])\n     * 122\n     * > add([4, 0, 6, 7])\n     * 0\n     * > add([4, 4, 6, 8])\n     * 12\n     */\n    public static int add(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1 && lst.get(i) % 2 == 0) {\n                result += lst.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "85",
		"test_prompt": "// Add1Test.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add1}.\n* It contains ten unit test cases for the {@link Add1#add(List)} method.\n*/\nclass Add1Test {"
	},
	{
		"original_code": "// XOrY.java\npackage original;\n\nclass XOrY {\n\n    /**\n     * A simple program which should return the value of x if n is\n     * a prime number and should return the value of y otherwise.\n     *\n     * Examples:\n     * for xOrY(7, 34, 12) == 34\n     * for xOrY(15, 8, 5) == 5\n     *\n     * > xOrY(7, 34, 12)\n     * 34\n     * > xOrY(15, 8, 5)\n     * 5\n     * > xOrY(3, 33, 5212)\n     * 33\n     * > xOrY(1259, 3, 52)\n     * 3\n     * > xOrY(7919, -1, 12)\n     * -1\n     * > xOrY(3609, 1245, 583)\n     * 583\n     * > xOrY(91, 56, 129)\n     * 129\n     * > xOrY(6, 34, 1234)\n     * 1234\n     * > xOrY(1, 2, 0)\n     * 0\n     * > xOrY(2, 2, 0)\n     * 2\n     */\n    public static int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}\n",
		"id": "150",
		"test_prompt": "// XOrYTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XOrY}.\n* It contains ten unit test cases for the {@link XOrY#xOrY(int, int, int)} method.\n*/\nclass XOrYTest {"
	},
	{
		"original_code": "// EvenOddPalindrome.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass EvenOddPalindrome {\n\n    /**\n     * * Given a positive integer n, return a tuple that has the number of even and odd\n     * integer palindromes that fall within the range(1, n), inclusive.\n     *\n     * Example 1:\n     *\n     * Input: 3\n     * Output: (1, 2)\n     * Explanation:\n     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n     *\n     * Example 2:\n     *\n     * Input: 12\n     * Output: (4, 6)\n     * Explanation:\n     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n     *\n     * Note:\n     * 1. 1 <= n <= 10^3\n     * 2. returned tuple has the number of even and odd integer palindromes respectively.\n     *\n     * > evenOddPalindrome(123)\n     * [8, 13]\n     * > evenOddPalindrome(12)\n     * [4, 6]\n     * > evenOddPalindrome(3)\n     * [1, 2]\n     * > evenOddPalindrome(63)\n     * [6, 8]\n     * > evenOddPalindrome(25)\n     * [5, 6]\n     * > evenOddPalindrome(19)\n     * [4, 6]\n     * > evenOddPalindrome(9)\n     * [4, 5]\n     * > evenOddPalindrome(1)\n     * [0, 1]\n     */\n    public static List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n                    even++;\n                } else {\n                    odd++;\n                }\n            }\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n\n    private static boolean isPalindrome(int n) {\n        int m = n;\n        int reversed = 0;\n        while (m > 0) {\n            reversed = reversed * 10 + m % 10;\n            m /= 10;\n        }\n        return n == reversed;\n    }\n}\n",
		"id": "107",
		"test_prompt": "// EvenOddPalindromeTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddPalindrome}.\n* It contains ten unit test cases for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.\n*/\nclass EvenOddPalindromeTest {"
	},
	{
		"original_code": "// Histogram.java\npackage original;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Histogram {\n\n    /**\n     * Given a string representing a space separated lowercase letters, return a dictionary\n     * of the letter with the most repetition and containing the corresponding count.\n     * If several letters have the same occurrence, return all of them.\n     *\n     * Example:\n     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n     * histogram('a b b a') == {'a': 2, 'b': 2}\n     * histogram('a b c a b') == {'a': 2, 'b': 2}\n     * histogram('b b b b a') == {'b': 4}\n     * histogram('') == {}\n     *\n     * > histogram(\"a b b a\")\n     * {\"a\": 2, \"b\": 2}\n     * > histogram(\"a b c a b\")\n     * {\"a\": 2, \"b\": 2}\n     * > histogram(\"a b c d g\")\n     * {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1}\n     * > histogram(\"r t g\")\n     * {\"r\": 1, \"t\": 1, \"g\": 1}\n     * > histogram(\"b b b b a\")\n     * {\"b\": 4}\n     * > histogram(\"r t g\")\n     * {\"r\": 1, \"t\": 1, \"g\": 1}\n     * > histogram(\"\")\n     * {}\n     * > histogram(\"a\")\n     * {\"a\": 1}\n     */\n    public static Object histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        if (test == null || test.length() == 0) {\n            return map;\n        }\n        String[] arr = test.split(\" \");\n        for (String s : arr) {\n            if (map.containsKey(s)) {\n                map.put(s, map.get(s) + 1);\n            } else {\n                map.put(s, 1);\n            }\n        }\n        int max = 0;\n        for (int i : map.values()) {\n            max = Math.max(max, i);\n        }\n        Map<String, Integer> res = new HashMap<>();\n        for (String s : map.keySet()) {\n            if (map.get(s) == max) {\n                res.put(s, map.get(s));\n            }\n        }\n        return res;\n    }\n}\n",
		"id": "111",
		"test_prompt": "// HistogramTest.java\npackage original;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Histogram}.\n* It contains ten unit test cases for the {@link Histogram#histogram(String)} method.\n*/\nclass HistogramTest {"
	},
	{
		"original_code": "// Encode.java\npackage original;\n\nclass Encode {\n\n    /**\n     * * Write a function that takes a message, and encodes in such a\n     * way that it swaps case of all letters, replaces all vowels in\n     * the message with the letter that appears 2 places ahead of that\n     * vowel in the english alphabet.\n     * Assume only letters.\n     *\n     * Examples:\n     * >>> encode('test')\n     * 'TGST'\n     * >>> encode('This is a message')\n     * 'tHKS KS C MGSSCGG'\n     *\n     * > encode(\"TEST\")\n     * \"tgst\"\n     * > encode(\"Mudasir\")\n     * \"mWDCSKR\"\n     * > encode(\"YES\")\n     * \"ygs\"\n     * > encode(\"This is a message\")\n     * \"tHKS KS C MGSSCGG\"\n     * > encode(\"I DoNt KnOw WhAt tO WrItE\")\n     * \"k dQnT kNqW wHcT Tq wRkTg\"\n     */\n    public static String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c -= 32;\n            } else if (c >= 'A' && c <= 'Z') {\n                c += 32;\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                c += 2;\n            }\n            result += c;\n        }\n        return result;\n    }\n}\n",
		"id": "93",
		"test_prompt": "// EncodeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Encode}.\n* It contains ten unit test cases for the {@link Encode#encode(String)} method.\n*/\nclass EncodeTest {"
	},
	{
		"original_code": "// Specialfilter.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass Specialfilter {\n\n    /**\n     * Write a function that takes an array of numbers as input and returns\n     * the number of elements in the array that are greater than 10 and both\n     * first and last digits of a number are odd (1, 3, 5, 7, 9).\n     * For example:\n     * specialFilter([15, -73, 14, -15]) => 1\n     * specialFilter([33, -2, -3, 45, 21, 109]) => 2\n     *\n     * > specialfilter([5, -2, 1, -5])\n     * 0\n     * > specialfilter([15, -73, 14, -15])\n     * 1\n     * > specialfilter([33, -2, -3, 45, 21, 109])\n     * 2\n     * > specialfilter([43, -12, 93, 125, 121, 109])\n     * 4\n     * > specialfilter([71, -2, -33, 75, 21, 19])\n     * 3\n     * > specialfilter([1])\n     * 0\n     * > specialfilter([])\n     * 0\n     */\n    public static int specialfilter(List<Object> nums) {\n        int count = 0;\n        for (Object num : nums) {\n            if ((int) num > 10) {\n                Set odd_digits = new HashSet<Integer>(Arrays.asList(1, 3, 5, 7, 9));\n                String number_as_string = Integer.toString((int) num);\n                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "146",
		"test_prompt": "// SpecialfilterTest.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Specialfilter}.\n* It contains ten unit test cases for the {@link Specialfilter#specialfilter(List)} method.\n*/\nclass SpecialfilterTest {"
	},
	{
		"original_code": "// GetMaxTriples.java\npackage original;\n\nclass GetMaxTriples {\n\n    /**\n     * * You are given a positive integer n. You have to create an integer array a of length n.\n     * For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n     * and a[i] + a[j] + a[k] is a multiple of 3.\n     *\n     * Example :\n     * Input: n = 5\n     * Output: 1\n     * Explanation:\n     * a = [1, 3, 7, 13, 21]\n     * The only valid triple is (1, 7, 13).\n     *\n     * > getMaxTriples(5)\n     * 1\n     * > getMaxTriples(6)\n     * 4\n     * > getMaxTriples(10)\n     * 36\n     * > getMaxTriples(100)\n     * 53361\n     */\n    public static int getMaxTriples(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "147",
		"test_prompt": "// GetMaxTriplesTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetMaxTriples}.\n* It contains ten unit test cases for the {@link GetMaxTriples#getMaxTriples(int)} method.\n*/\nclass GetMaxTriplesTest {"
	},
	{
		"original_code": "// AnyInt.java\npackage original;\n\nclass AnyInt {\n\n    /**\n     * * Create a function that takes 3 numbers.\n     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n     * Returns false in any other cases.\n     *\n     * Examples\n     * anyInt(5, 2, 7) ➞ True\n     *\n     * anyInt(3, 2, 2) ➞ False\n     *\n     * anyInt(3, -2, 1) ➞ True\n     *\n     * anyInt(3.6, -2.2, 2) ➞ False\n     *\n     * > anyInt(2, 3, 1)\n     * true\n     * > anyInt(2.5, 2, 3)\n     * false\n     * > anyInt(1.5, 5, 3.5)\n     * false\n     * > anyInt(2, 6, 2)\n     * false\n     * > anyInt(4, 2, 2)\n     * true\n     * > anyInt(2.2, 2.2, 2.2)\n     * false\n     * > anyInt(-4, 6, 2)\n     * true\n     * > anyInt(2, 1, 1)\n     * true\n     * > anyInt(3, 4, 7)\n     * true\n     * > anyInt(3.0, 4, 7)\n     * false\n     */\n    public static Boolean anyInt(Number x, Number y, Number z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            if (x.intValue() == y.intValue() + z.intValue()) {\n                return true;\n            }\n            if (y.intValue() == x.intValue() + z.intValue()) {\n                return true;\n            }\n            if (z.intValue() == x.intValue() + y.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "92",
		"test_prompt": "// AnyIntTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AnyInt}.\n* It contains ten unit test cases for the {@link AnyInt#anyInt(Number, Number, Number)} method.\n*/\nclass AnyIntTest {"
	},
	{
		"original_code": "// Exchange.java\npackage original;\n\nimport java.util.List;\n\nclass Exchange {\n\n    /**\n     * In this problem, you will implement a function that takes two lists of numbers,\n     * and determines whether it is possible to perform an exchange of elements\n     * between them to make lst1 a list of only even numbers.\n     * There is no limit on the number of exchanged elements between lst1 and lst2.\n     * If it is possible to exchange elements between the lst1 and lst2 to make\n     * all the elements of lst1 to be even, return \"YES\".\n     * Otherwise, return \"NO\".\n     * For example:\n     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n     * It is assumed that the input lists will be non-empty.\n     *\n     * > exchange([1, 2, 3, 4], [1, 2, 3, 4])\n     * \"YES\"\n     * > exchange([1, 2, 3, 4], [1, 5, 3, 4])\n     * \"NO\"\n     * > exchange([1, 2, 3, 4], [2, 1, 4, 3])\n     * \"YES\"\n     * > exchange([5, 7, 3], [2, 6, 4])\n     * \"YES\"\n     * > exchange([5, 7, 3], [2, 6, 3])\n     * \"NO\"\n     * > exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\n     * \"NO\"\n     * > exchange([100, 200], [200, 200])\n     * \"YES\"\n     */\n    public static String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int count = 0;\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i) % 2 != 0) {\n                count++;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (lst2.get(i) % 2 == 0) {\n                count--;\n            }\n        }\n        if (count <= 0) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n",
		"id": "110",
		"test_prompt": "// ExchangeTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Exchange}.\n* It contains ten unit test cases for the {@link Exchange#exchange(List, List)} method.\n*/\nclass ExchangeTest {"
	},
	{
		"original_code": "// F.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass F {\n\n    /**\n     * Implement the function f that takes n as a parameter,\n     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n     * or the sum of numbers from 1 to i otherwise.\n     * i starts from 1.\n     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n     * Example:\n     * f(5) == [1, 2, 6, 24, 15]\n     *\n     * > f(5)\n     * [1, 2, 6, 24, 15]\n     * > f(7)\n     * [1, 2, 6, 24, 15, 720, 28]\n     * > f(1)\n     * [1]\n     * > f(3)\n     * [1, 2, 6]\n     */\n    public static List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(factorial(i));\n            } else {\n                result.add(sum(i));\n            }\n        }\n        return result;\n    }\n\n    private static int factorial(int n) {\n        int result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    private static int sum(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}\n",
		"id": "106",
		"test_prompt": "// FTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link F}.\n* It contains ten unit test cases for the {@link F#f(int)} method.\n*/\nclass FTest {"
	},
	{
		"original_code": "// DoubleTheDifference.java\npackage original;\n\nimport java.util.List;\n\nclass DoubleTheDifference {\n\n    /**\n     * Given a list of numbers, return the sum of squares of the numbers\n     * in the list that are odd. Ignore numbers that are negative or not integers.\n     *\n     * doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n     * doubleTheDifference([-1, -2, 0]) == 0\n     * doubleTheDifference([9, -2]) == 81\n     * doubleTheDifference([0]) == 0\n     *\n     * If the input list is empty, return 0.\n     *\n     * > doubleTheDifference([])\n     * 0\n     * > doubleTheDifference([5, 4])\n     * 25\n     * > doubleTheDifference([0.1, 0.2, 0.3])\n     * 0\n     * > doubleTheDifference([-10, -20, -30])\n     * 0\n     * > doubleTheDifference([-1, -2, 8])\n     * 0\n     * > doubleTheDifference([0.2, 3, 5])\n     * 34\n     * > doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])\n     * 166650\n     */\n    public static int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                int num = (int) lst.get(i);\n                if (num % 2 != 0 && num > 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "151",
		"test_prompt": "// DoubleTheDifferenceTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DoubleTheDifference}.\n* It contains ten unit test cases for the {@link DoubleTheDifference#doubleTheDifference(List)} method.\n*/\nclass DoubleTheDifferenceTest {"
	},
	{
		"original_code": "// Solve1.java\npackage original;\n\nclass Solve1 {\n\n    /**\n     * Given a positive integer N, return the total sum of its digits in binary.\n     *\n     * Example\n     * For N = 1000, the sum of digits will be 1 the output should be \"1\".\n     * For N = 150, the sum of digits will be 6 the output should be \"110\".\n     * For N = 147, the sum of digits will be 12 the output should be \"1100\".\n     *\n     * Variables:\n     *\n     * @N integer\n     * Constraints: 0 ≤ N ≤ 10000.\n     * Output:\n     * a string of binary number\n     *\n     * > solve(1000)\n     * \"1\"\n     * > solve(150)\n     * \"110\"\n     * > solve(147)\n     * \"1100\"\n     * > solve(333)\n     * \"1001\"\n     * > solve(963)\n     * \"10010\"\n     */\n    public static String solve(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return Integer.toBinaryString(sum);\n    }\n}\n",
		"id": "84",
		"test_prompt": "// Solve1Test.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Solve1}.\n* It contains ten unit test cases for the {@link Solve1#solve(int)} method.\n*/\nclass Solve1Test {"
	},
	{
		"original_code": "// MakePalindrome.java\npackage original;\n\nclass MakePalindrome {\n\n    /**\n     * Find the shortest palindrome that begins with a supplied string.\n     * Algorithm idea is simple:\n     * - Find the longest postfix of supplied string that is a palindrome.\n     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n     *\n     * > makePalindrome(\"\")\n     * \"\"\n     * > makePalindrome(\"cat\")\n     * \"catac\"\n     * > makePalindrome(\"cata\")\n     * \"catac\"\n     * > makePalindrome(\"\")\n     * \"\"\n     * > makePalindrome(\"x\")\n     * \"x\"\n     * > makePalindrome(\"xyz\")\n     * \"xyzyx\"\n     * > makePalindrome(\"xyx\")\n     * \"xyx\"\n     * > makePalindrome(\"jerry\")\n     * \"jerryrrej\"\n     */\n    public static String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        String reversed = new StringBuilder(string).reverse().toString();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {\n                return string + reversed.substring(string.length() - i);\n            }\n        }\n        return null;\n    }\n}\n",
		"id": "10",
		"test_prompt": "// MakePalindromeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MakePalindrome}.\n* It contains ten unit test cases for the {@link MakePalindrome#makePalindrome(String)} method.\n*/\nclass MakePalindromeTest {"
	},
	{
		"original_code": "// Median.java\npackage original;\n\nimport java.util.Collections;\nimport java.util.List;\n\nclass Median {\n\n    /**\n     * Return median of elements in the list l.\n     *\n     * > median([3, 1, 2, 4, 5])\n     * 3\n     * > median([-10, 4, 6, 1000, 10, 20])\n     * 8.0\n     * > median([5])\n     * 5\n     * > median([6, 5])\n     * 5.5\n     * > median([8, 1, 3, 9, 9, 2, 7])\n     * 7\n     */\n    public static Number median(List<Integer> l) {\n        Collections.sort(l);\n        int size = l.size();\n        if (size % 2 == 0) {\n            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n        } else {\n            return l.get(size / 2);\n        }\n    }\n}\n",
		"id": "47",
		"test_prompt": "// MedianTest.java\npackage original;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Median}.\n* It contains ten unit test cases for the {@link Median#median(List)} method.\n*/\nclass MedianTest {"
	},
	{
		"original_code": "// RemoveVowels.java\npackage original;\n\nclass RemoveVowels {\n\n    /**\n     * removeVowels is a function that takes string and returns string without vowels.\n     *\n     * > removeVowels(\"abcdef\")\n     * \"bcdf\"\n     * > removeVowels(\"aaaaa\")\n     * \"\"\n     * > removeVowels(\"aaBAA\")\n     * \"B\"\n     * > removeVowels(\"zbcd\")\n     * \"zbcd\"\n     * > removeVowels(\"\")\n     * \"\"\n     * > removeVowels(\"abcdef\\nghijklm\")\n     * \"bcdf\\nghjklm\"\n     * > removeVowels(\"fedcba\")\n     * \"fdcb\"\n     * > removeVowels(\"eeeee\")\n     * \"\"\n     * > removeVowels(\"acBAA\")\n     * \"cB\"\n     * > removeVowels(\"EcBOO\")\n     * \"cB\"\n     * > removeVowels(\"ybcd\")\n     * \"ybcd\"\n     */\n    public static String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "51",
		"test_prompt": "// RemoveVowelsTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveVowels}.\n* It contains ten unit test cases for the {@link RemoveVowels#removeVowels(String)} method.\n*/\nclass RemoveVowelsTest {"
	},
	{
		"original_code": "// TriangleArea1.java\npackage original;\n\nclass TriangleArea1 {\n\n    /**\n     * * Given the lengths of the three sides of a triangle. Return the area of\n     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n     * Otherwise return -1\n     * Three sides make a valid triangle when the sum of any two sides is greater\n     * than the third side.\n     * Example:\n     * triangle_area(3, 4, 5) == 6.00\n     * triangle_area(1, 2, 10) == -1\n     *\n     * > triangleArea(3, 4, 5)\n     * 6.0\n     * > triangleArea(1, 2, 10)\n     * -1\n     * > triangleArea(4, 8, 5)\n     * 8.18\n     * > triangleArea(2, 2, 2)\n     * 1.73\n     * > triangleArea(1, 2, 3)\n     * -1\n     * > triangleArea(10, 5, 7)\n     * 16.25\n     * > triangleArea(2, 6, 3)\n     * -1\n     * > triangleArea(1, 1, 1)\n     * 0.43\n     * > triangleArea(2, 2, 10)\n     * -1\n     */\n    public static Number triangleArea(int a, int b, int c) {\n        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double p = (a + b + c) / 2.0;\n        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;\n    }\n}\n",
		"id": "71",
		"test_prompt": "// TriangleArea1Test.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea1}.\n* It contains ten unit test cases for the {@link TriangleArea1#triangleArea(int, int, int)} method.\n*/\nclass TriangleArea1Test {"
	},
	{
		"original_code": "// RemoveDuplicates.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass RemoveDuplicates {\n\n    /**\n     * From a list of integers, remove all elements that occur more than once.\n     * Keep order of elements left the same as in the input.\n     *\n     * > removeDuplicates([1, 2, 3, 2, 4])\n     * [1, 3, 4]\n     * > removeDuplicates([])\n     * []\n     * > removeDuplicates([1, 2, 3, 4])\n     * [1, 2, 3, 4]\n     * > removeDuplicates([1, 2, 3, 2, 4, 3, 5])\n     * [1, 4, 5]\n     */\n    public static List<Object> removeDuplicates(List<Object> numbers) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.indexOf(numbers.get(i)) == numbers.lastIndexOf(numbers.get(i))) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "26",
		"test_prompt": "// RemoveDuplicatesTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RemoveDuplicates}.\n* It contains ten unit test cases for the {@link RemoveDuplicates#removeDuplicates(List)} method.\n*/\nclass RemoveDuplicatesTest {"
	},
	{
		"original_code": "// GetPositive.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GetPositive {\n\n    /**\n     * Return only positive numbers in the list.\n     *\n     * > getPositive([-1, 2, -4, 5, 6])\n     * [2, 5, 6]\n     * > getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 9, 123, 1]\n     * > getPositive([-1, -2, 4, 5, 6])\n     * [4, 5, 6]\n     * > getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])\n     * [5, 3, 2, 3, 3, 9, 123, 1]\n     * > getPositive([-1, -2])\n     * []\n     * > getPositive([])\n     * []\n     */\n    public static List<Object> getPositive(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (i > 0) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "30",
		"test_prompt": "// GetPositiveTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetPositive}.\n* It contains ten unit test cases for the {@link GetPositive#getPositive(List)} method.\n*/\nclass GetPositiveTest {"
	},
	{
		"original_code": "// SortArray1.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortArray1 {\n\n    /**\n     * * Given an array of non-negative integers, return a copy of the given array after sorting,\n     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n     * or sort it in descending order if the sum( first index value, last index value) is even.\n     *\n     * Note:\n     * * don't change the given array.\n     *\n     * Examples:\n     * * sort_array([]) => []\n     * * sort_array([5]) => [5]\n     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n     *\n     * > sortArray([])\n     * []\n     * > sortArray([5])\n     * [5]\n     * > sortArray([2, 4, 3, 0, 1, 5])\n     * [0, 1, 2, 3, 4, 5]\n     * > sortArray([2, 4, 3, 0, 1, 5, 6])\n     * [6, 5, 4, 3, 2, 1, 0]\n     * > sortArray([2, 1])\n     * [1, 2]\n     * > sortArray([15, 42, 87, 32, 11, 0])\n     * [0, 11, 15, 32, 42, 87]\n     * > sortArray([21, 14, 23, 11])\n     * [23, 21, 14, 11]\n     */\n    public static List<Object> sortArray(List<Object> array) {\n        if (array.size() <= 1) {\n            return array;\n        }\n        int sum = (Integer) array.get(0) + (Integer) array.get(array.size() - 1);\n        List<Object> sortedArray = new ArrayList<Object>(array);\n        Collections.sort(sortedArray, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                return (Integer) o1 - (Integer) o2;\n            }\n        });\n        if (sum % 2 == 0) {\n            Collections.reverse(sortedArray);\n        }\n        return sortedArray;\n    }\n}\n",
		"id": "88",
		"test_prompt": "// SortArray1Test.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortArray1}.\n* It contains ten unit test cases for the {@link SortArray1#sortArray(List)} method.\n*/\nclass SortArray1Test {"
	},
	{
		"original_code": "// FruitDistribution.java\npackage original;\n\nclass FruitDistribution {\n\n    /**\n     * * In this task, you will be given a string that represents a number of apples and oranges\n     * that are distributed in a basket of fruit this basket contains\n     * apples, oranges, and mango fruits. Given the string that represents the total number of\n     * the oranges and apples and an integer that represent the total number of the fruits\n     * in the basket return the number of the mango fruits in the basket.\n     * For example:\n     * fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n     * fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n     * fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n     * fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\n     * > fruitDistribution(\"5 apples and 6 oranges\", 19)\n     * 8\n     * > fruitDistribution(\"5 apples and 6 oranges\", 21)\n     * 10\n     * > fruitDistribution(\"0 apples and 1 oranges\", 3)\n     * 2\n     * > fruitDistribution(\"1 apples and 0 oranges\", 3)\n     * 2\n     * > fruitDistribution(\"2 apples and 3 oranges\", 100)\n     * 95\n     * > fruitDistribution(\"2 apples and 3 oranges\", 5)\n     * 0\n     * > fruitDistribution(\"1 apples and 100 oranges\", 120)\n     * 19\n     */\n    public static int fruitDistribution(String s, int n) {\n        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"apples\")) {\n                apples = Integer.parseInt(words[i - 1]);\n            }\n            if (words[i].equals(\"oranges\")) {\n                oranges = Integer.parseInt(words[i - 1]);\n            }\n        }\n        mangoes = n - apples - oranges;\n        return mangoes;\n    }\n}\n",
		"id": "67",
		"test_prompt": "// FruitDistributionTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FruitDistribution}.\n* It contains ten unit test cases for the {@link FruitDistribution#fruitDistribution(String, int)} method.\n*/\nclass FruitDistributionTest {"
	},
	{
		"original_code": "// BelowZero.java\npackage original;\n\nimport java.util.List;\n\nclass BelowZero {\n\n    /**\n     * You're given a list of deposit and withdrawal operations on a bank account that starts with\n     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n     * at that point function should return True. Otherwise, it should return False.\n     *\n     * > belowZero([1, 2, 3])\n     * false\n     * > belowZero([1, 2, -4, 5])\n     * true\n     * > belowZero([])\n     * false\n     * > belowZero([1, 2, -3, 1, 2, -3])\n     * false\n     * > belowZero([1, 2, -4, 5, 6])\n     * true\n     * > belowZero([1, -1, 2, -2, 5, -5, 4, -4])\n     * false\n     * > belowZero([1, -1, 2, -2, 5, -5, 4, -5])\n     * true\n     * > belowZero([1, -2, 2, -2, 5, -5, 4, -4])\n     * true\n     */\n    public static Boolean belowZero(List<Object> operations) {\n        Double balance = 0.0;\n        for (Object operation : operations) {\n            if (operation instanceof Double) {\n                balance += (Double) operation;\n            } else if (operation instanceof Integer) {\n                balance += (Integer) operation;\n            } else {\n                throw new IllegalArgumentException(\"Invalid operation type\");\n            }\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "3",
		"test_prompt": "// BelowZeroTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowZero}.\n* It contains ten unit test cases for the {@link BelowZero#belowZero(List)} method.\n*/\nclass BelowZeroTest {"
	},
	{
		"original_code": "// IsSorted.java\npackage original;\n\nimport java.util.HashMap;\nimport java.util.List;\n\nclass IsSorted {\n\n    /**\n     * * Given a list of numbers, return whether or not they are sorted\n     * in ascending order. If list has more than 1 duplicate of the same\n     * number, return False. Assume no negative numbers and only integers.\n     *\n     * Examples\n     * isSorted([5]) ➞ True\n     * isSorted([1, 2, 3, 4, 5]) ➞ True\n     * isSorted([1, 3, 2, 4, 5]) ➞ False\n     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True\n     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True\n     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False\n     *\n     * > isSorted([5])\n     * true\n     * > isSorted([1, 2, 3, 4, 5])\n     * true\n     * > isSorted([1, 3, 2, 4, 5])\n     * false\n     * > isSorted([1, 2, 3, 4, 5, 6])\n     * true\n     * > isSorted([1, 2, 3, 4, 5, 6, 7])\n     * true\n     * > isSorted([1, 3, 2, 4, 5, 6, 7])\n     * false\n     * > isSorted([])\n     * true\n     * > isSorted([1])\n     * true\n     * > isSorted([3, 2, 1])\n     * false\n     * > isSorted([1, 2, 2, 2, 3, 4])\n     * false\n     * > isSorted([1, 2, 3, 3, 3, 4])\n     * false\n     * > isSorted([1, 2, 2, 3, 3, 4])\n     * true\n     * > isSorted([1, 2, 3, 4])\n     * true\n     */\n    public static Boolean isSorted(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size() - 1; i++) {\n            int curr = (int) lst.get(i);\n            map.put(curr, map.getOrDefault(curr, 0) + 1);\n            if (map.get(curr) > 2) {\n                return false;\n            }\n        }\n        int prev = (int) lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            int curr = (int) lst.get(i);\n            if (curr < prev) {\n                return false;\n            }\n            prev = curr;\n        }\n        return true;\n    }\n}\n",
		"id": "126",
		"test_prompt": "// IsSortedTest.java\npackage original;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsSorted}.\n* It contains ten unit test cases for the {@link IsSorted#isSorted(List)} method.\n*/\nclass IsSortedTest {"
	},
	{
		"original_code": "// Tri.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Tri {\n\n    /**\n     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n     * the last couple centuries. However, what people don't know is Tribonacci sequence.\n     * Tribonacci sequence is defined by the recurrence:\n     * tri(1) = 3\n     * tri(n) = 1 + n / 2, if n is even.\n     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n     * For example:\n     * tri(2) = 1 + (2 / 2) = 2\n     * tri(4) = 3\n     * tri(3) = tri(2) + tri(1) + tri(4)\n     * = 2 + 3 + 3 = 8\n     * You are given a non-negative integer number n, you have to a return a list of the\n     * first n + 1 numbers of the Tribonacci sequence.\n     * Examples:\n     * tri(3) = [1, 3, 2, 8]\n     *\n     * > tri(3)\n     * [1, 3, 2.0, 8.0]\n     * > tri(4)\n     * [1, 3, 2.0, 8.0, 3.0]\n     * > tri(5)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0]\n     * > tri(6)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n     * > tri(7)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n     * > tri(8)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n     * > tri(9)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n     * > tri(20)\n     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n     * > tri(0)\n     * [1]\n     * > tri(1)\n     * [1, 3]\n     */\n    public static List<Number> tri(int n) {\n        if (n == 0) {\n            return Arrays.asList(1);\n        }\n        List<Number> my_tri = new ArrayList<>();\n        my_tri.add(1);\n        my_tri.add(3);\n        for (int i = 2; i < n + 1; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1.0);\n            } else {\n                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}\n",
		"id": "130",
		"test_prompt": "// TriTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Tri}.\n* It contains ten unit test cases for the {@link Tri#tri(int)} method.\n*/\nclass TriTest {"
	},
	{
		"original_code": "// WillItFly.java\npackage original;\n\nimport java.util.List;\n\nclass WillItFly {\n\n    /**\n     * * Write a function that returns True if the object q will fly, and False otherwise.\n     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n     *\n     * Example:\n     * willItFly([1, 2], 5) ➞ False\n     * # 1+2 is less than the maximum possible weight, but it's unbalanced.\n     *\n     * willItFly([3, 2, 3], 1) ➞ False\n     * # it's balanced, but 3+2+3 is more than the maximum possible weight.\n     *\n     * willItFly([3, 2, 3], 9) ➞ True\n     * # 3+2+3 is less than the maximum possible weight, and it's balanced.\n     *\n     * willItFly([3], 5) ➞ True\n     * # 3 is less than the maximum possible weight, and it's balanced.\n     *\n     * > willItFly([3, 2, 3], 9)\n     * true\n     * > willItFly([1, 2], 5)\n     * false\n     * > willItFly([3], 5)\n     * true\n     * > willItFly([3, 2, 3], 1)\n     * false\n     * > willItFly([1, 2, 3], 6)\n     * false\n     * > willItFly([5], 5)\n     * true\n     */\n    public static Boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i = 0; i < q.size(); i++) {\n            sum += q.get(i);\n        }\n        if (sum > w) {\n            return false;\n        }\n        for (int i = 0; i < q.size() / 2; i++) {\n            if (q.get(i) != q.get(q.size() - i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "72",
		"test_prompt": "// WillItFlyTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WillItFly}.\n* It contains ten unit test cases for the {@link WillItFly#willItFly(List, int)} method.\n*/\nclass WillItFlyTest {"
	},
	{
		"original_code": "// Bf.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Bf {\n\n    /**\n     * * There are eight planets in our solar system: the closest to the Sun\n     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n     * Uranus, Neptune.\n     * Write a function that takes two planet names as strings planet1 and planet2.\n     * The function should return a tuple containing all planets whose orbits are\n     * located between the orbit of planet1 and the orbit of planet2, sorted by\n     * the proximity to the sun.\n     * The function should return an empty tuple if planet1 or planet2\n     * are not correct planet names.\n     * Examples\n     * bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n     * bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n     * bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n     *\n     * > bf(\"Jupiter\", \"Neptune\")\n     * [\"Saturn\", \"Uranus\"]\n     * > bf(\"Earth\", \"Mercury\")\n     * [\"Venus\"]\n     * > bf(\"Mercury\", \"Uranus\")\n     * [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     * > bf(\"Neptune\", \"Venus\")\n     * [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n     * > bf(\"Earth\", \"Earth\")\n     * []\n     * > bf(\"Mars\", \"Earth\")\n     * []\n     * > bf(\"Jupiter\", \"Makemake\")\n     * []\n     */\n    public static List<Object> bf(String planet1, String planet2) {\n        List<Object> planets = new ArrayList<Object>();\n        planets.add(\"Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\");\n        List<Object> result = new ArrayList<Object>();\n        if (planets.contains(planet1) && planets.contains(planet2)) {\n            int index1 = planets.indexOf(planet1);\n            int index2 = planets.indexOf(planet2);\n            if (index1 < index2) {\n                for (int i = index1 + 1; i < index2; i++) {\n                    result.add(planets.get(i));\n                }\n            } else {\n                for (int i = index2 + 1; i < index1; i++) {\n                    result.add(planets.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "148",
		"test_prompt": "// BfTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Bf}.\n* It contains ten unit test cases for the {@link Bf#bf(String, String)} method.\n*/\nclass BfTest {"
	},
	{
		"original_code": "// Factorize.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Factorize {\n\n    /**\n     * Return list of prime factors of given integer in the order from smallest to largest.\n     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n     * Input number should be equal to the product of all factors\n     *\n     * > factorize(8)\n     * [2, 2, 2]\n     * > factorize(25)\n     * [5, 5]\n     * > factorize(70)\n     * [2, 5, 7]\n     * > factorize(2)\n     * [2]\n     * > factorize(4)\n     * [2, 2]\n     * > factorize(8)\n     * [2, 2, 2]\n     * > factorize(57)\n     * [3, 19]\n     * > factorize(3249)\n     * [3, 3, 19, 19]\n     * > factorize(185193)\n     * [3, 3, 3, 19, 19, 19]\n     * > factorize(20577)\n     * [3, 19, 19, 19]\n     * > factorize(18)\n     * [2, 3, 3]\n     */\n    public static List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            while (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "25",
		"test_prompt": "// FactorizeTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Factorize}.\n* It contains ten unit test cases for the {@link Factorize#factorize(int)} method.\n*/\nclass FactorizeTest {"
	},
	{
		"original_code": "// SortThird.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass SortThird {\n\n    /**\n     * This function takes a list l and returns a list l' such that\n     * l' is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal\n     * to the values of the corresponding indices of l, but sorted.\n     * > sortThird([1, 2, 3])\n     * [1, 2, 3]\n     * > sortThird([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     * > sortThird([1, 2, 3])\n     * [1, 2, 3]\n     * > sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]\n     * > sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])\n     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]\n     * > sortThird([5, 6, 3, 4, 8, 9, 2])\n     * [2, 6, 3, 4, 8, 9, 5]\n     * > sortThird([5, 8, 3, 4, 6, 9, 2])\n     * [2, 8, 3, 4, 6, 9, 5]\n     * > sortThird([5, 6, 9, 4, 8, 3, 2])\n     * [2, 6, 9, 4, 8, 3, 5]\n     * > sortThird([5, 6, 3, 4, 8, 9, 2, 1])\n     * [2, 6, 3, 4, 8, 9, 5, 1]\n     */\n    public static List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>(l);\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                List<Integer> subl = new ArrayList<Integer>();\n                for (int j = 0; j < l.size(); j++) {\n                    if (j % 3 == 0) {\n                        subl.add(l.get(j));\n                    }\n                }\n                Collections.sort(subl);\n                l2.set(i, subl.get(i / 3));\n            }\n        }\n        return l2;\n    }\n}\n",
		"id": "33",
		"test_prompt": "// SortThirdTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortThird}.\n* It contains ten unit test cases for the {@link SortThird#sortThird(List)} method.\n*/\nclass SortThirdTest {"
	},
	{
		"original_code": "// MoveOneBall.java\npackage original;\n\nimport java.util.List;\n\nclass MoveOneBall {\n\n    /**\n     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n     * numbers in the array will be randomly ordered. Your task is to determine if\n     * it is possible to get an array sorted in non-decreasing order by performing\n     * the following operation on the given array:\n     * You are allowed to perform right shift operation any number of times.\n     *\n     * One right shift operation means shifting all elements of the array by one\n     * position in the right direction. The last element of the array will be moved to\n     * the starting position in the array i.e. 0th index.\n     *\n     * If it is possible to obtain the sorted array by performing the above operation\n     * then return True else return False.\n     * If the given array is empty then return True.\n     *\n     * Note: The given list is guaranteed to have unique elements.\n     *\n     * For Example:\n     *\n     * move_one_ball([3, 4, 5, 1, 2])==>True\n     * Explanation: By performing 2 right shift operations, non-decreasing order can\n     * be achieved for the given array.\n     * move_one_ball([3, 5, 4, 1, 2])==>False\n     * Explanation:It is not possible to get non-decreasing order for the given\n     * array by performing any number of right shift operations.\n     *\n     * > moveOneBall([3, 4, 5, 1, 2])\n     * true\n     * > moveOneBall([3, 5, 10, 1, 2])\n     * true\n     * > moveOneBall([4, 3, 1, 2])\n     * false\n     * > moveOneBall([3, 5, 4, 1, 2])\n     * false\n     * > moveOneBall([])\n     * true\n     */\n    public static Boolean moveOneBall(List<Object> arr) {\n        if (arr.size() == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if ((int) arr.get(i) > (int) arr.get((i + 1) % arr.size())) {\n                count++;\n            }\n        }\n        if (count <= 1) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "109",
		"test_prompt": "// MoveOneBallTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MoveOneBall}.\n* It contains ten unit test cases for the {@link MoveOneBall#moveOneBall(List)} method.\n*/\nclass MoveOneBallTest {"
	},
	{
		"original_code": "// HasCloseElements.java\npackage original;\n\nimport java.util.List;\n\nclass HasCloseElements {\n\n    /**\n     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.\n     *\n     * > hasCloseElements([1.0, 2.0, 3.0], 0.5)\n     * false\n     * > hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n     * true\n     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)\n     * true\n     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)\n     * false\n     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\n     * true\n     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\n     * false\n     * > hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)\n     * true\n     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\n     * true\n     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)\n     * false\n     */\n    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "0",
		"test_prompt": "// HasCloseElementsTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HasCloseElements}.\n* It contains ten unit test cases for the {@link HasCloseElements#hasCloseElements(List, Double)} method.\n*/\nclass HasCloseElementsTest {"
	},
	{
		"original_code": "// VowelsCount.java\npackage original;\n\nclass VowelsCount {\n\n    /**\n     * Write a function vowels_count which takes a string representing\n     * a word as input and returns the number of vowels in the string.\n     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n     * vowel, but only when it is at the end of the given word.\n     *\n     * > vowelsCount(\"abcde\")\n     * 2\n     * > vowelsCount(\"Alone\")\n     * 3\n     * > vowelsCount(\"key\")\n     * 2\n     * > vowelsCount(\"bye\")\n     * 1\n     * > vowelsCount(\"keY\")\n     * 2\n     * > vowelsCount(\"bYe\")\n     * 1\n     * > vowelsCount(\"ACEDY\")\n     * 3\n     */\n    public static int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                count++;\n            }\n        }\n        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {\n            count++;\n        }\n        return count;\n    }\n}\n",
		"id": "64",
		"test_prompt": "// VowelsCountTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link VowelsCount}.\n* It contains ten unit test cases for the {@link VowelsCount#vowelsCount(String)} method.\n*/\nclass VowelsCountTest {"
	},
	{
		"original_code": "// SplitWords.java\npackage original;\n\nimport java.util.Arrays;\n\nclass SplitWords {\n\n    /**\n     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n     * Examples\n     * splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n     * splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n     * splitWords(\"abcdef\") == 3\n     *\n     * > splitWords(\"Hello world!\")\n     * [\"Hello\", \"world!\"]\n     * > splitWords(\"Hello,world!\")\n     * [\"Hello\", \"world!\"]\n     * > splitWords(\"Hello world,!\")\n     * [\"Hello\", \"world,!\"]\n     * > splitWords(\"Hello,Hello,world !\")\n     * [\"Hello,Hello,world\", \"!\"]\n     * > splitWords(\"abcdef\")\n     * 3\n     * > splitWords(\"aaabb\")\n     * 2\n     * > splitWords(\"aaaBb\")\n     * 1\n     * > splitWords(\"\")\n     * 0\n     */\n    public static Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\",\"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {\n                    count++;\n                }\n            }\n            return count;\n        }\n    }\n}\n",
		"id": "125",
		"test_prompt": "// SplitWordsTest.java\npackage original;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SplitWords}.\n* It contains ten unit test cases for the {@link SplitWords#splitWords(String)} method.\n*/\nclass SplitWordsTest {"
	},
	{
		"original_code": "// IsPalindrome.java\npackage original;\n\nclass IsPalindrome {\n\n    /**\n     * Checks if given string is a palindrome\n     *\n     * > isPalindrome(\"\")\n     * true\n     * > isPalindrome(\"aba\")\n     * true\n     * > isPalindrome(\"aaaaa\")\n     * true\n     * > isPalindrome(\"zbcd\")\n     * false\n     * > isPalindrome(\"xywyx\")\n     * true\n     * > isPalindrome(\"xywyz\")\n     * false\n     * > isPalindrome(\"xywzx\")\n     * false\n     */\n    public static Boolean isPalindrome(String text) {\n        int i = 0;\n        int j = text.length() - 1;\n        while (i < j) {\n            if (text.charAt(i) != text.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n",
		"id": "48",
		"test_prompt": "// IsPalindromeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsPalindrome}.\n* It contains ten unit test cases for the {@link IsPalindrome#isPalindrome(String)} method.\n*/\nclass IsPalindromeTest {"
	},
	{
		"original_code": "// SumSquares.java\npackage original;\n\nimport java.util.List;\n\nclass SumSquares {\n\n    /**\n     * You are given a list of numbers.\n     * You need to return the sum of squared numbers in the given list,\n     * round each element in the list to the upper int(Ceiling) first.\n     * Examples:\n     * For lst = [1,2,3] the output should be 14\n     * For lst = [1,4,9] the output should be 98\n     * For lst = [1,3,5,7] the output should be 84\n     * For lst = [1.4,4.2,0] the output should be 29\n     * For lst = [-2.4,1,1] the output should be 6\n     *\n     * > sumSquares([1, 2, 3])\n     * 14\n     * > sumSquares([1.0, 2, 3])\n     * 14\n     * > sumSquares([1, 3, 5, 7])\n     * 84\n     * > sumSquares([1.4, 4.2, 0])\n     * 29\n     * > sumSquares([-2.4, 1, 1])\n     * 6\n     * > sumSquares([100, 1, 15, 2])\n     * 10230\n     * > sumSquares([10000, 10000])\n     * 200000000\n     * > sumSquares([-1.4, 4.6, 6.3])\n     * 75\n     * > sumSquares([-1.4, 17.9, 18.9, 19.9])\n     * 1086\n     * > sumSquares([0])\n     * 0\n     * > sumSquares([-1])\n     * 1\n     * > sumSquares([-1, 1, 0])\n     * 2\n     */\n    public static int sumSquares(List<Number> lst) {\n        int sum = 0;\n        for (Number n : lst) {\n            sum += Math.pow(Math.ceil(n.doubleValue()), 2);\n        }\n        return sum;\n    }\n}\n",
		"id": "133",
		"test_prompt": "// SumSquaresTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares}.\n* It contains ten unit test cases for the {@link SumSquares#sumSquares(List)} method.\n*/\nclass SumSquaresTest {"
	},
	{
		"original_code": "// Simplify.java\npackage original;\n\nclass Simplify {\n\n    /**\n     * Your task is to implement a function that will simplify the expression\n     * x * n. The function returns True if x * n evaluates to a whole number and False\n     * otherwise. Both x and n, are string representation of a fraction, and have the following format,\n     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n     *\n     * You can assume that x, and n are valid fractions, and do not have zero as denominator.\n     *\n     * simplify(\"1/5\", \"5/1\") = True\n     * simplify(\"1/6\", \"2/1\") = False\n     * simplify(\"7/10\", \"10/2\") = False\n     *\n     * > simplify(\"1/5\", \"5/1\")\n     * true\n     * > simplify(\"1/6\", \"2/1\")\n     * false\n     * > simplify(\"5/1\", \"3/1\")\n     * true\n     * > simplify(\"7/10\", \"10/2\")\n     * false\n     * > simplify(\"2/10\", \"50/10\")\n     * true\n     * > simplify(\"7/2\", \"4/2\")\n     * true\n     * > simplify(\"11/6\", \"6/1\")\n     * true\n     * > simplify(\"2/3\", \"5/2\")\n     * false\n     * > simplify(\"5/2\", \"3/5\")\n     * false\n     * > simplify(\"2/4\", \"8/4\")\n     * true\n     * > simplify(\"2/4\", \"4/2\")\n     * true\n     * > simplify(\"1/5\", \"5/1\")\n     * true\n     * > simplify(\"1/5\", \"1/5\")\n     * false\n     */\n    public static Boolean simplify(String x, String n) {\n        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        if (numerator % denom == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "144",
		"test_prompt": "// SimplifyTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Simplify}.\n* It contains ten unit test cases for the {@link Simplify#simplify(String, String)} method.\n*/\nclass SimplifyTest {"
	},
	{
		"original_code": "// IsBored.java\npackage original;\n\nclass IsBored {\n\n    /**\n     * You'll be given a string of words, and your task is to count the number\n     * of boredoms. A boredom is a sentence that starts with the word \"I\".\n     * Sentences are delimited by '.', '?' or '!'.\n     *\n     * For example:\n     * >>> isBored(\"Hello world\")\n     * 0\n     * >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n     * 1\n     *\n     * > isBored(\"Hello world\")\n     * 0\n     * > isBored(\"Is the sky blue?\")\n     * 0\n     * > isBored(\"I love It !\")\n     * 1\n     * > isBored(\"bIt\")\n     * 0\n     * > isBored(\"I feel good today. I will be productive. will kill It\")\n     * 2\n     * > isBored(\"You and I are going for a walk\")\n     * 0\n     */\n    public static int isBored(String s) {\n        int count = 0;\n        String[] sentences = s.split(\"[.!?]\");\n        for (String sentence : sentences) {\n            String[] words = sentence.split(\" \");\n            boolean firstWord = false;\n            for (String word : words) {\n                if (word.length() == 0)\n                    continue;\n                else {\n                    firstWord = true;\n                    if (word.equals(\"I\")) {\n                        count++;\n                    }\n                }\n                if (firstWord)\n                    break;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "91",
		"test_prompt": "// IsBoredTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsBored}.\n* It contains ten unit test cases for the {@link IsBored#isBored(String)} method.\n*/\nclass IsBoredTest {"
	},
	{
		"original_code": "// OddCount.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass OddCount {\n\n    /**\n     * Given a list of strings, where each string consists of only digits, return a list.\n     * Each element i of the output should be \"the number of odd elements in the\n     * string i of the input.\" where all the i's should be replaced by the number\n     * of odd digits in the i'th string of the input.\n     *\n     * >>> oddCount(['1234567'])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * >>> oddCount(['3',\"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     * \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\n     * > oddCount([\"1234567\"])\n     * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n     * > oddCount([\"3\", \"11111111\"])\n     * [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     * > oddCount([\"271\", \"137\", \"314\"])\n     * [\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"]\n     */\n    public static List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < lst.get(i).length(); j++) {\n                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 != 0) {\n                    count++;\n                }\n            }\n            result.add(\"the number of odd elements \" + count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"nput.\");\n        }\n        return result;\n    }\n}\n",
		"id": "113",
		"test_prompt": "// OddCountTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OddCount}.\n* It contains ten unit test cases for the {@link OddCount#oddCount(List)} method.\n*/\nclass OddCountTest {"
	},
	{
		"original_code": "// FilterByPrefix.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterByPrefix {\n\n    /**\n     * Filter an input list of strings only for ones that start with a given prefix.\n     *\n     * > filterByPrefix([], \"a\")\n     * []\n     * > filterByPrefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n     * [\"abc\", \"array\"]\n     * > filterByPrefix([], \"john\")\n     * []\n     * > filterByPrefix([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n     * [\"xxx\", \"xxxAAA\", \"xxx\"]\n     */\n    public static List<Object> filterByPrefix(List<Object> strings, String prefix) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object string : strings) {\n            if (string.toString().startsWith(prefix)) {\n                result.add(string);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "29",
		"test_prompt": "// FilterByPrefixTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterByPrefix}.\n* It contains ten unit test cases for the {@link FilterByPrefix#filterByPrefix(List, String)} method.\n*/\nclass FilterByPrefixTest {"
	},
	{
		"original_code": "// ByLength.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass ByLength {\n\n    /**\n     * * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n     * reverse the resulting array, and then replace each digit by its corresponding name from\n     * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n     *\n     * For example:\n     * arr = [2, 1, 1, 4, 5, 8, 2, 3]\n     * -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n     * -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n     * return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     *\n     * If the array is empty, return an empty array:\n     * arr = []\n     * return []\n     *\n     * If the array has any strange number ignore it:\n     * arr = [1, -1 , 55]\n     * -> sort arr -> [-1, 1, 55]\n     * -> reverse arr -> [55, 1, -1]\n     * return = ['One']\n     *\n     * > byLength([2, 1, 1, 4, 5, 8, 2, 3])\n     * [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n     * > byLength([])\n     * []\n     * > byLength([1, -1, 55])\n     * [\"One\"]\n     * > byLength([1, -1, 3, 2])\n     * [\"Three\", \"Two\", \"One\"]\n     * > byLength([9, 4, 8])\n     * [\"Nine\", \"Eight\", \"Four\"]\n     */\n    public static List<Object> byLength(List<Object> arr) {\n        List<Integer> sorted = new ArrayList<Integer>();\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                sorted.add((Integer) value);\n            }\n        }\n        Collections.sort(sorted);\n        Collections.reverse(sorted);\n        List<Object> result = new ArrayList<Object>();\n        for (Integer value : sorted) {\n            if (value >= 1 && value <= 9) {\n                switch(value) {\n                    case 1:\n                        result.add(\"One\");\n                        break;\n                    case 2:\n                        result.add(\"Two\");\n                        break;\n                    case 3:\n                        result.add(\"Three\");\n                        break;\n                    case 4:\n                        result.add(\"Four\");\n                        break;\n                    case 5:\n                        result.add(\"Five\");\n                        break;\n                    case 6:\n                        result.add(\"Six\");\n                        break;\n                    case 7:\n                        result.add(\"Seven\");\n                        break;\n                    case 8:\n                        result.add(\"Eight\");\n                        break;\n                    case 9:\n                        result.add(\"Nine\");\n                        break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "105",
		"test_prompt": "// ByLengthTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByLength}.\n* It contains ten unit test cases for the {@link ByLength#byLength(List)} method.\n*/\nclass ByLengthTest {"
	},
	{
		"original_code": "// Compare.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Compare {\n\n    /**\n     * I think we all remember that feeling when the result of some long-awaited\n     * event is finally known. The feelings and thoughts you have at that moment are\n     * definitely worth noting down and comparing.\n     * Your task is to determine if a person correctly guessed the results of a number of matches.\n     * You are given two arrays of scores and guesses of equal length, where each index shows a match.\n     * Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n     * the value is 0, and if not, the value is the absolute difference between the guess and the score.\n     *\n     * example:\n     *\n     * compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n     * compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n     *\n     * > compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n     * [0, 0, 0, 0, 3, 3]\n     * > compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])\n     * [0, 0, 0, 0, 0, 0]\n     * > compare([1, 2, 3], [-1, -2, -3])\n     * [2, 4, 6]\n     * > compare([1, 2, 3, 5], [-1, 2, 3, 4])\n     * [2, 0, 0, 1]\n     */\n    public static List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}\n",
		"id": "152",
		"test_prompt": "// CompareTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Compare}.\n* It contains ten unit test cases for the {@link Compare#compare(List, List)} method.\n*/\nclass CompareTest {"
	},
	{
		"original_code": "// Pluck.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Pluck {\n\n    /**\n     * Given an array representing a branch of a tree that has non-negative integer nodes\n     * your task is to pluck one of the nodes and return it.\n     * The plucked node should be the node with the smallest even value.\n     * If multiple nodes with the same smallest even value are found return the node that has smallest index.\n     * The plucked node should be returned in a list, [ smallest_value, its index ],\n     * If there are no even values or the given array is empty, return [].\n     *\n     * Example 1:\n     * - Input: [4,2,3]\n     * - Output: [2, 1]\n     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.\n     * Example 2:\n     * - Input: [1,2,3]\n     * - Output: [2, 1]\n     * - Explanation: 2 has the smallest even value, and 2 has the smallest index.\n     * Example 3:\n     * - Input: []\n     * - Output: []\n     * Example 4:\n     * - Input: [5, 0, 3, 0, 4, 2]\n     * - Output: [0, 1]\n     * - Explanation: 0 is the smallest value, but  there are two zeros,\n     * so we will choose the first zero, which has the smallest index.\n     *\n     * Constraints:\n     * 1 <= nodes.length <= 10000\n     * 0 <= node.value\n     *\n     * > pluck([4, 2, 3])\n     * [2, 1]\n     * > pluck([1, 2, 3])\n     * [2, 1]\n     * > pluck([])\n     * []\n     * > pluck([5, 0, 3, 0, 4, 2])\n     * [0, 1]\n     * > pluck([1, 2, 3, 0, 5, 3])\n     * [0, 3]\n     * > pluck([5, 4, 8, 4, 8])\n     * [4, 1]\n     * > pluck([7, 6, 7, 1])\n     * [6, 1]\n     * > pluck([7, 9, 7, 1])\n     * []\n     */\n    public static List<Object> pluck(List<Object> arr) {\n        List<Object> result = new ArrayList<Object>();\n        int min = Integer.MAX_VALUE;\n        int index = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                int value = (Integer) arr.get(i);\n                if (value % 2 == 0 && value < min) {\n                    min = value;\n                    index = i;\n                }\n            }\n        }\n        if (index != -1) {\n            result.add(min);\n            result.add(index);\n        }\n        return result;\n    }\n}\n",
		"id": "68",
		"test_prompt": "// PluckTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Pluck}.\n* It contains ten unit test cases for the {@link Pluck#pluck(List)} method.\n*/\nclass PluckTest {"
	},
	{
		"original_code": "// GetRow.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass GetRow {\n\n    /**\n     * * You are given a 2 dimensional data, as a nested lists,\n     * which is similar to matrix, however, unlike matrices,\n     * each row may contain a different number of columns.\n     * Given lst, and integer x, find integers x in the list,\n     * and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n     * each tuple is a coordinate - (row, columns), starting with 0.\n     * Sort coordinates initially by rows in ascending order.\n     * Also, sort coordinates of the row by columns in descending order.\n     *\n     * Examples:\n     * getRow([\n     * [1,2,3,4,5,6],\n     * [1,2,3,4,1,6],\n     * [1,2,3,4,5,1]\n     * ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n     * getRow([], 1) == []\n     * getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n     *\n     * > getRow([], 1)\n     * []\n     * > getRow([[1]], 2)\n     * []\n     * > getRow([[], [1], [1, 2, 3]], 3)\n     * [[2, 2]]\n     */\n    public static List<Object> getRow(List<Object> lst, int x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Object> row = (List<Object>) lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                if (row.get(j).equals(x)) {\n                    List<Object> coordinate = new ArrayList<Object>();\n                    coordinate.add(i);\n                    coordinate.add(j);\n                    result.add(coordinate);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                List<Object> c1 = (List<Object>) o1;\n                List<Object> c2 = (List<Object>) o2;\n                int row1 = (Integer) c1.get(0);\n                int row2 = (Integer) c2.get(0);\n                if (row1 != row2) {\n                    return row1 - row2;\n                }\n                int col1 = (Integer) c1.get(1);\n                int col2 = (Integer) c2.get(1);\n                return col2 - col1;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "87",
		"test_prompt": "// GetRowTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetRow}.\n* It contains ten unit test cases for the {@link GetRow#getRow(List, int)} method.\n*/\nclass GetRowTest {"
	},
	{
		"original_code": "// Minpath.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass Minpath {\n\n    /**\n     * * Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n     * each cell of the grid contains a value. Every integer in the range [1, N * N]\n     * inclusive appears exactly once on the cells of the grid.\n     *\n     * You have to find the minimum path of length k in the grid. You can start\n     * from any cell, and in each step you can move to any of the neighbor cells,\n     * in other words, you can go to cells which share an edge with you current\n     * cell.\n     * Please note that a path of length k means visiting exactly k cells (not\n     * necessarily distinct).\n     * You CANNOT go off the grid.\n     * A path A (of length k) is considered less than a path B (of length k) if\n     * after making the ordered lists of the values on the cells that A and B go\n     * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n     * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n     * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n     * lst_A[j] = lst_B[j].\n     * It is guaranteed that the answer is unique.\n     * Return an ordered list of the values on the cells that the minimum path go through.\n     *\n     * Examples:\n     *\n     * Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n     * Output: [1, 2, 1]\n     *\n     * Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n     * Output: [1]\n     *\n     * > minpath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n     * [1, 2, 1]\n     * > minpath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n     * [1]\n     * > minpath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4)\n     * [1, 2, 1, 2]\n     * > minpath([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7)\n     * [1, 10, 1, 10, 1, 10, 1]\n     * > minpath([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5)\n     * [1, 7, 1, 7, 1]\n     * > minpath([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9)\n     * [1, 6, 1, 6, 1, 6, 1, 6, 1]\n     * > minpath([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12)\n     * [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n     * > minpath([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8)\n     * [1, 3, 1, 3, 1, 3, 1, 3]\n     * > minpath([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8)\n     * [1, 5, 1, 5, 1, 5, 1, 5]\n     * > minpath([[1, 2], [3, 4]], 10)\n     * [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n     * > minpath([[1, 3], [3, 2]], 10)\n     * [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n     */\n    public static List<Integer> minpath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}\n",
		"id": "129",
		"test_prompt": "// MinpathTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minpath}.\n* It contains ten unit test cases for the {@link Minpath#minpath(List, int)} method.\n*/\nclass MinpathTest {"
	},
	{
		"original_code": "// GreatestCommonDivisor.java\npackage original;\n\nclass GreatestCommonDivisor {\n\n    /**\n     * Return the greatest common divisor of two integers a and b.\n     *\n     * > greatestCommonDivisor(3, 5)\n     * 1\n     * > greatestCommonDivisor(25, 15)\n     * 5\n     * > greatestCommonDivisor(3, 7)\n     * 1\n     * > greatestCommonDivisor(10, 15)\n     * 5\n     * > greatestCommonDivisor(49, 14)\n     * 7\n     * > greatestCommonDivisor(144, 60)\n     * 12\n     */\n    public static int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}\n",
		"id": "13",
		"test_prompt": "// GreatestCommonDivisorTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GreatestCommonDivisor}.\n* It contains ten unit test cases for the {@link GreatestCommonDivisor#greatestCommonDivisor(int, int)} method.\n*/\nclass GreatestCommonDivisorTest {"
	},
	{
		"original_code": "// ChangeBase.java\npackage original;\n\nclass ChangeBase {\n\n    /**\n     * Change numerical base of input number x to base.\n     * return string representation after the conversion.\n     * base numbers are less than 10.\n     *\n     * > changeBase(8, 3)\n     * \"22\"\n     * > changeBase(8, 2)\n     * \"1000\"\n     * > changeBase(7, 2)\n     * \"111\"\n     * > changeBase(8, 3)\n     * \"22\"\n     * > changeBase(9, 3)\n     * \"100\"\n     * > changeBase(234, 2)\n     * \"11101010\"\n     * > changeBase(16, 2)\n     * \"10000\"\n     * > changeBase(8, 2)\n     * \"1000\"\n     * > changeBase(7, 2)\n     * \"111\"\n     * > changeBase(2, 3)\n     * \"2\"\n     * > changeBase(3, 4)\n     * \"3\"\n     * > changeBase(4, 5)\n     * \"4\"\n     * > changeBase(5, 6)\n     * \"5\"\n     * > changeBase(6, 7)\n     * \"6\"\n     * > changeBase(7, 8)\n     * \"7\"\n     */\n    public static String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            result = (x % base) + result;\n            x = x / base;\n        }\n        return result;\n    }\n}\n",
		"id": "44",
		"test_prompt": "// ChangeBaseTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChangeBase}.\n* It contains ten unit test cases for the {@link ChangeBase#changeBase(int, int)} method.\n*/\nclass ChangeBaseTest {"
	},
	{
		"original_code": "// BelowThreshold.java\npackage original;\n\nimport java.util.List;\n\nclass BelowThreshold {\n\n    /**\n     * Return True if all numbers in the list l are below threshold t.\n     *\n     * > belowThreshold([1, 2, 4, 10], 100)\n     * true\n     * > belowThreshold([1, 20, 4, 10], 5)\n     * false\n     * > belowThreshold([1, 20, 4, 10], 21)\n     * true\n     * > belowThreshold([1, 20, 4, 10], 22)\n     * true\n     * > belowThreshold([1, 8, 4, 10], 11)\n     * true\n     * > belowThreshold([1, 8, 4, 10], 10)\n     * false\n     */\n    public static Boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "52",
		"test_prompt": "// BelowThresholdTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BelowThreshold}.\n* It contains ten unit test cases for the {@link BelowThreshold#belowThreshold(List, int)} method.\n*/\nclass BelowThresholdTest {"
	},
	{
		"original_code": "// Add.java\npackage original;\n\nclass Add {\n\n    /**\n     * Add two numbers x and y\n     *\n     * > add(0, 1)\n     * 1\n     * > add(1, 0)\n     * 1\n     * > add(2, 3)\n     * 5\n     * > add(5, 7)\n     * 12\n     * > add(7, 5)\n     * 12\n     * > add(572, 725)\n     * 1297\n     * > add(51, 804)\n     * 855\n     * > add(645, 96)\n     * 741\n     * > add(712, 853)\n     * 1565\n     * > add(223, 101)\n     * 324\n     * > add(76, 29)\n     * 105\n     * > add(416, 149)\n     * 565\n     * > add(145, 409)\n     * 554\n     * > add(535, 430)\n     * 965\n     * > add(118, 303)\n     * 421\n     * > add(287, 94)\n     * 381\n     * > add(768, 257)\n     * 1025\n     * > add(421, 677)\n     * 1098\n     * > add(802, 814)\n     * 1616\n     * > add(510, 922)\n     * 1432\n     * > add(345, 819)\n     * 1164\n     * > add(895, 436)\n     * 1331\n     * > add(123, 424)\n     * 547\n     * > add(923, 245)\n     * 1168\n     * > add(23, 438)\n     * 461\n     * > add(565, 133)\n     * 698\n     * > add(945, 925)\n     * 1870\n     * > add(261, 983)\n     * 1244\n     * > add(139, 577)\n     * 716\n     * > add(763, 178)\n     * 941\n     * > add(147, 892)\n     * 1039\n     * > add(436, 402)\n     * 838\n     * > add(610, 581)\n     * 1191\n     * > add(103, 416)\n     * 519\n     * > add(339, 990)\n     * 1329\n     * > add(130, 504)\n     * 634\n     * > add(242, 717)\n     * 959\n     * > add(562, 110)\n     * 672\n     * > add(396, 909)\n     * 1305\n     * > add(887, 703)\n     * 1590\n     * > add(870, 551)\n     * 1421\n     * > add(422, 391)\n     * 813\n     * > add(299, 505)\n     * 804\n     * > add(346, 56)\n     * 402\n     * > add(36, 706)\n     * 742\n     * > add(738, 411)\n     * 1149\n     * > add(679, 87)\n     * 766\n     * > add(25, 303)\n     * 328\n     * > add(161, 612)\n     * 773\n     * > add(306, 841)\n     * 1147\n     * > add(973, 411)\n     * 1384\n     * > add(711, 157)\n     * 868\n     * > add(471, 27)\n     * 498\n     * > add(714, 792)\n     * 1506\n     * > add(38, 206)\n     * 244\n     * > add(907, 343)\n     * 1250\n     * > add(23, 760)\n     * 783\n     * > add(524, 859)\n     * 1383\n     * > add(30, 529)\n     * 559\n     * > add(341, 691)\n     * 1032\n     * > add(167, 729)\n     * 896\n     * > add(636, 289)\n     * 925\n     * > add(503, 144)\n     * 647\n     * > add(51, 985)\n     * 1036\n     * > add(287, 149)\n     * 436\n     * > add(659, 75)\n     * 734\n     * > add(462, 797)\n     * 1259\n     * > add(406, 141)\n     * 547\n     * > add(106, 44)\n     * 150\n     * > add(300, 934)\n     * 1234\n     * > add(471, 524)\n     * 995\n     * > add(122, 429)\n     * 551\n     * > add(735, 195)\n     * 930\n     * > add(335, 484)\n     * 819\n     * > add(28, 809)\n     * 837\n     * > add(430, 20)\n     * 450\n     * > add(916, 635)\n     * 1551\n     * > add(301, 999)\n     * 1300\n     * > add(454, 466)\n     * 920\n     * > add(905, 259)\n     * 1164\n     * > add(168, 205)\n     * 373\n     * > add(570, 434)\n     * 1004\n     * > add(64, 959)\n     * 1023\n     * > add(957, 510)\n     * 1467\n     * > add(722, 598)\n     * 1320\n     * > add(770, 226)\n     * 996\n     * > add(579, 66)\n     * 645\n     * > add(117, 674)\n     * 791\n     * > add(530, 30)\n     * 560\n     * > add(776, 345)\n     * 1121\n     * > add(327, 389)\n     * 716\n     * > add(596, 12)\n     * 608\n     * > add(599, 511)\n     * 1110\n     * > add(936, 476)\n     * 1412\n     * > add(461, 14)\n     * 475\n     * > add(966, 157)\n     * 1123\n     * > add(326, 91)\n     * 417\n     * > add(392, 455)\n     * 847\n     * > add(446, 477)\n     * 923\n     * > add(324, 860)\n     * 1184\n     * > add(945, 85)\n     * 1030\n     * > add(886, 582)\n     * 1468\n     * > add(886, 712)\n     * 1598\n     * > add(842, 953)\n     * 1795\n     */\n    public static int add(int x, int y) {\n        return x + y;\n    }\n}\n",
		"id": "53",
		"test_prompt": "// AddTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Add}.\n* It contains ten unit test cases for the {@link Add#add(int, int)} method.\n*/\nclass AddTest {"
	},
	{
		"original_code": "// TriangleArea.java\npackage original;\n\nclass TriangleArea {\n\n    /**\n     * Given length of a side and high return area for a triangle.\n     *\n     * > triangleArea(5, 3)\n     * 7.5\n     * > triangleArea(2, 2)\n     * 2.0\n     * > triangleArea(10, 8)\n     * 40.0\n     */\n    public static Double triangleArea(int a, int h) {\n        return (a * h) / 2.0;\n    }\n}\n",
		"id": "45",
		"test_prompt": "// TriangleAreaTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TriangleArea}.\n* It contains ten unit test cases for the {@link TriangleArea#triangleArea(int, int)} method.\n*/\nclass TriangleAreaTest {"
	},
	{
		"original_code": "// Longest.java\npackage original;\n\nimport java.util.List;\n\nclass Longest {\n\n    /**\n     * Out of list of strings, return the longest one. Return the first one in case of multiple\n     * strings of the same length. Return null in case the input list is empty.\n     *\n     * > longest([\"a\", \"b\", \"c\"])\n     * \"a\"\n     * > longest([\"a\", \"bb\", \"ccc\"])\n     * \"ccc\"\n     * > longest([])\n     * null\n     * > longest([\"x\", \"y\", \"z\"])\n     * \"x\"\n     * > longest([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"])\n     * \"zzzz\"\n     */\n    public static String longest(List<Object> strings) {\n        if (strings.size() == 0) {\n            return null;\n        }\n        String longest = strings.get(0).toString();\n        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).toString().length() > longest.length()) {\n                longest = strings.get(i).toString();\n            }\n        }\n        return longest;\n    }\n}\n",
		"id": "12",
		"test_prompt": "// LongestTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Longest}.\n* It contains ten unit test cases for the {@link Longest#longest(List)} method.\n*/\nclass LongestTest {"
	},
	{
		"original_code": "// ProdSigns.java\npackage original;\n\nimport java.util.List;\n\nclass ProdSigns {\n\n    /**\n     * * You are given an array arr of integers and you need to return\n     * sum of magnitudes of integers multiplied by product of all signs\n     * of each number in the array, represented by 1, -1 or 0.\n     * Note: return null for empty arr.\n     *\n     * Example:\n     * >>> prodSigns([1, 2, 2, -4]) == -9\n     * >>> prodSigns([0, 1]) == 0\n     * >>> prodSigns([]) == None\n     *\n     * > prodSigns([1, 2, 2, -4])\n     * -9\n     * > prodSigns([0, 1])\n     * 0\n     * > prodSigns([1, 1, 1, 2, 3, -1, 1])\n     * -10\n     * > prodSigns([])\n     * null\n     * > prodSigns([2, 4, 1, 2, -1, -1, 9])\n     * 20\n     * > prodSigns([-1, 1, -1, 1])\n     * 4\n     * > prodSigns([-1, 1, 1, 1])\n     * -4\n     * > prodSigns([-1, 1, 1, 0])\n     * 0\n     */\n    public static Integer prodSigns(List<Object> arr) {\n        if (arr.isEmpty()) {\n            return null;\n        }\n        int prod = 1;\n        int sum = 0;\n        for (Object value : arr) {\n            if (value instanceof Integer) {\n                int num = (Integer) value;\n                if (num > 0) {\n                    prod *= 1;\n                } else if (num < 0) {\n                    prod *= -1;\n                } else {\n                    prod *= 0;\n                }\n                sum += Math.abs(num);\n            }\n        }\n        return sum * prod;\n    }\n}\n",
		"id": "128",
		"test_prompt": "// ProdSignsTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ProdSigns}.\n* It contains ten unit test cases for the {@link ProdSigns#prodSigns(List)} method.\n*/\nclass ProdSignsTest {"
	},
	{
		"original_code": "// Search.java\npackage original;\n\nimport java.util.List;\n\nclass Search {\n\n    /**\n     * You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n     * zero, and has a frequency greater than or equal to the value of the integer itself.\n     * The frequency of an integer is the number of times it appears in the list.\n     * If no such a value exist, return -1.\n     * Examples:\n     * search([4, 1, 2, 2, 3, 1]) == 2\n     * search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n     * search([5, 5, 4, 4, 4]) == -1\n     *\n     * > search([5, 5, 5, 5, 1])\n     * 1\n     * > search([4, 1, 4, 1, 4, 4])\n     * 4\n     * > search([3, 3])\n     * -1\n     * > search([8, 8, 8, 8, 8, 8, 8, 8])\n     * 8\n     * > search([2, 3, 3, 2, 2])\n     * 2\n     * > search([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1])\n     * 1\n     * > search([3, 2, 8, 2])\n     * 2\n     * > search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10])\n     * 1\n     * > search([8, 8, 3, 6, 5, 6, 4])\n     * -1\n     * > search([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\n     * 1\n     * > search([1, 9, 10, 1, 3])\n     * 1\n     * > search([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10])\n     * 5\n     * > search([1])\n     * 1\n     * > search([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5])\n     * 4\n     * > search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10])\n     * 2\n     * > search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3])\n     * 1\n     * > search([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4])\n     * 4\n     * > search([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7])\n     * 4\n     * > search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1])\n     * 2\n     * > search([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8])\n     * -1\n     * > search([10])\n     * -1\n     * > search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2])\n     * 2\n     * > search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8])\n     * 1\n     * > search([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6])\n     * 1\n     * > search([3, 10, 10, 9, 2])\n     * -1\n     */\n    public static int search(List<Integer> lst) {\n        int max = -1;\n        int[] freq = new int[11];\n        for (int i = 0; i < lst.size(); i++) {\n            freq[lst.get(i)]++;\n        }\n        for (int i = 1; i < 11; i++) {\n            if (freq[i] >= i) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "69",
		"test_prompt": "// SearchTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Search}.\n* It contains ten unit test cases for the {@link Search#search(List)} method.\n*/\nclass SearchTest {"
	},
	{
		"original_code": "// AntiShuffle.java\npackage original;\n\nimport java.util.Arrays;\n\nclass AntiShuffle {\n\n    /**\n     * * Write a function that takes a string and returns an ordered version of it.\n     * Ordered version of string, is a string where all words (separated by space)\n     * are replaced by a new word where all the characters arranged in\n     * ascending order based on ascii value.\n     * Note: You should keep the order of words and blank spaces in the sentence.\n     *\n     * For example:\n     * antiShuffle('Hi') returns 'Hi'\n     * antiShuffle('hello') returns 'ehllo'\n     * antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n     *\n     * > antiShuffle(\"Hi\")\n     * \"Hi\"\n     * > antiShuffle(\"hello\")\n     * \"ehllo\"\n     * > antiShuffle(\"number\")\n     * \"bemnru\"\n     * > antiShuffle(\"abcd\")\n     * \"abcd\"\n     * > antiShuffle(\"Hello World!!!\")\n     * \"Hello !!!Wdlor\"\n     * > antiShuffle(\"\")\n     * \"\"\n     * > antiShuffle(\"Hi. My name is Mister Robot. How are you?\")\n     * \".Hi My aemn is Meirst .Rboot How aer ?ouy\"\n     */\n    public static String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            words[i] = sortString(words[i]);\n        }\n        return String.join(\" \", words);\n    }\n\n    private static String sortString(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        return new String(chars);\n    }\n}\n",
		"id": "86",
		"test_prompt": "// AntiShuffleTest.java\npackage original;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AntiShuffle}.\n* It contains ten unit test cases for the {@link AntiShuffle#antiShuffle(String)} method.\n*/\nclass AntiShuffleTest {"
	},
	{
		"original_code": "// StrongestExtension.java\npackage original;\n\nimport java.util.List;\n\nclass StrongestExtension {\n\n    /**\n     * You will be given the name of a class (a string) and a list of extensions.\n     * The extensions are to be used to load additional classes to the class. The\n     * strength of the extension is as follows: Let CAP be the number of the uppercase\n     * letters in the extension's name, and let SM be the number of lowercase letters\n     * in the extension's name, the strength is given by the fraction CAP - SM.\n     * You should find the strongest extension and return a string in this\n     * format: ClassName.StrongestExtensionName.\n     * If there are two or more extensions with the same strength, you should\n     * choose the one that comes first in the list.\n     * For example, if you are given \"Slices\" as the class and a list of the\n     * extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n     * return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n     * (its strength is -1).\n     * Example:\n     * for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n     *\n     * > strongestExtension(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"])\n     * \"Watashi.eIGHt8OKe\"\n     * > strongestExtension(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"])\n     * \"Boku123.YEs.WeCaNe\"\n     * > strongestExtension(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"])\n     * \"__YESIMHERE.NuLl__\"\n     * > strongestExtension(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"])\n     * \"K.TAR\"\n     * > strongestExtension(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"])\n     * \"__HAHA.123\"\n     * > strongestExtension(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"])\n     * \"YameRore.okIWILL123\"\n     * > strongestExtension(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"])\n     * \"finNNalLLly.WoW\"\n     * > strongestExtension(\"_\", [\"Bb\", \"91245\"])\n     * \"_.Bb\"\n     * > strongestExtension(\"Sp\", [\"671235\", \"Bb\"])\n     * \"Sp.671235\"\n     */\n    public static String strongestExtension(String className, List<String> extensions) {\n        int max = Integer.MIN_VALUE;\n        String result = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n            int cap = 0;\n            int sm = 0;\n            for (int j = 0; j < extensions.get(i).length(); j++) {\n                if (Character.isUpperCase(extensions.get(i).charAt(j))) {\n                    cap++;\n                } else if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n                    sm++;\n                }\n            }\n            if (cap - sm > max) {\n                max = cap - sm;\n                result = className + \".\" + extensions.get(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "153",
		"test_prompt": "// StrongestExtensionTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StrongestExtension}.\n* It contains ten unit test cases for the {@link StrongestExtension#strongestExtension(String, List)} method.\n*/\nclass StrongestExtensionTest {"
	},
	{
		"original_code": "// UniqueDigits.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass UniqueDigits {\n\n    /**\n     * Given a list of positive integers x. return a sorted list of all\n     * elements that hasn't any even digit.\n     *\n     * Note: Returned list should be sorted in increasing order.\n     *\n     * For example:\n     * >>> uniqueDigits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * >>> uniqueDigits([152, 323, 1422, 10])\n     * []\n     *\n     * > uniqueDigits([15, 33, 1422, 1])\n     * [1, 15, 33]\n     * > uniqueDigits([152, 323, 1422, 10])\n     * []\n     * > uniqueDigits([12345, 2033, 111, 151])\n     * [111, 151]\n     * > uniqueDigits([135, 103, 31])\n     * [31, 135]\n     */\n    public static List<Object> uniqueDigits(List<Integer> x) {\n        List<Object> result = new ArrayList<Object>();\n        for (int value : x) {\n            boolean hasEven = false;\n            int oldValue = value;\n            while (value > 0) {\n                if (value % 2 == 0) {\n                    hasEven = true;\n                    break;\n                }\n                value /= 10;\n            }\n            if (!hasEven) {\n                result.add(oldValue);\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object a, Object b) {\n                return (Integer) a - (Integer) b;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "104",
		"test_prompt": "// UniqueDigitsTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link UniqueDigits}.\n* It contains ten unit test cases for the {@link UniqueDigits#uniqueDigits(List)} method.\n*/\nclass UniqueDigitsTest {"
	},
	{
		"original_code": "// Concatenate.java\npackage original;\n\nimport java.util.List;\n\nclass Concatenate {\n\n    /**\n     * Concatenate list of strings into a single string\n     *\n     * > concatenate([])\n     * \"\"\n     * > concatenate([\"a\", \"b\", \"c\"])\n     * \"abc\"\n     * > concatenate([])\n     * \"\"\n     * > concatenate([\"x\", \"y\", \"z\"])\n     * \"xyz\"\n     * > concatenate([\"x\", \"y\", \"z\", \"w\", \"k\"])\n     * \"xyzwk\"\n     */\n    public static String concatenate(List<Object> strings) {\n        String result = \"\";\n        for (Object string : strings) {\n            result += string.toString();\n        }\n        return result;\n    }\n}\n",
		"id": "28",
		"test_prompt": "// ConcatenateTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Concatenate}.\n* It contains ten unit test cases for the {@link Concatenate#concatenate(List)} method.\n*/\nclass ConcatenateTest {"
	},
	{
		"original_code": "// ReverseDelete.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass ReverseDelete {\n\n    /**\n     * Task\n     * We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n     * then check if the result string is palindrome.\n     * A string is called palindrome if it reads the same backward as forward.\n     * You should return a tuple containing the result string and True/False for the check.\n     * Example\n     * For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n     * For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n     * For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n     *\n     * > reverseDelete(\"abcde\", \"ae\")\n     * [\"bcd\", false]\n     * > reverseDelete(\"abcdef\", \"b\")\n     * [\"acdef\", false]\n     * > reverseDelete(\"abcdedcba\", \"ab\")\n     * [\"cdedc\", true]\n     * > reverseDelete(\"dwik\", \"w\")\n     * [\"dik\", false]\n     * > reverseDelete(\"a\", \"a\")\n     * [\"\", true]\n     * > reverseDelete(\"abcdedcba\", \"\")\n     * [\"abcdedcba\", true]\n     * > reverseDelete(\"abcdedcba\", \"v\")\n     * [\"abcdedcba\", true]\n     * > reverseDelete(\"vabba\", \"v\")\n     * [\"abba\", true]\n     * > reverseDelete(\"mamma\", \"mia\")\n     * [\"\", true]\n     */\n    public static List<Object> reverseDelete(String s, String c) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (c.indexOf(s.charAt(i)) == -1) {\n                result += s.charAt(i);\n            }\n        }\n        boolean isPalindrome = true;\n        for (int i = 0; i < result.length() / 2; i++) {\n            if (result.charAt(i) != result.charAt(result.length() - i - 1)) {\n                isPalindrome = false;\n                break;\n            }\n        }\n        return Arrays.asList(result, isPalindrome);\n    }\n}\n",
		"id": "112",
		"test_prompt": "// ReverseDeleteTest.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ReverseDelete}.\n* It contains ten unit test cases for the {@link ReverseDelete#reverseDelete(String, String)} method.\n*/\nclass ReverseDeleteTest {"
	},
	{
		"original_code": "// NextSmallest.java\npackage original;\n\nimport java.util.List;\n\nclass NextSmallest {\n\n    /**\n     * * You are given a list of integers.\n     * Write a function next_smallest() that returns the 2nd smallest element of the list.\n     * Return null if there is no such element.\n     * Examples:\n     * nextSmallest([1, 2, 3, 4, 5]) == 2\n     * nextSmallest([5, 1, 4, 3, 2]) == 2\n     * nextSmallest([]) == None\n     * nextSmallest([1, 1]) == None\n     *\n     * > nextSmallest([1, 2, 3, 4, 5])\n     * 2\n     * > nextSmallest([5, 1, 4, 3, 2])\n     * 2\n     * > nextSmallest([])\n     * null\n     * > nextSmallest([1, 1])\n     * null\n     * > nextSmallest([1, 1, 1, 1, 0])\n     * 1\n     * > nextSmallest([1, 1])\n     * null\n     * > nextSmallest([-35, 34, 12, -45])\n     * -35\n     */\n    public static Integer nextSmallest(List<Object> lst) {\n        if (lst.size() <= 1) {\n            return null;\n        }\n        Integer smallest = (Integer) lst.get(0);\n        Integer nextSmallest = null;\n        for (int i = 1; i < lst.size(); i++) {\n            Integer current = (Integer) lst.get(i);\n            if (current < smallest) {\n                nextSmallest = smallest;\n                smallest = current;\n            } else if (nextSmallest == null || current < nextSmallest) {\n                if (current != smallest)\n                    nextSmallest = current;\n            }\n        }\n        return nextSmallest;\n    }\n}\n",
		"id": "90",
		"test_prompt": "// NextSmallestTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NextSmallest}.\n* It contains ten unit test cases for the {@link NextSmallest#nextSmallest(List)} method.\n*/\nclass NextSmallestTest {"
	},
	{
		"original_code": "// OrderByPoints.java\npackage original;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass OrderByPoints {\n\n    /**\n     * * Write a function which sorts the given list of integers\n     * in ascending order according to the sum of their digits.\n     * Note: if there are several items with similar sum of their digits,\n     * order them based on their index in original list.\n     *\n     * For example:\n     * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n     * >>> order_by_points([]) == []\n     *\n     * > orderByPoints([1, 11, -1, -11, -12])\n     * [-1, -11, 1, -12, 11]\n     * > orderByPoints([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\n     * [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n     * > orderByPoints([])\n     * []\n     * > orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])\n     * [-3, -32, -98, -11, 1, 2, 43, 54]\n     * > orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n     * [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n     * > orderByPoints([0, 6, 6, -76, -21, 23, 4])\n     * [-76, -21, 0, 4, 23, 6, 6]\n     */\n    public static List<Object> orderByPoints(List<Object> nums) {\n        Collections.sort(nums, new Comparator<Object>() {\n\n            int digitsum(int n) {\n                boolean neg = false;\n                if (n < 0) {\n                    neg = true;\n                    n = -n;\n                }\n                int sum = 0;\n                while (n > 0) {\n                    if (n / 10 == 0 && neg)\n                        sum -= n % 10;\n                    else\n                        sum += n % 10;\n                    n = n / 10;\n                }\n                return sum;\n            }\n\n            public int compare(Object o1, Object o2) {\n                return digitsum((int) o1) - digitsum((int) o2);\n            }\n        });\n        return nums;\n    }\n}\n",
		"id": "145",
		"test_prompt": "// OrderByPointsTest.java\npackage original;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link OrderByPoints}.\n* It contains ten unit test cases for the {@link OrderByPoints#orderByPoints(List)} method.\n*/\nclass OrderByPointsTest {"
	},
	{
		"original_code": "// IsNested.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass IsNested {\n\n    /**\n     * * Create a function that takes a string as input which contains only square brackets.\n     * The function should return True if and only if there is a valid subsequence of brackets\n     * where at least one bracket in the subsequence is nested.\n     *\n     * isNested('[[]]') ➞ True\n     * isNested('[]]]]]]][[[[[]') ➞ False\n     * isNested('[][]') ➞ False\n     * isNested('[]') ➞ False\n     * isNested('[[][]]') ➞ True\n     * isNested('[[]][[') ➞ True\n     *\n     * > isNested(\"[[]]\")\n     * true\n     * > isNested(\"[]]]]]]][[[[[]\")\n     * false\n     * > isNested(\"[][]\")\n     * false\n     * > isNested(\"[]\")\n     * false\n     * > isNested(\"[[[[]]]]\")\n     * true\n     * > isNested(\"[]]]]]]]]]]\")\n     * false\n     * > isNested(\"[][][[]]\")\n     * true\n     * > isNested(\"[[]\")\n     * false\n     * > isNested(\"[]]\")\n     * false\n     * > isNested(\"[[]][[\")\n     * true\n     * > isNested(\"[[][]]\")\n     * true\n     * > isNested(\"\")\n     * false\n     * > isNested(\"[[[[[[[[\")\n     * false\n     * > isNested(\"]]]]]]]]\")\n     * false\n     */\n    public static Boolean isNested(String string) {\n        ArrayList<Integer> opening_bracket_index = new ArrayList<Integer>();\n        ArrayList<Integer> closing_bracket_index = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int cnt = 0;\n        int i = 0;\n        int l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                cnt += 1;\n                i += 1;\n            }\n        }\n        return cnt >= 2;\n    }\n}\n",
		"id": "132",
		"test_prompt": "// IsNestedTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsNested}.\n* It contains ten unit test cases for the {@link IsNested#isNested(String)} method.\n*/\nclass IsNestedTest {"
	},
	{
		"original_code": "// Modp.java\npackage original;\n\nclass Modp {\n\n    /**\n     * Return 2^n modulo p (be aware of numerics).\n     * >>> modp(3, 5)\n     * 3\n     * >>> modp(1101, 101)\n     * 2\n     * >>> modp(0, 101)\n     * 1\n     * >>> modp(3, 11)\n     * 8\n     * >>> modp(100, 101)\n     * 1\n     * > modp(3, 5)\n     * 3\n     * > modp(1101, 101)\n     * 2\n     * > modp(0, 101)\n     * 1\n     * > modp(3, 11)\n     * 8\n     * > modp(100, 101)\n     * 1\n     * > modp(30, 5)\n     * 4\n     * > modp(31, 5)\n     * 3\n     */\n    public static int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = (result * 2) % p;\n        }\n        return result;\n    }\n}\n",
		"id": "49",
		"test_prompt": "// ModpTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Modp}.\n* It contains ten unit test cases for the {@link Modp#modp(int, int)} method.\n*/\nclass ModpTest {"
	},
	{
		"original_code": "// ValidDate.java\npackage original;\n\nclass ValidDate {\n\n    /**\n     * You have to write a function which validates a given date string and\n     * returns True if the date is valid otherwise False.\n     * The date is valid if all of the following rules are satisfied:\n     * 1. The date string is not empty.\n     * 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n     * 3. The months should not be less than 1 or higher than 12.\n     * 4. The date should be in the format: mm-dd-yyyy\n     *\n     * for example:\n     * validDate('03-11-2000') => True\n     *\n     * validDate('15-01-2012') => False\n     *\n     * validDate('04-0-2040') => False\n     *\n     * validDate('06-04-2020') => True\n     *\n     * validDate('06/04/2020') => False\n     *\n     * > validDate(\"03-11-2000\")\n     * true\n     * > validDate(\"15-01-2012\")\n     * false\n     * > validDate(\"04-0-2040\")\n     * false\n     * > validDate(\"06-04-2020\")\n     * true\n     * > validDate(\"01-01-2007\")\n     * true\n     * > validDate(\"03-32-2011\")\n     * false\n     * > validDate(\"\")\n     * false\n     * > validDate(\"04-31-3000\")\n     * false\n     * > validDate(\"06-06-2005\")\n     * true\n     * > validDate(\"21-31-2000\")\n     * false\n     * > validDate(\"04-12-2003\")\n     * true\n     * > validDate(\"04122003\")\n     * false\n     * > validDate(\"20030412\")\n     * false\n     * > validDate(\"2003-04\")\n     * false\n     * > validDate(\"2003-04-12\")\n     * false\n     * > validDate(\"04-2003\")\n     * false\n     */\n    public static Boolean validDate(String date) {\n        if (date.length() != 10) {\n            return false;\n        }\n        String[] dateArr = date.split(\"-\");\n        if (dateArr.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArr[0]);\n        int day = Integer.parseInt(dateArr[1]);\n        int year = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        } else {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "124",
		"test_prompt": "// ValidDateTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ValidDate}.\n* It contains ten unit test cases for the {@link ValidDate#validDate(String)} method.\n*/\nclass ValidDateTest {"
	},
	{
		"original_code": "// SeparateParenGroups.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SeparateParenGroups {\n\n    /**\n     * Input to this function is a string containing multiple groups of nested parentheses.\n     * Your goal is to separate those group into separate strings and return the list of those.\n     * Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n     * Ignore any spaces in the input string.\n     *\n     * > separateParenGroups(\"(()()) ((())) () ((())()())\")\n     * [\"(()())\", \"((()))\", \"()\", \"((())()())\"]\n     * > separateParenGroups(\"() (()) ((())) (((())))\")\n     * [\"()\", \"(())\", \"((()))\", \"(((())))\"]\n     * > separateParenGroups(\"(()(())((())))\")\n     * [\"(()(())((())))\"]\n     * > separateParenGroups(\"( ) (( )) (( )( ))\")\n     * [\"()\", \"(())\", \"(()())\"]\n     */\n    public static List<String> separateParenGroups(String parenString) {\n        List<String> result = new ArrayList<String>();\n        int count = 0;\n        StringBuilder curString = new StringBuilder();\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                curString.append('(');\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                curString.append(')');\n                if (count == 0) {\n                    result.add(curString.toString());\n                    curString = new StringBuilder();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "1",
		"test_prompt": "// SeparateParenGroupsTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SeparateParenGroups}.\n* It contains ten unit test cases for the {@link SeparateParenGroups#separateParenGroups(String)} method.\n*/\nclass SeparateParenGroupsTest {"
	},
	{
		"original_code": "// CircularShift.java\npackage original;\n\nclass CircularShift {\n\n    /**\n     * Circular shift the digits of the integer x, shift the digits right by shift\n     * and return the result as a string.\n     * If shift > number of digits, return digits reversed.\n     *\n     * > circularShift(100, 2)\n     * \"001\"\n     * > circularShift(12, 2)\n     * \"12\"\n     * > circularShift(97, 8)\n     * \"79\"\n     * > circularShift(12, 1)\n     * \"21\"\n     * > circularShift(11, 101)\n     * \"11\"\n     */\n    public static String circularShift(int x, int shift) {\n        String result = \"\";\n        String xString = Integer.toString(x);\n        int xLength = xString.length();\n        if (shift > xLength) {\n            for (int i = xLength - 1; i >= 0; i--) {\n                result += xString.charAt(i);\n            }\n        } else {\n            for (int i = xLength - shift; i < xLength; i++) {\n                result += xString.charAt(i);\n            }\n            for (int i = 0; i < xLength - shift; i++) {\n                result += xString.charAt(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "65",
		"test_prompt": "// CircularShiftTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CircularShift}.\n* It contains ten unit test cases for the {@link CircularShift#circularShift(int, int)} method.\n*/\nclass CircularShiftTest {"
	},
	{
		"original_code": "// CountNums.java\npackage original;\n\nimport java.util.List;\n\nclass CountNums {\n\n    /**\n     * * Write a function count_nums which takes an array of integers and returns\n     * the number of elements which has a sum of digits > 0.\n     * If a number is negative, then its first signed digit will be negative:\n     * e.g. -123 has signed digits -1, 2, and 3.\n     * >>> countNums([]) == 0\n     * >>> countNums([-1, 11, -11]) == 1\n     * >>> countNums([1, 1, 2]) == 3\n     *\n     * > countNums([])\n     * 0\n     * > countNums([-1, -2, 0])\n     * 0\n     * > countNums([1, 1, 2, -2, 3, 4, 5])\n     * 6\n     * > countNums([1, 6, 9, -6, 0, 1, 5])\n     * 5\n     * > countNums([1, 100, 98, -7, 1, -1])\n     * 4\n     * > countNums([12, 23, 34, -45, -56, 0])\n     * 5\n     * > countNums([0, 1])\n     * 1\n     * > countNums([1])\n     * 1\n     */\n    public static int countNums(List<Object> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            int num = (int) arr.get(i);\n            boolean isNegative = num < 0;\n            if (isNegative) {\n                num = -num;\n            }\n            while (num != 0) {\n                if (isNegative && num / 10 == 0) {\n                    sum -= num % 10;\n                } else {\n                    sum += num % 10;\n                }\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
		"id": "108",
		"test_prompt": "// CountNumsTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountNums}.\n* It contains ten unit test cases for the {@link CountNums#countNums(List)} method.\n*/\nclass CountNumsTest {"
	},
	{
		"original_code": "// LargestDivisor.java\npackage original;\n\nclass LargestDivisor {\n\n    /**\n     * For a given number n, find the largest number that divides n evenly, smaller than n\n     *\n     * > largestDivisor(15)\n     * 5\n     * > largestDivisor(3)\n     * 1\n     * > largestDivisor(7)\n     * 1\n     * > largestDivisor(10)\n     * 5\n     * > largestDivisor(100)\n     * 50\n     * > largestDivisor(49)\n     * 7\n     */\n    public static int largestDivisor(int n) {\n        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}\n",
		"id": "24",
		"test_prompt": "// LargestDivisorTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestDivisor}.\n* It contains ten unit test cases for the {@link LargestDivisor#largestDivisor(int)} method.\n*/\nclass LargestDivisorTest {"
	},
	{
		"original_code": "// SortedListSum.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass SortedListSum {\n\n    /**\n     * Write a function that accepts a list of strings as a parameter,\n     * deletes the strings that have odd lengths from it,\n     * and returns the resulted list with a sorted order,\n     * The list is always a list of strings and never an array of numbers,\n     * and it may contain duplicates.\n     * The order of the list should be ascending by length of each word, and you\n     * should return the list sorted by that rule.\n     * If two words have the same length, sort the list alphabetically.\n     * The function should return a list of strings in sorted order.\n     * You may assume that all words will have the same length.\n     * For example:\n     * assert sortedListSum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n     * assert sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n     *\n     * > sortedListSum([\"aa\", \"a\", \"aaa\"])\n     * [\"aa\"]\n     * > sortedListSum([\"school\", \"AI\", \"asdf\", \"b\"])\n     * [\"AI\", \"asdf\", \"school\"]\n     * > sortedListSum([\"d\", \"b\", \"c\", \"a\"])\n     * []\n     * > sortedListSum([\"d\", \"dcba\", \"abcd\", \"a\"])\n     * [\"abcd\", \"dcba\"]\n     * > sortedListSum([\"AI\", \"ai\", \"au\"])\n     * [\"AI\", \"ai\", \"au\"]\n     * > sortedListSum([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\n     * []\n     * > sortedListSum([\"aaaa\", \"bbbb\", \"dd\", \"cc\"])\n     * [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n     */\n    public static List<Object> sortedListSum(List<String> lst) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).length() % 2 == 0) {\n                result.add(lst.get(i));\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1.toString().length() == o2.toString().length()) {\n                    return o1.toString().compareTo(o2.toString());\n                } else {\n                    return o1.toString().length() - o2.toString().length();\n                }\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "149",
		"test_prompt": "// SortedListSumTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortedListSum}.\n* It contains ten unit test cases for the {@link SortedListSum#sortedListSum(List)} method.\n*/\nclass SortedListSumTest {"
	},
	{
		"original_code": "// SmallestChange.java\npackage original;\n\nimport java.util.List;\n\nclass SmallestChange {\n\n    /**\n     * * Given an array arr of integers, find the minimum number of elements that\n     * need to be changed to make the array palindromic. A palindromic array is an array that\n     * is read the same backwards and forwards. In one change, you can change one element to any other element.\n     *\n     * For example:\n     * smallest_change([1,2,3,5,4,7,9,6]) == 4\n     * smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n     * smallest_change([1, 2, 3, 2, 1]) == 0\n     *\n     * > smallestChange([1, 2, 3, 5, 4, 7, 9, 6])\n     * 4\n     * > smallestChange([1, 2, 3, 4, 3, 2, 2])\n     * 1\n     * > smallestChange([1, 4, 2])\n     * 1\n     * > smallestChange([1, 4, 4, 2])\n     * 1\n     * > smallestChange([1, 2, 3, 2, 1])\n     * 0\n     * > smallestChange([3, 1, 1, 3])\n     * 0\n     * > smallestChange([1])\n     * 0\n     * > smallestChange([0, 1])\n     * 1\n     */\n    public static int smallestChange(List<Integer> arr) {\n        int result = 0;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                result++;\n            }\n            i++;\n            j--;\n        }\n        return result;\n    }\n}\n",
		"id": "73",
		"test_prompt": "// SmallestChangeTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SmallestChange}.\n* It contains ten unit test cases for the {@link SmallestChange#smallestChange(List)} method.\n*/\nclass SmallestChangeTest {"
	},
	{
		"original_code": "// SumSquares1.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass SumSquares1 {\n\n    /**\n     * \"\n     * This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n     * multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n     * change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n     *\n     * Examples:\n     * For lst = [1,2,3] the output should be 6\n     * For lst = []  the output should be 0\n     * For lst = [-1,-5,2,-1,-5]  the output should be -126\n     *\n     * > sumSquares([1, 2, 3])\n     * 6\n     * > sumSquares([1, 4, 9])\n     * 14\n     * > sumSquares([])\n     * 0\n     * > sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1])\n     * 9\n     * > sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1])\n     * -3\n     * > sumSquares([0])\n     * 0\n     * > sumSquares([-1, -5, 2, -1, -5])\n     * -126\n     * > sumSquares([-56, -99, 1, 0, -2])\n     * 3030\n     * > sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1])\n     * 0\n     * > sumSquares([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37])\n     * -14196\n     * > sumSquares([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\n     * -1448\n     */\n    public static int sumSquares(List<Object> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i));\n            } else if (i % 4 == 0 && i % 3 != 0) {\n                result.add((int) lst.get(i) * (int) lst.get(i) * (int) lst.get(i));\n            } else {\n                result.add((int) lst.get(i));\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < result.size(); i++) {\n            sum += result.get(i);\n        }\n        return sum;\n    }\n}\n",
		"id": "142",
		"test_prompt": "// SumSquares1Test.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SumSquares1}.\n* It contains ten unit test cases for the {@link SumSquares1#sumSquares(List)} method.\n*/\nclass SumSquares1Test {"
	},
	{
		"original_code": "// HexKey.java\npackage original;\n\nclass HexKey {\n\n    /**\n     * You have been tasked to write a function that receives\n     * a hexadecimal number as a string and counts the number of hexadecimal\n     * digits that are primes (prime number, or a prime, is a natural number\n     * greater than 1 that is not a product of two smaller natural numbers).\n     * Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n     * Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n     * So you have to determine a number of the following digits: 2, 3, 5, 7,\n     * B (=decimal 11), D (=decimal 13).\n     * Note: you may assume the input is always correct or empty string,\n     * and symbols A,B,C,D,E,F are always uppercase.\n     * Examples:\n     * For num = \"AB\" the output should be 1.\n     * For num = \"1077E\" the output should be 2.\n     * For num = \"ABED1A33\" the output should be 4.\n     * For num = \"123456789ABCDEF0\" the output should be 6.\n     * For num = \"2020\" the output should be 2.\n     *\n     * > hexKey(\"AB\")\n     * 1\n     * > hexKey(\"1077E\")\n     * 2\n     * > hexKey(\"ABED1A33\")\n     * 4\n     * > hexKey(\"2020\")\n     * 2\n     * > hexKey(\"123456789ABCDEF0\")\n     * 6\n     * > hexKey(\"112233445566778899AABBCCDDEEFF00\")\n     * 12\n     * > hexKey([])\n     * 0\n     */\n    public static int hexKey(Object num) {\n        int result = 0;\n        String hex = num.toString();\n        for (int i = 0; i < hex.length(); i++) {\n            char c = hex.charAt(i);\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "78",
		"test_prompt": "// HexKeyTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HexKey}.\n* It contains ten unit test cases for the {@link HexKey#hexKey(Object)} method.\n*/\nclass HexKeyTest {"
	},
	{
		"original_code": "// Multiply.java\npackage original;\n\nclass Multiply {\n\n    /**\n     * Complete the function that takes two integers and returns\n     * the product of their unit digits.\n     * Assume the input is always valid.\n     * Examples:\n     * multiply(148, 412) should return 16.\n     * multiply(19, 28) should return 72.\n     * multiply(2020, 1851) should return 0.\n     * multiply(14,-15) should return 20.\n     *\n     * > multiply(148, 412)\n     * 16\n     * > multiply(19, 28)\n     * 72\n     * > multiply(2020, 1851)\n     * 0\n     * > multiply(14, -15)\n     * 20\n     * > multiply(76, 67)\n     * 42\n     * > multiply(17, 27)\n     * 49\n     * > multiply(0, 1)\n     * 0\n     * > multiply(0, 0)\n     * 0\n     */\n    public static int multiply(int a, int b) {\n        if (a < 0)\n            a = -a;\n        if (b < 0)\n            b = -b;\n        return (a % 10) * (b % 10);\n    }\n}\n",
		"id": "97",
		"test_prompt": "// MultiplyTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Multiply}.\n* It contains ten unit test cases for the {@link Multiply#multiply(int, int)} method.\n*/\nclass MultiplyTest {"
	},
	{
		"original_code": "// MaxFill.java\npackage original;\n\nimport java.util.List;\n\nclass MaxFill {\n\n    /**\n     * * You are given a rectangular grid of wells. Each row represents a single well,\n     * and each 1 in a row represents a single unit of water.\n     * Each well has a corresponding bucket that can be used to extract water from it,\n     * and all buckets have the same capacity.\n     * Your task is to use the buckets to empty the wells.\n     * Output the number of times you need to lower the buckets.\n     *\n     * Example 1:\n     * Input:\n     * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n     * bucket_capacity : 1\n     * Output: 6\n     *\n     * Example 2:\n     * Input:\n     * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n     * bucket_capacity : 2\n     * Output: 5\n     *\n     * Example 3:\n     * Input:\n     * grid : [[0,0,0], [0,0,0]]\n     * bucket_capacity : 5\n     * Output: 0\n     *\n     * Constraints:\n     * * all wells have the same length\n     * * 1 <= grid.length <= 10^2\n     * * 1 <= grid[:,1].length <= 10^2\n     * * grid[i][j] -> 0 | 1\n     * * 1 <= capacity <= 10\n     *\n     * > maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n     * 6\n     * > maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n     * 5\n     * > maxFill([[0, 0, 0], [0, 0, 0]], 5)\n     * 0\n     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 2)\n     * 4\n     * > maxFill([[1, 1, 1, 1], [1, 1, 1, 1]], 9)\n     * 2\n     */\n    public static int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (List<Integer> arr : grid) {\n            int sumArr = 0;\n            for (Integer i : arr) {\n                sumArr += i;\n            }\n            sum += Math.ceil((double) sumArr / capacity);\n        }\n        return sum;\n    }\n}\n",
		"id": "115",
		"test_prompt": "// MaxFillTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxFill}.\n* It contains ten unit test cases for the {@link MaxFill#maxFill(List, int)} method.\n*/\nclass MaxFillTest {"
	},
	{
		"original_code": "// RoundedAvg.java\npackage original;\n\nclass RoundedAvg {\n\n    /**\n     * You are given two positive integers n and m, and your task is to compute the\n     * average of the integers from n through m (including n and m).\n     * Round the answer to the nearest integer and convert that to binary.\n     * If n is greater than m, return -1.\n     * Example:\n     * roundedAvg(1, 5) => \"0b11\"\n     * roundedAvg(7, 5) => -1\n     * roundedAvg(10, 20) => \"0b1111\"\n     * roundedAvg(20, 33) => \"0b11010\"\n     *\n     * > roundedAvg(1, 5)\n     * \"0b11\"\n     * > roundedAvg(7, 13)\n     * \"0b1010\"\n     * > roundedAvg(964, 977)\n     * \"0b1111001010\"\n     * > roundedAvg(996, 997)\n     * \"0b1111100100\"\n     * > roundedAvg(560, 851)\n     * \"0b1011000010\"\n     * > roundedAvg(185, 546)\n     * \"0b101101110\"\n     * > roundedAvg(362, 496)\n     * \"0b110101101\"\n     * > roundedAvg(350, 902)\n     * \"0b1001110010\"\n     * > roundedAvg(197, 233)\n     * \"0b11010111\"\n     * > roundedAvg(7, 5)\n     * -1\n     * > roundedAvg(5, 1)\n     * -1\n     * > roundedAvg(5, 5)\n     * \"0b101\"\n     */\n    public static Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        for (int i = n; i <= m; i++) {\n            sum += i;\n        }\n        double avg = (sum * 1.0) / (m - n + 1);\n        int roundedAvg = (int) Math.rint(avg);\n        return \"0b\" + Integer.toBinaryString(roundedAvg);\n    }\n}\n",
		"id": "103",
		"test_prompt": "// RoundedAvgTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RoundedAvg}.\n* It contains ten unit test cases for the {@link RoundedAvg#roundedAvg(int, int)} method.\n*/\nclass RoundedAvgTest {"
	},
	{
		"original_code": "// PrimeFib.java\npackage original;\n\nclass PrimeFib {\n\n    /**\n     * Returns n-th number that is a Fibonacci number and it's also prime.\n     *\n     * > primeFib(1)\n     * 2\n     * > primeFib(2)\n     * 3\n     * > primeFib(3)\n     * 5\n     * > primeFib(4)\n     * 13\n     * > primeFib(5)\n     * 89\n     * > primeFib(1)\n     * 2\n     * > primeFib(2)\n     * 3\n     * > primeFib(3)\n     * 5\n     * > primeFib(4)\n     * 13\n     * > primeFib(5)\n     * 89\n     * > primeFib(6)\n     * 233\n     * > primeFib(7)\n     * 1597\n     * > primeFib(8)\n     * 28657\n     * > primeFib(9)\n     * 514229\n     * > primeFib(10)\n     * 433494437\n     */\n    public static int primeFib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int count = 0;\n        while (count < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            if (isPrime(c)) {\n                count++;\n            }\n        }\n        return c;\n    }\n\n    private static Boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "39",
		"test_prompt": "// PrimeFibTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PrimeFib}.\n* It contains ten unit test cases for the {@link PrimeFib#primeFib(int)} method.\n*/\nclass PrimeFibTest {"
	},
	{
		"original_code": "// CycpatternCheck.java\npackage original;\n\nclass CycpatternCheck {\n\n    /**\n     * You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n     * cycpatternCheck(\"abcd\",\"abd\") => False\n     * cycpatternCheck(\"hello\",\"ell\") => True\n     * cycpatternCheck(\"whassup\",\"psus\") => False\n     * cycpatternCheck(\"abab\",\"baa\") => True\n     * cycpatternCheck(\"efef\",\"eeff\") => False\n     * cycpatternCheck(\"himenss\",\"simen\") => True\n     *\n     * > cycpatternCheck(\"xyzw\", \"xyw\")\n     * false\n     * > cycpatternCheck(\"yello\", \"ell\")\n     * true\n     * > cycpatternCheck(\"whattup\", \"ptut\")\n     * false\n     * > cycpatternCheck(\"efef\", \"fee\")\n     * true\n     * > cycpatternCheck(\"abab\", \"aabb\")\n     * false\n     * > cycpatternCheck(\"winemtt\", \"tinem\")\n     * true\n     */\n    public static Boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i < a.length() - l + 1; i++) {\n            for (int j = 0; j < l + 1; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "154",
		"test_prompt": "// CycpatternCheckTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CycpatternCheck}.\n* It contains ten unit test cases for the {@link CycpatternCheck#cycpatternCheck(String, String)} method.\n*/\nclass CycpatternCheckTest {"
	},
	{
		"original_code": "// NumericalLetterGrade.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass NumericalLetterGrade {\n\n    /**\n     * It is the last week of the semester and the teacher has to give the grades\n     * to students. The teacher has been making her own algorithm for grading.\n     * The only problem is, she has lost the code she used for grading.\n     * She has given you a list of GPAs for some students and you have to write\n     * a function that can output a list of letter grades using the following table:\n     * GPA       |    Letter grade\n     * 4.0                A+\n     * > 3.7                A\n     * > 3.3                A-\n     * > 3.0                B+\n     * > 2.7                B\n     * > 2.3                B-\n     * > 2.0                C+\n     * > 1.7                C\n     * > 1.3                C-\n     * > 1.0                D+\n     * > 0.7                D\n     * > 0.0                D-\n     * 0.0                E\n     *\n     * Example:\n     * numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n     *\n     * > numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])\n     * [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     * > numericalLetterGrade([1.2])\n     * [\"D+\"]\n     * > numericalLetterGrade([0.5])\n     * [\"D-\"]\n     * > numericalLetterGrade([0.0])\n     * [\"E\"]\n     * > numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])\n     * [\"D\", \"D-\", \"C-\", \"B\", \"B+\"]\n     * > numericalLetterGrade([0, 0.7])\n     * [\"E\", \"D-\"]\n     */\n    public static List<String> numericalLetterGrade(List<Number> grades) {\n        List<String> result = new ArrayList<String>();\n        for (Number grade : grades) {\n            if (grade.doubleValue() >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade.doubleValue() > 3.7) {\n                result.add(\"A\");\n            } else if (grade.doubleValue() > 3.3) {\n                result.add(\"A-\");\n            } else if (grade.doubleValue() > 3.0) {\n                result.add(\"B+\");\n            } else if (grade.doubleValue() > 2.7) {\n                result.add(\"B\");\n            } else if (grade.doubleValue() > 2.3) {\n                result.add(\"B-\");\n            } else if (grade.doubleValue() > 2.0) {\n                result.add(\"C+\");\n            } else if (grade.doubleValue() > 1.7) {\n                result.add(\"C\");\n            } else if (grade.doubleValue() > 1.3) {\n                result.add(\"C-\");\n            } else if (grade.doubleValue() > 1.0) {\n                result.add(\"D+\");\n            } else if (grade.doubleValue() > 0.7) {\n                result.add(\"D\");\n            } else if (grade.doubleValue() > 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "81",
		"test_prompt": "// NumericalLetterGradeTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NumericalLetterGrade}.\n* It contains ten unit test cases for the {@link NumericalLetterGrade#numericalLetterGrade(List)} method.\n*/\nclass NumericalLetterGradeTest {"
	},
	{
		"original_code": "// StringSequence.java\npackage original;\n\nclass StringSequence {\n\n    /**\n     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n     *\n     * > stringSequence(0)\n     * \"0\"\n     * > stringSequence(5)\n     * \"0 1 2 3 4 5\"\n     * > stringSequence(0)\n     * \"0\"\n     * > stringSequence(3)\n     * \"0 1 2 3\"\n     * > stringSequence(10)\n     * \"0 1 2 3 4 5 6 7 8 9 10\"\n     */\n    public static String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += i + \" \";\n        }\n        return result.trim();\n    }\n}\n",
		"id": "15",
		"test_prompt": "// StringSequenceTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringSequence}.\n* It contains ten unit test cases for the {@link StringSequence#stringSequence(int)} method.\n*/\nclass StringSequenceTest {"
	},
	{
		"original_code": "// IncrList.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass IncrList {\n\n    /**\n     * Return list with elements incremented by 1.\n     *\n     * > incrList([1, 2, 3])\n     * [2, 3, 4]\n     * > incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     * > incrList([])\n     * []\n     * > incrList([3, 2, 1])\n     * [4, 3, 2]\n     * > incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])\n     * [6, 3, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public static List<Object> incrList(List<Object> l) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "42",
		"test_prompt": "// IncrListTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IncrList}.\n* It contains ten unit test cases for the {@link IncrList#incrList(List)} method.\n*/\nclass IncrListTest {"
	},
	{
		"original_code": "// SameChars.java\npackage original;\n\nclass SameChars {\n\n    /**\n     * Check if two words have the same characters.\n     *\n     * > sameChars(\"abcd\", \"dddddddabce\")\n     * false\n     * > sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n     * true\n     * > sameChars(\"abcd\", \"dddddddabc\")\n     * true\n     * > sameChars(\"dddddddabc\", \"abcd\")\n     * true\n     * > sameChars(\"eabcd\", \"dddddddabc\")\n     * false\n     * > sameChars(\"abcd\", \"dddddddabcf\")\n     * false\n     * > sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n     * false\n     * > sameChars(\"aabb\", \"aaccc\")\n     * false\n     */\n    public static Boolean sameChars(String s0, String s1) {\n        int[] count0 = new int[26];\n        int[] count1 = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            count0[s0.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            count1[s1.charAt(i) - 'a'] = 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count0[i] != count1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "54",
		"test_prompt": "// SameCharsTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SameChars}.\n* It contains ten unit test cases for the {@link SameChars#sameChars(String, String)} method.\n*/\nclass SameCharsTest {"
	},
	{
		"original_code": "// SpecialFactorial.java\npackage original;\n\nclass SpecialFactorial {\n\n    /**\n     * The Brazilian factorial is defined as:\n     * brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n     * where n > 0\n     *\n     * For example:\n     * >>> specialFactorial(4)\n     * 288\n     *\n     * The function will receive an integer as input and should return the special\n     * factorial of this integer.\n     *\n     * > specialFactorial(4)\n     * 288\n     * > specialFactorial(5)\n     * 34560\n     * > specialFactorial(7)\n     * 125411328000L\n     * > specialFactorial(1)\n     * 1\n     */\n    public static long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= factorial(i);\n        }\n        return res;\n    }\n\n    private static long factorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n}\n",
		"id": "139",
		"test_prompt": "// SpecialFactorialTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SpecialFactorial}.\n* It contains ten unit test cases for the {@link SpecialFactorial#specialFactorial(int)} method.\n*/\nclass SpecialFactorialTest {"
	},
	{
		"original_code": "// TotalMatch.java\npackage original;\n\nimport java.util.List;\n\nclass TotalMatch {\n\n    /**\n     * * Write a function that accepts two lists of strings and returns the list that has\n     * total number of chars in the all strings of the list less than the other list.\n     *\n     * if the two lists have the same number of chars, return the first list.\n     *\n     * Examples\n     * total_match([], []) ➞ []\n     * total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n     * total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n     * total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n     * total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n     *\n     * > totalMatch([], [])\n     * []\n     * > totalMatch([\"hi\", \"admin\"], [\"hi\", \"hi\"])\n     * [\"hi\", \"hi\"]\n     * > totalMatch([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n     * [\"hi\", \"admin\"]\n     * > totalMatch([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n     * [\"4\"]\n     * > totalMatch([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n     * [\"hI\", \"Hi\"]\n     * > totalMatch([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n     * [\"hI\", \"hi\", \"hi\"]\n     * > totalMatch([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"])\n     * [\"hi\", \"admin\"]\n     * > totalMatch([], [\"this\"])\n     * []\n     * > totalMatch([\"this\"], [])\n     * []\n     */\n    public static List<Object> totalMatch(List<Object> lst1, List<Object> lst2) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (Object value : lst1) {\n            if (value instanceof String) {\n                sum1 += ((String) value).length();\n            }\n        }\n        for (Object value : lst2) {\n            if (value instanceof String) {\n                sum2 += ((String) value).length();\n            }\n        }\n        if (sum1 <= sum2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}\n",
		"id": "74",
		"test_prompt": "// TotalMatchTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TotalMatch}.\n* It contains ten unit test cases for the {@link TotalMatch#totalMatch(List, List)} method.\n*/\nclass TotalMatchTest {"
	},
	{
		"original_code": "// Strlen.java\npackage original;\n\nclass Strlen {\n\n    /**\n     * Return length of given string\n     *\n     * > strlen(\"\")\n     * 0\n     * > strlen(\"abc\")\n     * 3\n     * > strlen(\"\")\n     * 0\n     * > strlen(\"x\")\n     * 1\n     * > strlen(\"asdasnakj\")\n     * 9\n     */\n    public static int strlen(String string) {\n        return string.length();\n    }\n}\n",
		"id": "23",
		"test_prompt": "// StrlenTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Strlen}.\n* It contains ten unit test cases for the {@link Strlen#strlen(String)} method.\n*/\nclass StrlenTest {"
	},
	{
		"original_code": "// MatchParens.java\npackage original;\n\nimport java.util.List;\n\nclass MatchParens {\n\n    /**\n     * * You are given a list of two strings, both strings consist of open\n     * parentheses '(' or close parentheses ')' only.\n     * Your job is to check if it is possible to concatenate the two strings in\n     * some order, that the resulting string will be good.\n     * A string S is considered to be good if and only if all parentheses in S\n     * are balanced. For example: the string '(())()' is good, while the string\n     * '())' is not.\n     * Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n     *\n     * Examples:\n     * matchParens(['()(', ')']) == 'Yes'\n     * matchParens([')', ')']) == 'No'\n     *\n     * > matchParens([\"()(\", \")\"])\n     * \"Yes\"\n     * > matchParens([\")\", \")\"])\n     * \"No\"\n     * > matchParens([\"(()(())\", \"())())\"])\n     * \"No\"\n     * > matchParens([\")())\", \"(()()(\"])\n     * \"Yes\"\n     * > matchParens([\"(())))\", \"(()())((\"])\n     * \"Yes\"\n     * > matchParens([\"()\", \"())\"])\n     * \"No\"\n     * > matchParens([\"(()(\", \"()))()\"])\n     * \"Yes\"\n     * > matchParens([\"((((\", \"((())\"])\n     * \"No\"\n     * > matchParens([\")(()\", \"(()(\"])\n     * \"No\"\n     * > matchParens([\")(\", \")(\"])\n     * \"No\"\n     * > matchParens([\"(\", \")\"])\n     * \"Yes\"\n     * > matchParens([\")\", \"(\"])\n     * \"Yes\"\n     */\n    public static String matchParens(List<String> lst) {\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        String s1s2 = s1 + s2;\n        String s2s1 = s2 + s1;\n        int count = 0;\n        boolean flag = true;\n        for (int i = 0; i < s1s2.length(); i++) {\n            if (s1s2.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                flag = false;\n            }\n        }\n        if (flag && count == 0) {\n            return \"Yes\";\n        }\n        count = 0;\n        for (int i = 0; i < s2s1.length(); i++) {\n            if (s2s1.charAt(i) == '(') {\n                count++;\n            } else {\n                count--;\n            }\n            if (count < 0) {\n                return \"No\";\n            }\n        }\n        if (count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
		"id": "119",
		"test_prompt": "// MatchParensTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MatchParens}.\n* It contains ten unit test cases for the {@link MatchParens#matchParens(List)} method.\n*/\nclass MatchParensTest {"
	},
	{
		"original_code": "// MaxElement.java\npackage original;\n\nimport java.util.List;\n\nclass MaxElement {\n\n    /**\n     * Return the maximum element in the list.\n     *\n     * > maxElement([1, 2, 3])\n     * 3\n     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n     * 123\n     * > maxElement([1, 2, 3])\n     * 3\n     * > maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10])\n     * 124\n     */\n    public static int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (Integer i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "35",
		"test_prompt": "// MaxElementTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MaxElement}.\n* It contains ten unit test cases for the {@link MaxElement#maxElement(List)} method.\n*/\nclass MaxElementTest {"
	},
	{
		"original_code": "// Derivative.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Derivative {\n\n    /**\n     * xs represent coefficients of a polynomial.\n     * xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     * Return derivative of this polynomial in the same form.\n     *\n     * > derivative([3, 1, 2, 4, 5])\n     * [1, 4, 12, 20]\n     * > derivative([1, 2, 3])\n     * [2, 6]\n     * > derivative([3, 2, 1])\n     * [2, 2]\n     * > derivative([3, 2, 1, 0, 4])\n     * [2, 2, 0, 16]\n     * > derivative([1])\n     * []\n     */\n    public static List<Object> derivative(List<Integer> xs) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) * i);\n        }\n        return result;\n    }\n}\n",
		"id": "62",
		"test_prompt": "// DerivativeTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Derivative}.\n* It contains ten unit test cases for the {@link Derivative#derivative(List)} method.\n*/\nclass DerivativeTest {"
	},
	{
		"original_code": "// ParseNestedParens.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass ParseNestedParens {\n\n    /**\n     * Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n     * For each of the group, output the deepest level of nesting of parentheses.\n     * E.g. (()()) has maximum two levels of nesting while ((())) has three.\n     *\n     * > parseNestedParens(\"(()()) ((())) () ((())()())\")\n     * [2, 3, 1, 3]\n     * > parseNestedParens(\"() (()) ((())) (((())))\")\n     * [1, 2, 3, 4]\n     * > parseNestedParens(\"(()(())((())))\")\n     * [4]\n     */\n    public static List<Integer> parseNestedParens(String parenString) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        int maximum_depth = 0;\n        for (int i = 0; i < parenString.length(); i++) {\n            if (parenString.charAt(i) == '(') {\n                count++;\n                maximum_depth = Math.max(maximum_depth, count);\n            } else if (parenString.charAt(i) == ')') {\n                count--;\n                if (count == 0) {\n                    result.add(maximum_depth);\n                    maximum_depth = 0;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "6",
		"test_prompt": "// ParseNestedParensTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParseNestedParens}.\n* It contains ten unit test cases for the {@link ParseNestedParens#parseNestedParens(String)} method.\n*/\nclass ParseNestedParensTest {"
	},
	{
		"original_code": "// FindMax.java\npackage original;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nclass FindMax {\n\n    /**\n     * Write a function that accepts a list of strings.\n     * The list contains different words. Return the word with maximum number\n     * of unique characters. If multiple strings have maximum number of unique\n     * characters, return the one which comes first in lexicographical order.\n     *\n     * findMax([\"name\", \"of\", \"string\"]) == \"string\"\n     * findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n     * findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     *\n     * > findMax([\"name\", \"of\", \"string\"])\n     * \"string\"\n     * > findMax([\"name\", \"enam\", \"game\"])\n     * \"enam\"\n     * > findMax([\"aaaaaaa\", \"bb\", \"cc\"])\n     * \"aaaaaaa\"\n     * > findMax([\"abc\", \"cba\"])\n     * \"abc\"\n     * > findMax([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\n     * \"footbott\"\n     * > findMax([\"we\", \"are\", \"gonna\", \"rock\"])\n     * \"gonna\"\n     * > findMax([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\n     * \"nation\"\n     * > findMax([\"this\", \"is\", \"a\", \"prrk\"])\n     * \"this\"\n     * > findMax([\"b\"])\n     * \"b\"\n     * > findMax([\"play\", \"play\", \"play\"])\n     * \"play\"\n     */\n    public static String findMax(List<String> words) {\n        if (words == null || words.size() == 0) {\n            return null;\n        }\n        String maxWord = words.get(0);\n        int maxUnique = 0;\n        for (String word : words) {\n            Set<Character> seen = new HashSet<>();\n            for (int i = 0; i < word.length(); i++) {\n                seen.add(word.charAt(i));\n            }\n            if (seen.size() > maxUnique) {\n                maxWord = word;\n                maxUnique = seen.size();\n            } else if (seen.size() == maxUnique && word.compareTo(maxWord) < 0) {\n                maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n}\n",
		"id": "158",
		"test_prompt": "// FindMaxTest.java\npackage original;\n\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FindMax}.\n* It contains ten unit test cases for the {@link FindMax#findMax(List)} method.\n*/\nclass FindMaxTest {"
	},
	{
		"original_code": "// SortNumbers.java\npackage original;\n\nimport java.util.Arrays;\n\nclass SortNumbers {\n\n    /**\n     * Input is a space-delimited string of numbers from 'zero' to 'nine'.\n     * Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n     * Return the string with numbers sorted from smallest to largest\n     *\n     * > sortNumbers(\"three one five\")\n     * \"one three five\"\n     * > sortNumbers(\"\")\n     * \"\"\n     * > sortNumbers(\"three\")\n     * \"three\"\n     * > sortNumbers(\"three five nine\")\n     * \"three five nine\"\n     * > sortNumbers(\"five zero four seven nine eight\")\n     * \"zero four five seven eight nine\"\n     * > sortNumbers(\"six five four three two one zero\")\n     * \"zero one two three four five six\"\n     */\n    public static String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        int[] numbersInt = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            if (numbersArray[i].equals(\"zero\")) {\n                numbersInt[i] = 0;\n            } else if (numbersArray[i].equals(\"one\")) {\n                numbersInt[i] = 1;\n            } else if (numbersArray[i].equals(\"two\")) {\n                numbersInt[i] = 2;\n            } else if (numbersArray[i].equals(\"three\")) {\n                numbersInt[i] = 3;\n            } else if (numbersArray[i].equals(\"four\")) {\n                numbersInt[i] = 4;\n            } else if (numbersArray[i].equals(\"five\")) {\n                numbersInt[i] = 5;\n            } else if (numbersArray[i].equals(\"six\")) {\n                numbersInt[i] = 6;\n            } else if (numbersArray[i].equals(\"seven\")) {\n                numbersInt[i] = 7;\n            } else if (numbersArray[i].equals(\"eight\")) {\n                numbersInt[i] = 8;\n            } else if (numbersArray[i].equals(\"nine\")) {\n                numbersInt[i] = 9;\n            } else {\n                numbersInt[i] = -1;\n            }\n        }\n        Arrays.sort(numbersInt);\n        String result = \"\";\n        for (int i = 0; i < numbersInt.length; i++) {\n            if (numbersInt[i] == 0) {\n                result += \"zero \";\n            } else if (numbersInt[i] == 1) {\n                result += \"one \";\n            } else if (numbersInt[i] == 2) {\n                result += \"two \";\n            } else if (numbersInt[i] == 3) {\n                result += \"three \";\n            } else if (numbersInt[i] == 4) {\n                result += \"four \";\n            } else if (numbersInt[i] == 5) {\n                result += \"five \";\n            } else if (numbersInt[i] == 6) {\n                result += \"six \";\n            } else if (numbersInt[i] == 7) {\n                result += \"seven \";\n            } else if (numbersInt[i] == 8) {\n                result += \"eight \";\n            } else if (numbersInt[i] == 9) {\n                result += \"nine \";\n            }\n        }\n        return result.trim();\n    }\n}\n",
		"id": "19",
		"test_prompt": "// SortNumbersTest.java\npackage original;\n\nimport java.util.Arrays;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SortNumbers}.\n* It contains ten unit test cases for the {@link SortNumbers#sortNumbers(String)} method.\n*/\nclass SortNumbersTest {"
	},
	{
		"original_code": "// GetOddCollatz.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nclass GetOddCollatz {\n\n    /**\n     * * Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n     *\n     * The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n     * as follows: start with any positive integer n. Then each term is obtained from the\n     * previous term as follows: if the previous term is even, the next term is one half of\n     * the previous term. If the previous term is odd, the next term is 3 times the previous\n     * term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n     *\n     * Note:\n     * 1. Collatz(1) is [1].\n     * 2. returned list sorted in increasing order.\n     *\n     * For example:\n     * getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\n     * > getOddCollatz(14)\n     * [1, 5, 7, 11, 13, 17]\n     * > getOddCollatz(5)\n     * [1, 5]\n     * > getOddCollatz(12)\n     * [1, 3, 5]\n     * > getOddCollatz(1)\n     * [1]\n     */\n    public static List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 1) {\n                result.add(n);\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n        }\n        result.add(1);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "123",
		"test_prompt": "// GetOddCollatzTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetOddCollatz}.\n* It contains ten unit test cases for the {@link GetOddCollatz#getOddCollatz(int)} method.\n*/\nclass GetOddCollatzTest {"
	},
	{
		"original_code": "// Common.java\npackage original;\n\nimport java.util.*;\n\nclass Common {\n\n    /**\n     * Return sorted unique common elements for two lists.\n     *\n     * > common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n     * [1, 5, 653]\n     * > common([5, 3, 2, 8], [3, 2])\n     * [2, 3]\n     * > common([4, 3, 2, 8], [3, 2, 4])\n     * [2, 3, 4]\n     * > common([4, 3, 2, 8], [])\n     * []\n     */\n    public static List<Object> common(List<Integer> l1, List<Object> l2) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer value : l1) {\n            set.add(value);\n        }\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : l2) {\n            if (value instanceof Integer) {\n                int i = (Integer) value;\n                if (set.contains(i) && !result.contains(i)) {\n                    result.add(i);\n                }\n            }\n        }\n        Collections.sort(result, new Comparator<Object>() {\n\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer && o2 instanceof Integer) {\n                    return (Integer) o1 - (Integer) o2;\n                }\n                return 0;\n            }\n        });\n        return result;\n    }\n}\n",
		"id": "58",
		"test_prompt": "// CommonTest.java\npackage original;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Common}.\n* It contains ten unit test cases for the {@link Common#common(List, List)} method.\n*/\nclass CommonTest {"
	},
	{
		"original_code": "// StringToMd5.java\npackage original;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\nclass StringToMd5 {\n\n    /**\n     * Given a string 'text', return its md5 hash equivalent string.\n     * If 'text' is an empty string, return null.\n     *\n     * >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n     *\n     * > stringToMd5(\"Hello world\")\n     * \"3e25960a79dbc69b674cd4ec67a72c62\"\n     * > stringToMd5(\"\")\n     * null\n     * > stringToMd5(\"A B C\")\n     * \"0ef78513b0cb8cef12743f5aeb35f888\"\n     * > stringToMd5(\"password\")\n     * \"5f4dcc3b5aa765d61d8327deb882cf99\"\n     */\n    public static String stringToMd5(String text) {\n        if (text.equals(\"\")) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(text.getBytes());\n            BigInteger number = new BigInteger(1, messageDigest);\n            String hashText = number.toString(16);\n            while (hashText.length() < 32) {\n                hashText = \"0\" + hashText;\n            }\n            return hashText;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n",
		"id": "162",
		"test_prompt": "// StringToMd5Test.java\npackage original;\n\nimport java.math.BigInteger;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StringToMd5}.\n* It contains ten unit test cases for the {@link StringToMd5#stringToMd5(String)} method.\n*/\nclass StringToMd5Test {"
	},
	{
		"original_code": "// CanArrange.java\npackage original;\n\nimport java.util.List;\n\nclass CanArrange {\n\n    /**\n     * Create a function which returns the largest index of an element which\n     * is not greater than or equal to the element immediately preceding it. If\n     * no such element exists then return -1. The given array will not contain\n     * duplicate values.\n     *\n     * Examples:\n     * canArrange([1,2,4,3,5]) = 3\n     * canArrange([1,2,3]) = -1\n     *\n     * > canArrange([1, 2, 4, 3, 5])\n     * 3\n     * > canArrange([1, 2, 4, 5])\n     * -1\n     * > canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10])\n     * 2\n     * > canArrange([4, 8, 5, 7, 3])\n     * 4\n     * > canArrange([])\n     * -1\n     */\n    public static int canArrange(List<Object> arr) {\n        int max = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) instanceof Integer) {\n                if (i > 0 && (int) arr.get(i) < (int) arr.get(i - 1)) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "135",
		"test_prompt": "// CanArrangeTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CanArrange}.\n* It contains ten unit test cases for the {@link CanArrange#canArrange(List)} method.\n*/\nclass CanArrangeTest {"
	},
	{
		"original_code": "// CheckIfLastCharIsALetter.java\npackage original;\n\nclass CheckIfLastCharIsALetter {\n\n    /**\n     * * Create a function that returns True if the last character\n     * of a given string is an alphabetical character and is not\n     * a part of a word, and False otherwise.\n     * Note: \"word\" is a group of characters separated by space.\n     *\n     * Examples:\n     * checkIfLastCharIsALetter(\"apple pie\") ➞ False\n     * checkIfLastCharIsALetter(\"apple pi e\") ➞ True\n     * checkIfLastCharIsALetter(\"apple pi e \") ➞ False\n     * checkIfLastCharIsALetter(\"\") ➞ False\n     *\n     * > checkIfLastCharIsALetter(\"apple\")\n     * false\n     * > checkIfLastCharIsALetter(\"apple pi e\")\n     * true\n     * > checkIfLastCharIsALetter(\"eeeee\")\n     * false\n     * > checkIfLastCharIsALetter(\"A\")\n     * true\n     * > checkIfLastCharIsALetter(\"Pumpkin pie \")\n     * false\n     * > checkIfLastCharIsALetter(\"Pumpkin pie 1\")\n     * false\n     * > checkIfLastCharIsALetter(\"\")\n     * false\n     * > checkIfLastCharIsALetter(\"eeeee e \")\n     * false\n     * > checkIfLastCharIsALetter(\"apple pie\")\n     * false\n     * > checkIfLastCharIsALetter(\"apple pi e \")\n     * false\n     */\n    public static Boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            if (txt.length() == 1) {\n                return true;\n            }\n            char secondLastChar = txt.charAt(txt.length() - 2);\n            if (Character.isLetter(secondLastChar)) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n",
		"id": "134",
		"test_prompt": "// CheckIfLastCharIsALetterTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CheckIfLastCharIsALetter}.\n* It contains ten unit test cases for the {@link CheckIfLastCharIsALetter#checkIfLastCharIsALetter(String)} method.\n*/\nclass CheckIfLastCharIsALetterTest {"
	},
	{
		"original_code": "// GenerateIntegers.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass GenerateIntegers {\n\n    /**\n     * Given two positive integers a and b, return the even digits between a\n     * and b, in ascending order.\n     *\n     * For example:\n     * generateIntegers(2, 8) => [2, 4, 6, 8]\n     * generateIntegers(8, 2) => [2, 4, 6, 8]\n     * generateIntegers(10, 14) => []\n     *\n     * > generateIntegers(2, 10)\n     * [2, 4, 6, 8]\n     * > generateIntegers(10, 2)\n     * [2, 4, 6, 8]\n     * > generateIntegers(132, 2)\n     * [2, 4, 6, 8]\n     * > generateIntegers(17, 89)\n     * []\n     */\n    public static List<Object> generateIntegers(int a, int b) {\n        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n        List<Object> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "163",
		"test_prompt": "// GenerateIntegersTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GenerateIntegers}.\n* It contains ten unit test cases for the {@link GenerateIntegers#generateIntegers(int, int)} method.\n*/\nclass GenerateIntegersTest {"
	},
	{
		"original_code": "// LargestPrimeFactor.java\npackage original;\n\nclass LargestPrimeFactor {\n\n    /**\n     * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n     *\n     * > largestPrimeFactor(2048)\n     * 2\n     * > largestPrimeFactor(15)\n     * 5\n     * > largestPrimeFactor(27)\n     * 3\n     * > largestPrimeFactor(63)\n     * 7\n     * > largestPrimeFactor(330)\n     * 11\n     * > largestPrimeFactor(13195)\n     * 29\n     */\n    public static int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                n /= i;\n                i--;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "59",
		"test_prompt": "// LargestPrimeFactorTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LargestPrimeFactor}.\n* It contains ten unit test cases for the {@link LargestPrimeFactor#largestPrimeFactor(int)} method.\n*/\nclass LargestPrimeFactorTest {"
	},
	{
		"original_code": "// AddElements.java\npackage original;\n\nimport java.util.List;\n\nclass AddElements {\n\n    /**\n     * * Given a non-empty array of integers arr and an integer k, return\n     * the sum of the elements with at most two digits from the first k elements of arr.\n     *\n     * Example:\n     *\n     * Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n     * Output: 24 # sum of 21 + 3\n     *\n     * Constraints:\n     * 1. 1 <= len(arr) <= 100\n     * 2. 1 <= k <= len(arr)\n     *\n     * > addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3)\n     * -4\n     * > addElements([111, 121, 3, 4000, 5, 6], 2)\n     * 0\n     * > addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\n     * 125\n     * > addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n     * 24\n     * > addElements([1], 1)\n     * 1\n     */\n    public static int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) < 100) {\n                sum += arr.get(i);\n            }\n        }\n        return sum;\n    }\n}\n",
		"id": "122",
		"test_prompt": "// AddElementsTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AddElements}.\n* It contains ten unit test cases for the {@link AddElements#addElements(List, int)} method.\n*/\nclass AddElementsTest {"
	},
	{
		"original_code": "// HowManyTimes.java\npackage original;\n\nclass HowManyTimes {\n\n    /**\n     * Find how many times a given substring can be found in the original string. Count overlapping cases.\n     *\n     * > howManyTimes(\"\", \"a\")\n     * 0\n     * > howManyTimes(\"aaa\", \"a\")\n     * 3\n     * > howManyTimes(\"aaaa\", \"aa\")\n     * 3\n     * > howManyTimes(\"\", \"x\")\n     * 0\n     * > howManyTimes(\"xyxyxyx\", \"x\")\n     * 4\n     * > howManyTimes(\"cacacacac\", \"cac\")\n     * 4\n     * > howManyTimes(\"john doe\", \"john\")\n     * 1\n     */\n    public static int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index < string.length()) {\n            index = string.indexOf(substring, index);\n            if (index == -1) {\n                break;\n            }\n            count++;\n            index++;\n        }\n        return count;\n    }\n}\n",
		"id": "18",
		"test_prompt": "// HowManyTimesTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HowManyTimes}.\n* It contains ten unit test cases for the {@link HowManyTimes#howManyTimes(String, String)} method.\n*/\nclass HowManyTimesTest {"
	},
	{
		"original_code": "// Eat.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Eat {\n\n    /**\n     * * You're a hungry rabbit, and you already have eaten a certain number of carrots,\n     * but now you need to eat more carrots to complete the day's meals.\n     * you should return an array of [ total number of eaten carrots after your meals,\n     * the number of carrots left after your meals ]\n     * if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n     *\n     * Example:\n     * * eat(5, 6, 10) -> [11, 4]\n     * * eat(4, 8, 9) -> [12, 1]\n     * * eat(1, 10, 10) -> [11, 0]\n     * * eat(2, 11, 5) -> [7, 0]\n     *\n     * Variables:\n     *\n     * @number : integer\n     * the number of carrots that you have eaten.\n     * @need : integer\n     * the number of carrots that you need to eat.\n     * @remaining : integer\n     * the number of remaining carrots that exist in stock\n     *\n     * Constrain:\n     * * 0 <= number <= 1000\n     * * 0 <= need <= 1000\n     * * 0 <= remaining <= 1000\n     *\n     * Have fun :)\n     *\n     * > eat(5, 6, 10)\n     * [11, 4]\n     * > eat(4, 8, 9)\n     * [12, 1]\n     * > eat(1, 10, 10)\n     * [11, 0]\n     * > eat(2, 11, 5)\n     * [7, 0]\n     * > eat(4, 5, 7)\n     * [9, 2]\n     * > eat(4, 5, 1)\n     * [5, 0]\n     */\n    public static List<Integer> eat(int number, int need, int remaining) {\n        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}\n",
		"id": "159",
		"test_prompt": "// EatTest.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Eat}.\n* It contains ten unit test cases for the {@link Eat#eat(int, int, int)} method.\n*/\nclass EatTest {"
	},
	{
		"original_code": "// Fibfib.java\npackage original;\n\nclass Fibfib {\n\n    /**\n     * The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n     * fibfib(0) == 0\n     * fibfib(1) == 0\n     * fibfib(2) == 1\n     * fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n     * Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n     *\n     * > fibfib(2)\n     * 1\n     * > fibfib(1)\n     * 0\n     * > fibfib(5)\n     * 4\n     * > fibfib(8)\n     * 24\n     * > fibfib(10)\n     * 81\n     * > fibfib(12)\n     * 274\n     * > fibfib(14)\n     * 927\n     */\n    public static int fibfib(int n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 0;\n        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}\n",
		"id": "63",
		"test_prompt": "// FibfibTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fibfib}.\n* It contains ten unit test cases for the {@link Fibfib#fibfib(int)} method.\n*/\nclass FibfibTest {"
	},
	{
		"original_code": "// FilterBySubstring.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterBySubstring {\n\n    /**\n     * Filter an input list of strings only for ones that contain given substring\n     * > filterBySubstring([], \"a\")\n     * []\n     * > filterBySubstring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n     * [\"abc\", \"bacd\", \"array\"]\n     * > filterBySubstring([], \"john\")\n     * []\n     * > filterBySubstring([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\")\n     * [\"xxx\", \"xxxAAA\", \"xxx\"]\n     * > filterBySubstring([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\")\n     * [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n     * > filterBySubstring([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\")\n     * [\"grunt\", \"prune\"]\n     */\n    public static List<Object> filterBySubstring(List<Object> strings, String substring) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).toString().contains(substring)) {\n                result.add(strings.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "7",
		"test_prompt": "// FilterBySubstringTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterBySubstring}.\n* It contains ten unit test cases for the {@link FilterBySubstring#filterBySubstring(List, String)} method.\n*/\nclass FilterBySubstringTest {"
	},
	{
		"original_code": "// Unique.java\npackage original;\n\nimport java.util.*;\n\nclass Unique {\n\n    /**\n     * Return sorted unique elements in a list\n     *\n     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     * > unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n     * [0, 2, 3, 5, 9, 123]\n     */\n    public static List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (Integer i : l) {\n            set.add(i);\n        }\n        List<Integer> result = new ArrayList<Integer>(set);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
		"id": "34",
		"test_prompt": "// UniqueTest.java\npackage original;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Unique}.\n* It contains ten unit test cases for the {@link Unique#unique(List)} method.\n*/\nclass UniqueTest {"
	},
	{
		"original_code": "// GetClosestVowel.java\npackage original;\n\nclass GetClosestVowel {\n\n    /**\n     * You are given a word. Your task is to find the closest vowel that stands between\n     * two consonants from the right side of the word (case sensitive).\n     *\n     * Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n     * find any vowel met the above condition.\n     *\n     * You may assume that the given string contains English letter only.\n     *\n     * Example:\n     * getClosestVowel(\"yogurt\") ==> \"u\"\n     * getClosestVowel(\"FULL\") ==> \"U\"\n     * getClosestVowel(\"quick\") ==> \"\"\n     * getClosestVowel(\"ab\") ==> \"\"\n     *\n     * > getClosestVowel(\"yogurt\")\n     * \"u\"\n     * > getClosestVowel(\"full\")\n     * \"u\"\n     * > getClosestVowel(\"easy\")\n     * \"\"\n     * > getClosestVowel(\"eAsy\")\n     * \"\"\n     * > getClosestVowel(\"ali\")\n     * \"\"\n     * > getClosestVowel(\"bad\")\n     * \"a\"\n     * > getClosestVowel(\"most\")\n     * \"o\"\n     * > getClosestVowel(\"ab\")\n     * \"\"\n     * > getClosestVowel(\"ba\")\n     * \"\"\n     * > getClosestVowel(\"quick\")\n     * \"\"\n     * > getClosestVowel(\"anime\")\n     * \"i\"\n     * > getClosestVowel(\"Asia\")\n     * \"\"\n     * > getClosestVowel(\"Above\")\n     * \"o\"\n     */\n    public static String getClosestVowel(String word) {\n        String vowels = \"aeiouAEIOU\";\n        int i = word.length() - 2;\n        while (i > 0) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                    return word.substring(i, i + 1);\n                }\n            }\n            i--;\n        }\n        return \"\";\n    }\n}\n",
		"id": "118",
		"test_prompt": "// GetClosestVowelTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GetClosestVowel}.\n* It contains ten unit test cases for the {@link GetClosestVowel#getClosestVowel(String)} method.\n*/\nclass GetClosestVowelTest {"
	},
	{
		"original_code": "// FilterIntegers.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass FilterIntegers {\n\n    /**\n     * Filter given list of any Java values only for integers.\n     *\n     * > filterIntegers([\"a\", 3.14, 5])\n     * [5]\n     * > filterIntegers([1, 2, 3, \"abc\", {}, []])\n     * [1, 2, 3]\n     * > filterIntegers([])\n     * []\n     * > filterIntegers([4, {}, [], 23.2, 9, \"adasd\"])\n     * [4, 9]\n     * > filterIntegers([3, \"c\", 3, 3, \"a\", \"b\"])\n     * [3, 3, 3]\n     */\n    public static List<Object> filterIntegers(List<Object> values) {\n        List<Object> result = new ArrayList<Object>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}\n",
		"id": "22",
		"test_prompt": "// FilterIntegersTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FilterIntegers}.\n* It contains ten unit test cases for the {@link FilterIntegers#filterIntegers(List)} method.\n*/\nclass FilterIntegersTest {"
	},
	{
		"original_code": "// IsMultiplyPrime.java\npackage original;\n\nclass IsMultiplyPrime {\n\n    /**\n     * Write a function that returns true if the given number is the multiplication of 3 prime numbers\n     * and false otherwise.\n     * Knowing that (a) is less than 100.\n     * Example:\n     * isMultiplyPrime(30) == true\n     * 30 = 2 * 3 * 5\n     *\n     * > isMultiplyPrime(5)\n     * false\n     * > isMultiplyPrime(30)\n     * true\n     * > isMultiplyPrime(8)\n     * true\n     * > isMultiplyPrime(10)\n     * false\n     * > isMultiplyPrime(125)\n     * true\n     * > isMultiplyPrime(105)\n     * true\n     * > isMultiplyPrime(126)\n     * false\n     * > isMultiplyPrime(729)\n     * false\n     * > isMultiplyPrime(891)\n     * false\n     * > isMultiplyPrime(1001)\n     * true\n     */\n    public static Boolean isMultiplyPrime(int a) {\n        int count = 0;\n        for (int i = 2; i <= a; i++) {\n            if (a % i == 0) {\n                count++;\n                a /= i;\n                i--;\n            }\n        }\n        return count == 3;\n    }\n}\n",
		"id": "75",
		"test_prompt": "// IsMultiplyPrimeTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsMultiplyPrime}.\n* It contains ten unit test cases for the {@link IsMultiplyPrime#isMultiplyPrime(int)} method.\n*/\nclass IsMultiplyPrimeTest {"
	},
	{
		"original_code": "// IsEqualToSumEven.java\npackage original;\n\nclass IsEqualToSumEven {\n\n    /**\n     * Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n     * Example\n     * isEqualToSumEven(4) == False\n     * isEqualToSumEven(6) == False\n     * isEqualToSumEven(8) == True\n     *\n     * > isEqualToSumEven(4)\n     * false\n     * > isEqualToSumEven(6)\n     * false\n     * > isEqualToSumEven(8)\n     * true\n     * > isEqualToSumEven(10)\n     * true\n     * > isEqualToSumEven(11)\n     * false\n     * > isEqualToSumEven(12)\n     * true\n     * > isEqualToSumEven(13)\n     * false\n     * > isEqualToSumEven(16)\n     * true\n     */\n    public static Boolean isEqualToSumEven(int n) {\n        if (n < 8) {\n            return false;\n        }\n        return n % 2 == 0;\n    }\n}\n",
		"id": "138",
		"test_prompt": "// IsEqualToSumEvenTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsEqualToSumEven}.\n* It contains ten unit test cases for the {@link IsEqualToSumEven#isEqualToSumEven(int)} method.\n*/\nclass IsEqualToSumEvenTest {"
	},
	{
		"original_code": "// Fib.java\npackage original;\n\nclass Fib {\n\n    /**\n     * Return n-th Fibonacci number.\n     *\n     * > fib(10)\n     * 55\n     * > fib(1)\n     * 1\n     * > fib(8)\n     * 21\n     * > fib(11)\n     * 89\n     * > fib(12)\n     * 144\n     */\n    public static int fib(int n) {\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i = 0; i < n - 1; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n",
		"id": "55",
		"test_prompt": "// FibTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Fib}.\n* It contains ten unit test cases for the {@link Fib#fib(int)} method.\n*/\nclass FibTest {"
	},
	{
		"original_code": "// PairsSumToZero.java\npackage original;\n\nimport java.util.List;\n\nclass PairsSumToZero {\n\n    /**\n     * * pairs_sum_to_zero takes a list of integers as an input.\n     * it returns true if there are two distinct elements in the list that\n     * sum to zero, and false otherwise.\n     *\n     * > pairsSumToZero([1, 3, 5, 0])\n     * false\n     * > pairsSumToZero([1, 3, -2, 1])\n     * false\n     * > pairsSumToZero([1, 2, 3, 7])\n     * false\n     * > pairsSumToZero([2, 4, -5, 3, 5, 7])\n     * true\n     * > pairsSumToZero([1])\n     * false\n     * > pairsSumToZero([1, 3, 5, 0])\n     * false\n     * > pairsSumToZero([1, 3, -2, 1])\n     * false\n     * > pairsSumToZero([1, 2, 3, 7])\n     * false\n     * > pairsSumToZero([2, 4, -5, 3, 5, 7])\n     * true\n     * > pairsSumToZero([1])\n     * false\n     * > pairsSumToZero([-3, 9, -1, 3, 2, 30])\n     * true\n     * > pairsSumToZero([-3, 9, -1, 3, 2, 31])\n     * true\n     * > pairsSumToZero([-3, 9, -1, 4, 2, 30])\n     * false\n     * > pairsSumToZero([-3, 9, -1, 4, 2, 31])\n     * false\n     */\n    public static Boolean pairsSumToZero(List<Integer> l) {\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
		"id": "43",
		"test_prompt": "// PairsSumToZeroTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PairsSumToZero}.\n* It contains ten unit test cases for the {@link PairsSumToZero#pairsSumToZero(List)} method.\n*/\nclass PairsSumToZeroTest {"
	},
	{
		"original_code": "// AllPrefixes.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass AllPrefixes {\n\n    /**\n     * Return list of all prefixes from shortest to longest of the input string.\n     *\n     * > allPrefixes(\"abc\")\n     * [\"a\", \"ab\", \"abc\"]\n     * > allPrefixes(\"\")\n     * []\n     * > allPrefixes(\"asdfgh\")\n     * [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]\n     * > allPrefixes(\"WWW\")\n     * [\"W\", \"WW\", \"WWW\"]\n     */\n    public static List<Object> allPrefixes(String string) {\n        List<Object> result = new ArrayList<Object>();\n        for (int i = 0; i < string.length(); i++) {\n            result.add(string.substring(0, i + 1));\n        }\n        return result;\n    }\n}\n",
		"id": "14",
		"test_prompt": "// AllPrefixesTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AllPrefixes}.\n* It contains ten unit test cases for the {@link AllPrefixes#allPrefixes(String)} method.\n*/\nclass AllPrefixesTest {"
	},
	{
		"original_code": "// IsHappy.java\npackage original;\n\nclass IsHappy {\n\n    /**\n     * You are given a string s.\n     * Your task is to check if the string is happy or not.\n     * A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n     * For example:\n     * isHappy(a) => False\n     * isHappy(aa) => False\n     * isHappy(abcd) => True\n     * isHappy(aabb) => False\n     * isHappy(adb) => True\n     * isHappy(xyy) => False\n     *\n     * > isHappy(\"a\")\n     * false\n     * > isHappy(\"aa\")\n     * false\n     * > isHappy(\"abcd\")\n     * true\n     * > isHappy(\"aabb\")\n     * false\n     * > isHappy(\"adb\")\n     * true\n     * > isHappy(\"xyy\")\n     * false\n     * > isHappy(\"iopaxpoi\")\n     * true\n     * > isHappy(\"iopaxioi\")\n     * false\n     */\n    public static Boolean isHappy(String s) {\n        if (s.length() < 3) {\n            return false;\n        }\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i) == s.charAt(i + 2) || s.charAt(i + 1) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "80",
		"test_prompt": "// IsHappyTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IsHappy}.\n* It contains ten unit test cases for the {@link IsHappy#isHappy(String)} method.\n*/\nclass IsHappyTest {"
	},
	{
		"original_code": "// EvenOddCount.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass EvenOddCount {\n\n    /**\n     * Given an integer. return a tuple that has the number of even and odd digits respectively.\n     *\n     * Example:\n     * evenOddCount(-12) ==> (1, 1)\n     * evenOddCount(123) ==> (1, 2)\n     *\n     * > evenOddCount(7)\n     * [0, 1]\n     * > evenOddCount(-78)\n     * [1, 1]\n     * > evenOddCount(3452)\n     * [2, 2]\n     * > evenOddCount(346211)\n     * [3, 3]\n     * > evenOddCount(-345821)\n     * [3, 3]\n     * > evenOddCount(-2)\n     * [1, 0]\n     * > evenOddCount(-45347)\n     * [2, 3]\n     * > evenOddCount(0)\n     * [1, 0]\n     */\n    public static List<Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n        if (num == 0) {\n            even++;\n        }\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        return Arrays.asList(even, odd);\n    }\n}\n",
		"id": "155",
		"test_prompt": "// EvenOddCountTest.java\npackage original;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EvenOddCount}.\n* It contains ten unit test cases for the {@link EvenOddCount#evenOddCount(int)} method.\n*/\nclass EvenOddCountTest {"
	},
	{
		"original_code": "// ChooseNum.java\npackage original;\n\nclass ChooseNum {\n\n    /**\n     * This function takes two positive numbers x and y and returns the\n     * biggest even integer number that is in the range [x, y] inclusive. If\n     * there's no such number, then the function should return -1.\n     *\n     * For example:\n     * chooseNum(12, 15) = 14\n     * chooseNum(13, 12) = -1\n     *\n     * > chooseNum(12, 15)\n     * 14\n     * > chooseNum(13, 12)\n     * -1\n     * > chooseNum(33, 12354)\n     * 12354\n     * > chooseNum(5234, 5233)\n     * -1\n     * > chooseNum(6, 29)\n     * 28\n     * > chooseNum(27, 10)\n     * -1\n     * > chooseNum(7, 7)\n     * -1\n     * > chooseNum(546, 546)\n     * 546\n     */\n    public static int chooseNum(int x, int y) {\n        int max = -1;\n        for (int i = x; i <= y; i++) {\n            if (i % 2 == 0 && i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}\n",
		"id": "102",
		"test_prompt": "// ChooseNumTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ChooseNum}.\n* It contains ten unit test cases for the {@link ChooseNum#chooseNum(int, int)} method.\n*/\nclass ChooseNumTest {"
	},
	{
		"original_code": "// Minsubarraysum.java\npackage original;\n\nimport java.util.List;\n\nclass Minsubarraysum {\n\n    /**\n     * * Given an array of integers nums, find the minimum sum of any non-empty sub-array\n     * of nums.\n     * Example\n     * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n     * minSubArraySum([-1, -2, -3]) == -6\n     *\n     * > minsubarraysum([2, 3, 4, 1, 2, 4])\n     * 1\n     * > minsubarraysum([-1, -2, -3])\n     * -6\n     * > minsubarraysum([-1, -2, -3, 2, -10])\n     * -14\n     * > minsubarraysum([-9999999999999999L])\n     * -9999999999999999L\n     * > minsubarraysum([0, 10, 20, 1000000])\n     * 0\n     * > minsubarraysum([-1, -2, -3, 10, -5])\n     * -6\n     * > minsubarraysum([100, -1, -2, -3, 10, -5])\n     * -6\n     * > minsubarraysum([10, 11, 13, 8, 3, 4])\n     * 3\n     * > minsubarraysum([100, -33, 32, -1, 0, -2])\n     * -33\n     * > minsubarraysum([-10])\n     * -10\n     * > minsubarraysum([7])\n     * 7\n     * > minsubarraysum([1, -1])\n     * -1\n     */\n    public static long minsubarraysum(List<Object> nums) {\n        long s = 0;\n        long max_sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            long num = ((Number) nums.get(i)).longValue();\n            s -= num;\n            if (s < 0) {\n                s = 0;\n            }\n            max_sum = Math.max(s, max_sum);\n        }\n        if (max_sum == 0) {\n            max_sum = -((Number) nums.get(0)).longValue();\n            for (int i = 0; i < nums.size(); i++) {\n                max_sum = Math.max(-((Number) nums.get(i)).longValue(), max_sum);\n            }\n        }\n        long min_sum = -max_sum;\n        return min_sum;\n    }\n}\n",
		"id": "114",
		"test_prompt": "// MinsubarraysumTest.java\npackage original;\n\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Minsubarraysum}.\n* It contains ten unit test cases for the {@link Minsubarraysum#minsubarraysum(List)} method.\n*/\nclass MinsubarraysumTest {"
	},
	{
		"original_code": "// DecimalToBinary.java\npackage original;\n\nclass DecimalToBinary {\n\n    /**\n     * You will be given a number in decimal form and your task is to convert it to\n     * binary format. The function should return a string, with each character representing a binary\n     * number. Each character in the string will be '0' or '1'.\n     *\n     * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n     * The extra characters are there to help with the format.\n     *\n     * Examples:\n     * - decimalToBinary(15)   # returns \"db1111db\"\n     * - decimalToBinary(32)   # returns \"db100000db\"\n     *\n     * > decimalToBinary(0)\n     * \"db0db\"\n     * > decimalToBinary(32)\n     * \"db100000db\"\n     * > decimalToBinary(103)\n     * \"db1100111db\"\n     * > decimalToBinary(15)\n     * \"db1111db\"\n     */\n    public static String decimalToBinary(int decimal) {\n        String binary = \"\";\n        if (decimal == 0) {\n            return \"db0db\";\n        }\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return \"db\" + binary + \"db\";\n    }\n}\n",
		"id": "79",
		"test_prompt": "// DecimalToBinaryTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DecimalToBinary}.\n* It contains ten unit test cases for the {@link DecimalToBinary#decimalToBinary(int)} method.\n*/\nclass DecimalToBinaryTest {"
	},
	{
		"original_code": "// CountUpTo.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass CountUpTo {\n\n    /**\n     * Implement a function that takes an non-negative integer and returns an array of the first n\n     * integers that are prime numbers and less than n.\n     * for example:\n     * countUpTo(5) => [2,3]\n     * countUpTo(11) => [2,3,5,7]\n     * countUpTo(0) => []\n     * countUpTo(20) => [2,3,5,7,11,13,17,19]\n     * countUpTo(1) => []\n     * countUpTo(18) => [2,3,5,7,11,13,17]\n     *\n     * > countUpTo(5)\n     * [2, 3]\n     * > countUpTo(6)\n     * [2, 3, 5]\n     * > countUpTo(7)\n     * [2, 3, 5]\n     * > countUpTo(10)\n     * [2, 3, 5, 7]\n     * > countUpTo(0)\n     * []\n     * > countUpTo(22)\n     * [2, 3, 5, 7, 11, 13, 17, 19]\n     * > countUpTo(1)\n     * []\n     * > countUpTo(18)\n     * [2, 3, 5, 7, 11, 13, 17]\n     * > countUpTo(47)\n     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n     * > countUpTo(101)\n     * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n     */\n    public static List<Object> countUpTo(int n) {\n        List<Object> result = new ArrayList<Object>();\n        int i = 2;\n        while (i < n) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    private static boolean isPrime(int n) {\n        int i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}\n",
		"id": "96",
		"test_prompt": "// CountUpToTest.java\npackage original;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CountUpTo}.\n* It contains ten unit test cases for the {@link CountUpTo#countUpTo(int)} method.\n*/\nclass CountUpToTest {"
	},
	{
		"original_code": "// WordsInSentence.java\npackage original;\n\nclass WordsInSentence {\n\n    /**\n     * * You are given a string representing a sentence,\n     * the sentence contains some words separated by a space,\n     * and you have to return a string that contains the words from the original sentence,\n     * whose lengths are prime numbers,\n     * the order of the words in the new string should be the same as the original one.\n     *\n     * Example 1:\n     * Input: sentence = \"This is a test\"\n     * Output: \"is\"\n     *\n     * Example 2:\n     * Input: sentence = \"lets go for swimming\"\n     * Output: \"go for\"\n     *\n     * Constraints:\n     * * 1 <= len(sentence) <= 100\n     * * sentence contains only letters\n     *\n     * > wordsInSentence(\"This is a test\")\n     * \"is\"\n     * > wordsInSentence(\"lets go for swimming\")\n     * \"go for\"\n     * > wordsInSentence(\"there is no place available here\")\n     * \"there is no place\"\n     * > wordsInSentence(\"Hi I am Hussein\")\n     * \"Hi am Hussein\"\n     * > wordsInSentence(\"go for it\")\n     * \"go for it\"\n     * > wordsInSentence(\"here\")\n     * \"\"\n     * > wordsInSentence(\"here is\")\n     * \"is\"\n     */\n    public static String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (isPrime(words[i].length())) {\n                result += words[i] + \" \";\n            }\n        }\n        return result.trim();\n    }\n\n    private static boolean isPrime(int number) {\n        if (number <= 1) {\n            return false;\n        }\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
		"id": "143",
		"test_prompt": "// WordsInSentenceTest.java\npackage original;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link WordsInSentence}.\n* It contains ten unit test cases for the {@link WordsInSentence#wordsInSentence(String)} method.\n*/\nclass WordsInSentenceTest {"
	}
]