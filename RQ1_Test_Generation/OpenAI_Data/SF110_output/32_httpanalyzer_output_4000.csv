ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u20DHcXYfZ4yRH0Ortq51FtNAYvB,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/HeaderSettings_0Test.java,99.43191957473755,length,"// HeaderSettings.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;

/**
 * @author vlad
 */
public class HeaderSettings {

    public static String[] userAgents = { ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"", ""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"", ""Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"", ""msnbot/1.1 (+http://search.msn.com/msnbot.htm)"", ""Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"", ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16"" };

    public static final int FIREFOX = 0;

    public static final int IE6 = 1;

    public static final int IE7 = 2;

    public static final int IE8 = 3;

    public static final int GOOGLEBOT = 4;

    public static final int MSNBOT = 5;

    public static final int YAHOOBOT = 6;

    public static final int IPHONE = 7;

    public static final int CUSTOM = 255;

    final String contentCharset = ""utf-8"";

    String setUserAgent;

    private static String presetCookie;

    private static Header[] headersSet;

    /**
     * Get User-Agent&Referer and set
     * internal headers
     */
    public static void initHeaders(int idAgent, String referer) {
        HttpGet baseRequest = new HttpGet();
        baseRequest.addHeader(""User-Agent"", userAgents[idAgent]);
        baseRequest.addHeader(""Accept"", ""text/html,application/xhtml+xml,"" + ""application/xml;q=0.9,*/*;q=0.8"");
        baseRequest.addHeader(""Referer"", referer);
        baseRequest.addHeader(""Connection"", ""Keep-Alive"");
        baseRequest.addHeader(""Keep-Alive"", ""300"");
        if (presetCookie != null) {
            baseRequest.addHeader(""Cookie"", presetCookie);
        }
        headersSet = baseRequest.getAllHeaders();
    }

    /**
     * Get all headers from user from
     * and set internal headers
     */
    public static void initHeaders(String myHeaders) {
        HttpGet baseRequest = new HttpGet();
        String[] headersArray = myHeaders.split(""\n"");
        for (int i = 0; i < headersArray.length; i++) {
            if (!headersArray[i].isEmpty()) {
                int indexStr = headersArray[i].indexOf("":"");
                String key = headersArray[i].substring(0, indexStr);
                String val = headersArray[i].substring(indexStr + 1).trim();
                baseRequest.addHeader(key, val);
                System.out.println(""Key ="" + key + "", val="" + val);
            }
        }
        headersSet = baseRequest.getAllHeaders();
    }

    /**
     * Send all internal headers
     */
    public static Header[] setHeaders() {
        return headersSet;
    }

    /**
     * Set internal header Cookie:
     */
    public static void setCookie(String cookie) {
        presetCookie = cookie;
    }

    /**
     * Disable headers Cookie
     */
    public static void clearCookie() {
        presetCookie = null;
    }

    public static String getHeaders() {
        Header[] headers = headersSet;
        String headersString = null;
        StringBuffer strBuf = new StringBuffer();
        for (int i = 0; i < headers.length; i++) {
            strBuf.append(headers[i].toString() + ""\n"");
        }
        headersString = strBuf.toString();
        return headersString;
    }

    public static String showHeaders(HttpRequestBase baseRequest) {
        Header[] headers = baseRequest.getAllHeaders();
        StringBuffer strBuf = new StringBuffer();
        for (int i = 0; i < headers.length; i++) {
            strBuf.append(headers[i].toString() + ""\n"");
        }
        String headersString = strBuf.toString();
        return headersString;
    }

    public static String showHeaders(Header[] headers) {
        StringBuffer strBuf = new StringBuffer();
        for (int i = 0; i < headers.length; i++) {
            strBuf.append(headers[i].toString() + ""\n"");
        }
        String headersString = strBuf.toString();
        return headersString;
    }
}
","// HeaderSettings_0Test.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettings_0Test {","// HeaderSettings_0Test.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettings_0Test {

	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_0() {
		HeaderSettings.initHeaders(0, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_1() {
		HeaderSettings.initHeaders(1, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_2() {
		HeaderSettings.initHeaders(2, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_3() {
		HeaderSettings.initHeaders(3, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_4() {
		HeaderSettings.initHeaders(4, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_5() {
		HeaderSettings.initHeaders(5, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_6() {
		HeaderSettings.initHeaders(6, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_7() {
		HeaderSettings.initHeaders(7, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_8() {
		HeaderSettings.initHeaders(8, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(int, String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_9() {
		HeaderSettings.initHeaders(9, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
}

// HeaderSettings_1Test.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettings_1Test {
		
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_0() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_1() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_2() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_3() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_4() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_5() {
		HeaderSettings.initHeaders(""User-Agent: msnbot/1.1 (+http://search.msn.com/msnbot.htm)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_6() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_7() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_8() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#initHeaders(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_9() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nReferer: http://www.google.com\nConnection: Keep-Alive\nKeep-Alive: 300"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
}

// HeaderSettings_2Test.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettings_2Test {
		
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {@link HeaderSettings#setCookie(String)}.
	* Expected result: {@link HeaderSettings#setHeaders()} returns an array of headers.
	*/
	@Test
	void testSetHeaders_0() {
		HeaderSettings.setCookie(""Cookie: name=value"");
		Header[] headers = HeaderSettings.setHeaders();
		assertNotNull(headers);
	}
	
	/**
	* Test case for {@link HeaderSettings#setHeaders()} method.
	* Test data: {"
cmpl-6u21pKb4HysRBW3UtiQaOOVHHisUI,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/HttpAnalyzerApp.java,82.8904128074646,length,"// HttpAnalyzerApp.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 *
 * Copyright (C) 2010, vlad
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * HttpAnalyzerApp.java
 */
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;

/**
 * The main class of the application.
 */
public class HttpAnalyzerApp extends SingleFrameApplication {

    /**
     * At startup create and show the main frame of the application.
     */
    @Override
    protected void startup() {
        show(new HttpAnalyzerView(this));
    }

    /**
     * This method is to initialize the specified window by injecting resources.
     * Windows shown in our application come fully initialized from the GUI
     * builder, so this additional configuration is not needed.
     */
    @Override
    protected void configureWindow(java.awt.Window root) {
    }

    /**
     * A convenient static getter for the application instance.
     * @return the instance of HttpAnalyzerApp
     */
    public static HttpAnalyzerApp getApplication() {
        return Application.getInstance(HttpAnalyzerApp.class);
    }

    /**
     * Main method launching the application.
     */
    public static void main(String[] args) {
        launch(HttpAnalyzerApp.class, args);
    }
}
","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {

	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link HttpAnalyzerApp}.
	*/
	@Test
	public void testGetApplication() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof HttpAnalyzerApp);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication2() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link SingleFrameApplication}.
	*/
	@Test
	public void testGetApplication3() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof SingleFrameApplication);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication4() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication5() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication6() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication7() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication8() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication9() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
	
	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link Application}.
	*/
	@Test
	public void testGetApplication10() {
		assertTrue(HttpAnalyzerApp.getApplication() instanceof Application);
	}
}

// HttpAnalyzerView.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 *
 * Copyright (C) 2010, vlad
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * HttpAnalyzerView.java
 */
package httpanalyzer;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;

/**
 * The application's main frame.
 */
public class HttpAnalyzerView extends FrameView {

    private static final String[] COLUMN_NAMES = {""Name"", ""Value""};
    private static final String[] COLUMN_NAMES2 = {""Name"", ""Value"", ""Type""};
    private static final String[] COLUMN_NAMES3 = {""Name"", ""Value"", ""Type"", ""Description""};
    private static final String[] COLUMN_NAMES4 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required""};
    private static final String[] COLUMN_NAMES5 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default""};
    private static final String[] COLUMN_NAMES6 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example""};
    private static final String[] COLUMN_NAMES7 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max""};
    private static final String[] COLUMN_NAMES8 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern""};
    private static final String[] COLUMN_NAMES9 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum""};
    private static final String[] COLUMN_NAMES10 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems""};
    private static final String[] COLUMN_NAMES11 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength""};
    private static final String[] COLUMN_NAMES12 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems""};
    private static final String[] COLUMN_NAMES13 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow""};
    private static final String[] COLUMN_NAMES14 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends""};
    private static final String[] COLUMN_NAMES15 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format""};
    private static final String[] COLUMN_NAMES16 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy""};
    private static final String[] COLUMN_NAMES17 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly""};
    private static final String[] COLUMN_NAMES18 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id""};
    private static final String[] COLUMN_NAMES19 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title""};
    private static final String[] COLUMN_NAMES20 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description""};
    private static final String[] COLUMN_NAMES21 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient""};
    private static final String[] COLUMN_NAMES22 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient"", ""Hidden""};
    private static final String[] COLUMN_NAMES23 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient"", ""Hidden"", ""AdditionalProperties""};
    private static final String[] COLUMN_NAMES24 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient"", ""Hidden"", ""AdditionalProperties"", ""AdditionalItems""};
    private static final String[] COLUMN_NAMES25 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient"", ""Hidden"", ""AdditionalProperties"", ""AdditionalItems"", ""PatternProperties""};
    private static final String[] COLUMN_NAMES26 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""DivisibleBy"", ""ReadOnly"", ""Id"", ""Title"", ""Description"", ""Transient"", ""Hidden"", ""AdditionalProperties"", ""AdditionalItems"", ""PatternProperties"", ""Dependencies""};
    private static final String[] COLUMN_NAMES27 = {""Name"", ""Value"", ""Type"", ""Description"", ""Required"", ""Default"", ""Example"", ""Min"", ""Max"", ""Pattern"", ""Enum"", ""MinItems"", ""MaxItems"", ""MinLength"", ""MaxLength"", ""UniqueItems"", ""Disallow"", ""Extends"", ""Format"", ""Divisible"
cmpl-6u23A1w3elJH5lHsDbu5em6rlO6rv,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils_0Test.java,95.12041282653809,length,"// HttpFileUtils.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;

/**
 * @author vlad
 */
public class HttpFileUtils {

    static final int MAX_BUFFER_SIZE = 8192;

    /**
     * Save Http entity to file
     * @param entity HttpEntity
     * @param fileName String
     */
    public long saveEntity(HttpEntity entity, String fileName) {
        long size = 0L;
        File file = new File(fileName);
        byte[] buffer = new byte[MAX_BUFFER_SIZE];
        // Read from server into buffer.
        InputStream streamEntity;
        RandomAccessFile outFile;
        try {
            streamEntity = entity.getContent();
            outFile = new RandomAccessFile(file, ""rw"");
            int read = 0;
            // Rewrite file
            outFile.setLength(0);
            System.out.println(""Buffer size ="" + buffer.length);
            while ((read = streamEntity.read(buffer)) != -1) {
                size = size + read;
                // Write buffer to file
                outFile.write(buffer, 0, read);
            }
            outFile.close();
            streamEntity.close();
        } catch (IOException ex) {
            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalStateException ex) {
            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
        }
        return size;
    }

    /**
     * Filter for FileChooser *.XML
     */
    private class MyXmlFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".xml"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""XML files (*.xml)"";
        }
    }

    /**
     * Filter for FileChooser *.TXT
     */
    private class MyTxtFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".txt"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""Text documents (*.txt)"";
        }
    }

    /**
     * Method saves your template to file
     * Creates JFileChooser and save into XML file
     * @param properties
     * @param parentFrame
     */
    public void savePreferenceToFile(Properties properties, JFrame parentFrame) {
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Save template"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser.addChoosableFileFilter(new MyTxtFilter());
        fileChooser.addChoosableFileFilter(new MyXmlFilter());
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String fileSetUser = fileChooser.getSelectedFile().toString();
                File file;
                if (fileSetUser.contains(""."")) {
                    file = new File(fileSetUser);
                } else {
                    file = new File(fileSetUser + "".xml"");
                }
                FileOutputStream fos = new FileOutputStream(file);
                properties.storeToXML(fos, ""HttpAnalyzer Template"", ""UTF-8"");
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            }
        } else {
            System.out.println(""File wasn't choosen!"");
        }
    }

    /**
     * Method load your template from file
     * Creates JFileChooser and  load from XML file
     * @param parentFrame
     */
    public Properties loadPreferenceFromFile(JFrame parentFrame) {
        Properties properties = new Properties();
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Load template"");
        fileChooser.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fileChooser.addChoosableFileFilter(new MyTxtFilter());
        fileChooser.addChoosableFileFilter(new MyXmlFilter());
        int returnVal = fileChooser.showOpenDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String fileSetUser = fileChooser.getSelectedFile().toString();
                File file;
                if (fileSetUser.contains(""."")) {
                    file = new File(fileSetUser);
                } else {
                    file = new File(fileSetUser + "".xml"");
                }
                FileInputStream fis = new FileInputStream(file);
                properties.loadFromXML(fis);
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            }
        } else {
            System.out.println(""File wasn't choosen!"");
        }
        return properties;
    }

    /**
     * Save information from ReplayTab in file
     * @param mainView
     * @param parentFrame
     */
    public void saveSessionInfo(HttpAnalyzerView mainView, JFrame parentFrame) {
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        // NOI18N
        fileChooser.setDialogTitle(""Save your session"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        Calendar calendar = Calendar.getInstance();
        System.out.print(""Date: "");
        System.out.print(calendar.get(Calendar.MONTH));
        System.out.print("" "" + calendar.get(Calendar.DATE) + "" "");
        System.out.println(calendar.get(Calendar.YEAR));
        String preFileName = ""session-"" + Integer.toString(calendar.get(Calendar.DATE)) + ""-"" + Integer.toString(calendar.get(Calendar.MONTH)) + "".txt"";
        fileChooser.setSelectedFile(new File(preFileName));
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            File file = null;
            System.out.println(""File choose ="" + fileName);
            if (!fileName.toString().endsWith("".txt"")) {
                file = new File(fileName + "".txt"");
            } else {
                file = new File(fileName);
            }
            PrintWriter outWriter = null;
            try {
                outWriter = new PrintWriter(file);
                String[] str = mainView.replayDataPane.getText().split(""\n"");
                for (int i = 0; i < str.length; i++) {
                    outWriter.print(str[i] + ""\r\n"");
                }
            } catch (Exception ex) {
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            } finally {
                if (outWriter != null) {
                    outWriter.close();
                }
            }
            //This is where a real application would open the file.
            //log.append(""Opening: "" + file.getName() + ""."" + newline);
        } else {
            System.out.println(""File wasn't choosen!"");
            //log.append(""Open command cancelled by user."" + newline);
        }
    }

    /**
     * Show JChooseFile dialog and
     * put your choice in toFileTextField
     * @param mainView
     * @param parentFrame
     */
    public void fillToFileField(HttpAnalyzerView mainView, JFrame parentFrame) {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Save your content"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            mainView.toFileTextField.setText(fileChooser.getSelectedFile().toString());
            mainView.toFileCheckBox.setSelected(true);
        } else {
            System.out.println(""File wasn't choosen!"");
        }
    }
}
","// HttpFileUtils_0Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtils_0Test {","// HttpFileUtils_0Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtils_0Test {

		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = null, fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_0() {
				HttpEntity entity = null;
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_1() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_2() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_3() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_4() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_5() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_6() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_7() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_8() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_9() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
}

// HttpFileUtils_1Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtils_1Test {
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = null, fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_0() {
				HttpEntity entity = null;
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_1() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_2() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_3() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_4() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_5() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_6() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_7() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_8() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
		/**
		* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
		* Test data: entity = new HttpEntity(), fileName = ""test.txt"".
		* Expected result: IOException.
		*/
		@Test
		void testSaveEntity_9() {
				HttpEntity entity = new HttpEntity();
				String fileName = ""test.txt"";
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				assertThrows(IOException.class, () -> {
						httpFileUtils.saveEntity(entity, fileName);
				});
		}
		
}

// HttpFileUtils_2Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level"
cmpl-6u24h5RIMbZxpZ7h1PDmtTrJ0QinS,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils_1Test.java,103.67322778701782,length,"// HttpFileUtils.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;

/**
 * @author vlad
 */
public class HttpFileUtils {

    static final int MAX_BUFFER_SIZE = 8192;

    /**
     * Save Http entity to file
     * @param entity HttpEntity
     * @param fileName String
     */
    public long saveEntity(HttpEntity entity, String fileName) {
        long size = 0L;
        File file = new File(fileName);
        byte[] buffer = new byte[MAX_BUFFER_SIZE];
        // Read from server into buffer.
        InputStream streamEntity;
        RandomAccessFile outFile;
        try {
            streamEntity = entity.getContent();
            outFile = new RandomAccessFile(file, ""rw"");
            int read = 0;
            // Rewrite file
            outFile.setLength(0);
            System.out.println(""Buffer size ="" + buffer.length);
            while ((read = streamEntity.read(buffer)) != -1) {
                size = size + read;
                // Write buffer to file
                outFile.write(buffer, 0, read);
            }
            outFile.close();
            streamEntity.close();
        } catch (IOException ex) {
            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalStateException ex) {
            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
        }
        return size;
    }

    /**
     * Filter for FileChooser *.XML
     */
    private class MyXmlFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".xml"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""XML files (*.xml)"";
        }
    }

    /**
     * Filter for FileChooser *.TXT
     */
    private class MyTxtFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".txt"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""Text documents (*.txt)"";
        }
    }

    /**
     * Method saves your template to file
     * Creates JFileChooser and save into XML file
     * @param properties
     * @param parentFrame
     */
    public void savePreferenceToFile(Properties properties, JFrame parentFrame) {
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Save template"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser.addChoosableFileFilter(new MyTxtFilter());
        fileChooser.addChoosableFileFilter(new MyXmlFilter());
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String fileSetUser = fileChooser.getSelectedFile().toString();
                File file;
                if (fileSetUser.contains(""."")) {
                    file = new File(fileSetUser);
                } else {
                    file = new File(fileSetUser + "".xml"");
                }
                FileOutputStream fos = new FileOutputStream(file);
                properties.storeToXML(fos, ""HttpAnalyzer Template"", ""UTF-8"");
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            }
        } else {
            System.out.println(""File wasn't choosen!"");
        }
    }

    /**
     * Method load your template from file
     * Creates JFileChooser and  load from XML file
     * @param parentFrame
     */
    public Properties loadPreferenceFromFile(JFrame parentFrame) {
        Properties properties = new Properties();
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Load template"");
        fileChooser.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fileChooser.addChoosableFileFilter(new MyTxtFilter());
        fileChooser.addChoosableFileFilter(new MyXmlFilter());
        int returnVal = fileChooser.showOpenDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                String fileSetUser = fileChooser.getSelectedFile().toString();
                File file;
                if (fileSetUser.contains(""."")) {
                    file = new File(fileSetUser);
                } else {
                    file = new File(fileSetUser + "".xml"");
                }
                FileInputStream fis = new FileInputStream(file);
                properties.loadFromXML(fis);
                fis.close();
            } catch (IOException ex) {
                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            }
        } else {
            System.out.println(""File wasn't choosen!"");
        }
        return properties;
    }

    /**
     * Save information from ReplayTab in file
     * @param mainView
     * @param parentFrame
     */
    public void saveSessionInfo(HttpAnalyzerView mainView, JFrame parentFrame) {
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        // NOI18N
        fileChooser.setDialogTitle(""Save your session"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        Calendar calendar = Calendar.getInstance();
        System.out.print(""Date: "");
        System.out.print(calendar.get(Calendar.MONTH));
        System.out.print("" "" + calendar.get(Calendar.DATE) + "" "");
        System.out.println(calendar.get(Calendar.YEAR));
        String preFileName = ""session-"" + Integer.toString(calendar.get(Calendar.DATE)) + ""-"" + Integer.toString(calendar.get(Calendar.MONTH)) + "".txt"";
        fileChooser.setSelectedFile(new File(preFileName));
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName = fileChooser.getSelectedFile().toString();
            File file = null;
            System.out.println(""File choose ="" + fileName);
            if (!fileName.toString().endsWith("".txt"")) {
                file = new File(fileName + "".txt"");
            } else {
                file = new File(fileName);
            }
            PrintWriter outWriter = null;
            try {
                outWriter = new PrintWriter(file);
                String[] str = mainView.replayDataPane.getText().split(""\n"");
                for (int i = 0; i < str.length; i++) {
                    outWriter.print(str[i] + ""\r\n"");
                }
            } catch (Exception ex) {
                new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
            } finally {
                if (outWriter != null) {
                    outWriter.close();
                }
            }
            //This is where a real application would open the file.
            //log.append(""Opening: "" + file.getName() + ""."" + newline);
        } else {
            System.out.println(""File wasn't choosen!"");
            //log.append(""Open command cancelled by user."" + newline);
        }
    }

    /**
     * Show JChooseFile dialog and
     * put your choice in toFileTextField
     * @param mainView
     * @param parentFrame
     */
    public void fillToFileField(HttpAnalyzerView mainView, JFrame parentFrame) {
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(""Save your content"");
        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        int returnVal = fileChooser.showSaveDialog(parentFrame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            mainView.toFileTextField.setText(fileChooser.getSelectedFile().toString());
            mainView.toFileCheckBox.setSelected(true);
        } else {
            System.out.println(""File wasn't choosen!"");
        }
    }
}
","// HttpFileUtils_1Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
*/
class HttpFileUtils_1Test {","// HttpFileUtils_1Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
*/
class HttpFileUtils_1Test {

		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyHost""), ""proxy.example.com"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_1() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyPort""), ""8080"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_2() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyUser""), ""user"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_3() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyPassword""), ""password"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_4() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxySet""), ""true"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_5() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyHost""), ""proxy.example.com"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_6() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyPort""), ""8080"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_7() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyUser""), ""user"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_8() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyPassword""), ""password"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_9() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxySet""), ""true"");
		}
		
		/**
		* Test case for {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* Test case for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testLoadPreferenceFromFile_10() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = httpFileUtils.loadPreferenceFromFile(parentFrame);
				assertEquals(properties.getProperty(""http.proxyHost""), ""proxy.example.com"");
		}
}

// HttpFileUtils_2Test.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
*/
class HttpFileUtils_2Test {
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile_1() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile_2() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile_3() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile_4() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* This test case checks if the method returns the correct value.
		*/
		@Test
		void testSavePreferenceToFile_5() {
				HttpFileUtils httpFileUtils = new HttpFileUtils();
				JFrame parentFrame = new JFrame();
				Properties properties = new Properties();
				properties.setProperty(""http.proxyHost"", ""proxy.example.com"");
				properties.setProperty(""http.proxyPort"", ""8080"");
				properties.setProperty(""http.proxyUser"", ""user"");
				properties.setProperty(""http.proxyPassword"", ""password"");
				properties.setProperty(""http.proxySet"", ""true"");
				httpFileUtils.savePreferenceToFile(properties, parentFrame);
		}
		
		/**
		* Test case for {@link HttpFileUtils#savePreferenceToFile(Properties, JFrame)} method.
		* Test case for the {@link HttpFileUtils#savePre"
cmpl-6u26Mob9sw4aI9adNConIixxc4TXq,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/HttpPreference.java,101.93584203720093,length,"// HttpPreference.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes) {
        Properties properties = new Properties();
        if (notes != null) {
            properties.setProperty(""httpanalyzer.notes"", notes);
        }
        properties.setProperty(""httpanalyzer.tools.options.merge"", Boolean.toString(analyseView.mergeInfoCheckBox.isSelected()));
        if (analyseView.proxyNoneRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.proxytype"", ""None"");
        } else if (analyseView.proxyHttpRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.proxytype"", ""Http"");
        } else {
            properties.setProperty(""httpanalyzer.options.proxytype"", ""Socks"");
        }
        properties.setProperty(""httpanalyzer.options.proxy"", analyseView.proxyField.getText());
        properties.setProperty(""httpanalyzer.options.proxyauth"", Boolean.toString(analyseView.proxyAuthCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.proxyuser"", analyseView.proxyUserTextField.getText());
        properties.setProperty(""httpanalyzer.options.proxypassword"", new String(analyseView.proxyPassPasswordField.getPassword()));
        // properties.setProperty(""httpanalyzer.options.sockslevel"", );
        properties.setProperty(""httpanalyzer.options.httpversion"", analyseView.httpVersionComboBox.getSelectedItem().toString());
        properties.setProperty(""httpanalyzer.options.httpauth"", Boolean.toString(analyseView.httpAuthCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.httpauthuser"", analyseView.httpUserTextField.getText());
        properties.setProperty(""httpanalyzer.options.httpauthpassword"", new String(analyseView.httpPassPasswordField.getPassword()));
        properties.setProperty(""httpanalyzer.options.customrefer.enable"", Boolean.toString(analyseView.customRefererCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.customrefer"", analyseView.customRefererTextField.getText());
        properties.setProperty(""httpanalyzer.options.customcookie.enable"", Boolean.toString(analyseView.customCookieCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.customcookie"", analyseView.customCookieTextField.getText());
        if (analyseView.firefoxRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""0"");
        } else if (analyseView.ie6RadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""1"");
        } else if (analyseView.ie7RadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""2"");
        } else if (analyseView.ie8RadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""3"");
        } else if (analyseView.googleBotRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""4"");
        } else if (analyseView.msnRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""5"");
        } else if (analyseView.yahooRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""6"");
        } else if (analyseView.iPhoneRadioButton.isSelected()) {
            properties.setProperty(""httpanalyzer.options.agents"", ""7"");
        }
        if (analyseView.getRadio.isSelected()) {
            properties.setProperty(""httpanalyzer.options.method"", ""GET"");
        } else if (analyseView.postRadio.isSelected()) {
            properties.setProperty(""httpanalyzer.options.method"", ""POST"");
        } else {
            properties.setProperty(""httpanalyzer.options.method"", ""HEAD"");
        }
        properties.setProperty(""httpanalyzer.options.tofile.enable"", Boolean.toString(analyseView.toFileCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.tofile"", analyseView.toFileTextField.getText());
        properties.setProperty(""httpanalyzer.options.urlcombo.elements"", Integer.toString(analyseView.urlCombo.getItemCount()));
        for (int i = 0; i < analyseView.urlCombo.getItemCount(); i++) {
            properties.setProperty(""httpanalyzer.options.urlcombo."" + Integer.toString(i), analyseView.urlCombo.getItemAt(i).toString());
        }
        properties.setProperty(""httpanalyzer.options.params.elements"", Integer.toString(analyseView.paramsComboBox.getItemCount()));
        for (int i = 0; i < analyseView.paramsComboBox.getItemCount(); i++) {
            properties.setProperty(""httpanalyzer.options.params."" + Integer.toString(i), analyseView.paramsComboBox.getItemAt(i).toString());
        }
        properties.setProperty(""httpanalyzer.options.usecustom.headers"", Boolean.toString(analyseView.useCustomHeadersCheckBox.isSelected()));
        properties.setProperty(""httpanalyzer.options.custom.headers"", analyseView.customHeaders.getText());
        properties.setProperty(""httpanalyzer.options.intelligencemode"", Boolean.toString(analyseView.intelSaveCheckBox.isSelected()));
        HttpFileUtils fileUtil = new HttpFileUtils();
        fileUtil.savePreferenceToFile(properties, parentFrame);
    }

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame) {
        Properties properties = new Properties();
        HttpFileUtils fileUtil = new HttpFileUtils();
        properties = fileUtil.loadPreferenceFromFile(parentFrame);
        // Set values
        mainView.mergeInfoCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.tools.options.merge"")));
        String workProps = properties.getProperty(""httpanalyzer.options.proxytype"");
        if (workProps.equals(""None"")) {
            mainView.proxyNoneRadioButton.setSelected(true);
        } else if (workProps.equals(""Http"")) {
            mainView.proxyHttpRadioButton.setSelected(true);
        } else {
            mainView.proxySocksRadioButton.setSelected(true);
        }
        mainView.proxyField.setText(properties.getProperty(""httpanalyzer.options.proxy""));
        mainView.proxyAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.proxyauth"")));
        mainView.proxyUserTextField.setText(properties.getProperty(""httpanalyzer.options.proxyuser""));
        mainView.proxyPassPasswordField.setText(properties.getProperty(""httpanalyzer.options.proxypassword""));
        if (properties.getProperty(""httpanalyzer.options.httpversion"").equals(""1.1"")) {
            mainView.httpVersionComboBox.setSelectedIndex(0);
        } else {
            mainView.httpVersionComboBox.setSelectedIndex(1);
        }
        mainView.httpAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.httpauth"")));
        mainView.httpUserTextField.setText(properties.getProperty(""httpanalyzer.options.httpauthuser""));
        mainView.httpPassPasswordField.setText(properties.getProperty(""httpanalyzer.options.httpauthpassword""));
        mainView.customRefererCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.customrefer.enable"")));
        mainView.customRefererTextField.setText(properties.getProperty(""httpanalyzer.options.customrefer""));
        mainView.customCookieCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.customcookie.enable"")));
        mainView.customCookieTextField.setText(properties.getProperty(""httpanalyzer.options.customcookie""));
        workProps = properties.getProperty(""httpanalyzer.options.agents"");
        if (workProps.equals(""0"")) {
            mainView.firefoxRadioButton.setSelected(true);
        } else if (workProps.equals(""1"")) {
            mainView.ie6RadioButton.setSelected(true);
        } else if (workProps.equals(""2"")) {
            mainView.ie7RadioButton.setSelected(true);
        } else if (workProps.equals(""3"")) {
            mainView.ie8RadioButton.setSelected(true);
        } else if (workProps.equals(""4"")) {
            mainView.googleBotRadioButton.setSelected(true);
        } else if (workProps.equals(""5"")) {
            mainView.msnRadioButton.setSelected(true);
        } else if (workProps.equals(""6"")) {
            mainView.yahooRadioButton.setSelected(true);
        } else {
            mainView.iPhoneRadioButton.setSelected(true);
        }
        workProps = properties.getProperty(""httpanalyzer.options.method"");
        if (workProps.equals(""GET"")) {
            mainView.getRadio.setSelected(true);
        } else if (workProps.equals(""POST"")) {
            mainView.postRadio.setSelected(true);
        } else {
            mainView.headRadio.setSelected(true);
        }
        mainView.toFileTextField.setText(properties.getProperty(""httpanalyzer.options.tofile""));
        mainView.toFileCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.tofile.enable"")));
        int ii = Integer.decode(properties.getProperty(""httpanalyzer.options.urlcombo.elements""));
        mainView.urlCombo.removeAllItems();
        for (int i = 0; i < ii; i++) {
            String el = properties.getProperty(""httpanalyzer.options.urlcombo."" + Integer.toString(i));
            mainView.urlCombo.addItem(el);
        }
        ii = Integer.decode(properties.getProperty(""httpanalyzer.options.params.elements""));
        mainView.paramsComboBox.removeAllItems();
        for (int i = 0; i < ii; i++) {
            String el = properties.getProperty(""httpanalyzer.options.params."" + Integer.toString(i));
            mainView.paramsComboBox.addItem(el);
        }
        mainView.customHeaders.setText(properties.getProperty(""httpanalyzer.options.custom.headers""));
        mainView.useCustomHeadersCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.usecustom.headers"")));
        mainView.intelSaveCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(""httpanalyzer.options.intelligencemode"")));
        return properties.getProperty(""httpanalyzer.notes"");
    }
}
","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {

	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference1() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference2() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference3() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference4() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference5() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference6() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference7() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference8() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference9() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	void testLoadPreference10() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = new HttpAnalyzerView();
		JFrame parentFrame = new JFrame();
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
	}
	
}

// HttpFileUtils.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * @author vlad
 */
public class HttpFileUtils {

    /**
     * Save properties to file
     * @param properties Properties
     * @param parentFrame JFrame
     */
    public void savePreferenceToFile(Properties properties, JFrame parentFrame) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle(""Save preferences"");
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setFileFilter(new HttpFileFilter(""properties"", ""Properties files""));
        int result = fileChooser.showSaveDialog(parentFrame);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            if (!file.getName().endsWith("".properties"")) {
                file = new File(file.getAbsolutePath() + "".properties"");
            }
            try {
                FileOutputStream fos = new FileOutputStream(file);
                properties.store(fos, ""HttpAnalyzer preferences"");
                fos.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(parentFrame, ""Error saving preferences to file: "" + ex.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Load properties from file
     * @param parentFrame JFrame
     * @return Properties
     */
    public Properties loadPreferenceFromFile(JFrame parentFrame) {
        Properties properties = new Properties();
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle(""Load preferences"");
        fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileFilter(new HttpFileFilter(""properties"", ""Properties files""));
        int result = fileChooser.showOpenDialog(parentFrame);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                FileInputStream fis = new FileInputStream(file);
                properties.load(fis);
                fis.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(parentFrame, ""Error loading preferences from file: "" + ex.getMessage(), ""Error"", JOptionPane.ERROR_MESSAGE);
            }
        }
        return properties;
    }
}

// HttpFileFilter.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.io.File;
import javax.swing.filechooser.FileFilter;

/**
 * @author vlad
 */
public class HttpFileFilter extends FileFilter {

    private String extension;
    private String description;

    /**
     * Constructor
     * @param extension String
     * @param description String
     */
    public HttpFileFilter(String extension, String description) {
        this.extension = extension;
        this.description = description;
    }

    /**
     * Accept file
     * @param f File
     * @return boolean
     */
    @Override
    public boolean accept(File f) {
        if (f.isDirectory()) {
            return true;
        }
        String ext = getExtension(f);
        if (ext != null) {
            if (ext.equals(extension)) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    /**
     * Get extension
     * @param f File
     * @return String
     */
    public String getExtension(File f) {
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');
        if (i > 0 && i < s.length() - 1) {
            ext = s.substring(i + 1).toLowerCase();
        }
        return ext;
    }

    /**
     * Get description
     * @return String
     */
    @Override
    public String getDescription() {
        return description;
    }
}

// HttpFileUtilsTest.java
package httpanalyzer;

import java.io.File;
import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#loadPreferenceFromFile(JFrame)} method.
*/
class HttpFileUtilsTest {
		
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile1() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile2() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile3() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile4() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreferenceFromFile method, of class HttpFileUtils.
	 */
	@Test
	void testLoadPreferenceFromFile5() {
		System.out.println(""loadPreferenceFromFile"");
		JFrame parentFrame = new JFrame();
		HttpFileUtils instance = new HttpFileUtils();
		Properties expResult = new Properties();
		Properties result = instance.loadPreferenceFromFile(parentFrame);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of loadPreference"
cmpl-6u280yWypPDSuxKDSsMOhcWvJLIWG,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools_0Test.java,81.45421433448792,length,"// ParamsUrlTools.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 * @author vlad
 */
public class ParamsUrlTools {

    /**
     * Transform long String line with parameters
     * to List (key, value)
     * @param params String
     * @return List<NameValuePair>
     */
    public List<NameValuePair> getPairParams(String params) {
        String[] requestParams = params.split(""&"");
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        for (int i = 0; i < requestParams.length; i++) {
            String workVal = requestParams[i];
            System.out.println(""Val ="" + workVal + ""="");
            if (!workVal.isEmpty()) {
                int f_index = requestParams[i].indexOf(""="");
                String key = requestParams[i].substring(0, f_index);
                String val = requestParams[i].substring(f_index + 1);
                //System.out.println(""i=""+i+"", string=""+requestParams[i]);
                System.out.println(""key = "" + key + "", val="" + val);
                nvps.add(new BasicNameValuePair(key, val));
            }
        }
        System.out.println("""");
        return nvps;
    }

    /**
     * Get URL and check it. Apply HTTP scheme only.
     * Cut URL on some parts and send them.
     * Return String array = {host, port, path, checkedUrl}
     * @return String[]
     */
    public String[] splitUrl(String startUrl, JFrame parentFrame) {
        String[] returnParams = new String[4];
        // Verify format of URL.
        URI verifiedUrl = null;
        try {
            verifiedUrl = new URI(startUrl);
            returnParams[0] = verifiedUrl.getHost();
            returnParams[1] = Integer.toString(verifiedUrl.getPort());
            returnParams[2] = verifiedUrl.getPath();
            String urlSchema = verifiedUrl.getScheme();
            returnParams[3] = verifiedUrl.toASCIIString();
            /*String urlPath = verifiedUrl.getPath();
            System.out.println(""Host =""+targetHost);
            System.out.println(""Path =""+urlPath);
            System.out.println(""Checked =""+checkedUrl);
            System.out.println(""Query =""+verifiedUrl.getQuery());
            System.out.println(""Checked =""+verifiedUrl.getScheme());*/
            if (!urlSchema.startsWith(""http"")) {
                String message = ""Sorry,\n but HTTP(S) protocols are permited only"";
                new SwingTools(parentFrame).showErrorDialog(""URL Error"", message);
            }
        } catch (URISyntaxException ex) {
            String message = startUrl + ""\n is not valid."";
            new SwingTools(parentFrame).showErrorDialog(""URL Error"", message);
        }
        return returnParams;
    }
}
","// ParamsUrlTools_0Test.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlTools_0Test {","// ParamsUrlTools_0Test.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlTools_0Test {

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_0() {
		System.out.println(""getPairParams"");
		String params = """";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_1() {
		System.out.println(""getPairParams"");
		String params = ""a=1"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_2() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_3() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_4() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_5() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4&e=5"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		expResult.add(new BasicNameValuePair(""e"", ""5""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_6() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4&e=5&f=6"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		expResult.add(new BasicNameValuePair(""e"", ""5""));
		expResult.add(new BasicNameValuePair(""f"", ""6""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_7() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4&e=5&f=6&g=7"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		expResult.add(new BasicNameValuePair(""e"", ""5""));
		expResult.add(new BasicNameValuePair(""f"", ""6""));
		expResult.add(new BasicNameValuePair(""g"", ""7""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_8() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		expResult.add(new BasicNameValuePair(""e"", ""5""));
		expResult.add(new BasicNameValuePair(""f"", ""6""));
		expResult.add(new BasicNameValuePair(""g"", ""7""));
		expResult.add(new BasicNameValuePair(""h"", ""8""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	void testGetPairParams_9() {
		System.out.println(""getPairParams"");
		String params = ""a=1&b=2&c=3&d=4&e=5&f=6&g=7&h=8&i=9"";
		ParamsUrlTools instance = new ParamsUrlTools();
		List<NameValuePair> expResult = new ArrayList<NameValuePair>();
		expResult.add(new BasicNameValuePair(""a"", ""1""));
		expResult.add(new BasicNameValuePair(""b"", ""2""));
		expResult.add(new BasicNameValuePair(""c"", ""3""));
		expResult.add(new BasicNameValuePair(""d"", ""4""));
		expResult.add(new BasicNameValuePair(""e"", ""5""));
		expResult.add(new BasicNameValuePair(""f"", ""6""));
		expResult.add(new BasicNameValuePair(""g"", ""7""));
		expResult.add(new BasicNameValuePair(""h"", ""8""));
		expResult.add(new BasicNameValuePair(""i"", ""9""));
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}
}

// ParamsUrlTools_1Test.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#splitUrl(String, JFrame)} method.
*/
class ParamsUrlTools_1Test {
		
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_0() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = """";
		expResult[3] = ""http://www.google.com"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_1() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = ""/"";
		expResult[3] = ""http://www.google.com/"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_2() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/index.html"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = ""/index.html"";
		expResult[3] = ""http://www.google.com/index.html"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_3() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/index.html?a=1"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = ""/index.html"";
		expResult[3] = ""http://www.google.com/index.html?a=1"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_4() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/index.html?a=1&b=2"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = ""/index.html"";
		expResult[3] = ""http://www.google.com/index.html?a=1&b=2"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_5() {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/index.html?a=1&b=2&c=3"";
		JFrame parentFrame = null;
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = new String[4];
		expResult[0] = ""www.google.com"";
		expResult[1] = ""-1"";
		expResult[2] = ""/index.html"";
		expResult[3] = ""http://www.google.com/index.html?a=1&b=2&c=3"";
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	void testSplitUrl_6() {
		System.out."
cmpl-6u29KcBk7AAEuVXUHjV3Ld2zFp1I5,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools_1Test.java,44.11497402191162,stop,"// ParamsUrlTools.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 * @author vlad
 */
public class ParamsUrlTools {

    /**
     * Transform long String line with parameters
     * to List (key, value)
     * @param params String
     * @return List<NameValuePair>
     */
    public List<NameValuePair> getPairParams(String params) {
        String[] requestParams = params.split(""&"");
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        for (int i = 0; i < requestParams.length; i++) {
            String workVal = requestParams[i];
            System.out.println(""Val ="" + workVal + ""="");
            if (!workVal.isEmpty()) {
                int f_index = requestParams[i].indexOf(""="");
                String key = requestParams[i].substring(0, f_index);
                String val = requestParams[i].substring(f_index + 1);
                //System.out.println(""i=""+i+"", string=""+requestParams[i]);
                System.out.println(""key = "" + key + "", val="" + val);
                nvps.add(new BasicNameValuePair(key, val));
            }
        }
        System.out.println("""");
        return nvps;
    }

    /**
     * Get URL and check it. Apply HTTP scheme only.
     * Cut URL on some parts and send them.
     * Return String array = {host, port, path, checkedUrl}
     * @return String[]
     */
    public String[] splitUrl(String startUrl, JFrame parentFrame) {
        String[] returnParams = new String[4];
        // Verify format of URL.
        URI verifiedUrl = null;
        try {
            verifiedUrl = new URI(startUrl);
            returnParams[0] = verifiedUrl.getHost();
            returnParams[1] = Integer.toString(verifiedUrl.getPort());
            returnParams[2] = verifiedUrl.getPath();
            String urlSchema = verifiedUrl.getScheme();
            returnParams[3] = verifiedUrl.toASCIIString();
            /*String urlPath = verifiedUrl.getPath();
            System.out.println(""Host =""+targetHost);
            System.out.println(""Path =""+urlPath);
            System.out.println(""Checked =""+checkedUrl);
            System.out.println(""Query =""+verifiedUrl.getQuery());
            System.out.println(""Checked =""+verifiedUrl.getScheme());*/
            if (!urlSchema.startsWith(""http"")) {
                String message = ""Sorry,\n but HTTP(S) protocols are permited only"";
                new SwingTools(parentFrame).showErrorDialog(""URL Error"", message);
            }
        } catch (URISyntaxException ex) {
            String message = startUrl + ""\n is not valid."";
            new SwingTools(parentFrame).showErrorDialog(""URL Error"", message);
        }
        return returnParams;
    }
}
","// ParamsUrlTools_1Test.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#splitUrl(String, JFrame)} method.
*/
class ParamsUrlTools_1Test {","// ParamsUrlTools_1Test.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#splitUrl(String, JFrame)} method.
*/
class ParamsUrlTools_1Test {

	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_1() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_2() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_3() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_4() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_5() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_6() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_7() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_8() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_9() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 * @throws java.net.URISyntaxException
	 */
	@Test
	void testSplitUrl_10() throws URISyntaxException {
		System.out.println(""splitUrl"");
		String startUrl = ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq="";
		JFrame parentFrame = new JFrame();
		ParamsUrlTools instance = new ParamsUrlTools();
		String[] expResult = {""www.google.com"", ""80"", ""/search"", ""http://www.google.com/search?q=httpclient&btnG=Google+Search&aq=f&oq=""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
	
}"
f08ed2c6-d348-441f-a922-589dbc5867dc,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/Password_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8255 tokens (4255 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Password.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author David Scott
 */
public class Password {

    /**
     * 	Password is a class to implement password encryption as used
     * 	on Unix systems. It is compatible with the crypt(3c) system function.
     * 	This version is a based on the DES encryption algorithm in
     * 	Andrew Tanenbaum's book ""Computer Networks"". It was rewritten
     * 	in C and used in Perl release 4.035. This version was rewritten
     * 	in Java by David Scott, Siemens Ltd., Australia.
     *
     * 	For further details on the methods in this class, refer to the
     * 	Unix man pages for crypt(3c).
     */
    private static byte[] InitialTr = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };

    private static byte[] FinalTr = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };

    private static byte[] swap = { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };

    private static byte[] KeyTr1 = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

    private static byte[] KeyTr2 = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

    private static byte[] etr = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };

    private static byte[] ptr = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };

    private static byte[][] s_boxes = { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }, { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }, { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }, { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }, { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }, { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }, { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }, { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };

    private static int[] rots = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

    private static byte[] key = new byte[64];

    private static byte[] EP = etr;

    /* *** Methods start here *** */
    private static void transpose(byte[] data, byte[] t, int n) {
        byte[] x = new byte[64];
        System.arraycopy(data, 0, x, 0, x.length);
        while (n-- > 0) {
            data[n] = x[t[n] - 1];
        }
    }

    private static void rotate(byte[] key) {
        byte[] x = new byte[64];
        System.arraycopy(key, 0, x, 0, x.length);
        for (int i = 0; i < 55; i++) {
            x[i] = x[i + 1];
        }
        x[27] = key[0];
        x[55] = key[28];
        System.arraycopy(x, 0, key, 0, key.length);
    }

    private static void f(int i, byte[] key, byte[] a, byte[] x) {
        byte[] e = new byte[64];
        byte[] ikey = new byte[64];
        byte[] y = new byte[64];
        System.arraycopy(a, 0, e, 0, e.length);
        transpose(e, EP, 48);
        for (int j = rots[i]; j > 0; j--) {
            rotate(key);
        }
        System.arraycopy(key, 0, ikey, 0, ikey.length);
        transpose(ikey, KeyTr2, 48);
        for (int j = 0; j < 48; j++) {
            y[j] = (byte) (e[j] ^ ikey[j]);
        }
        for (int j = 0; j < 8; j++) {
            int k = j + 1;
            int r = 32 * y[6 * k - 6] + 8 * y[6 * k - 5] + 4 * y[6 * k - 4] + 2 * y[6 * k - 3] + y[6 * k - 2] + 16 * y[6 * k - 1];
            int xb = s_boxes[j][r];
            x[4 * k - 4] = (byte) ((xb >> 3) & 1);
            x[4 * k - 3] = (byte) ((xb >> 2) & 1);
            x[4 * k - 2] = (byte) ((xb >> 1) & 1);
            x[4 * k - 1] = (byte) (xb & 1);
        }
        transpose(x, ptr, 32);
    }

    private static void definekey(byte[] k) {
        System.arraycopy(k, 0, key, 0, key.length);
        transpose(key, KeyTr1, 56);
    }

    private static void encrypt(byte[] blck, int edflag) {
        byte[] p = blck;
        transpose(p, InitialTr, 64);
        for (int i = 15; i >= 0; i--) {
            int j = edflag > 0 ? i : 15 - i;
            byte[] b = new byte[64];
            System.arraycopy(p, 0, b, 0, b.length);
            byte[] x = new byte[64];
            for (int k = 31; k >= 0; k--) {
                p[k] = b[k + 32];
            }
            f(j, key, p, x);
            for (int k = 31; k >= 0; k--) {
                p[k + 32] = (byte) (b[k] ^ x[k]);
            }
        }
        transpose(p, swap, 64);
        transpose(p, FinalTr, 64);
        blck = p;
    }

    /**
     * 	Returns a String containing the encrypted passwd
     *
     * 	@param	strpw	A String containing the un-encrypted password
     * 	@param	strsalt	A 2 character String, containing the salt to
     * 					encrypt the password with.
     * 	@returns		String containing encrypted password.
     */
    public static String crypt(String strpw, String strsalt) {
        char[] pw = strpw.toCharArray();
        char[] salt = strsalt.toCharArray();
        byte[] pwb = new byte[66];
        char[] result = new char[13];
        byte[] new_etr = new byte[etr.length];
        int n = 0;
        int m = 0;
        while (m < pw.length && n < 64) {
            for (int j = 6; j >= 0; j--) {
                pwb[n++] = (byte) ((pw[m] >> j) & 1);
            }
            // Increment pw
            m++;
            pwb[n++] = 0;
        }
        while (n < 64) {
            pwb[n++] = 0;
        }
        definekey(pwb);
        for (n = 0; n < 66; n++) {
            pwb[n] = 0;
        }
        System.arraycopy(etr, 0, new_etr, 0, new_etr.length);
        EP = new_etr;
        for (int i = 0; i < 2; i++) {
            char c = salt[i];
            result[i] = c;
            if (c > 'Z') {
                // c was a lowercase letter
                c -= 6 + 7 + '.';
            } else if (c > '9') {
                // c was a uppercase letter
                c -= 7 + '.';
            } else {
                // c was a digit, '.' or '/'
                c -= '.';
            }
            // now, 0 <= c <= 63
            for (int j = 0; j < 6; j++) {
                if (((c >> j) & 1) == 1) {
                    byte t = (byte) (6 * i + j);
                    byte temp = new_etr[t];
                    new_etr[t] = new_etr[t + 24];
                    new_etr[t + 24] = temp;
                }
            }
        }
        if (result[1] == 0) {
            result[1] = result[0];
        }
        for (int i = 0; i < 25; i++) {
            encrypt(pwb, 0);
        }
        EP = etr;
        m = 2;
        n = 0;
        while (n < 66) {
            int c = 0;
            for (int j = 6; j > 0; j--) {
                c <<= 1;
                c |= pwb[n++];
            }
            // becomes >= '.'
            c += '.';
            if (c > '9') {
                // not in [./0-9], becomes upper
                c += 7;
            }
            if (c > 'Z') {
                // not in [A-Z], becomes lower
                c += 6;
            }
            result[m++] = (char) c;
        }
        return (new String(result));
    }

    public static String hashMD5(String baseString) {
        MessageDigest digest = null;
        StringBuffer hexString = new StringBuffer();
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.update(baseString.getBytes());
            byte[] hash = digest.digest();
            for (int i = 0; i < hash.length; i++) {
                if ((0xff & hash[i]) < 0x10) {
                    hexString.append(""0"" + Integer.toHexString((0xFF & hash[i])));
                } else {
                    hexString.append(Integer.toHexString(0xFF & hash[i]));
                }
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Password.class.getName()).log(Level.SEVERE, null, ex);
        }
        return hexString.toString();
    }
}
","// Password_0Test.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.
*/
class Password_0Test {","// Password_0Test.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.
*/
class Password_0Test {
"
cmpl-6u2BLz8rITSv6LGLa2ISXYQkBI5wi,/EvoSuiteBenchmark/32_httpanalyzer/src/main/java/httpanalyzer/SwingTools.java,47.25764727592468,,"// SwingTools.java
/*
 * GNU GENERAL PUBLIC LICENSE
 * Version 3, 29 June 2007
 * 
 * Copyright (C) 2010, vlad
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package httpanalyzer;

import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;

/**
 * @author vlad
 */
public class SwingTools {

    public final Color COOKIE_COLOR = Color.cyan;

    public final Color DATE_COLOR = Color.white;

    public final Color POST_DATA_COLOR = Color.magenta;

    public final Color SPLITER_COLOR = Color.lightGray;

    public final Color REQUEST_COLOR = Color.lightGray;

    public final Color RESPONSE_COLOR = Color.green;

    public final Color ENTITY_COLOR = Color.yellow;

    private HttpAnalyzerView httpView;

    private JFrame parentFrame;

    public SwingTools(JFrame mainFrame) {
        parentFrame = mainFrame;
    }

    public SwingTools(HttpAnalyzerView mainView, JFrame mainFrame) {
        httpView = mainView;
        parentFrame = mainFrame;
    }

    /**
     * Search selected items in Combo
     * Replay TRUE if it is found
     * @param targetCombo
     * @return
     */
    public boolean checkAddComboItem(JComboBox targetCombo) {
        int lenCombo = targetCombo.getItemCount();
        String currentItem = (String) targetCombo.getSelectedItem();
        boolean result = false;
        //System.out.println(""Curr""+currentItem);
        for (int i = 0; i < lenCombo; i++) {
            //System.out.println(""Check ""+targetCombo.getItemAt(i));
            if (targetCombo.getItemAt(i).equals(currentItem)) {
                result = true;
            } else if (currentItem.isEmpty()) {
                result = true;
            }
        }
        return result;
    }

    /**
     * Show error frame with additional information
     * @param header Windows header
     * @param error Text of error
     */
    public void showErrorDialog(String header, String error) {
        String message = ""\""Information:\n"" + error + ""\"""";
        JOptionPane.showMessageDialog(parentFrame, message, header, JOptionPane.ERROR_MESSAGE);
    }

    /*
     * Change text color
     */
    public void spliterOut() {
        Document doc = httpView.replayDataPane.getStyledDocument();
        SimpleAttributeSet set = new SimpleAttributeSet();
        StyleConstants.setForeground(set, SPLITER_COLOR);
        //StyleConstants.setBackground(set, Color.blue);
        doc = httpView.replayDataPane.getStyledDocument();
        try {
            doc.insertString(doc.getLength(), ""----------------------------------------\n"", set);
        } catch (BadLocationException ex) {
            Logger.getLogger(SwingTools.class.getName()).log(Level.SEVERE, null, ex);
            new SwingTools(parentFrame).showErrorDialog(""Bad location"", ex.getLocalizedMessage());
        }
    }

    /**
     * Output text to another Panes.
     * replayTick points destination of output.
     * True = replayPane, False = debugPane.
     *
     * @param text String message
     * @param col Color Text color
     * @param replayTick boolean
     */
    public void setColorTextDoc(String text, Color col, boolean replayTick) {
        SimpleAttributeSet set = new SimpleAttributeSet();
        set = new SimpleAttributeSet();
        StyleConstants.setForeground(set, col);
        Document doc = httpView.replayDataPane.getStyledDocument();
        if ((replayTick) || (httpView.mergeInfoCheckBox.isSelected())) {
            doc = httpView.replayDataPane.getStyledDocument();
        } else {
            doc = httpView.debugDataPane.getStyledDocument();
        }
        try {
            doc.insertString(doc.getLength(), text, set);
        } catch (BadLocationException ex) {
            Logger.getLogger(SwingTools.class.getName()).log(Level.SEVERE, null, ex);
            new SwingTools(parentFrame).showErrorDialog(""Bad location"", ex.getLocalizedMessage());
        }
    }

    public void showEntity(HttpEntity entity) {
        // Show content
        String entityString = null;
        try {
            entityString = EntityUtils.toString(entity);
        } catch (IOException ex) {
            Logger.getLogger(SwingTools.class.getName()).log(Level.SEVERE, null, ex);
            new SwingTools(parentFrame).showErrorDialog(""IO error"", ex.getLocalizedMessage());
        }
        //System.out.println(entityString);
        setColorTextDoc(entityString + ""\n"", ENTITY_COLOR, true);
    }
}
","// SwingToolsTest.java
package httpanalyzer;

import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#checkAddComboItem(JComboBox)} method.
*/
class SwingToolsTest {","// SwingToolsTest.java
package httpanalyzer;

import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.http.HttpEntity;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#checkAddComboItem(JComboBox)} method.
*/
class SwingToolsTest {

		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is already in the combo box.
		*/
		@Test
		void testCheckAddComboItem_ItemAlreadyInComboBox() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem(""Item 2"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns false when the selected item is not in the combo box.
		*/
		@Test
		void testCheckAddComboItem_ItemNotInComboBox() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem(""Item 4"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertFalse(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is empty.
		*/
		@Test
		void testCheckAddComboItem_EmptyItem() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem("""");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is null.
		*/
		@Test
		void testCheckAddComboItem_NullItem() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem(null);
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is the first item in the combo box.
		*/
		@Test
		void testCheckAddComboItem_FirstItem() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem(""Item 1"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is the last item in the combo box.
		*/
		@Test
		void testCheckAddComboItem_LastItem() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.addItem(""Item 2"");
				comboBox.addItem(""Item 3"");
				comboBox.setSelectedItem(""Item 3"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is the only item in the combo box.
		*/
		@Test
		void testCheckAddComboItem_OnlyItem() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.addItem(""Item 1"");
				comboBox.setSelectedItem(""Item 1"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the combo box is empty.
		*/
		@Test
		void testCheckAddComboItem_EmptyComboBox() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.setSelectedItem(""Item 1"");
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the combo box is null.
		*/
		@Test
		void testCheckAddComboItem_NullComboBox() {
				JComboBox<String> comboBox = null;
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
		/**
		* Test case for {@link SwingTools#checkAddComboItem(JComboBox)} method.
		* It checks if the method returns true when the selected item is null and the combo box is empty.
		*/
		@Test
		void testCheckAddComboItem_NullItemAndEmptyComboBox() {
				JComboBox<String> comboBox = new JComboBox<>();
				comboBox.setSelectedItem(null);
				
				SwingTools swingTools = new SwingTools(new JFrame());
				boolean result = swingTools.checkAddComboItem(comboBox);
				
				assertTrue(result);
		}
		
}"
