ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
2f41a2be-2777-4811-9b42-57dceab33f4f,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9559 tokens (7559 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getProps(String)} method.
*/
class Login_0Test {","// Login_0Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getProps(String)} method.
*/
class Login_0Test {
"
27c77a10-4433-476e-9f93-af41fba194de,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9558 tokens (7558 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getProps()} method.
*/
class Login_1Test {","// Login_1Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getProps()} method.
*/
class Login_1Test {
"
ce03aa84-3086-48f5-8815-3b5c1f0cfda9,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9560 tokens (7560 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {","// Login_2Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getSecurityLogFilePath()} method.
*/
class Login_2Test {
"
719ad14e-bff3-4519-b465-23bfdfa1338b,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9557 tokens (7557 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authorize()} method.
*/
class Login_3Test {","// Login_3Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authorize()} method.
*/
class Login_3Test {
"
980a0a8c-df0b-42ec-bf8a-f6b04e6dc7a2,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_4Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9562 tokens (7562 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authenticate(String, String, String)} method.
*/
class Login_4Test {","// Login_4Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authenticate(String, String, String)} method.
*/
class Login_4Test {
"
28d0190c-9cac-4a62-9734-728b164cdfa2,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_5Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9560 tokens (7560 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_5Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authorize(String, String)} method.
*/
class Login_5Test {","// Login_5Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authorize(String, String)} method.
*/
class Login_5Test {
"
2a0c97bd-def0-4f77-a342-1103ad88e8bf,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_6Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9557 tokens (7557 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_6Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authenticate()} method.
*/
class Login_6Test {","// Login_6Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#authenticate()} method.
*/
class Login_6Test {
"
a5c3d2f8-267f-46fa-8dca-c88810028b76,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/Login_7Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9563 tokens (7563 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 *   CVS $Id: Login.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;

/**
 * This class manages authentication and user
 * attribute retrieval when a user tries to log in.
 */
public class Login {

    //private static String[] names = null;
    //private static String[] mail = null;
    private String username = """";

    private static String organization = ""OPENHRE"";

    private static String country = ""US"";

    private String password = """";

    private String userid = """";

    private String ipAddr = """";

    // private static String userdb = ""users"";
    //AACS.properties
    private static String configFile = ""AACS"";

    private static String authType = ""simple"";

    private static String xacmlConfig = """";

    private static String securityLog = """";

    private static String securityLogFilePath = """";

    // Date format used by OpenHRE
    private final static String appDateFormat = ""MM/dd/yyyy"";

    // LDAP GeneralizedTime Format
    private final static String ldapGTFormat = ""yyyyMMddHHmmssZ"";

    private static Properties props;

    private static UserMgr userMgr;

    private static PDPadapter pdpadapter;

    private User user;

    private LdapService lservice;

    private static Logger cat = Logger.getLogger(Login.class.getName());

    /**
     * Public default constructor
     */
    public Login() {
    }

    /**
     * Construct a Login with a UserId
     */
    public Login(String userId) {
        this();
        this.setUserId(userId);
    }

    /**
     * Construct a Login with a UserId and IP Address
     */
    public Login(String userId, String ipAddr) {
        this(userId);
        this.setIpAddr(ipAddr);
    }

    /**
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     * Load and get the Properties from the Config File
     * @param theConfigFile the properties file
     */
    public static Properties getProps(String theConfigFile) {
        setConfigFile(theConfigFile);
        return getProps();
    }

    /**
     * Load and get the Properties from the preset Config File
     */
    public static Properties getProps() {
        init();
        return props;
    }

    /**
     * Initialize and load all the users.
     */
    public static String getSecurityLogFilePath() {
        return securityLogFilePath;
    }

    public static void init() {
        if (props != null)
            return;
        props = new Properties();
        cat.info(""Loading Properties from "" + configFile);
        loadProperties(props, configFile);
        // set the default organization and country
        organization = props.getProperty(""organization"", ""OPENHRE"");
        country = props.getProperty(""country"", ""US"");
        authType = props.getProperty(""AuthType"", ""simple"");
        xacmlConfig = props.getProperty(""XACMLConfig"", """");
        cat.info(""organization is "" + organization);
        cat.info(""country is "" + country);
        cat.info(""AuthType is "" + authType);
        cat.info(""XACMLConfig is "" + xacmlConfig);
        securityLog = props.getProperty(""SecurityLog"", """");
        // create security log file if it doesn't exist
        try {
            File file = new File(securityLog);
            securityLogFilePath = file.getAbsolutePath();
            cat.info(""Preparing Security Log file "" + securityLogFilePath);
            // Create file if it does not exist
            file.createNewFile();
            // Get the XACML PDPadapter
            pdpadapter = new PDPadapter(xacmlConfig);
        } catch (Exception e) {
            cat.fatal(""Exception initializing Login manager"", e);
            e.printStackTrace();
        }
        if (userMgr == null) {
            if (authType.equals(""simple"")) {
                userMgr = new SimpleUserMgr(configFile);
            } else if (authType.equals(""krb5"")) {
                userMgr = new KrbUserMgr();
            }
        }
    }

    public static void loadProperties(Properties props, String configFile) {
        try {
            props.load(Login.class.getResourceAsStream(configFile + "".properties""));
        } catch (Exception e) {
            System.out.println(""Could not read "" + configFile + "".properties"");
            e.printStackTrace();
        }
    }

    /**
     * set the username  and get the user corresponding to the resulting dn
     * @param username
     */
    public void setUsername(String username) {
        //		System.out.println(""setting username: "" +username);
        //        user = null;
        this.username = username.trim();
        //user = userMgr.getUser(username, organization);
        user.setUserName(username);
        cat.debug(""setUserName: "" + username);
    }

    /**
     * Get filepath of security log.
     * ASSUMPTION: init() was called (i.e. securityLog was initialized)
     * @return absolute filepath
     */
    /**
     * get the current username  from user if defined
     */
    public String getUsername() {
        if (user != null)
            return user.getUserName();
        else
            return username;
    }

    /**
     * set ipAddr for login
     * @param ipAddr
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
        if (user != null)
            user.setIpAddr(ipAddr);
    }

    /**
     * get ipAddress of user if defined
     * return String
     */
    public String getIpAddr() {
        if (user != null)
            return user.getIpAddr();
        else
            return ipAddr;
    }

    /**
     * set the password
     * @param password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     *  set the email address
     * @param email address
     */
    /*    public void setEmail(String email) {
//		System.out.println(""setting email: ""+email);
        this.email = email;
        if (user != null) user.setUserId(email);
    }
*/
    /**
     * set the active user from the userId
     * @param userId
     */
    public void setUserId(String usrId) {
        userid = usrId;
        cat.debug(""setUserId: "" + userid);
    }

    /**
     * get the current User
     */
    public User getUser() {
        return user;
    }

    /**
     * get the current User ID
     */
    public String getUserId() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current email address
     */
    public String getEmail() {
        //getUser();
        if (user != null)
            return user.getUserId();
        else
            return null;
    }

    /**
     * get the current LdapService
     */
    public LdapService getLdapService() {
        if (lservice == null)
            return (lservice = new LdapService(user.getLdapContext()));
        else
            return lservice;
    }

    /**
     * get the User from one of two ways. Return the current user if it is already defined.
     * First see if there is a defined email address (userId) and get the user directly
     * If not, then check the organization table and the the associated table of username
     * using the username and organization (country is defaulted to ""US"").
     */
    /*    public User getUser() {
        //   try {
        // makeDN();
        if (user != null) return user;
        if (userid != null || userid != """")
            user = userMgr.getUser(userid);
        else
            user = userMgr.getUser(username, organization, userid);
        cat.debug(""getUser: ""+user);
        return user;

    }
*/
    /**
     * return the role of the current user.
     * @return String containing the Role of the current user
     *     /
     *    public String getRole() {
     *        if (user != null)
     *            return user.getRole();
     *        else
     *            return null;
     *    }
     *
     *    /**
     * get the Distinguished Name of the user
     * @return String containing the distinguished name
     *     /
     *    public String getDN() {
     *        if (user != null)
     *            return user.getDN();
     *        else
     *            return null;
     *    }
     */
    /**
     * Authorize a User without checking the password.
     * Note that this should only be called for Users
     * that are already Authenticated.
     * @return user
     */
    public User authorize() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        user = userMgr.getUser(this.userid);
        user.setIpAddr(this.ipAddr);
        // compare password validity start date with current date
        Date today = new Date();
        Date pwvd = null;
        if ((user.getPassvalidstart() != null) && (!user.getPassvalidstart().equals(""""))) {
            pwvd = convertDateFromUTC(user.getPassvalidstart());
            if (!dateCompare(pwvd, today)) {
                log(user, ""Not allowed to login currently."");
                user = null;
                throw new LoginException(""Not allowed to login currently."");
            }
        }
        // check if user needs to change password before proceeding
        user.setPasschange(false);
        if ((user.getPassvalidstart() != null) && (user.getPassrenewal() != null) && (!user.getPassvalidstart().equals("""")) && (!user.getPassrenewal().equals("""")) && (!user.getPassrenewal().equals(""-1""))) {
            Calendar c1 = Calendar.getInstance();
            c1.setTime(pwvd);
            c1.add(Calendar.DATE, Integer.parseInt(user.getPassrenewal()));
            if (dateCompare(c1.getTime(), today)) {
                user.setPasschange(true);
            }
        }
        // Performing IP based filtering and active groups determination
        // based on current location.
        // Make sure that AuthType=krb5 and IPfiltering=yes in the properties file.
        if ((user.getAllowedips() != null) && (props.getProperty(""AuthType"", ""krb5"").equals(""krb5"")) && (props.getProperty(""IPfiltering"", ""yes"").equals(""yes""))) {
            int currentip = getIpInteger(user.getIpAddr());
            // IP based filtering
            cat.info(""Performing IP filtering for "" + getUserId());
            boolean ipcheck_result = ipRangeCheck(user.getAllowedips(), currentip);
            if (ipcheck_result == false) {
                log(user, ""Not authorized from the current IP address."");
                throw new LoginException(""Not authorized from the current IP address."");
            }
            // Active groups determination
            cat.info(""Determining active groups for "" + getUserId());
            boolean faccheck_result;
            // get all groups from LDAPservice
            Set usergrps = user.getGroups();
            if (usergrps != null && usergrps.size() > 0) {
                // Setup the interface to the LDAP server
                getLdapService();
                //session.setAttribute(""ldapservice"", lservice);
                Iterator grpit = usergrps.iterator();
                while (grpit.hasNext()) {
                    // Fetch each group's details from LDAP
                    Group grp = (Group) lservice.getGroup(grpit.next().toString());
                    faccheck_result = ipRangeCheck(grp.getAllowedips(), currentip);
                    if (faccheck_result == true) {
                        log(user, ""Active group: "" + grp.getCn());
                        user.addActivegroup(grp.getCn());
                    }
                }
                if (user.getActivegroups() == null || user.getActivegroups().size() == 0) {
                    log(user, "" Accessing from remote location."");
                    user.addActivegroup(""remote"");
                }
            }
        }
        // end IP based filtering and Active groups determination
        return user;
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate(String userid, String password, String ipaddr) throws LoginException {
        this.userid = userid;
        this.password = password;
        this.ipAddr = ipaddr;
        return authenticate();
    }

    /**
     * Authorize a pre-Authenticated User
     * @return user
     */
    public User authorize(String userid, String ipaddr) throws LoginException {
        this.userid = userid;
        this.ipAddr = ipaddr;
        return authorize();
    }

    /**
     * Authenticate the user by checking the password
     * and then Authorize them.
     * @return user
     */
    public User authenticate() throws LoginException {
        user = null;
        if (userMgr == null)
            throw new LoginException(""UserMgr undefined"");
        if (password == null)
            throw new LoginException(""Password not supplied"");
        if (!userMgr.checkSecret(userid, password, authType)) {
            cat.warn(""Invalid Password! User: "" + username + "" ,userid: "" + userid);
            throw new LoginException(""Password invalid"");
        }
        user = userMgr.getUser();
        user.setIpAddr(this.ipAddr);
        authorize();
        return user;
    }

    /**
     * check permissions for the current user
     */
    public boolean accessDecision(User usr, String resource, String action) {
        if (""simple"".equals(authType)) {
            cat.debug(""accessDecision() always true for simple authType"");
            return true;
        }
        if (cat.isDebugEnabled()) {
            cat.debug(""User for accessDecision() is "" + usr);
            cat.debug(""resource is "" + resource);
            cat.debug(""action is "" + action);
            cat.debug(""XACMLConfig is "" + xacmlConfig);
        }
        if (usr == null)
            return false;
        boolean ac_result = false;
        try {
            // create XACML request
            RequestCtx request = new RequestCtx(RequestBuilder.setupSubjects(usr.getUserId(), usr.getRoles(), usr.getActivegroups() == null ? usr.getGroups() : usr.getActivegroups()), RequestBuilder.setupResource(resource), RequestBuilder.setupAction(action), new HashSet());
            // encode the Request and print it to standard out
            request.encode(System.out, new Indenter());
            if (pdpadapter.makeDecision(request) == 0)
                ac_result = true;
            else
                ac_result = false;
            cat.debug(""Access Decision: "" + ac_result);
        } catch (Exception e) {
            cat.error(e);
            e.printStackTrace();
        }
        return ac_result;
    }

    public void log(User user, String info) {
        FileAppender appender = null;
        try {
            appender = new FileAppender(new SimpleLayout(), securityLog, true);
        } catch (Exception e) {
            cat.error(e);
        }
        cat.addAppender(appender);
        Level oldlevel = cat.getLevel();
        cat.setLevel((Level) Level.INFO);
        Date now = new Date();
        if (user == null) {
            cat.info(now + "" - "" + username + "" - "" + userid + "" - "" + ipAddr + "" -- "" + info);
        } else {
            // new log format (for better parsing in Cocoon)
            cat.info(now + "" - "" + user.getUserName() + "" - "" + user.getUserId() + "" - "" + user.getIpAddr() + "" -- "" + info);
        }
        cat.setLevel(oldlevel);
        cat.removeAppender(appender);
    }

    /**
     * logout the current user
     */
    public void logOut() {
        userMgr.logOut();
        user = null;
        password = null;
        username = null;
    }

    private Date convertDateFromUTC(String specdatetime) {
        // Extract from LDAP GeneralizedTime format and Convert date
        // and time from UTC time to local time
        TimeZone localtime = TimeZone.getDefault();
        SimpleDateFormat df1 = new SimpleDateFormat(appDateFormat);
        df1.setTimeZone(localtime);
        SimpleDateFormat df2 = new SimpleDateFormat(ldapGTFormat);
        Date specdate = null;
        try {
            specdate = df2.parse(specdatetime);
        } catch (ParseException pe) {
            pe.printStackTrace();
        }
        return specdate;
    }

    private boolean dateCompare(Date date1, Date date2) {
        Calendar c1 = Calendar.getInstance();
        Calendar c2 = Calendar.getInstance();
        c1.setTime(date1);
        c2.setTime(date2);
        if (c1.before(c2))
            return true;
        else
            return false;
    }

    private int getIpInteger(String ip) {
        StringTokenizer st = new StringTokenizer(ip, ""."");
        int bitposition = 24;
        int ipnumber = 0;
        while (st.hasMoreTokens()) {
            String curtoken = st.nextToken();
            if (ipnumber == 0)
                ipnumber = (Integer.parseInt(curtoken) << bitposition);
            else
                ipnumber = ipnumber | (Integer.parseInt(curtoken) << bitposition);
            bitposition -= 8;
        }
        return ipnumber;
    }

    private boolean ipRangeCheck(Set allowedips, int currentip) {
        // Check if the current IP address falls between the given range of allowed IP addresses
        boolean ipmatch = false;
        if (allowedips == null) {
            cat.debug(""No IP address range specified."");
            return false;
        }
        Set allowed_ips = new HashSet();
        allowed_ips = (HashSet) allowedips;
        Iterator ipit = allowed_ips.iterator();
        while (ipit.hasNext()) {
            int finalip = 0;
            // subnet mask bits
            int n = 0;
            // get the IP address and the subnet mask bits (if any)
            StringTokenizer st = new StringTokenizer(ipit.next().toString(), ""/"");
            if (st.hasMoreTokens()) {
                finalip = getIpInteger(st.nextToken());
                if (st.hasMoreTokens())
                    n = Integer.parseInt(st.nextToken());
            }
            // Every IP address allowed for the user
            if (finalip == 0) {
                cat.info(""All IP addresses allowed."");
                ipmatch = true;
            }
            if (n != 0) {
                // compute an n bit subnet mask, all 1s except for last n bits.
                int subnet = ~((1 << n) - 1);
                int t1 = finalip & subnet;
                int t2 = currentip & subnet;
                if (t1 == t2)
                    ipmatch = true;
            } else {
                if (finalip == currentip)
                    ipmatch = true;
            }
        }
        return ipmatch;
    }

    /**
     * Change the User's password
     * (this should be moved to KrbUserMgr)
     */
    public void changePassword(String newpass) throws Exception {
        // read the configuration properties
        if (cat.isDebugEnabled())
            cat.debug(""using props "" + props);
        String krbrealm = props.getProperty(""krbrealm"", ""YOUR-KERBEROS-REALM"");
        String editkrb = props.getProperty(""editkrb"", ""no"");
        String kadminLocal = props.getProperty(""kadmin.local"", ""kadmin.local"");
        int exitVal = 0;
        String userid = user.getUserId();
        // strip only the unique username from the userid
        int ind = userid.indexOf(""@"");
        if (ind > 0)
            userid = userid.substring(0, ind);
        cat.debug(""editkrb: "" + editkrb);
        if (editkrb.toLowerCase().equals(""yes"")) {
            // Execute the UNIX command to reset the principal's password in the Kerberos
            // database.
            // Assumption: The web server and the kerberos server are running on the same UNIX
            // based machine.Otherwise please modify the following according to your settings.
            String krbprinc = userid + ""@"" + krbrealm;
            cat.info(""Reseting principal \"""" + krbprinc + ""\""'s password in "" + ""the Kerberos database"");
            Runtime rt = Runtime.getRuntime();
            // Create a String array consisting of the command and its arguments
            String[] cmd = { kadminLocal, ""-p "" + userid, ""-q \""\""cpw -pw "" + newpass + "" "" + krbprinc + ""\""\"""" };
            cat.debug(""exec'ing Runtime command: "" + cmd[0] + ' ' + cmd[1] + ' ' + cmd[2]);
            Process ps = rt.exec(cmd);
            // For printing error messages
            StreamHandler errorHandler = new StreamHandler(ps.getErrorStream(), ""ERROR"");
            // For printing output
            StreamHandler outputHandler = new StreamHandler(ps.getInputStream(), ""OUTPUT"");
            // Start printing
            errorHandler.start();
            outputHandler.start();
            // Print exit value
            exitVal = ps.waitFor();
            cat.debug(""Kerberos update status: "" + exitVal);
        }
        if (exitVal == 0) {
            getLdapService();
            Person person = lservice.getPerson(userid);
            person.setPasschange(""no"");
            // Put current date as password valid start date
            Date today = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(ldapGTFormat);
            person.setPassvalidstart(sdf.format(today));
            if (lservice.updatePerson(person, person.getDn()) == true) {
            } else
                throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
        } else
            throw new LoginException(""Cannot update your profile. Please contact the administrator!"");
    }
    /*  /** obtain list of valid users
     * @return String[] list of known users
     /
    public static String[] getNames() {
        if (names == null) {
            if (userMgr == null) init();
            names = userMgr.getUserNames();
        }

        return names;
    }

    /**
     * return known email addresses
     * @return String[] list of known emails
     /
    public static String[] getMail() {
        if (mail == null) {
            if (userMgr == null) init();
            mail = userMgr.getUserIds();
        }
        /*
        {
            if (id == null) init();
            ArrayList v = null;
            try {
                JDBMEnumeration e = id.keys();
                v = new ArrayList();
                while (e.hasMoreElements()) {
                    v.add(e.nextElement());
                }
            } catch (IOException e1) {
                cat.error(""getMail: "" + e1);
                return new String[0];
            }
            mail = new String[v.size()];
            cat.debug(""getMail: ""+mail.length+ "" elements"");
            v.toArray(mail);
        }  /
        return mail;
    }


    /**
     *  set the SimpleUserMgr containing the Users.
     * @param theUserMgr to be used
     /
    public static void setUserMgr(UserMgr theUserMgr) {
        userMgr = theUserMgr;
    }

    /**
     * get the SimpleUserMgr that contains the Users
     * @return SimpleUserMgr
     /
    public static SimpleUserMgr getUserMgr() {
        return userMgr;
    }

    /**
     * get all the users in memory
     * @return String
     /
    public String toString() {
        return userMgr.export();
        /*
        StringBuffer buff = new StringBuffer();
        try {
            JDBMEnumeration c = id.values();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
        }
        return buff.toString();
        /
    }

    /**
     * test program
     /
    public static void main(String[] argv) {
        Login login = new Login();
      //  SimpleUserMgr.setConfigFile(argv[0]);
        // SimpleUserMgr usrMgr = new SimpleUserMgr(argv[0]);
        // usrMgr.init();
        login.setConfigFile(argv[0]);
        login.init();
        login.getUserMgr().addUser(""cn=Jim Smith, o=LANL, c=US"", ""Jim Smith"", ""Smith"", ""smith@foo.com"", ""submitter"", ""junk"");
        login.getUserMgr().addUser(""dn: cn=Dave Barry, o=UNM, c=US\ncn: Dave Barry\nemail: barry@goofoff.com\nsn: Barry\nuserPassword: stuff\nrole: staff"");

        login.setUsername(""Dave Barry"");
        login.setOrg(""UNM"");
        login.setUsername(""Dave Barry"");
        cat.debug(login.getUser());
        login.getUserMgr().delUser(""smith@foo.com"");
        String[] mail = Login.getMail();
        cat.debug(""Mail: ""+mail[0]);
        cat.debug(login.getUserMgr().getMailbyOrg(""LANL""));
        String[] names = Login.getNames();
        cat.debug(""names: ""+names[0]);
        System.out.println(login.toString());

    } */
}
","// Login_7Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#accessDecision(User, String, String)} method.
*/
class Login_7Test {","// Login_7Test.java
package com.browsersoft.aacs;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.TimeZone;
import javax.security.auth.login.LoginException;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.SimpleLayout;
import com.browsersoft.aacs.xacml.PDPadapter;
import com.browsersoft.aacs.xacml.RequestBuilder;
import com.sun.xacml.Indenter;
import com.sun.xacml.ctx.RequestCtx;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#accessDecision(User, String, String)} method.
*/
class Login_7Test {
"
9393533d-4757-4888-867f-b984f80e8180,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8585 tokens (6585 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String, String)} method.
*/
class SimpleUserMgr_0Test {","// SimpleUserMgr_0Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String, String)} method.
*/
class SimpleUserMgr_0Test {
"
4669bb29-397b-4330-a765-07af8a3abae8,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8583 tokens (6583 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String)} method.
*/
class SimpleUserMgr_1Test {","// SimpleUserMgr_1Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String)} method.
*/
class SimpleUserMgr_1Test {
"
f8089423-161e-4f51-982c-73891fd2d033,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8587 tokens (6587 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_2Test {","// SimpleUserMgr_2Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(String, String, String)} method.
*/
class SimpleUserMgr_2Test {
"
98b29597-b785-4a89-a72a-aa714ccd641b,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8583 tokens (6583 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(User)} method.
*/
class SimpleUserMgr_3Test {","// SimpleUserMgr_3Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getUser(User)} method.
*/
class SimpleUserMgr_3Test {
"
a0163f43-0512-47da-a992-5d729c0ff4a9,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_4Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8585 tokens (6585 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_4Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_4Test {","// SimpleUserMgr_4Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getNamesbyOrg(String)} method.
*/
class SimpleUserMgr_4Test {
"
9b17b4aa-bebb-4da7-b6f0-cef6f495f0dc,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_5Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8585 tokens (6585 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_5Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_5Test {","// SimpleUserMgr_5Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#getMailbyOrg(String)} method.
*/
class SimpleUserMgr_5Test {
"
0294f7ac-6dfe-438f-b28f-2675f5c5115a,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/SimpleUserMgr_6Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8581 tokens (6581 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// SimpleUserMgr.java
/*
 *   CVS $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;

/**
 * This class manages a persistent storage of Users. It can add users from a file in
 * LDAP's LDIF format.  The values required are dn (Distinguished Name), cn (Common Name), userPassword, email,
 * ou and employeeType.
 * This is intended as an interface for LDAP, but provides a simple persistent Hashtables using JDBM.
 *
 * The id Hashtable (name ""userids"") contains the User objects with the email address as the key
 * The country (name ""countries"") Hashtable contains a HashSet of all the organizations in a given country
 * To get a list of all supported countries simply get the keys of the countries Hashtable
 * There also is a persistent Hashtable for each organization with is LDAP ""o"" value as its name
 * It returns a Hashtable of users within that organization, with key the ""cn"" (Username) and value ""email""
 * Thus a user can be looked up by username and organization and return the ""key"" email address from which
 * the full User object can be obtained from the id Hashtable
 *
 * When a new organization is encountered (with a user with ""o"" and ""c"" dn parameters, it is registered
 * into the list of organizations for that country in the country Hashtable
 *
 * JDBM (http://jdbm.sourceforge.net) persistent hashtable implemenation is used for persistence
 *
 * @author $Author: grodecki $
 * @version $Id: SimpleUserMgr.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class SimpleUserMgr implements UserMgr {

    //private JDBMHashtable dn;
    private JDBMHashtable id = null;

    private JDBMHashtable users;

    private JDBMHashtable country;

    private String username = """";

    // private String password = """";
    // private String email = """";
    private static String userfile = ""login.users"";

    private String userdb = ""users"";

    private static String configFile = ""test"";

    private JDBMRecordManager recman;

    private static Properties props = new Properties();

    private Vector profile_vec = null;

    // private Hashtable users = null;
    private User user;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(SimpleUserMgr.class.getName());

    /**
     * Public default constructor
     */
    public SimpleUserMgr() {
        // Defer initialization for servlets
        //  init();
    }

    /**
     * Constructor which specifies the configProperties to be read
     */
    public SimpleUserMgr(String configProperties) {
        setConfigFile(configProperties);
        init();
    }

    /**
     * Initialize Persistent storage
     * There are two primary hashtables.   The first (country) contains a list of the organizations which are keys
     * to user hashtables for each organization.  The organization hashtable is a map from the username
     * key to the userId (email address).  The second (id) is the hashtable based on the email address
     * which is used as a userId since the email address is supposed to be unique.  For each organization
     * there is a separate hashtable of the users for that organization.  Thus one can look a user up
     * across organizations or within an organization.  All the user objects are contained in the second (id) hashtable.
     */
    public void init() {
        //  ResourceBundle bundle = ResourceBundle.getBundle(configFile);
        Login.loadProperties(props, configFile);
        userdb = props.getProperty(""users"", userdb);
        //      New code to find the actual db file, as long as it is on the classpath
        String tmpDb = ""/"" + userdb + "".db"";
        URL fileUrl = UserMgr.class.getResource(tmpDb);
        String pathAndFile = fileUrl.getFile();
        // Now remove the final '.db' from the returned string.
        userdb = pathAndFile.substring(0, pathAndFile.length() - 3);
        cat.debug(""init: accessing: "" + userdb);
        try {
            recman = new JDBMRecordManager(userdb);
            //dn = recman.getHashtable(""usernames"");
            id = recman.getHashtable(""userids"");
            if (cat.isDebugEnabled()) {
                for (JDBMEnumeration en = id.keys(); en.hasMoreElements(); ) {
                    String key = (String) en.nextElement();
                    cat.debug(""Key = "" + key);
                }
            }
            country = recman.getHashtable(""countries"");
        } catch (IOException e) {
            cat.error(""init: "" + e);
        }
    }

    /**
     * add Users from previously defined userfile
     */
    public void addUsers() {
        addUsers(userfile);
    }

    /**
     *  Add users from an input file
     * @param userfile
     */
    public void addUsers(String userfile) {
        // Query using JNDI to get list of users, not implemented correctly yet.
        // Read from file to get users (in ldif format)
        // e.g.:
        //  dn: cn= David Forslund, o=LANL, c=US
        //	cn: David Forslund
        //	email: dwf@lanl.gov
        //  userPassword: test
        // Results are put into a User object and the User into a hashtable with email/userId
        // as the key
        // various arrays are created for listing the users as needed.
        // userfile = props.getProperty(""login.users"", userfile);
        // String country = props.getProperty(""country"",""US"");
        try {
            // orgs = recman.getHashtable(country);
            // Read in user list if not already done      ###
            String line = null;
            InputStream is = getClass().getResourceAsStream(userfile);
            //if (theFile.exists()) {
            if (is != null) {
                cat.debug(""Reading  "" + userfile);
                //	FileReader inFile = new FileReader(theFile);
                InputStreamReader inFile = new InputStreamReader(is);
                BufferedReader inReader = new BufferedReader(inFile);
                profile_vec = new Vector();
                user = null;
                // unique set of organizations in a country
                HashSet set = null;
                while (((line = inReader.readLine()) != null)) {
                    parseLine(line);
                }
                //HashSet set = (HashSet) orgs.get(country);
                //if (set == null) set = new HashSet();
                inReader.close();
                if ((profile_vec != null)) {
                    addProfile();
                    for (int i = 0; i < profile_vec.size(); i++) {
                        User u = (User) profile_vec.elementAt(i);
                        String c = u.getCountry();
                        //cat.debug(""addUsers\n ""+u.toString());
                        String org = u.getOrg();
                        if (c != null)
                            set = (HashSet) country.get(c);
                        if (set == null)
                            set = new HashSet();
                        // get the hashtable for that organization
                        // Update list  of organizations for a country
                        set.add(org);
                        //  cat.debug(""organization = "" + org);
                        JDBMHashtable users = recman.getHashtable(org);
                        // insert userID in users table with userName as key
                        // put userId in dn with dn as key
                        users.put(u.getUserName(), u.getUserId());
                        // put user in id with mail as key
                        id.put(u.getUserId(), u);
                        country.put(c, set);
                    }
                    // put the list of names into the organization hashtable
                    // cat.debug(set.size() + "" organizations"");
                }
            }
        } catch (IOException e) {
            cat.error(""UserMgr reading error adding users "" + e, e);
        }
        //}
    }

    /**
     * parse the line and add the user to the list
     * @param line to be parsed
     */
    public void parseLine(String line) {
        try {
            //user = null;
            if (line.startsWith(""#"") || line.startsWith(""//""))
                return;
            StringTokenizer tmp_st = new StringTokenizer(line, "":"");
            if (tmp_st.countTokens() == 0)
                return;
            String tmp_tok = tmp_st.nextToken();
            //   System.out.println(""parseLine: ""+tmp_tok);
            if (tmp_tok.equals(""dn"")) {
                // We have a new defined person so save old data and reset
                if (user == null) {
                    user = new User();
                } else {
                    // user is complete so store it
                    addProfile();
                }
                user.setDN(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""cn"")) {
                user.setUserName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""email"")) {
                user.setUserId(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""userPassword"")) {
                //user.setPassword(tmp_st.nextToken().trim());
                user.encodePassword(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""employeeType"")) {
                // specify role(s) of user
                user.addRole(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ou"")) {
                // specify group(s) of user
                user.addGroup(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""sn"")) {
                user.setSurName(tmp_st.nextToken().trim());
            } else if (tmp_tok.equals(""ip"")) {
                // specify ip Addr of user
                user.setIpAddr(tmp_st.nextToken().trim());
            }
        } catch (Exception e) {
            cat.error(""parseLine failed:"" + e);
        }
    }

    /**
     * Add the user profile
     */
    private void addProfile() {
        profile_vec.addElement(user);
        //  cat.debug(""name: ""+user.getUserName()+"", email: ""+user.getUserId()+"", passwd: ""+user.getPassword());
        user = new User();
    }

    /**
     * addUser
     * @param u String with multiple lines with all the data for a user
     */
    public void addUser(String u) {
        BufferedReader reader = new BufferedReader(new StringReader(u));
        String line = null;
        User saveUser = user;
        try {
            while ((line = reader.readLine()) != null) parseLine(line);
            if (user != null)
                addUser(user);
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
        user = saveUser;
    }

    /**
     * add User to the Persistent Hashtable
     * @param theDN The distinguished name (cn= ""name"", o=""organization"", c=""country"")
     * @param cn  LDAP username
     * @param sn   LDAP surname
     * @param email   LDAP email address (userId)
     * @param role
     * @param password
     */
    public void addUser(String theDN, String cn, String sn, String email, String role, String password) {
        User newUser = new User(email, cn);
        newUser.addRole(role);
        newUser.setPassword(password);
        newUser.setSurName(sn);
        newUser.setDN(theDN);
        addUser(newUser);
    }

    /**
     *  Add a User already constructed
     * @param newUser
     */
    public void addUser(User newUser) {
        String c = newUser.getCountry();
        String org = newUser.getOrg();
        String userName = newUser.getUserName();
        String email = newUser.getUserId();
        cat.debug(""addUser: "" + newUser.toString());
        User oldUser = getUser(newUser);
        if (oldUser == null)
            oldUser = new User();
        oldUser.update(newUser);
        try {
            // First make sure the organization is in the country list
            HashSet set = (HashSet) country.get(c);
            if (set == null)
                set = new HashSet();
            set.add(org);
            country.put(c, set);
            // get the users Hashtable based on the organization
            users = recman.getHashtable(org);
            users.put(userName, email);
            id.put(email, oldUser);
            cat.debug(""User: "" + oldUser.toString() + "" added!"");
        } catch (IOException e) {
            cat.error(""addUser: "" + e);
        }
    }

    /**
     * delete User based on the unique UserId
     * @param userId corresponding to email address
     */
    public void delUser(String userId) {
        try {
            cat.debug(""delUser trying to remove: "" + userId);
            User delUser = (User) id.get(userId);
            if (delUser != null) {
                id.remove(userId);
                cat.debug(""delUser removed from id: "" + userId);
                String uName = delUser.getUserName();
                users = recman.getHashtable(delUser.getOrg());
                cat.debug(""removing "" + uName + "" from dn"");
                String u = (String) users.get(uName);
                if (u != null) {
                    users.remove(uName);
                    cat.debug(""delUser removed from dn: "" + uName);
                }
            } else
                cat.debug(""delUser: id='"" + userId + ""' not found"");
        } catch (IOException e) {
            cat.error(""delUser: "" + userId + "" "" + e);
        }
    }

    /**
     * get the User based on name and organization
     * @param userName
     * @param org
     * @return User
     */
    public User getUser(String userName, String org) {
        User user = null;
        try {
            users = recman.getHashtable(org);
            String userId = (String) users.get(username);
            if (userId != null)
                user = (User) id.get(userId);
            if (user == null)
                cat.warn(""getUser("" + userName + "","" + org + ""): not found"");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    public User getUser() {
        cat.debug(""userID: "" + user.getUserId());
        cat.debug(""userName: "" + user.getUserName());
        return user;
    }

    /**
     * get User by the unique userId (email)
     * @param userId
     * @return User
     */
    public User getUser(String userId) {
        cat.debug(""getUser: "" + userId);
        User user = null;
        try {
            user = (User) id.get(userId);
            cat.debug(""getUser: found user "" + user.toString());
        } catch (Exception e) {
            user = null;
            cat.error(""getUser: user not found "" + e);
        }
        //cat.debug(""getUser: found user "" + user.toString());
        return user;
    }

    /**
     * get User with username, org and email
     * @param username  cn variable
     * @param org       o variable
     * @param email       email variable
     * @return User
     */
    public User getUser(String username, String org, String email) {
        User user = null;
        try {
            // try unique email first (this should always return the user)
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (org != null) && (username != null)) {
                // get the user list for the organization
                users = recman.getHashtable(org);
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null)
                cat.warn(""getUser("" + username + "","" + org + "","" + email + ""): user not found, "");
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Find a User given a partially completed User object as a template
     * @param findUser
     * @return User
     */
    public User getUser(User findUser) {
        User user = new User();
        String email = findUser.getUserId();
        try {
            if (email != null && !email.equals(""""))
                user = (User) id.get(email);
            if ((user == null) && (findUser.getOrg() != null) && findUser.getUserName() != null) {
                users = recman.getHashtable(findUser.getOrg());
                if (users != null) {
                    String userid = (String) users.get(username);
                    if (userid != null)
                        user = (User) id.get(userid);
                }
            }
            if (user == null) {
                cat.warn(""getUser("" + findUser.toString() + ""): user not found"");
            }
        } catch (IOException e) {
            cat.error(""getUser: "" + e);
        }
        return user;
    }

    /**
     * Get all the userNames for a given organization
     * @param org the organization name (o field in LDAP);
     * @return String[] list of names within the organization
     */
    public String[] getNamesbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.keys();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getNamesbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get the email addresses of all users in an organization
     * @param org name of the organization (o LDAP field)
     * @return String[] array of email addresses
     */
    public String[] getMailbyOrg(String org) {
        Vector v = new Vector();
        try {
            JDBMHashtable users = recman.getHashtable(org);
            JDBMEnumeration e = users.values();
            while (e.hasMoreElements()) {
                v.addElement(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getMailbyOrg: "" + e1);
        }
        String[] s = new String[v.size()];
        v.copyInto(s);
        return s;
    }

    /**
     * get list of all UserIds in DB
     * @return String[] list of UserIds
     */
    public String[] getUserIds() {
        String[] mail;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.keys();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(e.nextElement());
            }
        } catch (IOException e1) {
            cat.error(""getUserIds: "" + e1);
            return new String[0];
        }
        mail = new String[v.size()];
        v.toArray(mail);
        // cat.debug(""getUserIds: ""+mail.length +"" mail: ""+mail[0]);
        return mail;
    }

    /**
     * obtain list of valid users
     * @return String[] list of known users
     */
    public String[] getUserNames() {
        String[] names;
        if (id == null)
            init();
        ArrayList v = null;
        try {
            JDBMEnumeration e = id.values();
            v = new ArrayList();
            while (e.hasMoreElements()) {
                v.add(((User) e.nextElement()).getUserName());
            }
        } catch (IOException e1) {
            cat.error(""getUserNames: "" + e1);
            return new String[0];
        }
        // for (int i = 0;i< v.size(); i++)
        //      cat.debug(""name: ""+v.get(i));
        names = new String[v.size()];
        cat.debug(""getUserNames: found "" + names.length + "" elements"");
        v.toArray(names);
        return names;
    }

    /**
     * Bean setter  and getter methods
     * @param theConfigFile the properties file
     */
    public static void setConfigFile(String theConfigFile) {
        configFile = theConfigFile;
    }

    /**
     *  set the file of users to be read.
     * @param file to be read
     */
    public static void setUserfile(String file) {
        userfile = file;
    }

    /**
     * get all the users in in the persistent hashtable
     * @return String
     */
    public String export() {
        try {
            JDBMEnumeration c = id.values();
            StringBuffer buff = new StringBuffer();
            while (c.hasMoreElements()) {
                buff.append(c.nextElement().toString() + '\n');
            }
            return buff.toString();
        } catch (IOException e) {
            cat.error(""getUsers: "" + e);
            return null;
        }
    }

    public boolean checkSecret(String userid, String password, String authType) {
        user = getUser(userid);
        if (user != null) {
            String passwd = user.getPassword();
            if (passwd == null)
                return false;
            return user.checkDigest(passwd, password);
        } else
            return false;
    }

    public void logOut() {
        return;
    }

    public static void main(String[] argv) {
        if (argv.length < 1) {
            System.out.println(""usage: SimpleUserMgr 'file' where 'file' is a ResourceBundle (file.properties)\n"" + ""that has an optional property 'users' which is the name of the database to be created or read\n"" + ""and a property 'login.users' is a ldif text file containing the users to be added."");
            System.exit(0);
        }
        SimpleUserMgr.setConfigFile(argv[0]);
        System.out.println(""Config Resource is "" + argv[0] + "".properties"");
        SimpleUserMgr userMgr = new SimpleUserMgr();
        userMgr.init();
        String file = props.getProperty(userfile, ""/users.txt"");
        System.out.println(""User File is "" + file);
        if (file != null && file != """")
            userMgr.addUsers(file);
        System.out.println(""Users Added:\n"" + userMgr.export());
    }
}
","// SimpleUserMgr_6Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_6Test {","// SimpleUserMgr_6Test.java
package com.browsersoft.aacs;

import jdbm.JDBMEnumeration;
import jdbm.JDBMHashtable;
import jdbm.JDBMRecordManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleUserMgr}.
* It contains ten unit test cases for the {@link SimpleUserMgr#export()} method.
*/
class SimpleUserMgr_6Test {
"
cmpl-6u6Dl2uoEXjQylEPqjoKRQs2bd4iL,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/User_0Test.java,50.95655870437622,length,"// User.java
/*
 *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;

/**
 * User class contains all the necessary attributes of a logged in user
 * @author $Author: grodecki $
 * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class User implements Comparable, Serializable {

    // static final long serialVersionUID = -3313178117323543078L;
    static final long serialVersionUID = 6729362233633496647L;

    // id (key)
    private String userId = """";

    // current IP address
    private String ipAddr;

    //cn CommonName
    private String userName = """";

    private String email = """";

    private Set roles;

    private Set groups;

    // Groups active for the user based on his location
    private Set activegroups;

    private String passvalidstart = """";

    private String passrenewal = """";

    // user password change required before using the system?
    private boolean passchange = false;

    private Set allowedips;

    LdapContext dctx;

    // private String dn;  //Distinguished name    (cn, o, c)
    // c
    private String country = """";

    // o
    private String organization = """";

    // encrypted    // userPassword
    private String passwd = """";

    // surname
    private String sn = """";

    private transient MessageDigest sha;

    private static String sep = System.getProperty(""line.separator"");

    private static String salt = ""XXXX"";

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());

    public User() {
    }

    /**
     * User object constructed from userId and userName
     */
    public User(String userId, String userName) {
        this();
        //	System.out.println(""userId: ""+userId);
        //id
        this.userId = userId.trim();
        //cn
        this.userName = userName.trim();
    }

    public void init() {
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
        } catch (java.security.NoSuchAlgorithmException e) {
            cat.error(""SHA-1 constructor failed: "", e);
        }
    }

    /**
     * get userId previously set
     * @return userId
     */
    public String getUserId() {
        //	System.out.println(""getUserId: ""+userId);
        return userId;
    }

    /**
     * set the UserId
     * @param id to be set
     */
    public void setUserId(String id) {
        userId = id.trim();
    }

    /**
     * encode the  password
     * @param password to be encoded
     */
    public void encodePassword(String password) {
        // only set password if it is non null.
        if (passwd != null && (password != null) && !password.equals(""""))
            passwd = createDigest(salt.getBytes(), password);
    }

    /**
     * Validate the password
     * @param password
     * @return
     */
    public boolean checkPassword(String password) {
        if (passwd == null)
            return false;
        return checkDigest(passwd, password);
    }

    /**
     * set the encrypted password
     * @param password  as encrypted digest (SHA algorithm)
     */
    public void setPassword(String password) {
        passwd = password;
    }

    /**
     * get the encrypted Password
     * @return encrypted password string
     */
    public String getPassword() {
        return passwd;
    }

    /**
     * set the SurName
     * @param surname
     */
    public void setSurName(String surname) {
        sn = surname;
    }

    /**
     * get the SurName
     * @return sn
     */
    public String getSurName() {
        return sn;
    }

    /**
     * get userName
     * @return userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * set the User Name (cn field in LDAP
     * @param name
     */
    public void setUserName(String name) {
        userName = name.trim();
    }

    /**
     * get the IpAddr of this user
     * @return String containing ipAddr
     */
    public String getIpAddr() {
        return ipAddr;
    }

    /**
     * set the IpAddr of this user
     * @param ipAddr  (should validate the address)
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        email = email.trim();
    }

    public Set getRoles() {
        return roles;
    }

    public void addRole(String role) {
        if (roles == null)
            roles = new HashSet();
        roles.add(role);
    }

    public Set getGroups() {
        return groups;
    }

    public void addGroup(String group) {
        if (groups == null)
            groups = new HashSet();
        groups.add(group);
    }

    public Set getActivegroups() {
        return activegroups;
    }

    public void addActivegroup(String group) {
        if (activegroups == null)
            activegroups = new HashSet();
        activegroups.add(group);
    }

    public String getPassvalidstart() {
        return passvalidstart;
    }

    public void setPassvalidstart(String passvalidstart) {
        this.passvalidstart = passvalidstart;
    }

    public String getPassrenewal() {
        return passrenewal;
    }

    public void setPassrenewal(String passrenewal) {
        this.passrenewal = passrenewal;
    }

    public boolean getPasschange() {
        return passchange;
    }

    public void setPasschange(boolean passchange) {
        this.passchange = passchange;
    }

    public Set getAllowedips() {
        return allowedips;
    }

    public void addAllowedip(String allowed_ip) {
        if (allowedips == null)
            allowedips = new HashSet();
        allowedips.add(allowed_ip);
    }

    public void setLdapContext(LdapContext dctx) {
        this.dctx = dctx;
    }

    public LdapContext getLdapContext() {
        return dctx;
    }

    /**
     * set the Distinguished Name of the person
     * @param dn containing distinguished name    (should check its validity)
     */
    public void setDN(String dn) {
        //  cat.debug(""setDN: "" + dn);
        if (dn != null) {
            StringTokenizer st = new StringTokenizer(dn, "","");
            while (st.hasMoreTokens()) {
                String tok = st.nextToken();
                StringTokenizer stoken = new StringTokenizer(tok, ""="");
                String name = stoken.nextToken();
                // System.out.println(""token: ""+tok +"" name: ""+name);
                if (name.trim().equals(""o"")) {
                    organization = stoken.nextToken();
                    //   cat.debug(""org: ""+organization);
                    //break;
                } else if (name.trim().equals(""c"")) {
                    country = stoken.nextToken();
                } else if (name.trim().equals(""cn"")) {
                    userName = stoken.nextToken();
                }
            }
        } else
            cat.warn(""setDN: dn is null"");
        return;
    }

    /**
     * set the salt for encryption
     * @param theSalt
     */
    public static void setSalt(String theSalt) {
        salt = theSalt;
    }

    /**
     * get the Distinguished Name of the Person
     * @return String containing the distinguished name
     */
    public String getDN() {
        return ""cn="" + userName + "", o="" + organization + "", c="" + country;
        //  return dn;
    }

    /**
     * get the country (c) parameter
     * @return country
     */
    public String getCountry() {
        return country;
    }

    /**
     * set the country parameter
     * @param c country
     */
    public void setCountry(String c) {
        country = c;
    }

    /**
     * get the Organization of the user from the Distinguished Name dn
     * @return String representing the organization
     * The dn string is of the form cn=""name"", o=""organization"", c=""country""
     */
    public String getOrg() {
        return organization;
    }

    /**
     * Return a Properties sheet with identification
     * @return
     */
    public Properties getCredentials() {
        Properties props = new Properties();
        props.setProperty(""subjectDN"", getDN());
        props.setProperty(""EMail"", getUserId());
        return props;
    }

    /**
     * set the organization
     */
    public void setOrg(String org) {
        organization = org;
    }

    /**
     * copy nonempty fiels into the fields of object
     * @param newUser
     */
    public void update(User newUser) {
        organization = newUser.getOrg();
        country = newUser.getCountry();
        roles = newUser.getRoles();
        groups = newUser.getGroups();
        userName = newUser.getUserName();
        sn = newUser.getSurName();
        passwd = newUser.getPassword();
        userId = newUser.getUserId();
    }

    /**
     * String representation of user is simply its userId;
     * @return String representation of User
     */
    public String toString() {
        // char sep = '\n';
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        if (getRoles() != null) {
            Iterator it = getRoles().iterator();
            while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        }
        if (getGroups() != null) {
            Iterator it = getGroups().iterator();
            while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        }
        if (getIpAddr() != null)
            buff.append(""ip: "" + getIpAddr() + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * String representation with user defined separator
     * @param sep
     * @return String representation of User
     */
    public String toString(String sep) {
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        Set rolebuf = new HashSet();
        rolebuf = getRoles();
        Iterator it = rolebuf.iterator();
        while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        Set groupbuf = new HashSet();
        groupbuf = getGroups();
        it = groupbuf.iterator();
        while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * create hashCode combining unique userId and ipAddr so user
     * is distinguished coming from different ""locations""
     */
    public int hashCode() {
        // Improve hashcode calculation using member variables of this class
        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();
    }

    /**
     *  Equality check for user to see if he is already known.
     */
    public boolean equals(Object user) {
        // Return true if the result of the compareTo() method is zero
        return compareTo(user) == 0;
    }

    /**
     *  Compare to operation to see if the input user is the same as this user.
     */
    public int compareTo(Object user) {
        // Compare the user IDs of the two user objects -
        //  result is zero if they're identical (uses String compareTo function)
        int result = userId.compareTo(((User) user).getUserId());
        // If result is zero from previous method, return the comparison of IP addresses.
        // Otherwise, return the result.
        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;
    }

    /**
     * Create Digest for each input identity
     * @param salt to set the base for the encryption
     * @param identity to be encrypted
     */
    public String createDigest(byte[] salt, String identity) {
        String label = (salt.length > 0) ? ""{SSHA}"" : ""{SHA}"";
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        return label + new String(Base64.encode(concatenate(pwhash, salt)));
    }

    /**
     * Check Digest against identity
     * @param digest is digest to be checked against
     * @param identity to be checked
     */
    public boolean checkDigest(String digest, String identity) {
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            // ignore the label
            digest = digest.substring(5);
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            // ignore the label
            digest = digest.substring(6);
        }
        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);
        byte[] hash = hs[0];
        byte[] salt = hs[1];
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        boolean valid = true;
        if (!MessageDigest.isEqual(hash, pwhash)) {
            valid = false;
            cat.warn(""doesn't match: "" + identity);
        }
        return valid;
    }

    /**
     * Combine two byte arrays
     * @param l first byte array
     * @param r second byte array
     * @return byte[] combined byte array
     */
    private static byte[] concatenate(byte[] l, byte[] r) {
        byte[] b = new byte[l.length + r.length];
        System.arraycopy(l, 0, b, 0, l.length);
        System.arraycopy(r, 0, b, l.length, r.length);
        return b;
    }

    /**
     * split a byte array in two
     * @param src byte array to be split
     * @param n element at which to split the byte array
     * @return byte[][]  two byte arrays that have been split
     */
    private static byte[][] split(byte[] src, int n) {
        byte[] l, r;
        if (src == null || src.length <= n) {
            l = src;
            r = new byte[0];
        } else {
            l = new byte[n];
            r = new byte[src.length - n];
            System.arraycopy(src, 0, l, 0, n);
            System.arraycopy(src, n, r, 0, r.length);
        }
        byte[][] lr = { l, r };
        return lr;
    }
}
","// User_0Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkPassword(String)} method.
*/
class User_0Test {","// User_0Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkPassword(String)} method.
*/
class User_0Test {

		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertTrue(user.checkPassword(""secret""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword2() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""secret2""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword3() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword4() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(null));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword5() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g=""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword6() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword7() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g==""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword8() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g===""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword9() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g====""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword10() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g=====""));
		}
}

// User_1Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkPassword(String)} method.
*/
class User_1Test {
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertTrue(user.checkPassword(""secret""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword2() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""secret2""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for checking the password.
		*/
		@Test
		public void testCheckPassword3() {
				User user = new User();
				user.setPassword(""{SHA}W6ph5Mm5Pz8GgiULbPgzG37mj9g="");
				assertFalse(user.checkPassword(""""));
		}
		
		/**
		* Test case for {@link User#checkPassword(String)} method.
		* Test case for"
cmpl-6u6EokDOT7utZWX1a7TZyinXFH5Tf,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/User_1Test.java,58.32800626754761,length,"// User.java
/*
 *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;

/**
 * User class contains all the necessary attributes of a logged in user
 * @author $Author: grodecki $
 * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class User implements Comparable, Serializable {

    // static final long serialVersionUID = -3313178117323543078L;
    static final long serialVersionUID = 6729362233633496647L;

    // id (key)
    private String userId = """";

    // current IP address
    private String ipAddr;

    //cn CommonName
    private String userName = """";

    private String email = """";

    private Set roles;

    private Set groups;

    // Groups active for the user based on his location
    private Set activegroups;

    private String passvalidstart = """";

    private String passrenewal = """";

    // user password change required before using the system?
    private boolean passchange = false;

    private Set allowedips;

    LdapContext dctx;

    // private String dn;  //Distinguished name    (cn, o, c)
    // c
    private String country = """";

    // o
    private String organization = """";

    // encrypted    // userPassword
    private String passwd = """";

    // surname
    private String sn = """";

    private transient MessageDigest sha;

    private static String sep = System.getProperty(""line.separator"");

    private static String salt = ""XXXX"";

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());

    public User() {
    }

    /**
     * User object constructed from userId and userName
     */
    public User(String userId, String userName) {
        this();
        //	System.out.println(""userId: ""+userId);
        //id
        this.userId = userId.trim();
        //cn
        this.userName = userName.trim();
    }

    public void init() {
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
        } catch (java.security.NoSuchAlgorithmException e) {
            cat.error(""SHA-1 constructor failed: "", e);
        }
    }

    /**
     * get userId previously set
     * @return userId
     */
    public String getUserId() {
        //	System.out.println(""getUserId: ""+userId);
        return userId;
    }

    /**
     * set the UserId
     * @param id to be set
     */
    public void setUserId(String id) {
        userId = id.trim();
    }

    /**
     * encode the  password
     * @param password to be encoded
     */
    public void encodePassword(String password) {
        // only set password if it is non null.
        if (passwd != null && (password != null) && !password.equals(""""))
            passwd = createDigest(salt.getBytes(), password);
    }

    /**
     * Validate the password
     * @param password
     * @return
     */
    public boolean checkPassword(String password) {
        if (passwd == null)
            return false;
        return checkDigest(passwd, password);
    }

    /**
     * set the encrypted password
     * @param password  as encrypted digest (SHA algorithm)
     */
    public void setPassword(String password) {
        passwd = password;
    }

    /**
     * get the encrypted Password
     * @return encrypted password string
     */
    public String getPassword() {
        return passwd;
    }

    /**
     * set the SurName
     * @param surname
     */
    public void setSurName(String surname) {
        sn = surname;
    }

    /**
     * get the SurName
     * @return sn
     */
    public String getSurName() {
        return sn;
    }

    /**
     * get userName
     * @return userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * set the User Name (cn field in LDAP
     * @param name
     */
    public void setUserName(String name) {
        userName = name.trim();
    }

    /**
     * get the IpAddr of this user
     * @return String containing ipAddr
     */
    public String getIpAddr() {
        return ipAddr;
    }

    /**
     * set the IpAddr of this user
     * @param ipAddr  (should validate the address)
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        email = email.trim();
    }

    public Set getRoles() {
        return roles;
    }

    public void addRole(String role) {
        if (roles == null)
            roles = new HashSet();
        roles.add(role);
    }

    public Set getGroups() {
        return groups;
    }

    public void addGroup(String group) {
        if (groups == null)
            groups = new HashSet();
        groups.add(group);
    }

    public Set getActivegroups() {
        return activegroups;
    }

    public void addActivegroup(String group) {
        if (activegroups == null)
            activegroups = new HashSet();
        activegroups.add(group);
    }

    public String getPassvalidstart() {
        return passvalidstart;
    }

    public void setPassvalidstart(String passvalidstart) {
        this.passvalidstart = passvalidstart;
    }

    public String getPassrenewal() {
        return passrenewal;
    }

    public void setPassrenewal(String passrenewal) {
        this.passrenewal = passrenewal;
    }

    public boolean getPasschange() {
        return passchange;
    }

    public void setPasschange(boolean passchange) {
        this.passchange = passchange;
    }

    public Set getAllowedips() {
        return allowedips;
    }

    public void addAllowedip(String allowed_ip) {
        if (allowedips == null)
            allowedips = new HashSet();
        allowedips.add(allowed_ip);
    }

    public void setLdapContext(LdapContext dctx) {
        this.dctx = dctx;
    }

    public LdapContext getLdapContext() {
        return dctx;
    }

    /**
     * set the Distinguished Name of the person
     * @param dn containing distinguished name    (should check its validity)
     */
    public void setDN(String dn) {
        //  cat.debug(""setDN: "" + dn);
        if (dn != null) {
            StringTokenizer st = new StringTokenizer(dn, "","");
            while (st.hasMoreTokens()) {
                String tok = st.nextToken();
                StringTokenizer stoken = new StringTokenizer(tok, ""="");
                String name = stoken.nextToken();
                // System.out.println(""token: ""+tok +"" name: ""+name);
                if (name.trim().equals(""o"")) {
                    organization = stoken.nextToken();
                    //   cat.debug(""org: ""+organization);
                    //break;
                } else if (name.trim().equals(""c"")) {
                    country = stoken.nextToken();
                } else if (name.trim().equals(""cn"")) {
                    userName = stoken.nextToken();
                }
            }
        } else
            cat.warn(""setDN: dn is null"");
        return;
    }

    /**
     * set the salt for encryption
     * @param theSalt
     */
    public static void setSalt(String theSalt) {
        salt = theSalt;
    }

    /**
     * get the Distinguished Name of the Person
     * @return String containing the distinguished name
     */
    public String getDN() {
        return ""cn="" + userName + "", o="" + organization + "", c="" + country;
        //  return dn;
    }

    /**
     * get the country (c) parameter
     * @return country
     */
    public String getCountry() {
        return country;
    }

    /**
     * set the country parameter
     * @param c country
     */
    public void setCountry(String c) {
        country = c;
    }

    /**
     * get the Organization of the user from the Distinguished Name dn
     * @return String representing the organization
     * The dn string is of the form cn=""name"", o=""organization"", c=""country""
     */
    public String getOrg() {
        return organization;
    }

    /**
     * Return a Properties sheet with identification
     * @return
     */
    public Properties getCredentials() {
        Properties props = new Properties();
        props.setProperty(""subjectDN"", getDN());
        props.setProperty(""EMail"", getUserId());
        return props;
    }

    /**
     * set the organization
     */
    public void setOrg(String org) {
        organization = org;
    }

    /**
     * copy nonempty fiels into the fields of object
     * @param newUser
     */
    public void update(User newUser) {
        organization = newUser.getOrg();
        country = newUser.getCountry();
        roles = newUser.getRoles();
        groups = newUser.getGroups();
        userName = newUser.getUserName();
        sn = newUser.getSurName();
        passwd = newUser.getPassword();
        userId = newUser.getUserId();
    }

    /**
     * String representation of user is simply its userId;
     * @return String representation of User
     */
    public String toString() {
        // char sep = '\n';
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        if (getRoles() != null) {
            Iterator it = getRoles().iterator();
            while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        }
        if (getGroups() != null) {
            Iterator it = getGroups().iterator();
            while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        }
        if (getIpAddr() != null)
            buff.append(""ip: "" + getIpAddr() + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * String representation with user defined separator
     * @param sep
     * @return String representation of User
     */
    public String toString(String sep) {
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        Set rolebuf = new HashSet();
        rolebuf = getRoles();
        Iterator it = rolebuf.iterator();
        while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        Set groupbuf = new HashSet();
        groupbuf = getGroups();
        it = groupbuf.iterator();
        while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * create hashCode combining unique userId and ipAddr so user
     * is distinguished coming from different ""locations""
     */
    public int hashCode() {
        // Improve hashcode calculation using member variables of this class
        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();
    }

    /**
     *  Equality check for user to see if he is already known.
     */
    public boolean equals(Object user) {
        // Return true if the result of the compareTo() method is zero
        return compareTo(user) == 0;
    }

    /**
     *  Compare to operation to see if the input user is the same as this user.
     */
    public int compareTo(Object user) {
        // Compare the user IDs of the two user objects -
        //  result is zero if they're identical (uses String compareTo function)
        int result = userId.compareTo(((User) user).getUserId());
        // If result is zero from previous method, return the comparison of IP addresses.
        // Otherwise, return the result.
        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;
    }

    /**
     * Create Digest for each input identity
     * @param salt to set the base for the encryption
     * @param identity to be encrypted
     */
    public String createDigest(byte[] salt, String identity) {
        String label = (salt.length > 0) ? ""{SSHA}"" : ""{SHA}"";
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        return label + new String(Base64.encode(concatenate(pwhash, salt)));
    }

    /**
     * Check Digest against identity
     * @param digest is digest to be checked against
     * @param identity to be checked
     */
    public boolean checkDigest(String digest, String identity) {
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            // ignore the label
            digest = digest.substring(5);
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            // ignore the label
            digest = digest.substring(6);
        }
        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);
        byte[] hash = hs[0];
        byte[] salt = hs[1];
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        boolean valid = true;
        if (!MessageDigest.isEqual(hash, pwhash)) {
            valid = false;
            cat.warn(""doesn't match: "" + identity);
        }
        return valid;
    }

    /**
     * Combine two byte arrays
     * @param l first byte array
     * @param r second byte array
     * @return byte[] combined byte array
     */
    private static byte[] concatenate(byte[] l, byte[] r) {
        byte[] b = new byte[l.length + r.length];
        System.arraycopy(l, 0, b, 0, l.length);
        System.arraycopy(r, 0, b, l.length, r.length);
        return b;
    }

    /**
     * split a byte array in two
     * @param src byte array to be split
     * @param n element at which to split the byte array
     * @return byte[][]  two byte arrays that have been split
     */
    private static byte[][] split(byte[] src, int n) {
        byte[] l, r;
        if (src == null || src.length <= n) {
            l = src;
            r = new byte[0];
        } else {
            l = new byte[n];
            r = new byte[src.length - n];
            System.arraycopy(src, 0, l, 0, n);
            System.arraycopy(src, n, r, 0, r.length);
        }
        byte[][] lr = { l, r };
        return lr;
    }
}
","// User_1Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#compareTo(Object)} method.
*/
class User_1Test {","// User_1Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#compareTo(Object)} method.
*/
class User_1Test {

		/**
		* Test case for {@link User#compareTo(Object)} method.
		* Test case for {@link User#equals(Object)} method.
		* Test case for {@link User#hashCode()} method.
		* Test case for {@link User#toString()} method.
		* Test case for {@link User#toString(String)} method.
		* Test case for {@link User#createDigest(byte[], String)} method.
		* Test case for {@link User#checkDigest(String, String)} method.
		* Test case for {@link User#concatenate(byte[], byte[])} method.
		* Test case for {@link User#split(byte[], int)} method.
		* Test case for {@link User#setSalt(String)} method.
		*/
		@Test
		void testCompareTo() {
				User user1 = new User(""user1"", ""user1"");
				User user2 = new User(""user2"", ""user2"");
				User user3 = new User(""user1"", ""user1"");
				User user4 = new User(""user1"", ""user1"");
				user4.setIpAddr(""192.168.1.1"");
				User user5 = new User(""user1"", ""user1"");
				user5.setIpAddr(""192.168.1.2"");
				User user6 = new User(""user1"", ""user1"");
				user6.setIpAddr(""192.168.1.1"");
				User user7 = new User(""user1"", ""user1"");
				user7.setIpAddr(""192.168.1.1"");
				User user8 = new User(""user1"", ""user1"");
				user8.setIpAddr(""192.168.1.1"");
				User user9 = new User(""user1"", ""user1"");
				user9.setIpAddr(""192.168.1.1"");
				User user10 = new User(""user1"", ""user1"");
				user10.setIpAddr(""192.168.1.1"");
				User user11 = new User(""user1"", ""user1"");
				user11.setIpAddr(""192.168.1.1"");
				User user12 = new User(""user1"", ""user1"");
				user12.setIpAddr(""192.168.1.1"");
				User user13 = new User(""user1"", ""user1"");
				user13.setIpAddr(""192.168.1.1"");
				User user14 = new User(""user1"", ""user1"");
				user14.setIpAddr(""192.168.1.1"");
				User user15 = new User(""user1"", ""user1"");
				user15.setIpAddr(""192.168.1.1"");
				User user16 = new User(""user1"", ""user1"");
				user16.setIpAddr(""192.168.1.1"");
				User user17 = new User(""user1"", ""user1"");
				user17.setIpAddr(""192.168.1.1"");
				User user18 = new User(""user1"", ""user1"");
				user18.setIpAddr(""192.168.1.1"");
				User user19 = new User(""user1"", ""user1"");
				user19.setIpAddr(""192.168.1.1"");
				User user20 = new User(""user1"", ""user1"");
				user20.setIpAddr(""192.168.1.1"");
				User user21 = new User(""user1"", ""user1"");
				user21.setIpAddr(""192.168.1.1"");
				User user22 = new User(""user1"", ""user1"");
				user22.setIpAddr(""192.168.1.1"");
				User user23 = new User(""user1"", ""user1"");
				user23.setIpAddr(""192.168.1.1"");
				User user24 = new User(""user1"", ""user1"");
				user24.setIpAddr(""192.168.1.1"");
				User user25 = new User(""user1"", ""user1"");
				user25.setIpAddr(""192.168.1.1"");
				User user26 = new User(""user1"", ""user1"");
				user26.setIpAddr(""192.168.1.1"");
				User user27 = new User(""user1"", ""user1"");
				user27.setIpAddr(""192.168.1.1"");
				User user28 = new User(""user1"", ""user1"");
				user28.setIpAddr(""192.168.1.1"");
				User user29 = new User(""user1"", ""user1"");
				user29.setIpAddr(""192.168.1.1"");
				User user30 = new User(""user1"", ""user1"");
				user30.setIpAddr(""192.168.1.1"");
				User user31 = new User(""user1"", ""user1"");
				user31.setIpAddr(""192.168.1.1"");
				User user32 = new User(""user1"", ""user1"");
				user32.setIpAddr(""192.168.1.1"");
				User user33 = new User(""user1"", ""user1"");
				user33.setIpAddr(""192.168.1.1"");
				User user34 = new User(""user1"", ""user1"");
				user34.setIpAddr(""192.168.1.1"");
				User user35 = new User(""user1"", ""user1"");
				user35.setIpAddr(""192.168.1.1"");
				User user36 = new User(""user1"", ""user1"");
				user36.setIpAddr(""192.168.1.1"");
				User user37 = new User(""user1"", ""user1"");
				user37.setIpAddr(""192.168.1.1"");
				User user38 = new User(""user1"", ""user1"");
				user38.setIpAddr(""192.168.1.1"");
				User user39 = new User(""user1"", ""user1"");
				user39.setIpAddr(""192.168.1.1"");
				User user40 = new User(""user1"", ""user1"");
				user40.setIpAddr(""192.168.1.1"");
				User user41 = new User(""user1"", ""user1"");
				user41.setIpAddr(""192.168.1.1"");
				User user42 = new User(""user1"", ""user1"");
				user42.setIpAddr(""192.168.1.1"");
				User user43 = new User(""user1"", ""user1"");
				user43.setIpAddr(""192.168.1.1"");
				User user44 = new User(""user1"", ""user1"");
				user44.setIpAddr(""192.168.1.1"");
				User user45 = new User(""user1"", ""user1"");
				user45.setIpAddr(""192."
cmpl-6u6Fr65iKZyqqxZs4FhxyVjHnl4hh,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/User_3Test.java,55.41133165359497,length,"// User.java
/*
 *   CVS $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;

/**
 * User class contains all the necessary attributes of a logged in user
 * @author $Author: grodecki $
 * @version $Id: User.java,v 1.1 2006/11/06 19:51:47 grodecki Exp $
 */
public class User implements Comparable, Serializable {

    // static final long serialVersionUID = -3313178117323543078L;
    static final long serialVersionUID = 6729362233633496647L;

    // id (key)
    private String userId = """";

    // current IP address
    private String ipAddr;

    //cn CommonName
    private String userName = """";

    private String email = """";

    private Set roles;

    private Set groups;

    // Groups active for the user based on his location
    private Set activegroups;

    private String passvalidstart = """";

    private String passrenewal = """";

    // user password change required before using the system?
    private boolean passchange = false;

    private Set allowedips;

    LdapContext dctx;

    // private String dn;  //Distinguished name    (cn, o, c)
    // c
    private String country = """";

    // o
    private String organization = """";

    // encrypted    // userPassword
    private String passwd = """";

    // surname
    private String sn = """";

    private transient MessageDigest sha;

    private static String sep = System.getProperty(""line.separator"");

    private static String salt = ""XXXX"";

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(User.class.getName());

    public User() {
    }

    /**
     * User object constructed from userId and userName
     */
    public User(String userId, String userName) {
        this();
        //	System.out.println(""userId: ""+userId);
        //id
        this.userId = userId.trim();
        //cn
        this.userName = userName.trim();
    }

    public void init() {
        try {
            sha = MessageDigest.getInstance(""SHA-1"");
        } catch (java.security.NoSuchAlgorithmException e) {
            cat.error(""SHA-1 constructor failed: "", e);
        }
    }

    /**
     * get userId previously set
     * @return userId
     */
    public String getUserId() {
        //	System.out.println(""getUserId: ""+userId);
        return userId;
    }

    /**
     * set the UserId
     * @param id to be set
     */
    public void setUserId(String id) {
        userId = id.trim();
    }

    /**
     * encode the  password
     * @param password to be encoded
     */
    public void encodePassword(String password) {
        // only set password if it is non null.
        if (passwd != null && (password != null) && !password.equals(""""))
            passwd = createDigest(salt.getBytes(), password);
    }

    /**
     * Validate the password
     * @param password
     * @return
     */
    public boolean checkPassword(String password) {
        if (passwd == null)
            return false;
        return checkDigest(passwd, password);
    }

    /**
     * set the encrypted password
     * @param password  as encrypted digest (SHA algorithm)
     */
    public void setPassword(String password) {
        passwd = password;
    }

    /**
     * get the encrypted Password
     * @return encrypted password string
     */
    public String getPassword() {
        return passwd;
    }

    /**
     * set the SurName
     * @param surname
     */
    public void setSurName(String surname) {
        sn = surname;
    }

    /**
     * get the SurName
     * @return sn
     */
    public String getSurName() {
        return sn;
    }

    /**
     * get userName
     * @return userName
     */
    public String getUserName() {
        return userName;
    }

    /**
     * set the User Name (cn field in LDAP
     * @param name
     */
    public void setUserName(String name) {
        userName = name.trim();
    }

    /**
     * get the IpAddr of this user
     * @return String containing ipAddr
     */
    public String getIpAddr() {
        return ipAddr;
    }

    /**
     * set the IpAddr of this user
     * @param ipAddr  (should validate the address)
     */
    public void setIpAddr(String ipAddr) {
        this.ipAddr = ipAddr;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        email = email.trim();
    }

    public Set getRoles() {
        return roles;
    }

    public void addRole(String role) {
        if (roles == null)
            roles = new HashSet();
        roles.add(role);
    }

    public Set getGroups() {
        return groups;
    }

    public void addGroup(String group) {
        if (groups == null)
            groups = new HashSet();
        groups.add(group);
    }

    public Set getActivegroups() {
        return activegroups;
    }

    public void addActivegroup(String group) {
        if (activegroups == null)
            activegroups = new HashSet();
        activegroups.add(group);
    }

    public String getPassvalidstart() {
        return passvalidstart;
    }

    public void setPassvalidstart(String passvalidstart) {
        this.passvalidstart = passvalidstart;
    }

    public String getPassrenewal() {
        return passrenewal;
    }

    public void setPassrenewal(String passrenewal) {
        this.passrenewal = passrenewal;
    }

    public boolean getPasschange() {
        return passchange;
    }

    public void setPasschange(boolean passchange) {
        this.passchange = passchange;
    }

    public Set getAllowedips() {
        return allowedips;
    }

    public void addAllowedip(String allowed_ip) {
        if (allowedips == null)
            allowedips = new HashSet();
        allowedips.add(allowed_ip);
    }

    public void setLdapContext(LdapContext dctx) {
        this.dctx = dctx;
    }

    public LdapContext getLdapContext() {
        return dctx;
    }

    /**
     * set the Distinguished Name of the person
     * @param dn containing distinguished name    (should check its validity)
     */
    public void setDN(String dn) {
        //  cat.debug(""setDN: "" + dn);
        if (dn != null) {
            StringTokenizer st = new StringTokenizer(dn, "","");
            while (st.hasMoreTokens()) {
                String tok = st.nextToken();
                StringTokenizer stoken = new StringTokenizer(tok, ""="");
                String name = stoken.nextToken();
                // System.out.println(""token: ""+tok +"" name: ""+name);
                if (name.trim().equals(""o"")) {
                    organization = stoken.nextToken();
                    //   cat.debug(""org: ""+organization);
                    //break;
                } else if (name.trim().equals(""c"")) {
                    country = stoken.nextToken();
                } else if (name.trim().equals(""cn"")) {
                    userName = stoken.nextToken();
                }
            }
        } else
            cat.warn(""setDN: dn is null"");
        return;
    }

    /**
     * set the salt for encryption
     * @param theSalt
     */
    public static void setSalt(String theSalt) {
        salt = theSalt;
    }

    /**
     * get the Distinguished Name of the Person
     * @return String containing the distinguished name
     */
    public String getDN() {
        return ""cn="" + userName + "", o="" + organization + "", c="" + country;
        //  return dn;
    }

    /**
     * get the country (c) parameter
     * @return country
     */
    public String getCountry() {
        return country;
    }

    /**
     * set the country parameter
     * @param c country
     */
    public void setCountry(String c) {
        country = c;
    }

    /**
     * get the Organization of the user from the Distinguished Name dn
     * @return String representing the organization
     * The dn string is of the form cn=""name"", o=""organization"", c=""country""
     */
    public String getOrg() {
        return organization;
    }

    /**
     * Return a Properties sheet with identification
     * @return
     */
    public Properties getCredentials() {
        Properties props = new Properties();
        props.setProperty(""subjectDN"", getDN());
        props.setProperty(""EMail"", getUserId());
        return props;
    }

    /**
     * set the organization
     */
    public void setOrg(String org) {
        organization = org;
    }

    /**
     * copy nonempty fiels into the fields of object
     * @param newUser
     */
    public void update(User newUser) {
        organization = newUser.getOrg();
        country = newUser.getCountry();
        roles = newUser.getRoles();
        groups = newUser.getGroups();
        userName = newUser.getUserName();
        sn = newUser.getSurName();
        passwd = newUser.getPassword();
        userId = newUser.getUserId();
    }

    /**
     * String representation of user is simply its userId;
     * @return String representation of User
     */
    public String toString() {
        // char sep = '\n';
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        if (getRoles() != null) {
            Iterator it = getRoles().iterator();
            while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        }
        if (getGroups() != null) {
            Iterator it = getGroups().iterator();
            while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        }
        if (getIpAddr() != null)
            buff.append(""ip: "" + getIpAddr() + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * String representation with user defined separator
     * @param sep
     * @return String representation of User
     */
    public String toString(String sep) {
        StringBuffer buff = new StringBuffer();
        buff.append(""dn: "" + getDN() + sep);
        buff.append(""cn: "" + getUserName() + sep);
        buff.append(""id: "" + getUserId() + sep);
        buff.append(""sn: "" + getSurName() + sep);
        buff.append(""userPassword: "" + getPassword() + sep);
        Set rolebuf = new HashSet();
        rolebuf = getRoles();
        Iterator it = rolebuf.iterator();
        while (it.hasNext()) buff.append(""role: "" + (String) (it.next()) + sep);
        Set groupbuf = new HashSet();
        groupbuf = getGroups();
        it = groupbuf.iterator();
        while (it.hasNext()) buff.append(""group: "" + (String) (it.next()) + sep);
        buff.append(""objectClass: top"" + sep);
        buff.append(""objectClass: person"" + sep);
        return buff.toString();
    }

    /**
     * create hashCode combining unique userId and ipAddr so user
     * is distinguished coming from different ""locations""
     */
    public int hashCode() {
        // Improve hashcode calculation using member variables of this class
        return 13 * userId.hashCode() + 7 * ipAddr.hashCode();
    }

    /**
     *  Equality check for user to see if he is already known.
     */
    public boolean equals(Object user) {
        // Return true if the result of the compareTo() method is zero
        return compareTo(user) == 0;
    }

    /**
     *  Compare to operation to see if the input user is the same as this user.
     */
    public int compareTo(Object user) {
        // Compare the user IDs of the two user objects -
        //  result is zero if they're identical (uses String compareTo function)
        int result = userId.compareTo(((User) user).getUserId());
        // If result is zero from previous method, return the comparison of IP addresses.
        // Otherwise, return the result.
        return result == 0 ? ipAddr.compareTo(((User) user).getIpAddr()) : result;
    }

    /**
     * Create Digest for each input identity
     * @param salt to set the base for the encryption
     * @param identity to be encrypted
     */
    public String createDigest(byte[] salt, String identity) {
        String label = (salt.length > 0) ? ""{SSHA}"" : ""{SHA}"";
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        return label + new String(Base64.encode(concatenate(pwhash, salt)));
    }

    /**
     * Check Digest against identity
     * @param digest is digest to be checked against
     * @param identity to be checked
     */
    public boolean checkDigest(String digest, String identity) {
        if (digest.regionMatches(true, 0, ""{SHA}"", 0, 5)) {
            // ignore the label
            digest = digest.substring(5);
        } else if (digest.regionMatches(true, 0, ""{SSHA}"", 0, 6)) {
            // ignore the label
            digest = digest.substring(6);
        }
        byte[][] hs = split(Base64.decode(digest.getBytes()), 20);
        byte[] hash = hs[0];
        byte[] salt = hs[1];
        if (sha == null)
            init();
        sha.reset();
        sha.update(identity.getBytes());
        sha.update(salt);
        byte[] pwhash = sha.digest();
        boolean valid = true;
        if (!MessageDigest.isEqual(hash, pwhash)) {
            valid = false;
            cat.warn(""doesn't match: "" + identity);
        }
        return valid;
    }

    /**
     * Combine two byte arrays
     * @param l first byte array
     * @param r second byte array
     * @return byte[] combined byte array
     */
    private static byte[] concatenate(byte[] l, byte[] r) {
        byte[] b = new byte[l.length + r.length];
        System.arraycopy(l, 0, b, 0, l.length);
        System.arraycopy(r, 0, b, l.length, r.length);
        return b;
    }

    /**
     * split a byte array in two
     * @param src byte array to be split
     * @param n element at which to split the byte array
     * @return byte[][]  two byte arrays that have been split
     */
    private static byte[][] split(byte[] src, int n) {
        byte[] l, r;
        if (src == null || src.length <= n) {
            l = src;
            r = new byte[0];
        } else {
            l = new byte[n];
            r = new byte[src.length - n];
            System.arraycopy(src, 0, l, 0, n);
            System.arraycopy(src, n, r, 0, r.length);
        }
        byte[][] lr = { l, r };
        return lr;
    }
}
","// User_3Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkDigest(String, String)} method.
*/
class User_3Test {","// User_3Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkDigest(String, String)} method.
*/
class User_3Test {

		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is null.
		*/
		@Test
		void testCheckDigest_1() {
				User user = new User();
				String digest = null;
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is empty.
		*/
		@Test
		void testCheckDigest_2() {
				User user = new User();
				String digest = """";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is null.
		*/
		@Test
		void testCheckDigest_3() {
				User user = new User();
				String digest = ""test"";
				String identity = null;
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is empty.
		*/
		@Test
		void testCheckDigest_4() {
				User user = new User();
				String digest = ""test"";
				String identity = """";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_5() {
				User user = new User();
				String digest = ""test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_6() {
				User user = new User();
				String digest = ""{SHA}test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_7() {
				User user = new User();
				String digest = ""{SSHA}test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_8() {
				User user = new User();
				String digest = ""{SHA}test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_9() {
				User user = new User();
				String digest = ""{SSHA}test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is not empty.
		*/
		@Test
		void testCheckDigest_10() {
				User user = new User();
				String digest = ""{SHA}test"";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
}

// User_4Test.java
package com.browsersoft.aacs;

import java.io.Serializable;
import java.security.MessageDigest;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;
import javax.naming.ldap.LdapContext;
import org.apache.xerces.impl.dv.util.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#checkDigest(String, String)} method.
*/
class User_4Test {
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is null.
		*/
		@Test
		void testCheckDigest_1() {
				User user = new User();
				String digest = null;
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is empty.
		*/
		@Test
		void testCheckDigest_2() {
				User user = new User();
				String digest = """";
				String identity = ""test"";
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		* It tests the case when the digest is not empty and the identity is null.
		*/
		@Test
		void testCheckDigest_3() {
				User user = new User();
				String digest = ""test"";
				String identity = null;
				boolean result = user.checkDigest(digest, identity);
				assertFalse(result);
		}
		
		/**
		* Test case for {@link User#checkDigest(String, String)} method.
		"
cmpl-6u6GufbU0pwkYmlKSnCqAVyObFH9c,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/FilePolicyModule.java,48.073588848114014,length,"// FilePolicyModule.java
/*
 * @(#)FilePolicyModule.java
 *
 * Copyright 2003-2006 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistribution of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 * 
 *   2. Redistribution in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *
 * Neither the name of Sun Microsystems, Inc. or the names of contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 * 
 * This software is provided ""AS IS,"" without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING
 * ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 * OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN MICROSYSTEMS, INC. (""SUN"")
 * AND ITS LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE
 * AS A RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS
 * DERIVATIVES. IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE FOR ANY LOST
 * REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL,
 * INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY
 * OF LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE,
 * EVEN IF SUN HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
 *
 * You acknowledge that this software is not designed or intended for use in
 * the design, construction, operation or maintenance of any nuclear facility.
 */
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;

/**
 * This module represents a collection of files containing polices,
 * each of which will be searched through when trying to find a
 * policy that is applicable to a specific request. It does not support
 * policy references.
 * <p>
 * Note that this class used to be provided in the
 * <code>com.sun.xacml.finder.impl</code> package with a warning that it
 * would move out of the core packages eventually. This is partly because
 * this class doesn't represent standard functionality, and partly because
 * it isn't designed to be generally useful as anything more than an
 * example. Because so many people have used this class, however, it stayed
 * in place until the 2.0 release.
 * <p>
 * As of the 2.0 release, you may still use this class (in its new location),
 * but you are encouraged to migrate to the new support modules that are
 * much richer and designed for general-purpose use. Also, note that the
 * <code>loadPolicy</code> methods that used to be available from this class
 * have been removed. That functionality has been replaced by the much more
 * useful <code>PolicyReader</code> class. If you need to load policies
 * directly, you should consider that new class.
 *
 * @since 1.0
 * @author Seth Proctor
 */
public class FilePolicyModule extends com.sun.xacml.support.finder.FilePolicyModule {

    // the reader used to load all policies
    private PolicyReader reader;

    // the Policy directory
    private String policyDir;

    // the schema file we're using, if any
    private File schemaFile = null;

    // the logger we'll use for all messages
    private static final Logger logger = Logger.getLogger(FilePolicyModule.class.getName());

    /**
     * Constructor which retrieves the schema file to validate policies against
     * from the <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the
     * retrieved property is null, then no schema validation will occur.
     */
    public FilePolicyModule() {
        super();
        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);
        if (schemaName != null)
            schemaFile = new File(schemaName);
    }

    /**
     * Constructor that uses the specified <code>File</code> as the schema
     * file for XML validation. If schema validation is not desired, a null
     * value should be used.
     *
     * @param schemaFile the schema file to validate policies against,
     *                   or null if schema validation is not desired.
     */
    public FilePolicyModule(File schemaFile) {
        super(schemaFile);
        this.schemaFile = schemaFile;
    }

    /**
     * Constructor that uses the specified <code>String</code> as the schema
     * file for XML validation. If schema validation is not desired, a null
     * value should be used.
     *
     * @param schemaFile the schema file to validate policies against,
     *                   or null if schema validation is not desired.
     */
    public FilePolicyModule(String schemaFile) {
        super(schemaFile);
        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);
    }

    /**
     * Constructor that specifies a set of initial policy files to use. This
     * retrieves the schema file to validate policies against from the
     * <code>PolicyReader.POLICY_SCHEMA_PROPERTY</code>. If the retrieved
     * property is null, then no schema validation will occur.
     *
     * @param fileNames a <code>List</code> of <code>String</code>s that
     *                  identify policy files
     */
    public FilePolicyModule(List fileNames) {
        super(fileNames);
        String schemaName = System.getProperty(PolicyReader.POLICY_SCHEMA_PROPERTY);
        if (schemaName != null)
            schemaFile = new File(schemaName);
    }

    /**
     * Constructor that specifies a set of initial policy files to use and
     * the schema file used to validate the policies. If schema validation is
     * not desired, a null value should be used.
     *
     * @param fileNames a <code>List</code> of <code>String</code>s that
     *                  identify policy files
     * @param schemaFile the schema file to validate policies against,
     *                   or null if schema validation is not desired.
     */
    public FilePolicyModule(List fileNames, String schemaFile) {
        super(fileNames, schemaFile);
        this.schemaFile = ((schemaFile != null) ? new File(schemaFile) : null);
    }

    /**
     * Initializes the <code>FilePolicyModule</code> by loading
     * the policies contained in the collection of files associated
     * with this module. This method also uses the specified
     * <code>PolicyFinder</code> to help in instantiating PolicySets.
     *
     * init() also gets the Policy file directory to be used for
     * resolving references.
     *
     * @param finder a PolicyFinder used to help in instantiating PolicySets
     */
    public void init(PolicyFinder finder) {
        super.init(finder);
        reader = new PolicyReader(finder, logger, schemaFile);
        policyDir = Login.getProps().getProperty(""XACMLPolicyDir"", ""webapps/share/WEB-INF/classes/xacml/policy/"");
    }

    /**
     * Always returns <code>true</code> since this module does support
     * finding policies based on reference.
     *
     * @return true
     */
    public boolean isIdReferenceSupported() {
        return true;
    }

    /**
     * Attempts to find a policy by reference, based on the provided
     * parameters. Specifically, this module will try to treat the reference
     * as a URL, and resolve that URL directly. If the reference is not
     * a valid URL, cannot be resolved, or does not resolve to an XACML
     * policy, then no matching policy is returned. This method never
     * returns an error.
     *
     * @param idReference an identifier specifying some policy
     * @param type type of reference (policy or policySet) as identified by
     *             the fields in <code>PolicyReference</code>
     * @param constraints any optional constraints on the version of the
     *                    referenced policy (this will never be null, but
     *                    it may impose no constraints, and in fact will
     *                    never impose constraints when used from a pre-2.0
     *                    XACML policy)
     * @param parentMetaData the meta-data from the parent policy, which
     *                       provides XACML version, factories, etc.
     *
     * @return the result of looking for a matching policy
     */
    public PolicyFinderResult findPolicy(URI idReference, int type, VersionConstraints constraints, PolicyMetaData parentMetaData) {
        // see if the URI is in fact a URL
        URL url = null;
        try {
            url = new URL(""file:"" + policyDir + idReference.toString() + "".xml"");
        } catch (MalformedURLException murle) {
            // it's not a URL, so we can't handle this reference
            return new PolicyFinderResult();
        }
        // try resolving the URL
        AbstractPolicy policy = null;
        try {
            policy = reader.readPolicy(url);
        } catch (ParsingException pe) {
            // An error loading the policy could be many things (the URL
            // doesn't actually resolve a policy, the server is down, the
            // policy is invalid, etc.). This could be interpreted as an
            // error case, or simply as a case where no applicable policy
            // is available (as is done when we pre-load policies). This
            // module chooses the latter interpretation.
            return new PolicyFinderResult();
        }
        // check that we got the right kind of policy...if we didn't, then
        // we can't handle the reference
        if (type == PolicyReference.POLICY_REFERENCE) {
            if (!(policy instanceof Policy))
                return new PolicyFinderResult();
        } else {
            if (!(policy instanceof PolicySet))
                return new PolicyFinderResult();
        }
        // finally, check that the constraints match ... note that in a more
        // powerful module, you could actually have used the constraints to
        // construct a more specific URL, passed the constraints to the
        // server, etc., but this example module is staying simple
        if (!constraints.meetsConstraint(policy.getVersion()))
            return new PolicyFinderResult();
        // if we got here, then we successfully resolved a policy that is
        // the correct type, so return it
        return new PolicyFinderResult(policy);
    }
}
","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains ten unit test cases for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {","// FilePolicyModuleTest.java
package com.browsersoft.aacs.xacml;

import com.browsersoft.aacs.Login;
import com.sun.xacml.AbstractPolicy;
import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.MatchResult;
import com.sun.xacml.ParsingException;
import com.sun.xacml.Policy;
import com.sun.xacml.ctx.Status;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.finder.PolicyFinder;
import com.sun.xacml.finder.PolicyFinderModule;
import com.sun.xacml.finder.PolicyFinderResult;
import com.sun.xacml.PolicyMetaData;
import com.sun.xacml.PolicyReference;
import com.sun.xacml.PolicySet;
import com.sun.xacml.VersionConstraints;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import com.sun.xacml.support.finder.PolicyReader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FilePolicyModule}.
* It contains ten unit test cases for the {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
*/
class FilePolicyModuleTest {

	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is null.
	*/
	@Test
	void testFindPolicy_NullIdReference() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(null, PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is not a valid URL.
	*/
	@Test
	void testFindPolicy_InvalidIdReference() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""invalid""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicy() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicySet() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICYSET_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicySet_InvalidType() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICYSET_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicy_InvalidType() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicy_InvalidType_InvalidConstraints() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicySet_InvalidType_InvalidConstraints() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICYSET_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicy_InvalidType_InvalidConstraints_InvalidParentMetaData() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicySet_InvalidType_InvalidConstraints_InvalidParentMetaData() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICYSET_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	void testFindPolicy_ValidIdReferenceButNotResolveToXACMLPolicy_InvalidType_InvalidConstraints_InvalidParentMetaData_InvalidType() {
		FilePolicyModule filePolicyModule = new FilePolicyModule();
		PolicyFinderResult result = filePolicyModule.findPolicy(URI.create(""http://www.google.com""), PolicyReference.POLICY_REFERENCE, null, null);
		assertNull(result.getPolicy());
		assertNull(result.getStatus());
	}
	
	/**
	* Test case for {@link FilePolicyModule#findPolicy(URI, int, VersionConstraints, PolicyMetaData)} method.
	* It tests the case when the idReference is a valid URL but it does not resolve to an XACML policy.
	*/
	@Test
	"
cmpl-6u6Hx2VRrA6YvLRzLx3uXKBH7WcXa,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/PDPadapter_0Test.java,42.611088514328,length,"// PDPadapter.java
/*
 *   CVS $Id: PDPadapter.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;

/**
 * This class holds the PDP (Policy Decision Point) that is used to make
 * Access Control decisions. The PDP is configured from the XACML configuration
 * file.
 *
 * @since 1.1
 * @author seth proctor
 */
public class PDPadapter {

    // this is the actual PDP object we'll use for evaluation
    private PDP pdp = null;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(PDPadapter.class.getName());

    // This creates a PDPadapter with a PDP based on the configuration
    // defined by the runtime property com.sun.xcaml.PDPConfigFile.
    public PDPadapter(String configFile) throws Exception {
        // set the configuration file containing information on policies, etc
        cat.debug(""Setting System property com.sun.xacml.PDPConfigFile to "" + configFile);
        Properties props = System.getProperties();
        props.put(""com.sun.xacml.PDPConfigFile"", configFile);
        System.setProperties(props);
        // load the configuration
        ConfigurationStore store = new ConfigurationStore();
        // use the default factories from the configuration
        store.useDefaultFactories();
        // get the PDP configuration's and setup the PDP
        pdp = new PDP(store.getDefaultPDPConfig());
    }

    /**
     * Evaluate the supplied Request according to the
     * current PDP and return the Response Context.
     */
    public ResponseCtx evaluate(String requestFile) throws IOException, ParsingException {
        // setup the request based on the file
        RequestCtx request = RequestCtx.getInstance(new FileInputStream(requestFile));
        // evaluate the request
        return pdp.evaluate(request);
    }

    /**
     * Evaluate the supplied Request Context according to the
     * current PDP and return the Access Control decision.
     */
    public int makeDecision(RequestCtx request) {
        int result_value = -1;
        // evaluate the request
        try {
            ResponseCtx response = pdp.evaluate(request);
            Set xacml_results = response.getResults();
            Iterator xacml_iter = xacml_results.iterator();
            while (xacml_iter.hasNext()) {
                Result xacml_result = (Result) xacml_iter.next();
                xacml_result.encode(System.out, new Indenter());
                result_value = xacml_result.getDecision();
            }
        } catch (Exception e) {
            cat.error(e);
        }
        return result_value;
    }
}
","// PDPadapter_0Test.java
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PDPadapter}.
* It contains ten unit test cases for the {@link PDPadapter#evaluate(String)} method.
*/
class PDPadapter_0Test {","// PDPadapter_0Test.java
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PDPadapter}.
* It contains ten unit test cases for the {@link PDPadapter#evaluate(String)} method.
*/
class PDPadapter_0Test {

	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_0() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-1.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_1() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-2.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_2() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-3.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_3() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-4.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_4() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-5.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_5() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-6.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_6() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-7.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_7() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-8.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_8() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/resources/xacml/requests/request-9.xml"");
		// check that the response is not null
		assertNotNull(response);
	}
	
	/**
	* Test case for the {@link PDPadapter#evaluate(String)} method.
	* The test case tests the following assertion:
	* <ul>
	* 	<li>The method returns a ResponseCtx object.</li>
	* </ul>
	*/
	@Test
	void testEvaluate_9() throws IOException, ParsingException {
		// create a PDPadapter object
		PDPadapter pdPadapter = new PDPadapter(""src/test/resources/xacml/config/pdp-config.xml"");
		// evaluate the request
		ResponseCtx response = pdPadapter.evaluate(""src/test/"
cmpl-6u6J0Yz3TDoSr8cpjp9ZUEQ5ouZSw,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/PDPadapter_1Test.java,41.74988794326782,length,"// PDPadapter.java
/*
 *   CVS $Id: PDPadapter.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;

/**
 * This class holds the PDP (Policy Decision Point) that is used to make
 * Access Control decisions. The PDP is configured from the XACML configuration
 * file.
 *
 * @since 1.1
 * @author seth proctor
 */
public class PDPadapter {

    // this is the actual PDP object we'll use for evaluation
    private PDP pdp = null;

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(PDPadapter.class.getName());

    // This creates a PDPadapter with a PDP based on the configuration
    // defined by the runtime property com.sun.xcaml.PDPConfigFile.
    public PDPadapter(String configFile) throws Exception {
        // set the configuration file containing information on policies, etc
        cat.debug(""Setting System property com.sun.xacml.PDPConfigFile to "" + configFile);
        Properties props = System.getProperties();
        props.put(""com.sun.xacml.PDPConfigFile"", configFile);
        System.setProperties(props);
        // load the configuration
        ConfigurationStore store = new ConfigurationStore();
        // use the default factories from the configuration
        store.useDefaultFactories();
        // get the PDP configuration's and setup the PDP
        pdp = new PDP(store.getDefaultPDPConfig());
    }

    /**
     * Evaluate the supplied Request according to the
     * current PDP and return the Response Context.
     */
    public ResponseCtx evaluate(String requestFile) throws IOException, ParsingException {
        // setup the request based on the file
        RequestCtx request = RequestCtx.getInstance(new FileInputStream(requestFile));
        // evaluate the request
        return pdp.evaluate(request);
    }

    /**
     * Evaluate the supplied Request Context according to the
     * current PDP and return the Access Control decision.
     */
    public int makeDecision(RequestCtx request) {
        int result_value = -1;
        // evaluate the request
        try {
            ResponseCtx response = pdp.evaluate(request);
            Set xacml_results = response.getResults();
            Iterator xacml_iter = xacml_results.iterator();
            while (xacml_iter.hasNext()) {
                Result xacml_result = (Result) xacml_iter.next();
                xacml_result.encode(System.out, new Indenter());
                result_value = xacml_result.getDecision();
            }
        } catch (Exception e) {
            cat.error(e);
        }
        return result_value;
    }
}
","// PDPadapter_1Test.java
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PDPadapter}.
* It contains ten unit test cases for the {@link PDPadapter#makeDecision(RequestCtx)} method.
*/
class PDPadapter_1Test {","// PDPadapter_1Test.java
package com.browsersoft.aacs.xacml;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.Properties;
import java.util.Set;
import com.sun.xacml.ConfigurationStore;
import com.sun.xacml.Indenter;
import com.sun.xacml.PDP;
import com.sun.xacml.ParsingException;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.ResponseCtx;
import com.sun.xacml.ctx.Result;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PDPadapter}.
* It contains ten unit test cases for the {@link PDPadapter#makeDecision(RequestCtx)} method.
*/
class PDPadapter_1Test {

	/**
	* Test case 1 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with a valid patient ID.
	* The expected result is that the request is permitted.
	*/
	@Test
	void testMakeDecision_1() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_1.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_PERMIT);
	}
	
	/**
	* Test case 2 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with an invalid patient ID.
	* The expected result is that the request is denied.
	*/
	@Test
	void testMakeDecision_2() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_2.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_DENY);
	}
	
	/**
	* Test case 3 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with a valid patient ID.
	* The expected result is that the request is permitted.
	*/
	@Test
	void testMakeDecision_3() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_3.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_PERMIT);
	}
	
	/**
	* Test case 4 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with an invalid patient ID.
	* The expected result is that the request is denied.
	*/
	@Test
	void testMakeDecision_4() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_4.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_DENY);
	}
	
	/**
	* Test case 5 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with a valid patient ID.
	* The expected result is that the request is permitted.
	*/
	@Test
	void testMakeDecision_5() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_5.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_PERMIT);
	}
	
	/**
	* Test case 6 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with an invalid patient ID.
	* The expected result is that the request is denied.
	*/
	@Test
	void testMakeDecision_6() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_6.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_DENY);
	}
	
	/**
	* Test case 7 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with a valid patient ID.
	* The expected result is that the request is permitted.
	*/
	@Test
	void testMakeDecision_7() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_7.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_PERMIT);
	}
	
	/**
	* Test case 8 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with an invalid patient ID.
	* The expected result is that the request is denied.
	*/
	@Test
	void testMakeDecision_8() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_8.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals(result, Result.DECISION_DENY);
	}
	
	/**
	* Test case 9 for {@link PDPadapter#makeDecision(RequestCtx)}.
	* It tests the case where the request is for a patient with a valid patient ID.
	* The expected result is that the request is permitted.
	*/
	@Test
	void testMakeDecision_9() throws IOException, ParsingException {
		// setup the request based on the file
		RequestCtx request = RequestCtx.getInstance(new FileInputStream(""src/test/resources/xacml/request_9.xml""));
		// setup the PDP
		PDPadapter pdp = new PDPadapter(""src/test/resources/xacml/pdp_1.xml"");
		// evaluate the request
		int result = pdp.makeDecision(request);
		// check the result
		assertEquals"
cmpl-6u6K34RidDLbQl50QicdBheSxSesv,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilder_0Test.java,40.10554766654968,length,"// RequestBuilder.java
/*
 *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Class to build and generate an XACMLRequest.
 * This is a major part of what a PEP does.
 */
public class RequestBuilder {

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());

    /**
     * Sets up the Subject section of the request. This Request only has
     * one Subject section, and it uses the default category. To create a
     * Subject with a different category, you simply specify the category
     * when you construct the Subject object.
     */
    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {
        HashSet attributes = new HashSet();
        // setup the id and value for the requesting subject
        URI subjectId = new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id"");
        RFC822NameAttribute value = new RFC822NameAttribute(subject);
        // create the subject section with three attributes, the first with
        // the subject's identity...
        attributes.add(new Attribute(subjectId, null, null, value));
        Iterator it = null;
        // ...and the second with the subject's role membership(s)
        if (roles == null) {
            cat.warn(""Subject "" + subject + "" has null roles"");
        } else {
            it = roles.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:role""), null, null, new StringAttribute((String) (it.next()))));
        }
        //      ...and the third with the subject's group membership(s)
        if (groups == null) {
            cat.warn(""Subject "" + subject + "" has null groups"");
        } else {
            it = groups.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:group""), null, null, new StringAttribute((String) (it.next()))));
        }
        // bundle the attributes in a Subject with the default category
        HashSet subjects = new HashSet();
        subjects.add(new Subject(attributes));
        return subjects;
    }

    /**
     * Creates a Resource specifying the resource-id, a required attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupResource(String resName) throws URISyntaxException {
        HashSet resource = new HashSet();
        /*
        // the resource being requested
        AnyURIAttribute value =
            new AnyURIAttribute(new URI(resName));

        // create the resource using a standard, required identifier for
        // the resource being requested
        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),
                                   null, null, value));
        */
        URI resId = new URI(""urn:oasis:names:tc:xacml:1.0:resource:resource-id"");
        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));
        return resource;
    }

    /**
     * Creates an Action specifying the action-id, an optional attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupAction(String actionName) throws URISyntaxException {
        HashSet action = new HashSet();
        // this is a standard URI that can optionally be used to specify
        // the action being requested
        URI actionId = new URI(""urn:oasis:names:tc:xacml:1.0:action:action-id"");
        // create the action
        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));
        return action;
    }
}
","// RequestBuilder_0Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupSubjects(String, Set, Set)} method.
*/
class RequestBuilder_0Test {","// RequestBuilder_0Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupSubjects(String, Set, Set)} method.
*/
class RequestBuilder_0Test {

	/**
	* Test case for {@link RequestBuilder#setupSubjects(String, Set, Set)}
	* with subject = """", roles = null, groups = null.
	*/
	@Test
	void testSetupSubjects_0() throws URISyntaxException {
		String subject = """";
		Set roles = null;
		Set groups = null;
		Set result = RequestBuilder.setupSubjects(subject, roles, groups);
		assertNotNull(result);
		assertEquals(1, result.size());
		Iterator it = result.iterator();
		Subject s = (Subject) it.next();
		assertNotNull(s);
		Set attrs = s.getAttributes();
		assertNotNull(attrs);
		assertEquals(1, attrs.size());
		it = attrs.iterator();
		Attribute a = (Attribute) it.next();
		assertNotNull(a);
		assertEquals(new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id""), a.getId());
		assertNull(a.getIssuer());
		assertNull(a.getIssueInstant());
		assertNotNull(a.getType());
		assertEquals(RFC822NameAttribute.identifier, a.getType());
		assertNotNull(a.getValues());
		assertEquals(1, a.getValues().size());
		it = a.getValues().iterator();
		RFC822NameAttribute v = (RFC822NameAttribute) it.next();
		assertNotNull(v);
		assertEquals("""", v.getValue());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupSubjects(String, Set, Set)}
	* with subject = """", roles = {}, groups = null.
	*/
	@Test
	void testSetupSubjects_1() throws URISyntaxException {
		String subject = """";
		Set roles = new HashSet();
		Set groups = null;
		Set result = RequestBuilder.setupSubjects(subject, roles, groups);
		assertNotNull(result);
		assertEquals(1, result.size());
		Iterator it = result.iterator();
		Subject s = (Subject) it.next();
		assertNotNull(s);
		Set attrs = s.getAttributes();
		assertNotNull(attrs);
		assertEquals(1, attrs.size());
		it = attrs.iterator();
		Attribute a = (Attribute) it.next();
		assertNotNull(a);
		assertEquals(new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id""), a.getId());
		assertNull(a.getIssuer());
		assertNull(a.getIssueInstant());
		assertNotNull(a.getType());
		assertEquals(RFC822NameAttribute.identifier, a.getType());
		assertNotNull(a.getValues());
		assertEquals(1, a.getValues().size());
		it = a.getValues().iterator();
		RFC822NameAttribute v = (RFC822NameAttribute) it.next();
		assertNotNull(v);
		assertEquals("""", v.getValue());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupSubjects(String, Set, Set)}
	* with subject = """", roles = null, groups = {}.
	*/
	@Test
	void testSetupSubjects_2() throws URISyntaxException {
		String subject = """";
		Set roles = null;
		Set groups = new HashSet();
		Set result = RequestBuilder.setupSubjects(subject, roles, groups);
		assertNotNull(result);
		assertEquals(1, result.size());
		Iterator it = result.iterator();
		Subject s = (Subject) it.next();
		assertNotNull(s);
		Set attrs = s.getAttributes();
		assertNotNull(attrs);
		assertEquals(1, attrs.size());
		it = attrs.iterator();
		Attribute a = (Attribute) it.next();
		assertNotNull(a);
		assertEquals(new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id""), a.getId());
		assertNull(a.getIssuer());
		assertNull(a.getIssueInstant());
		assertNotNull(a.getType());
		assertEquals(RFC822NameAttribute.identifier, a.getType());
		assertNotNull(a.getValues());
		assertEquals(1, a.getValues().size());
		it = a.getValues().iterator();
		RFC822NameAttribute v = (RFC822NameAttribute) it.next();
		assertNotNull(v);
		assertEquals("""", v.getValue());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupSubjects(String, Set, Set)}
	* with subject = """", roles = {}, groups = {}.
	*/
	@Test
	void testSetupSubjects_3() throws URISyntaxException {
		String subject = """";
		Set roles = new HashSet();
		Set groups = new HashSet();
		Set result = RequestBuilder.setupSubjects(subject, roles, groups);
		assertNotNull(result);
		assertEquals(1, result.size());
		Iterator it = result.iterator();
		Subject s = (Subject) it.next();
		assertNotNull(s);
		Set attrs = s.getAttributes();
		assertNotNull(attrs);
		assertEquals(1, attrs.size());
		it = attrs.iterator();
		Attribute a = (Attribute) it.next();
		assertNotNull(a);
		assertEquals(new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id""), a.getId());
		assertNull(a.getIssuer());
		assertNull(a.getIssueInstant());
		assertNotNull(a.getType());
		assertEquals(RFC822NameAttribute.identifier, a.getType());
		assertNotNull(a.getValues());
		assertEquals(1, a.getValues().size());
		it = a.getValues().iterator();
		RFC822NameAttribute v = (RFC822NameAttribute) it.next();
		assertNotNull(v);
		assertEquals("""", v.getValue());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupSubjects(String, Set, Set)}
	* with subject = """", roles = {""role1""}, groups = null.
	*/
	@Test
	void testSetupSubjects_4() throws URISyntaxException {
		String subject = """";
		Set roles = new HashSet();
		roles.add(""role1"");
		Set groups = null;
		Set result = RequestBuilder.setupSubjects(subject, roles, groups);
		assertNotNull(result);
		assertEquals(1, result.size());
		Iterator it = result.iterator();
		Subject s = (Subject) it.next();
		assertNotNull(s);
		Set attrs = s.getAttributes();
		assertNotNull(attrs);
		assertEquals(2, attrs.size());
		it = attrs.iterator();
		Attribute a = (Attribute) it.next();
		assertNotNull(a);
		assertEquals(new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id""), a.getId());
		assertNull(a.getIssuer());
		assertNull(a.getIssueInstant());
		assertNotNull(a.getType());
		assertEquals(RFC822NameAttribute.identifier, a.getType());"
cmpl-6u6L6rWbqEAQXZ8WM8LzvjwD8pHaP,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilder_1Test.java,46.101195096969604,length,"// RequestBuilder.java
/*
 *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Class to build and generate an XACMLRequest.
 * This is a major part of what a PEP does.
 */
public class RequestBuilder {

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());

    /**
     * Sets up the Subject section of the request. This Request only has
     * one Subject section, and it uses the default category. To create a
     * Subject with a different category, you simply specify the category
     * when you construct the Subject object.
     */
    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {
        HashSet attributes = new HashSet();
        // setup the id and value for the requesting subject
        URI subjectId = new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id"");
        RFC822NameAttribute value = new RFC822NameAttribute(subject);
        // create the subject section with three attributes, the first with
        // the subject's identity...
        attributes.add(new Attribute(subjectId, null, null, value));
        Iterator it = null;
        // ...and the second with the subject's role membership(s)
        if (roles == null) {
            cat.warn(""Subject "" + subject + "" has null roles"");
        } else {
            it = roles.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:role""), null, null, new StringAttribute((String) (it.next()))));
        }
        //      ...and the third with the subject's group membership(s)
        if (groups == null) {
            cat.warn(""Subject "" + subject + "" has null groups"");
        } else {
            it = groups.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:group""), null, null, new StringAttribute((String) (it.next()))));
        }
        // bundle the attributes in a Subject with the default category
        HashSet subjects = new HashSet();
        subjects.add(new Subject(attributes));
        return subjects;
    }

    /**
     * Creates a Resource specifying the resource-id, a required attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupResource(String resName) throws URISyntaxException {
        HashSet resource = new HashSet();
        /*
        // the resource being requested
        AnyURIAttribute value =
            new AnyURIAttribute(new URI(resName));

        // create the resource using a standard, required identifier for
        // the resource being requested
        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),
                                   null, null, value));
        */
        URI resId = new URI(""urn:oasis:names:tc:xacml:1.0:resource:resource-id"");
        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));
        return resource;
    }

    /**
     * Creates an Action specifying the action-id, an optional attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupAction(String actionName) throws URISyntaxException {
        HashSet action = new HashSet();
        // this is a standard URI that can optionally be used to specify
        // the action being requested
        URI actionId = new URI(""urn:oasis:names:tc:xacml:1.0:action:action-id"");
        // create the action
        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));
        return action;
    }
}
","// RequestBuilder_1Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupResource(String)} method.
*/
class RequestBuilder_1Test {","// RequestBuilder_1Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupResource(String)} method.
*/
class RequestBuilder_1Test {

	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is null.
	*/
	@Test
	void testSetupResource_1() throws URISyntaxException {
		String resName = null;
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is empty.
	*/
	@Test
	void testSetupResource_2() throws URISyntaxException {
		String resName = """";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_3() throws URISyntaxException {
		String resName = ""resource"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_4() throws URISyntaxException {
		String resName = ""resource1"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_5() throws URISyntaxException {
		String resName = ""resource2"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_6() throws URISyntaxException {
		String resName = ""resource3"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_7() throws URISyntaxException {
		String resName = ""resource4"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_8() throws URISyntaxException {
		String resName = ""resource5"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_9() throws URISyntaxException {
		String resName = ""resource6"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupResource(String)} method.
	* Test case for the resource name is a valid name.
	*/
	@Test
	void testSetupResource_10() throws URISyntaxException {
		String resName = ""resource7"";
		Set<Attribute> result = RequestBuilder.setupResource(resName);
		assertEquals(1, result.size());
	}
}

// RequestBuilder_2Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupAction(String)} method.
*/
class RequestBuilder_2Test {
		
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is null.
	*/
	@Test
	void testSetupAction_1() throws URISyntaxException {
		String actionName = null;
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is empty.
	*/
	@Test
	void testSetupAction_2() throws URISyntaxException {
		String actionName = """";
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is a valid name.
	*/
	@Test
	void testSetupAction_3() throws URISyntaxException {
		String actionName = ""action"";
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is a valid name.
	*/
	@Test
	void testSetupAction_4() throws URISyntaxException {
		String actionName = ""action1"";
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is a valid name.
	*/
	@Test
	void testSetupAction_5() throws URISyntaxException {
		String actionName = ""action2"";
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is a valid name.
	*/
	@Test
	void testSetupAction_6() throws URISyntaxException {
		String actionName = ""action3"";
		Set<Attribute> result = RequestBuilder.setupAction(actionName);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is a valid name.
	*/
	@Test
"
cmpl-6u6M9TcJ1xLsLvxGlhbiL2hwYcMjN,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/aacs/xacml/RequestBuilder_2Test.java,50.34763741493225,length,"// RequestBuilder.java
/*
 *   CVS $Id: RequestBuilder.java,v 1.1 2006/11/06 19:56:51 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Class to build and generate an XACMLRequest.
 * This is a major part of what a PEP does.
 */
public class RequestBuilder {

    private static org.apache.log4j.Logger cat = org.apache.log4j.Logger.getLogger(RequestBuilder.class.getName());

    /**
     * Sets up the Subject section of the request. This Request only has
     * one Subject section, and it uses the default category. To create a
     * Subject with a different category, you simply specify the category
     * when you construct the Subject object.
     */
    public static Set setupSubjects(String subject, Set roles, Set groups) throws URISyntaxException {
        HashSet attributes = new HashSet();
        // setup the id and value for the requesting subject
        URI subjectId = new URI(""urn:oasis:names:tc:xacml:1.0:subject:subject-id"");
        RFC822NameAttribute value = new RFC822NameAttribute(subject);
        // create the subject section with three attributes, the first with
        // the subject's identity...
        attributes.add(new Attribute(subjectId, null, null, value));
        Iterator it = null;
        // ...and the second with the subject's role membership(s)
        if (roles == null) {
            cat.warn(""Subject "" + subject + "" has null roles"");
        } else {
            it = roles.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:role""), null, null, new StringAttribute((String) (it.next()))));
        }
        //      ...and the third with the subject's group membership(s)
        if (groups == null) {
            cat.warn(""Subject "" + subject + "" has null groups"");
        } else {
            it = groups.iterator();
            while (it.hasNext()) attributes.add(new Attribute(new URI(""urn:openhre:names:security:1.0:group""), null, null, new StringAttribute((String) (it.next()))));
        }
        // bundle the attributes in a Subject with the default category
        HashSet subjects = new HashSet();
        subjects.add(new Subject(attributes));
        return subjects;
    }

    /**
     * Creates a Resource specifying the resource-id, a required attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupResource(String resName) throws URISyntaxException {
        HashSet resource = new HashSet();
        /*
        // the resource being requested
        AnyURIAttribute value =
            new AnyURIAttribute(new URI(resName));

        // create the resource using a standard, required identifier for
        // the resource being requested
        resource.add(new Attribute(new URI(EvaluationCtx.RESOURCE_ID),
                                   null, null, value));
        */
        URI resId = new URI(""urn:oasis:names:tc:xacml:1.0:resource:resource-id"");
        resource.add(new Attribute(resId, null, null, new StringAttribute(resName)));
        return resource;
    }

    /**
     * Creates an Action specifying the action-id, an optional attribute.
     *
     * @return a Set of Attributes for inclusion in a Request
     *
     * @throws URISyntaxException if there is a problem with a URI
     */
    public static Set setupAction(String actionName) throws URISyntaxException {
        HashSet action = new HashSet();
        // this is a standard URI that can optionally be used to specify
        // the action being requested
        URI actionId = new URI(""urn:oasis:names:tc:xacml:1.0:action:action-id"");
        // create the action
        action.add(new Attribute(actionId, null, null, new StringAttribute(actionName)));
        return action;
    }
}
","// RequestBuilder_2Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupAction(String)} method.
*/
class RequestBuilder_2Test {","// RequestBuilder_2Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupAction(String)} method.
*/
class RequestBuilder_2Test {

	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is null.
	*/
	@Test
	void testSetupAction_1() throws URISyntaxException {
		String actionName = null;
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(0, action.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is empty.
	*/
	@Test
	void testSetupAction_2() throws URISyntaxException {
		String actionName = """";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(0, action.size());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action"".
	*/
	@Test
	void testSetupAction_3() throws URISyntaxException {
		String actionName = ""action"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action1"".
	*/
	@Test
	void testSetupAction_4() throws URISyntaxException {
		String actionName = ""action1"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action1"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action2"".
	*/
	@Test
	void testSetupAction_5() throws URISyntaxException {
		String actionName = ""action2"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action2"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action3"".
	*/
	@Test
	void testSetupAction_6() throws URISyntaxException {
		String actionName = ""action3"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action3"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action4"".
	*/
	@Test
	void testSetupAction_7() throws URISyntaxException {
		String actionName = ""action4"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action4"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action5"".
	*/
	@Test
	void testSetupAction_8() throws URISyntaxException {
		String actionName = ""action5"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action5"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action6"".
	*/
	@Test
	void testSetupAction_9() throws URISyntaxException {
		String actionName = ""action6"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action6"", attr.getValue().encode());
	}
	
	/**
	* Test case for {@link RequestBuilder#setupAction(String)} method.
	* Test case for the action name is ""action7"".
	*/
	@Test
	void testSetupAction_10() throws URISyntaxException {
		String actionName = ""action7"";
		Set<Attribute> action = RequestBuilder.setupAction(actionName);
		assertEquals(1, action.size());
		Iterator<Attribute> it = action.iterator();
		Attribute attr = it.next();
		assertEquals(""urn:oasis:names:tc:xacml:1.0:action:action-id"", attr.getId().toString());
		assertEquals(""action7"", attr.getValue().encode());
	}
}

// RequestBuilder_3Test.java
package com.browsersoft.aacs.xacml;

import com.sun.xacml.EvaluationCtx;
import com.sun.xacml.Indenter;
import com.sun.xacml.attr.AnyURIAttribute;
import com.sun.xacml.attr.RFC822NameAttribute;
import com.sun.xacml.attr.StringAttribute;
import com.sun.xacml.ctx.Attribute;
import com.sun.xacml.ctx.RequestCtx;
import com.sun.xacml.ctx.Subject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RequestBuilder}.
* It contains ten unit test cases for the {@link RequestBuilder#setupResource(String)} method.
*/
class RequestBuilder_3Test {
		
	/**
	* Test case for {@link RequestBuilder#setupResource"
cmpl-6u6NCqVTXQrkRbHaNi7Dbm69e5VdM,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_0Test.java,45.88704967498779,length,"// AACSLoginModule.java
/*
 *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    // initial state
    private Subject subject;

    private CallbackHandler callbackHandler;

    // shared between the LoginModules
    private Map sharedState;

    private Map options;

    // configurable option
    private boolean debug = false;

    // the authentication status
    private boolean succeeded = false;

    private boolean commitSucceeded = false;

    // username and password
    private String username;

    private char[] password;

    // Principals
    private AACSUserPrincipal userPrincipal;

    private AACSRolePrincipal rolePrincipal;

    // AACS Beans
    private User user;

    private Login login;

    // Default and actual AACS properties file
    private final static String aacsProps = ""/AACS"";

    private static String propsfile = null;

    /**
     *  Initialize this <code>LoginModule</code>.
     *
     *  <p>
     *
     *  @param subject the <code>Subject</code> to be authenticated. <p>
     *
     *  @param callbackHandler a <code>CallbackHandler</code> for communicating
     * 			with the end user (prompting for user names and
     * 			passwords, for example). <p>
     *
     *  @param sharedState shared <code>LoginModule</code> state. <p>
     *
     *  @param options options specified in the login
     * 			<code>Configuration</code> for this particular
     * 			<code>LoginModule</code>.
     */
    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
        this.subject = subject;
        this.callbackHandler = callbackHandler;
        this.sharedState = sharedState;
        this.options = options;
        user = null;
        login = null;
        // initialize any configured options
        debug = ""true"".equalsIgnoreCase((String) options.get(""debug""));
        if (propsfile == null) {
            // only do the first time
            propsfile = (String) options.get(""config"");
            if (propsfile == null)
                propsfile = aacsProps;
            Login.setConfigFile(propsfile);
            Login.init();
        }
        if (debug)
            System.out.println(""AACSLoginModule initialized"");
    }

    /**
     *  Authenticate the user with a user name and password.
     *
     *  <p>
     *
     *  @return true in all cases since this <code>LoginModule</code>
     * 		should not be ignored.
     *
     *  @exception FailedLoginException if the authentication fails. <p>
     *
     *  @exception LoginException if this <code>LoginModule</code>
     * 		is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication succeeded
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  succeeded).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> method), then this method associates a
     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     *  with the <code>Subject</code> located in the
     *  <code>LoginModule</code>.  If this LoginModule's own
     *  authentication attempted failed, then this method removes
     *  any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the commit fails.
     *
     *  @return true if this LoginModule's own login and commit
     * 		attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication failed.
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  did not succeed).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> and <code>commit</code> methods),
     *  then this method cleans up any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the abort fails.
     *
     *  @return false if this LoginModule's own login and/or commit attempts
     * 		failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     *
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {","// AACSLoginModule_0Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_0Test {

	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is null and the password is null.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_0() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is empty and the password is null.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_1() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is null and the password is empty.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_2() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is empty and the password is empty.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_3() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is valid and the password is null.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_4() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is valid and the password is empty.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_5() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is null and the password is valid.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_6() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is empty and the password is valid.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_7() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is valid and the password is valid.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_8() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
	/**
	* Test case for the {@link AACSLoginModule#login()} method.
	* It tests the case that the username is valid and the password is valid.
	* Expected: {@link FailedLoginException}.
	*/
	@Test
	void testLogin_9() throws Exception {
		AACSLoginModule aACSLoginModule = new AACSLoginModule();
		aACSLoginModule.initialize(null, null, null, null);
		try {
			aACSLoginModule.login();
			fail(""Expected FailedLoginException"");
		} catch (FailedLoginException e) {
			// We are expecting FailedLoginException
		}
	}
	
}

// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.
*/
class"
cmpl-6u6OFLU0cTDonQKAEkK4rSQU0xWfy,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_1Test.java,47.65281319618225,length,"// AACSLoginModule.java
/*
 *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    // initial state
    private Subject subject;

    private CallbackHandler callbackHandler;

    // shared between the LoginModules
    private Map sharedState;

    private Map options;

    // configurable option
    private boolean debug = false;

    // the authentication status
    private boolean succeeded = false;

    private boolean commitSucceeded = false;

    // username and password
    private String username;

    private char[] password;

    // Principals
    private AACSUserPrincipal userPrincipal;

    private AACSRolePrincipal rolePrincipal;

    // AACS Beans
    private User user;

    private Login login;

    // Default and actual AACS properties file
    private final static String aacsProps = ""/AACS"";

    private static String propsfile = null;

    /**
     *  Initialize this <code>LoginModule</code>.
     *
     *  <p>
     *
     *  @param subject the <code>Subject</code> to be authenticated. <p>
     *
     *  @param callbackHandler a <code>CallbackHandler</code> for communicating
     * 			with the end user (prompting for user names and
     * 			passwords, for example). <p>
     *
     *  @param sharedState shared <code>LoginModule</code> state. <p>
     *
     *  @param options options specified in the login
     * 			<code>Configuration</code> for this particular
     * 			<code>LoginModule</code>.
     */
    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
        this.subject = subject;
        this.callbackHandler = callbackHandler;
        this.sharedState = sharedState;
        this.options = options;
        user = null;
        login = null;
        // initialize any configured options
        debug = ""true"".equalsIgnoreCase((String) options.get(""debug""));
        if (propsfile == null) {
            // only do the first time
            propsfile = (String) options.get(""config"");
            if (propsfile == null)
                propsfile = aacsProps;
            Login.setConfigFile(propsfile);
            Login.init();
        }
        if (debug)
            System.out.println(""AACSLoginModule initialized"");
    }

    /**
     *  Authenticate the user with a user name and password.
     *
     *  <p>
     *
     *  @return true in all cases since this <code>LoginModule</code>
     * 		should not be ignored.
     *
     *  @exception FailedLoginException if the authentication fails. <p>
     *
     *  @exception LoginException if this <code>LoginModule</code>
     * 		is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication succeeded
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  succeeded).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> method), then this method associates a
     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     *  with the <code>Subject</code> located in the
     *  <code>LoginModule</code>.  If this LoginModule's own
     *  authentication attempted failed, then this method removes
     *  any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the commit fails.
     *
     *  @return true if this LoginModule's own login and commit
     * 		attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication failed.
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  did not succeed).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> and <code>commit</code> methods),
     *  then this method cleans up any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the abort fails.
     *
     *  @return false if this LoginModule's own login and/or commit attempts
     * 		failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     *
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {","// AACSLoginModule_1Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_1Test {

	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit succeeds,
	* the method returns true.
	*/
	@Test
	public void testCommit_1() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = true;
		assertTrue(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testCommit_2() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login fails and the commit succeeds,
	* the method returns false.
	*/
	@Test
	public void testCommit_3() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = false;
		aacsLoginModule.commitSucceeded = true;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login fails and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testCommit_4() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = false;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit succeeds,
	* the method returns true.
	*/
	@Test
	public void testCommit_5() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = true;
		assertTrue(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testCommit_6() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login fails and the commit succeeds,
	* the method returns false.
	*/
	@Test
	public void testCommit_7() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = false;
		aacsLoginModule.commitSucceeded = true;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login fails and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testCommit_8() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = false;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit succeeds,
	* the method returns true.
	*/
	@Test
	public void testCommit_9() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = true;
		assertTrue(aacsLoginModule.commit());
	}
	
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	* It tests the case that when the login succeeds and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testCommit_10() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.commit());
	}
}

// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {
		
	/**
	* Test case for {@link AACSLoginModule#abort()} method.
	* It tests the case that when the login succeeds and the commit succeeds,
	* the method returns true.
	*/
	@Test
	public void testAbort_1() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = true;
		assertTrue(aacsLoginModule.abort());
	}
	
	/**
	* Test case for {@link AACSLoginModule#abort()} method.
	* It tests the case that when the login succeeds and the commit fails,
	* the method returns false.
	*/
	@Test
	public void testAbort_2() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = true;
		aacsLoginModule.commitSucceeded = false;
		assertFalse(aacsLoginModule.abort());
	}
	
	/**
	* Test case for {@link AACSLoginModule#abort()} method.
	* It tests the case that when the login fails and the commit succeeds,
	* the method returns false.
	*/
	@Test
	public void testAbort_3() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		aacsLoginModule.succeeded = false;
		aacsLoginModule.commitSucceeded = true;
		assertFalse(aacsLoginModule.abort());
	}
	
	/**
	* Test case for {@link AACSLog"
cmpl-6u6PIuxjNLKM4C3sxklJnS7QTrQQp,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_2Test.java,44.477553606033325,length,"// AACSLoginModule.java
/*
 *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    // initial state
    private Subject subject;

    private CallbackHandler callbackHandler;

    // shared between the LoginModules
    private Map sharedState;

    private Map options;

    // configurable option
    private boolean debug = false;

    // the authentication status
    private boolean succeeded = false;

    private boolean commitSucceeded = false;

    // username and password
    private String username;

    private char[] password;

    // Principals
    private AACSUserPrincipal userPrincipal;

    private AACSRolePrincipal rolePrincipal;

    // AACS Beans
    private User user;

    private Login login;

    // Default and actual AACS properties file
    private final static String aacsProps = ""/AACS"";

    private static String propsfile = null;

    /**
     *  Initialize this <code>LoginModule</code>.
     *
     *  <p>
     *
     *  @param subject the <code>Subject</code> to be authenticated. <p>
     *
     *  @param callbackHandler a <code>CallbackHandler</code> for communicating
     * 			with the end user (prompting for user names and
     * 			passwords, for example). <p>
     *
     *  @param sharedState shared <code>LoginModule</code> state. <p>
     *
     *  @param options options specified in the login
     * 			<code>Configuration</code> for this particular
     * 			<code>LoginModule</code>.
     */
    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
        this.subject = subject;
        this.callbackHandler = callbackHandler;
        this.sharedState = sharedState;
        this.options = options;
        user = null;
        login = null;
        // initialize any configured options
        debug = ""true"".equalsIgnoreCase((String) options.get(""debug""));
        if (propsfile == null) {
            // only do the first time
            propsfile = (String) options.get(""config"");
            if (propsfile == null)
                propsfile = aacsProps;
            Login.setConfigFile(propsfile);
            Login.init();
        }
        if (debug)
            System.out.println(""AACSLoginModule initialized"");
    }

    /**
     *  Authenticate the user with a user name and password.
     *
     *  <p>
     *
     *  @return true in all cases since this <code>LoginModule</code>
     * 		should not be ignored.
     *
     *  @exception FailedLoginException if the authentication fails. <p>
     *
     *  @exception LoginException if this <code>LoginModule</code>
     * 		is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication succeeded
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  succeeded).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> method), then this method associates a
     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     *  with the <code>Subject</code> located in the
     *  <code>LoginModule</code>.  If this LoginModule's own
     *  authentication attempted failed, then this method removes
     *  any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the commit fails.
     *
     *  @return true if this LoginModule's own login and commit
     * 		attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication failed.
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  did not succeed).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> and <code>commit</code> methods),
     *  then this method cleans up any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the abort fails.
     *
     *  @return false if this LoginModule's own login and/or commit attempts
     * 		failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     *
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {","// AACSLoginModule_2Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#abort()} method.
*/
class AACSLoginModule_2Test {

	/**
	* Test case for {@link AACSLoginModule#abort()} method.
	*
	* <p>
	*
	* @exception LoginException if the abort fails.
	*
	* @return false if this LoginModule's own login and/or commit attempts
	* 		failed, and true otherwise.
	*/
	@Test
	void testAbort() throws LoginException {
		// TODO: implement this test case
		// ensure that the test case has not been implemented yet
		fail(""testAbort not implemented"");
	}
}

// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#commit()} method.
*/
class AACSLoginModule_3Test {
		
	/**
	* Test case for {@link AACSLoginModule#commit()} method.
	*
	* <p>
	*
	* @exception LoginException if the commit fails.
	*
	* @return true if this LoginModule's own login and commit
	* 		attempts succeeded, or false otherwise.
	*/
	@Test
	void testCommit() throws LoginException {
		// TODO: implement this test case
		// ensure that the test case has not been implemented yet
		fail(""testCommit not implemented"");
	}
}

// AACSLoginModule_4Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#initialize(Subject, CallbackHandler, Map, Map)} method.
*/
class AACSLoginModule_4Test {
		
	/**
	* Test case for {@link AACSLoginModule#initialize(Subject, CallbackHandler, Map, Map)} method.
	*
	* <p>
	*
	* @param subject the <code>Subject</code> to be authenticated. <p>
	*
	* @param callbackHandler a <code>CallbackHandler</code> for communicating
	* 			with the end user (prompting for user names and
	* 			passwords, for example). <p>
	*
	* @param sharedState shared <code>LoginModule</code> state. <p>
	*
	* @param options options specified in the login
	* 			<code>Configuration</code> for this particular
	* 			<code>LoginModule</code>.
	*/
	@Test
	void testInitialize() {
		// TODO: implement this test case
		// ensure that the test case has not been implemented yet
		fail(""testInitialize not implemented"");
	}
}

// AACSLoginModule_5Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#login()} method.
*/
class AACSLoginModule_5Test {
		
	/**
	* Test case for {@link AACSLoginModule#login()} method.
	*
	* <p>
	*
	* @return true in all cases since this <code>LoginModule</code>
	* 		should not be ignored.
	*
	* @exception FailedLoginException if the authentication fails. <p>
	*
	* @exception LoginException if this <code>LoginModule</code>
	* 		is unable to perform the authentication.
	*/
	@Test
	void testLogin() throws LoginException {
		// TODO: implement this test case
		// ensure that the test case has not been implemented yet
		fail(""testLogin not implemented"");
	}
}

// AACSLoginModule_6Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_6Test {
		
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	*
	* <p>
	*
	* @exception LoginException if the logout fails.
	*
	* @return true in all cases since this <code>LoginModule</code>
	*          should not be ignored.
	*/
	@Test
	void testLogout() throws LoginException {
		// TODO: implement this test case
		// ensure that the test case has not been implemented yet
		fail(""testLogout not implemented"");
	}
}

// AACSUserPrincipal.java
/*
 *   CVS $Id: AACSUserPrincipal.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.jaas;

import java.security.Principal;

/**
 * <p> This class implements the <code>Principal"
cmpl-6u6QLMWMETEnnzcarv21NtF3x8W9K,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/jaas/AACSLoginModule_3Test.java,45.3152015209198,length,"// AACSLoginModule.java
/*
 *   CVS $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;

/**
 * <p> This sample LoginModule authenticates users with a password.
 *
 * <p> This LoginModule only recognizes one user:	testUser
 * <p> testUser's password is:	testPassword
 *
 * <p> If testUser successfully authenticates itself,
 * an <code>AACSPrincipal</code> with the testUser's user name
 * is added to the Subject.
 *
 * <p> This LoginModule recognizes the debug option.
 * If set to true in the login Configuration,
 * debug messages will be output to the output stream, System.out.
 *
 * <p> The config option specifies the AACS Properties file,
 * without the assumed "".properties"" suffix.
 *
 * @version $Id: AACSLoginModule.java,v 1.1 2006/11/06 19:52:19 grodecki Exp $
 */
public class AACSLoginModule implements LoginModule {

    // initial state
    private Subject subject;

    private CallbackHandler callbackHandler;

    // shared between the LoginModules
    private Map sharedState;

    private Map options;

    // configurable option
    private boolean debug = false;

    // the authentication status
    private boolean succeeded = false;

    private boolean commitSucceeded = false;

    // username and password
    private String username;

    private char[] password;

    // Principals
    private AACSUserPrincipal userPrincipal;

    private AACSRolePrincipal rolePrincipal;

    // AACS Beans
    private User user;

    private Login login;

    // Default and actual AACS properties file
    private final static String aacsProps = ""/AACS"";

    private static String propsfile = null;

    /**
     *  Initialize this <code>LoginModule</code>.
     *
     *  <p>
     *
     *  @param subject the <code>Subject</code> to be authenticated. <p>
     *
     *  @param callbackHandler a <code>CallbackHandler</code> for communicating
     * 			with the end user (prompting for user names and
     * 			passwords, for example). <p>
     *
     *  @param sharedState shared <code>LoginModule</code> state. <p>
     *
     *  @param options options specified in the login
     * 			<code>Configuration</code> for this particular
     * 			<code>LoginModule</code>.
     */
    public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
        this.subject = subject;
        this.callbackHandler = callbackHandler;
        this.sharedState = sharedState;
        this.options = options;
        user = null;
        login = null;
        // initialize any configured options
        debug = ""true"".equalsIgnoreCase((String) options.get(""debug""));
        if (propsfile == null) {
            // only do the first time
            propsfile = (String) options.get(""config"");
            if (propsfile == null)
                propsfile = aacsProps;
            Login.setConfigFile(propsfile);
            Login.init();
        }
        if (debug)
            System.out.println(""AACSLoginModule initialized"");
    }

    /**
     *  Authenticate the user with a user name and password.
     *
     *  <p>
     *
     *  @return true in all cases since this <code>LoginModule</code>
     * 		should not be ignored.
     *
     *  @exception FailedLoginException if the authentication fails. <p>
     *
     *  @exception LoginException if this <code>LoginModule</code>
     * 		is unable to perform the authentication.
     */
    public boolean login() throws LoginException {
        if (debug)
            System.out.println(""AACSLoginModule login() called"");
        // prompt for a user name and password
        if (callbackHandler == null)
            throw new LoginException(""Error: no CallbackHandler available "" + ""to garner authentication information from the user"");
        Callback[] callbacks = new Callback[2];
        callbacks[0] = new NameCallback(""user name: "");
        callbacks[1] = new PasswordCallback(""password: "", false);
        try {
            callbackHandler.handle(callbacks);
            username = ((NameCallback) callbacks[0]).getName();
            char[] tmpPassword = ((PasswordCallback) callbacks[1]).getPassword();
            if (tmpPassword == null) {
                // treat a NULL password as an empty password
                tmpPassword = new char[0];
            }
            password = new char[tmpPassword.length];
            System.arraycopy(tmpPassword, 0, password, 0, tmpPassword.length);
            ((PasswordCallback) callbacks[1]).clearPassword();
        } catch (java.io.IOException ioe) {
            throw new LoginException(ioe.toString());
        } catch (UnsupportedCallbackException uce) {
            throw new LoginException(""Error: "" + uce.getCallback().toString() + "" not available to garner authentication information "" + ""from the user"");
        }
        // print debugging information
        if (debug) {
            System.out.println(""\t\t[AACSLoginModule] "" + ""user entered user name: "" + username);
            System.out.print(""\t\t[AACSLoginModule] "" + ""user entered password: "");
            for (int i = 0; i < password.length; i++) System.out.print(password[i]);
            System.out.println();
        }
        // verify the username/password
        login = new Login(username);
        login.setPassword(new String(password));
        user = login.authenticate();
        if (user != null) {
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication succeeded"");
            succeeded = true;
            return true;
        } else {
            // authentication failed -- clean out state
            if (debug)
                System.out.println(""\t\t[AACSLoginModule] "" + ""authentication failed"");
            succeeded = false;
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            throw new FailedLoginException(""Login Incorrect"");
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication succeeded
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  succeeded).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> method), then this method associates a
     *  <code>AACSUserPrincipal</code> and <code>AACSRolePrincipal</code>
     *  with the <code>Subject</code> located in the
     *  <code>LoginModule</code>.  If this LoginModule's own
     *  authentication attempted failed, then this method removes
     *  any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the commit fails.
     *
     *  @return true if this LoginModule's own login and commit
     * 		attempts succeeded, or false otherwise.
     */
    public boolean commit() throws LoginException {
        if (succeeded == false) {
            return false;
        } else {
            // add a Principal (authenticated identity)
            // to the Subject
            // add an AACSUserPrincipal to the Subject
            userPrincipal = new AACSUserPrincipal(username);
            if (!subject.getPrincipals().contains(userPrincipal))
                subject.getPrincipals().add(userPrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSUserPrincipal ["" + userPrincipal + ""] to Subject"");
            }
            // add the ""aacs_role"" to the Subject
            rolePrincipal = new AACSRolePrincipal(""aacs_role"");
            if (!subject.getPrincipals().contains(rolePrincipal))
                subject.getPrincipals().add(rolePrincipal);
            if (debug) {
                System.out.println(""\t\t[AACSLoginModule] "" + ""added AACSRolePrincipal ["" + rolePrincipal + ""] to Subject"");
            }
            // in any case, clean out state
            username = null;
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
            commitSucceeded = true;
            return true;
        }
    }

    /**
     *  <p> This method is called if the LoginContext's
     *  overall authentication failed.
     *  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
     *  did not succeed).
     *
     *  <p> If this LoginModule's own authentication attempt
     *  succeeded (checked by retrieving the private state saved by the
     *  <code>login</code> and <code>commit</code> methods),
     *  then this method cleans up any state that was originally saved.
     *
     *  <p>
     *
     *  @exception LoginException if the abort fails.
     *
     *  @return false if this LoginModule's own login and/or commit attempts
     * 		failed, and true otherwise.
     */
    public boolean abort() throws LoginException {
        if (succeeded == false) {
            return false;
        } else if (succeeded == true && commitSucceeded == false) {
            // login succeeded but overall authentication failed
            succeeded = false;
            username = null;
            if (password != null) {
                for (int i = 0; i < password.length; i++) password[i] = ' ';
                password = null;
            }
            userPrincipal = null;
            rolePrincipal = null;
        } else {
            // overall authentication succeeded and commit succeeded,
            // but someone else's commit failed
            logout();
        }
        return true;
    }

    /**
     * Logout the user.
     *
     * <p> This method removes the <code>AACSPrincipal</code>
     * that was added by the <code>commit</code> method.
     *
     * <p>
     *
     * @exception LoginException if the logout fails.
     *
     * @return true in all cases since this <code>LoginModule</code>
     *          should not be ignored.
     */
    public boolean logout() throws LoginException {
        subject.getPrincipals().remove(userPrincipal);
        succeeded = false;
        succeeded = commitSucceeded;
        username = null;
        if (password != null) {
            for (int i = 0; i < password.length; i++) password[i] = ' ';
            password = null;
        }
        userPrincipal = null;
        rolePrincipal = null;
        user = null;
        login = null;
        return true;
    }
}
","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {","// AACSLoginModule_3Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login;
import com.browsersoft.aacs.User;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AACSLoginModule}.
* It contains ten unit test cases for the {@link AACSLoginModule#logout()} method.
*/
class AACSLoginModule_3Test {

	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is null and expects IllegalStateException.
	*/
	@Test
	public void testLogout_NullSubject() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		try {
			aacsLoginModule.logout();
			fail(""IllegalStateException expected."");
		} catch (IllegalStateException e) {
			// as expected
		} catch (Exception e) {
			fail(""IllegalStateException expected, but caught "" + e.getClass().getName());
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject2() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject2."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject3() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject3."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject4() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject4."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject5() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject5."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject6() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject6."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject7() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject7."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject8() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject8."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject9() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject9."");
		}
	}
	
	/**
	* Test case for {@link AACSLoginModule#logout()} method.
	* It tests the case that when the subject is not null and expects true.
	*/
	@Test
	public void testLogout_NotNullSubject10() {
		AACSLoginModule aacsLoginModule = new AACSLoginModule();
		Subject subject = new Subject();
		aacsLoginModule.initialize(subject, null, null, null);
		try {
			assertTrue(aacsLoginModule.logout());
		} catch (Exception e) {
			fail(""Unexpected exception occurs in testLogout_NotNullSubject10."");
		}
	}
}

// AACSLoginModule_4Test.java
package com.browsersoft.jaas;

import java.util.*;
import java.io.IOException;
import javax.security.auth.*;
import javax.security.auth.callback.*;
import javax.security.auth.login.*;
import javax.security.auth.spi.*;
import com.browsersoft.aacs.Login"
cmpl-6u6RQVWyeZZZO6q4JzuRy7ZntFUd4,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_0Test.java,55.03487992286682,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {","// ClientHttpRequest_0Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post()} method.
*/
class ClientHttpRequest_0Test {

	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is null.
	* Expected: {@link NullPointerException}.
	*/
	@Test
	void test_post_0() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = null;
		try {
			clientHttpRequest.post();
			fail(""NullPointerException expected"");
		} catch (NullPointerException e) {
			// nothing to do
		} catch (IOException e) {
			fail(""NullPointerException expected"");
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_1() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_2() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_3() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_4() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_5() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_6() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_7() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_8() {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest();
		clientHttpRequest.connection = new URLConnection(new URL(""http://www.google.com"")) {
			public void connect() throws IOException {
				throw new IOException();
			}
		};
		try {
			clientHttpRequest.post();
			fail(""IOException expected"");
		} catch (IOException e) {
			// nothing to do
		}
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post()} method.
	* It tests the case when the {@link ClientHttpRequest#post()} method is called and the {@link ClientHttpRequest#connection} field is not null.
	* Expected: {@link IOException}.
	*/
	@Test
	void test_post_9() {
		ClientHttpRequest clientHttpRequest = new"
cmpl-6u6SR8jBizNq6hh67jhRPOYdLQPWQ,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_10Test.java,48.96319556236267,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_10Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Object[])} method.
*/
class ClientHttpRequest_10Test {","// ClientHttpRequest_10Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Object[])} method.
*/
class ClientHttpRequest_10Test {

	/**
	* Test case 1 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is null.
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = null;
		Object[] parameters = null;
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""url is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 2 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are null.
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = null;
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 3 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are empty.
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[0];
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters is empty."", e.getMessage());
		}
	}
	
	/**
	* Test case 4 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is odd.
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[1];
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters is not even."", e.getMessage());
		}
	}
	
	/**
	* Test case 5 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is null.
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[2];
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters[0] is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 6 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is not null, but the second parameter is null.
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[2];
		parameters[0] = ""name"";
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters[1] is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 7 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is not null, but the second parameter is not null, but the third parameter is null.
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[3];
		parameters[0] = ""name"";
		parameters[1] = ""value"";
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters[2] is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 8 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is not null, but the second parameter is not null, but the third parameter is not null, but the fourth parameter is null.
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[4];
		parameters[0] = ""name"";
		parameters[1] = ""value"";
		parameters[2] = ""name"";
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters[3] is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 9 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is not null, but the second parameter is not null, but the third parameter is not null, but the fourth parameter is not null, but the fifth parameter is null.
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[5];
		parameters[0] = ""name"";
		parameters[1] = ""value"";
		parameters[2] = ""name"";
		parameters[3] = ""value"";
		try {
			ClientHttpRequest.post(url, parameters);
			fail(""IllegalArgumentException should be thrown."");
		} catch (IllegalArgumentException e) {
			assertEquals(""parameters[4] is null."", e.getMessage());
		}
	}
	
	/**
	* Test case 10 for {@link ClientHttpRequest#post(URL, Object[])}.
	* It tests the case when the URL is not null, but the parameters are not empty, but the length of the parameters is even, but the first parameter is not null, but the second parameter is not null, but the third parameter is not null, but the fourth parameter is not null, but the fifth parameter is not null, but the sixth parameter is null.
	*/
	@Test
	void testPost_10() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Object[] parameters = new Object[6];
		parameters[0] = ""name"";
		parameters[1] = ""value"";
		parameters[2] = ""name"";
		parameters"
cmpl-6u6TUoOGVA5mV0uinD4g9uSswkvTd,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_11Test.java,43.61527967453003,stop,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_11Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map, Map)} method.
*/
class ClientHttpRequest_11Test {","// ClientHttpRequest_11Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map, Map)} method.
*/
class ClientHttpRequest_11Test {

	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> URL.
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = null;
		Map cookies = new HashMap();
		Map parameters = new HashMap();
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> cookies.
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = null;
		Map parameters = new HashMap();
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> parameters.
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		Map parameters = null;
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for empty cookies.
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		Map parameters = new HashMap();
		
		assertThrows(IllegalArgumentException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for empty parameters.
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(""name"", ""value"");
		Map parameters = new HashMap();
		
		assertThrows(IllegalArgumentException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> cookie name.
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(null, ""value"");
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> cookie value.
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(""name"", null);
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> parameter name.
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(""name"", ""value"");
		Map parameters = new HashMap();
		parameters.put(null, ""value"");
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> parameter value.
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(""name"", ""value"");
		Map parameters = new HashMap();
		parameters.put(""name"", null);
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> cookie name and <code>null</code> parameter name.
	*/
	@Test
	void testPost_10() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(null, ""value"");
		Map parameters = new HashMap();
		parameters.put(null, ""value"");
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(URL, Map, Map)} method.
	* Test case for <code>null</code> cookie value and <code>null</code> parameter value.
	*/
	@Test
	void testPost_11() throws IOException {
		URL url = new URL(""http://www.google.com"");
		Map cookies = new HashMap();
		cookies.put(""name"", null);
		Map parameters = new HashMap();
		parameters.put(""name"", null);
		
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, cookies, parameters);
		});
	}
}"
cmpl-6u6UXOQ8whzpygUrSUrtohEfvWSp4,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_12Test.java,37.24827527999878,stop,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_12Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String[], Object[])} method.
*/
class ClientHttpRequest_12Test {","// ClientHttpRequest_12Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String[], Object[])} method.
*/
class ClientHttpRequest_12Test {

	/**
	* Test case 1 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost1() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 2 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost2() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 3 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost3() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 4 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost4() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 5 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost5() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 6 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost6() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 7 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost7() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 8 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost8() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 9 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost9() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
	
	/**
	* Test case 10 for method post(URL, String[], Object[])
	*
	* @throws IOException
	*/
	@Test
	void testPost10() throws IOException {
		URL url = new URL(""http://www.google.com"");
		String[] cookies = new String[]{""name1"", ""value1"", ""name2"", ""value2""};
		Object[] parameters = new Object[]{""name1"", ""value1"", ""name2"", ""value2""};
		InputStream result = ClientHttpRequest.post(url, cookies, parameters);
		assertNotNull(result);
	}
}"
cmpl-6u6Va7tBr7uMIEqHqvz7ONi2HqvDN,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_13Test.java,50.72324347496033,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_13Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object)} method.
*/
class ClientHttpRequest_13Test {","// ClientHttpRequest_13Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object)} method.
*/
class ClientHttpRequest_13Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>url</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_01() throws IOException {
		URL url = null;
		String name1 = ""name1"";
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>name1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_02() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = null;
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>value1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_03() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = ""name1"";
		Object value1 = null;
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>url</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_04() throws IOException {
		URL url = null;
		String name1 = ""name1"";
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>name1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_05() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = null;
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>value1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_06() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = ""name1"";
		Object value1 = null;
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>url</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_07() throws IOException {
		URL url = null;
		String name1 = ""name1"";
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>name1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_08() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = null;
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>value1</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_09() throws IOException {
		URL url = new URL(""http://localhost:8080/"");
		String name1 = ""name1"";
		Object value1 = null;
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object)} method.
	* It tests the case when the <code>url</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_10() throws IOException {
		URL url = null;
		String name1 = ""name1"";
		Object value1 = ""value1"";
		assertThrows(NullPointerException.class, () -> {
			ClientHttpRequest.post(url, name1, value1);
		});
	}
	
}

// ClientHttpRequest_14Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
*/
class ClientHttpRequest_14Test {
		
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* It tests the case when the <code>url</code> argument is <code>null</code>.
	* Expected {@link NullPointerException}.
	*/
	@Test
	void testPost_01() throws IOException {
		URL url = null;
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		assertThrows(NullPointerException.class, () -> {"
cmpl-6u6Wd9I1aC55dNkRDCBfj1vi34x0K,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_14Test.java,51.982948541641235,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_14Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
*/
class ClientHttpRequest_14Test {","// ClientHttpRequest_14Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
*/
class ClientHttpRequest_14Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_10() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2);
		assertNotNull(result);
	}
	
}

// ClientHttpRequest_15Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_15Test {
		
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		"
cmpl-6u6XgMekikz28q292zGEdvAIon7ds,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_15Test.java,49.5219829082489,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_15Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_15Test {","// ClientHttpRequest_15Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_15Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.browsersoft.com/"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value"
cmpl-6u6YjP6UHqHgU3oNpfMt69C2chNUs,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_16Test.java,49.33792281150818,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_16Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_16Test {","// ClientHttpRequest_16Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_16Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest.post(url, name1, value1, name2, value2, name3, value3, name4, value4);
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(URL, String, Object, String, Object, String, Object, String, Object)} method.
	* @throws IOException
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		String name1 = ""name1"";
		Object value1 = ""value1"";
		String name2 = ""name2"";
		Object value2 = ""value2"";
		String name3 = ""name3"";
		Object value3 = ""value3"";
		String name4 = ""name4"";
		Object value4 = ""value4"";
		InputStream result = ClientHttpRequest"
cmpl-6u6ZmkrWjc6qMUqFJ9ebX0Vs50wDH,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_1Test.java,53.62561368942261,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {","// ClientHttpRequest_1Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map)} method.
*/
class ClientHttpRequest_1Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is null.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		InputStream inputStream = clientHttpRequest.post((Map)null);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is empty.
	*/
	@Test
	void testPost_2() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		InputStream inputStream = clientHttpRequest.post(new HashMap());
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_3() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_4() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_5() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_6() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_7() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_8() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		parameters.put(""name5"", ""value5"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_9() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		parameters.put(""name5"", ""value5"");
		parameters.put(""name6"", ""value6"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map)} method.
	* It tests the case when the parameters is not empty.
	*/
	@Test
	void testPost_10() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		Map parameters = new HashMap();
		parameters.put(""name"", ""value"");
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		parameters.put(""name5"", ""value5"");
		parameters.put(""name6"", ""value6"");
		parameters.put(""name7"", ""value7"");
		InputStream inputStream = clientHttpRequest.post(parameters);
		assertNotNull(inputStream);
	}
}

// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {
		
	/**
	* Test case for the {@link ClientHttpRequest#post(Object[])} method.
	* It tests the case when the parameters is null.
"
cmpl-6u6apmVM7knHOamnuI8WtKGaueLAZ,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_2Test.java,51.57391715049744,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {","// ClientHttpRequest_2Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Object[])} method.
*/
class ClientHttpRequest_2Test {

	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: null.
	* Expected result: NullPointerException.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post((Object[]) null);
			fail(""NullPointerException expected"");
		} catch (NullPointerException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: empty array.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_2() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[0]);
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with one element.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_3() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with odd number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_4() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_5() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_6() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_7() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"", ""name4"", ""value4"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_8() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"", ""name4"", ""value4"", ""name5"", ""value5"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_9() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"", ""name4"", ""value4"", ""name5"", ""value5"", ""name6"", ""value6"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(Object[])} method.
	* Test data: array with even number of elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_10() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		try {
			clientHttpRequest.post(new Object[] { ""name1"", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"", ""name4"", ""value4"", ""name5"", ""value5"", ""name6"", ""value6"", ""name7"", ""value7"" });
			fail(""IllegalArgumentException expected"");
		} catch (IllegalArgumentException e) {
			assertNotNull(e.getMessage());
		}
	}
}

// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.j"
cmpl-6u6bsvsNbCD3BIHMOQEvoOPOYykor,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_3Test.java,56.58553385734558,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {","// ClientHttpRequest_3Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(Map, Map)} method.
*/
class ClientHttpRequest_3Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is <code>null</code>.
	* @throws IOException
	*/
	@Test
	void test_post_1() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), null, parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is empty.
	* @throws IOException
	*/
	@Test
	void test_post_2() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), new HashMap(), parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty.
	* @throws IOException
	*/
	@Test
	void test_post_3() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is <code>null</code>.
	* @throws IOException
	*/
	@Test
	void test_post_4() throws IOException {
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, null);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is empty.
	* @throws IOException
	*/
	@Test
	void test_post_5() throws IOException {
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, new HashMap());
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is not empty.
	* @throws IOException
	*/
	@Test
	void test_post_6() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is not empty.
	* @throws IOException
	*/
	@Test
	void test_post_7() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is not empty.
	* @throws IOException
	*/
	@Test
	void test_post_8() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");
		parameters.put(""name4"", ""value4"");
		Map cookies = new HashMap();
		cookies.put(""cookie1"", ""value1"");
		cookies.put(""cookie2"", ""value2"");
		cookies.put(""cookie3"", ""value3"");
		cookies.put(""cookie4"", ""value4"");
		InputStream is = ClientHttpRequest.post(new URL(""http://localhost:8080/""), cookies, parameters);
		assertNotNull(is);
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(Map, Map)} method.
	* It tests the case when the <code>cookies</code> parameter is not empty and the <code>parameters</code> parameter is not empty.
	* @throws IOException
	*/
	@Test
	void test_post_9() throws IOException {
		Map parameters = new HashMap();
		parameters.put(""name1"", ""value1"");
		parameters.put(""name2"", ""value2"");
		parameters.put(""name3"", ""value3"");"
cmpl-6u6cvvmdyoVifStX9Qnuc8RNAw62c,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_4Test.java,45.07801342010498,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {","// ClientHttpRequest_4Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String[], Object[])} method.
*/
class ClientHttpRequest_4Test {

	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: null.
	* Expected result: NullPointerException.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(NullPointerException.class, () -> {
			clientHttpRequest.post(null, null);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: empty array.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_2() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[0], new Object[0]);
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with one element.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_3() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name""}, new Object[]{""value""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with two elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_4() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2""}, new Object[]{""value1"", ""value2""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with three elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_5() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3""}, new Object[]{""value1"", ""value2"", ""value3""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with four elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_6() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3"", ""name4""}, new Object[]{""value1"", ""value2"", ""value3"", ""value4""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with five elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_7() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3"", ""name4"", ""name5""}, new Object[]{""value1"", ""value2"", ""value3"", ""value4"", ""value5""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with six elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_8() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3"", ""name4"", ""name5"", ""name6""}, new Object[]{""value1"", ""value2"", ""value3"", ""value4"", ""value5"", ""value6""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with seven elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_9() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3"", ""name4"", ""name5"", ""name6"", ""name7""}, new Object[]{""value1"", ""value2"", ""value3"", ""value4"", ""value5"", ""value6"", ""value7""});
		});
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String[], Object[])} method.
	* Test data: array with eight elements.
	* Expected result: IllegalArgumentException.
	*/
	@Test
	void testPost_10() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(new String[]{""name1"", ""name2"", ""name3"", ""name4"", ""name5"", ""name6"", ""name7"", ""name8""}, new Object[]{""value1"", ""value2"", ""value3"", ""value4"", ""value5"", ""value6"", ""value7"", ""value8""});
		});
	}
}

// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {
		
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* Test data: null.
	* Expected result: NullPointerException.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		assertThrows(NullPointerException.class, () -> {
			clientHttp"
cmpl-6u6dyjj5FijyDYh8FQ5HzoVFXYzhk,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_5Test.java,53.92369103431702,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {","// ClientHttpRequest_5Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_5Test {

	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_2() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_3() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_4() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_5() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_6() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_7() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_8() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_9() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_10() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
}

// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object)} method.
*/
class ClientHttpRequest_6Test {
		
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_2() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_3() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	* Test case for {@link ClientHttpRequest#post(String, Object)} method.
	* It tests the case when the parameter value is a file.
	*/
	@Test
	void testPost_File_4() throws IOException {
		ClientHttpRequest request = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		request.setParameter(""name"", new File(""test.txt""));
		InputStream is = request.post();
		assertNotNull(is);
	}
	
	/**
	"
cmpl-6u6f1m7enxeVRUk8Q5FWLjEeZ1PjS,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_6Test.java,56.31317329406738,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {","// ClientHttpRequest_6Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
*/
class ClientHttpRequest_6Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the first parameter is null.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(NullPointerException.class, () -> {
			clientHttpRequest.post(null, ""value1"", ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the second parameter is null.
	*/
	@Test
	void testPost_2() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(NullPointerException.class, () -> {
			clientHttpRequest.post(""name1"", null, ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the third parameter is null.
	*/
	@Test
	void testPost_3() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(NullPointerException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", null, ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the fourth parameter is null.
	*/
	@Test
	void testPost_4() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(NullPointerException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", null);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the first parameter is empty.
	*/
	@Test
	void testPost_5() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post("""", ""value1"", ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the second parameter is empty.
	*/
	@Test
	void testPost_6() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", """", ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the third parameter is empty.
	*/
	@Test
	void testPost_7() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", """", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the fourth parameter is empty.
	*/
	@Test
	void testPost_8() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", """");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the first parameter is whitespace.
	*/
	@Test
	void testPost_9() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post("" "", ""value1"", ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the second parameter is whitespace.
	*/
	@Test
	void testPost_10() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", "" "", ""name2"", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the third parameter is whitespace.
	*/
	@Test
	void testPost_11() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", "" "", ""value2"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object)} method.
	* It tests the case when the fourth parameter is whitespace.
	*/
	@Test
	void testPost_12() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", "" "");
		});
	}
}

// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {
		
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* It tests the case when the first parameter is null.
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://www.google.com""));
		assertThrows(NullPointerException.class, () -> {
			client"
cmpl-6u6g4QTjJEZlfUX1mJiCi7krA6iUs,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_7Test.java,54.461302042007446,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {","// ClientHttpRequest_7Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_7Test {

	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the first parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_1() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(null, ""value1"", ""name2"", ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the second parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_2() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", null, ""name2"", ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the third parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_3() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", null, ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the fourth parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_4() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", null, ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the fifth parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_5() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", ""value2"", null, ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the sixth parameter is null.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_6() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", ""name2"", ""value2"", ""name3"", null);
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the first parameter is empty.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_7() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post("""", ""value1"", ""name2"", ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the second parameter is empty.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_8() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", """", ""name2"", ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method.
	* <p>
	* This test case is used to test the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object)} method
	* when the third parameter is empty.
	* <p>
	* Expected result: an {@link IllegalArgumentException} is thrown.
	*/
	@Test
	void testPost_9() throws IOException {
		URL url = new URL(""http://www.browsersoft.com"");
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(url);
		assertThrows(IllegalArgumentException.class, () -> {
			clientHttpRequest.post(""name1"", ""value1"", """", ""value2"", ""name3"", ""value3"");
		});
	}
	
	/**
	* Test case for the"
cmpl-6u6h7ZBRKCnlDldbsmzKlhbQT5RtR,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_8Test.java,54.1011004447937,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {","// ClientHttpRequest_8Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(String, Object, String, Object, String, Object, String, Object)} method.
*/
class ClientHttpRequest_8Test {

	/**
	* Test case 1 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is null</li>
	* <li>the second parameter is null</li>
	* <li>the third parameter is null</li>
	* <li>the fourth parameter is null</li>
	* <li>the fifth parameter is null</li>
	* <li>the sixth parameter is null</li>
	* <li>the seventh parameter is null</li>
	* <li>the eighth parameter is null</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_1() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post(null, null, null, null, null, null, null, null);
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 2 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_2() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 3 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_3() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 4 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_4() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 5 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_5() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 6 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_6() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 7 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
	*/
	@Test
	void testPost_7() throws IOException {
		ClientHttpRequest clientHttpRequest = new ClientHttpRequest(new URL(""http://localhost:8080/""));
		InputStream inputStream = clientHttpRequest.post("""", """", """", """", """", """", """", """");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case 8 for method post(String, Object, String, Object, String, Object, String, Object).
	* The test case tests the following:
	* <ul>
	* <li>the first parameter is empty</li>
	* <li>the second parameter is empty</li>
	* <li>the third parameter is empty</li>
	* <li>the fourth parameter is empty</li>
	* <li>the fifth parameter is empty</li>
	* <li>the sixth parameter is empty</li>
	* <li>the seventh parameter is empty</li>
	* <li>the eighth parameter is empty</li>
	* </ul>
	* @throws IOException
"
cmpl-6u6iAA49UAgqtj1FM1gejD9g0l2L6,/EvoSuiteBenchmark/75_openhre/src/main/java/com/browsersoft/servlet/util/ClientHttpRequest_9Test.java,45.01894235610962,length,"// ClientHttpRequest.java
/*
 *   CVS $Id: ClientHttpRequest.java,v 1.1 2007/01/11 04:14:37 grodecki Exp $
 * 
 *   ====================================================================
 *                 Open Source Health Records Exchange
 *   ====================================================================
 *
 *   Copyright (C) 2005, 2006, 2007 Browsersoft Inc.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License, version 2, 
 *   as published by the Free Software Foundation.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   The GNU General Public License is available at
 *   http://www.fsf.org/licensing/licenses/gpl.html
 *
 *   Email: info@openhre.org
 *   Web:   http://www.openhre.org
 */
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;

/**
 * <p>Title: Client HTTP Request class</p>
 * <p>Description: this class helps to send POST HTTP requests with various form data,
 * including files. Cookies can be added to be included in the request.</p>
 *
 * @author Vlad Patryshev
 * @version 1.0
 */
public class ClientHttpRequest {

    URLConnection connection;

    OutputStream os = null;

    Map cookies = new HashMap();

    protected void connect() throws IOException {
        if (os == null)
            os = connection.getOutputStream();
    }

    protected void write(char c) throws IOException {
        connect();
        os.write(c);
    }

    protected void write(String s) throws IOException {
        connect();
        os.write(s.getBytes());
    }

    protected void newline() throws IOException {
        connect();
        write(""\r\n"");
    }

    protected void writeln(String s) throws IOException {
        connect();
        write(s);
        newline();
    }

    private static Random random = new Random();

    protected static String randomString() {
        return Long.toString(random.nextLong(), 36);
    }

    String boundary = ""---------------------------"" + randomString() + randomString() + randomString();

    private void boundary() throws IOException {
        write(""--"");
        write(boundary);
    }

    /**
     * Creates a new multipart POST HTTP request on a freshly opened URLConnection
     *
     * @param connection an already open URL connection
     * @throws IOException
     */
    public ClientHttpRequest(URLConnection connection) throws IOException {
        this.connection = connection;
        connection.setDoOutput(true);
        connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL
     *
     * @param url the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(URL url) throws IOException {
        this(url.openConnection());
    }

    /**
     * Creates a new multipart POST HTTP request for a specified URL string
     *
     * @param urlString the string representation of the URL to send request to
     * @throws IOException
     */
    public ClientHttpRequest(String urlString) throws IOException {
        this(new URL(urlString));
    }

    private void postCookies() {
        StringBuffer cookieList = new StringBuffer();
        for (Iterator i = cookies.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) (i.next());
            cookieList.append(entry.getKey().toString() + ""="" + entry.getValue());
            if (i.hasNext()) {
                cookieList.append(""; "");
            }
        }
        if (cookieList.length() > 0) {
            connection.setRequestProperty(""Cookie"", cookieList.toString());
        }
    }

    /**
     * adds a cookie to the requst
     * @param name cookie name
     * @param value cookie value
     * @throws IOException
     */
    public void setCookie(String name, String value) throws IOException {
        cookies.put(name, value);
    }

    /**
     * adds cookies to the request
     * @param cookies the cookie ""name-to-value"" map
     * @throws IOException
     */
    public void setCookies(Map cookies) throws IOException {
        if (cookies == null)
            return;
        this.cookies.putAll(cookies);
    }

    /**
     * adds cookies to the request
     * @param cookies array of cookie names and values (cookies[2*i] is a name, cookies[2*i + 1] is a value)
     * @throws IOException
     */
    public void setCookies(String[] cookies) throws IOException {
        if (cookies == null)
            return;
        for (int i = 0; i < cookies.length - 1; i += 2) {
            setCookie(cookies[i], cookies[i + 1]);
        }
    }

    private void writeName(String name) throws IOException {
        newline();
        write(""Content-Disposition: form-data; name=\"""");
        write(name);
        write('""');
    }

    /**
     * adds a string parameter to the request
     * @param name parameter name
     * @param value parameter value
     * @throws IOException
     */
    public void setParameter(String name, String value) throws IOException {
        boundary();
        writeName(name);
        newline();
        newline();
        writeln(value);
    }

    private static void pipe(InputStream in, OutputStream out) throws IOException {
        byte[] buf = new byte[500000];
        int nread;
        int navailable;
        int total = 0;
        synchronized (in) {
            while ((nread = in.read(buf, 0, buf.length)) >= 0) {
                out.write(buf, 0, nread);
                total += nread;
            }
        }
        out.flush();
        buf = null;
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param filename the name of the file
     * @param is input stream to read the contents of the file from
     * @throws IOException
     */
    public void setParameter(String name, String filename, InputStream is) throws IOException {
        boundary();
        writeName(name);
        write(""; filename=\"""");
        write(filename);
        write('""');
        newline();
        write(""Content-Type: "");
        String type = connection.guessContentTypeFromName(filename);
        if (type == null)
            type = ""application/octet-stream"";
        writeln(type);
        newline();
        pipe(is, os);
        newline();
    }

    /**
     * adds a file parameter to the request
     * @param name parameter name
     * @param file the file to upload
     * @throws IOException
     */
    public void setParameter(String name, File file) throws IOException {
        setParameter(name, file.getPath(), new FileInputStream(file));
    }

    /**
     * adds a parameter to the request; if the parameter is a File, the file is uploaded, otherwise the string value of the parameter is passed in the request
     * @param name parameter name
     * @param object parameter value, a File or anything else that can be stringified
     * @throws IOException
     */
    public void setParameter(String name, Object object) throws IOException {
        if (object instanceof File) {
            setParameter(name, (File) object);
        } else {
            setParameter(name, object.toString());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters ""name-to-value"" map of parameters; if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Map parameters) throws IOException {
        if (parameters == null)
            return;
        for (Iterator i = parameters.entrySet().iterator(); i.hasNext(); ) {
            Map.Entry entry = (Map.Entry) i.next();
            setParameter(entry.getKey().toString(), entry.getValue());
        }
    }

    /**
     * adds parameters to the request
     * @param parameters array of parameter names and values (parameters[2*i] is a name, parameters[2*i + 1] is a value); if a value is a file, the file is uploaded, otherwise it is stringified and sent in the request
     * @throws IOException
     */
    public void setParameters(Object[] parameters) throws IOException {
        if (parameters == null)
            return;
        for (int i = 0; i < parameters.length - 1; i += 2) {
            setParameter(parameters[i].toString(), parameters[i + 1]);
        }
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added
     * @return input stream with the server response
     * @throws IOException
     */
    public InputStream post() throws IOException {
        boundary();
        writeln(""--"");
        os.close();
        return connection.getInputStream();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Map parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public InputStream post(Object[] parameters) throws IOException {
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(Map cookies, Map parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * posts the requests to the server, with all the cookies and parameters that were added before (if any), and with cookies and parameters that are passed in the arguments
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     * @see setCookies
     */
    public InputStream post(String[] cookies, Object[] parameters) throws IOException {
        setCookies(cookies);
        setParameters(parameters);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name, Object value) throws IOException {
        setParameter(name, value);
        return post();
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3);
    }

    /**
     * post the POST request to the server, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public InputStream post(String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        setParameter(name1, value1);
        return post(name2, value2, name3, value3, name4, value4);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with parameters that are passed in the argument
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setParameters
     */
    public static InputStream post(URL url, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, Map cookies, Map parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * posts a new request to specified URL, with cookies and parameters that are passed in the argument
     * @param cookies request cookies
     * @param parameters request parameters
     * @return input stream with the server response
     * @throws IOException
     * @see setCookies
     * @see setParameters
     */
    public static InputStream post(URL url, String[] cookies, Object[] parameters) throws IOException {
        return new ClientHttpRequest(url).post(cookies, parameters);
    }

    /**
     * post the POST request specified URL, with the specified parameter
     * @param name parameter name
     * @param value parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3);
    }

    /**
     * post the POST request to specified URL, with the specified parameters
     * @param name1 first parameter name
     * @param value1 first parameter value
     * @param name2 second parameter name
     * @param value2 second parameter value
     * @param name3 third parameter name
     * @param value3 third parameter value
     * @param name4 fourth parameter name
     * @param value4 fourth parameter value
     * @return input stream with the server response
     * @throws IOException
     * @see setParameter
     */
    public static InputStream post(URL url, String name1, Object value1, String name2, Object value2, String name3, Object value3, String name4, Object value4) throws IOException {
        return new ClientHttpRequest(url).post(name1, value1, name2, value2, name3, value3, name4, value4);
    }
}
","// ClientHttpRequest_9Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map)} method.
*/
class ClientHttpRequest_9Test {","// ClientHttpRequest_9Test.java
package com.browsersoft.servlet.util;

import java.net.URLConnection;
import java.net.URL;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import java.io.InputStream;
import java.util.Random;
import java.io.OutputStream;
import java.io.FileInputStream;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientHttpRequest}.
* It contains ten unit test cases for the {@link ClientHttpRequest#post(URL, Map)} method.
*/
class ClientHttpRequest_9Test {

	/**
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post(URL, Map).
	* Test case 1 for method post"
