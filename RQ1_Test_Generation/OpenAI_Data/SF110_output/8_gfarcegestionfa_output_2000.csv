ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6twIsRndefyoS0QjskGlIU6wlJxEm,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/Db4oFormationFactory.java,48.76691174507141,length,"// Db4oFormationFactory.java
/**
 * Classe Db4oFormationFactory
 */
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.RespFormation;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es db4o et d'en modifier les Formations.
 */
public class Db4oFormationFactory implements FormationDao {

    // Interface qui repr&eacute;sente la connexion � la BD
    ObjectContainer bd;

    String nombase;

    Configuration configuration;

    public Db4oFormationFactory() throws IOException {
        nombase = Db4oConfig.getInfo();
    }

    private void getConfig() {
        configuration = Db4o.newConfiguration();
        configuration.lockDatabaseFile(false);
        configuration.objectClass(Calendar.class).storeTransientFields(true);
    }

    /**
     * Ajoute une Formation dans le cache.
     * nomResp devient responsable de cette formation.
     * @param f
     * @param nomResp
     * @param prenomResp
     * @return
     */
    @Override
    public void insert(Formation f, String nomResp, String prenomResp) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        configuration.objectClass(RespFormation.class).cascadeOnDelete(true);
        ObjectSet<RespFormation> test = bd.queryByExample(new RespFormation());
        for (RespFormation ligne : test) {
            if (ligne.getNom().equals(nomResp) && ligne.getPrenom().equals(prenomResp)) {
                f.setResponsable(ligne);
                // On ajoute la formation a la Collection<Formation> du responsable.
                ligne.ajouterFormation(f);
                bd.delete(ligne);
                break;
            }
        }
        bd.commit();
        bd.close();
        insertFormation(f);
    }

    public void insertFormation(Formation formation) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        bd.store(formation);
        bd.commit();
        bd.close();
    }

    /**
     * Modifie une Formation deja pr&eacute;sente dans le cache.
     * @param f
     * @return
     */
    @Override
    public void update(Formation formation) throws DaoException {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        ObjectSet<Formation> result = bd.queryByExample(new Formation(formation.getTitre_formation(), null, 0, null));
        for (Formation ligne : result) {
            if (formation.getDate_limite_candidature().get(Calendar.MONTH) == ligne.getDate_limite_candidature().get(Calendar.MONTH) && formation.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH) == ligne.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH) && formation.getDate_limite_candidature().get(Calendar.YEAR) == ligne.getDate_limite_candidature().get(Calendar.YEAR)) {
                ligne.setMontant_inscription(formation.getMontant_inscription());
                ExtObjectContainer eoc = bd.ext();
                if (!eoc.isStored(ligne)) {
                    System.out.println(ligne + "" n'a pas d'identit� dans la base"");
                }
                bd.store(ligne);
                bd.commit();
                bd.close();
                break;
            }
        }
    }

    /**
     * Supprime une Formation dans le cache.
     * @param f
     * @return
     */
    @Override
    public void delete(Formation formation) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        ObjectSet<Formation> result = bd.queryByExample(new Formation(formation.getId()));
        List<Formation> res = (List<Formation>) result;
        if (res != null) {
            bd.delete(res.get(0));
        }
        bd.commit();
        bd.close();
    }

    /**
     * Recherche des Formations du cache selon certains crit&egrave;res.
     * Retourne toutes les formations du cache si name=date=null.
     * @param name
     * @param date
     * @return Formation[]
     */
    @Override
    public Formation[] findFormation(String name, Calendar date) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        List<Formation> tab = new ArrayList<Formation>();
        ObjectSet<Formation> f = bd.queryByExample(new Formation(name, null, 0, null));
        List<Formation> res = (List<Formation>) f;
        for (int i = 0; i < res.size(); i++) {
            if (date != null) {
                Calendar d = res.get(i).getDate_limite_candidature();
                if (d.get(Calendar.MONTH) == date.get(Calendar.MONTH) && d.get(Calendar.DAY_OF_MONTH) == date.get(Calendar.DAY_OF_MONTH) && d.get(Calendar.YEAR) == date.get(Calendar.YEAR)) {
                    tab.add(res.get(i));
                }
            } else
                tab.add(res.get(i));
        }
        bd.close();
        return tab.toArray(new Formation[tab.size()]);
    }
}
","// Db4oFormationFactoryTest.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oFormationFactory}.
* It contains ten unit test cases for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
*/
class Db4oFormationFactoryTest {","// Db4oFormationFactoryTest.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oFormationFactory}.
* It contains ten unit test cases for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
*/
class Db4oFormationFactoryTest {

		private Db4oFormationFactory dff;
		
		public Db4oFormationFactoryTest() throws IOException {
			dff = new Db4oFormationFactory();
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is null and the date is null.
		*/
		@Test
		public void testFindFormation1() {
			Formation[] tab = dff.findFormation(null, null);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is null.
		*/
		@Test
		public void testFindFormation2() {
			Formation[] tab = dff.findFormation(""Java"", null);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is null and the date is not null.
		*/
		@Test
		public void testFindFormation3() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(null, c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation4() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation5() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation6() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation7() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation8() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation9() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
		
		/**
		* Test case for the {@link Db4oFormationFactory#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null.
		*/
		@Test
		public void testFindFormation10() {
			Calendar c = Calendar.getInstance();
			c.set(Calendar.MONTH, Calendar.JANUARY);
			c.set(Calendar.DAY_OF_MONTH, 1);
			c.set(Calendar.YEAR, 2000);
			Formation[] tab = dff.findFormation(""Java"", c);
			assertEquals(tab.length, 0);
		}
}

// Db4oRespFormationFactory.java
/**
 * Classe Db4oRespFormationFactory
 */
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.RespFormation;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es db4o et d'en modifier les Responsables de Formations.
 */
public class Db4oRespFormation"
cmpl-6twJvkktp3JEkoICegFXL1Rl0sHFA,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/Db4oIdentiteFactory_0Test.java,49.70811724662781,length,"// Db4oIdentiteFactory.java
/**
 * Classe Db4oIdentiteFactory
 */
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es db4o et d'en modifier les Identites.
 */
public class Db4oIdentiteFactory implements IdentiteDao {

    // Interface qui repr&eacute;sente la connexion � la BD
    ObjectContainer bd;

    String nombase;

    Configuration configuration;

    public Db4oIdentiteFactory() throws IOException {
        nombase = Db4oConfig.getInfo();
    }

    private void getConfig() {
        configuration = Db4o.newConfiguration();
        configuration.lockDatabaseFile(false);
        configuration.objectClass(Calendar.class).storeTransientFields(true);
    }

    /**
     * Ajoute une Identite dans le cache.
     * on ajoute &eacute;galement le candidat &agrave; la  formation nomForm.
     * @param ident
     * @param nomForm
     * @param dateLimite
     * @return
     */
    @Override
    public void insert(Identite ident, String nomForm, Calendar dateLimite) {
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat cand = (Candidat) ident;
            getConfig();
            bd = Db4o.openFile(configuration, nombase);
            configuration.objectClass(Formation.class).cascadeOnDelete(true);
            ObjectSet<Formation> test = bd.queryByExample(new Formation());
            for (Formation ligne : test) {
                if (ligne.getTitre_formation().equals(nomForm) && ligne.getDate_limite_candidature().get(Calendar.MONTH) == dateLimite.get(Calendar.MONTH) && ligne.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH) == dateLimite.get(Calendar.DAY_OF_MONTH) && ligne.getDate_limite_candidature().get(Calendar.YEAR) == dateLimite.get(Calendar.YEAR)) {
                    cand.setFormation(ligne);
                    ligne.ajouterCandidat(cand);
                    bd.delete(ligne);
                    break;
                }
            }
            bd.commit();
            bd.close();
        }
        insertIdentite(ident);
    }

    public void insertIdentite(Identite ident) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        bd.store(ident);
        bd.commit();
        bd.close();
    }

    /**
     * Modifie une Identite deja pr&eacute;sente dans le cache.
     * @param ident
     * @return
     */
    @Override
    public void update(Identite ident) throws Exception {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat identC = (Candidat) ident;
            Candidat result = (Candidat) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, ident.getType())).get(0);
            result.setEmail(identC.getEmail());
            result.setAcceptation(identC.getAcceptation());
            result.setSex(identC.getSex());
            result.setDate_naissance(identC.getDateNaissance());
            result.setBource(identC.getBource());
            result.setNationalite(identC.getNationalite());
            ExtObjectContainer eoc = bd.ext();
            if (!eoc.isStored(result)) {
                System.out.println(result + "" n'a pas d'identit� dans la base"");
            }
            bd.store(result);
            bd.commit();
            bd.close();
        } else {
            RespFormation identF = (RespFormation) ident;
            RespFormation result = (RespFormation) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, ident.getType())).get(0);
            result.setEmail(identF.getEmail());
            result.setSex(identF.getSex());
            result.setTelephone(identF.getTelephone());
            ExtObjectContainer eoc = bd.ext();
            if (!eoc.isStored(result)) {
                System.out.println(result + "" n'a pas d'identit� dans la base"");
            }
            bd.store(result);
            bd.commit();
            bd.close();
        }
    }

    /**
     * Supprime une Identite dans le cache.
     * @param identite
     * @return
     */
    @Override
    public void delete(Identite ident) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat res = (Candidat) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, null)).get(0);
            if (res != null) {
                res.getFormation().supprimerCandidat(res);
                bd.delete(res);
            }
            bd.commit();
            bd.close();
        } else {
            RespFormation res = (RespFormation) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, null)).get(0);
            if (res != null) {
                bd.delete(res);
            }
            bd.commit();
            bd.close();
        }
    }

    /**
     * Recherche des Candidats du cache selon certains crit&egrave;res.
     * Retourne tous les candidats du cache si tous les param&egrave;tres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return Candidat[]
     */
    @Override
    public Candidat[] findCandidat(String nom, String prenom, String sex, String email) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        List<Identite> f = find(nom, prenom, sex, email, TypeIdentite.CANDIDAT);
        if (f != null) {
            Candidat[] identite = f.toArray(new Candidat[f.size()]);
            bd.close();
            return identite;
        } else {
            bd.close();
            return null;
        }
    }

    private List<Identite> find(String nom, String prenom, String sex, String email, TypeIdentite type) {
        ObjectSet<Identite> f = bd.queryByExample(new Identite(nom, prenom, sex, email, type));
        List<Identite> lid = (List<Identite>) f;
        return lid;
    }

    /**
     * Recherche des RespFormations du cache selon certains crit&egrave;res.
     * Retourne tous les responsables du cache si tous les param&egrave;tres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return RespFormation[]
     */
    @Override
    public RespFormation[] findRespForm(String nom, String prenom, String sex, String email) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        List<Identite> f = find(nom, prenom, sex, email, TypeIdentite.FORMATEUR);
        if (f != null) {
            RespFormation[] identite = f.toArray(new RespFormation[f.size()]);
            bd.close();
            return identite;
        } else {
            bd.close();
            return null;
        }
    }
}
","// Db4oIdentiteFactory_0Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oIdentiteFactory}.
* It contains ten unit test cases for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
*/
class Db4oIdentiteFactory_0Test {","// Db4oIdentiteFactory_0Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oIdentiteFactory}.
* It contains ten unit test cases for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
*/
class Db4oIdentiteFactory_0Test {

		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_0() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, null, null, null);
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_1() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, null, null, ""test@test.com"");
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_2() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, null, ""M"", null);
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_3() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, null, ""M"", ""test@test.com"");
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_4() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, ""test"", null, null);
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_5() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, ""test"", null, ""test@test.com"");
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_6() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, ""test"", ""M"", null);
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_7() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(null, ""test"", ""M"", ""test@test.com"");
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_8() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(""test"", null, null, null);
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_9() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(""test"", null, null, ""test@test.com"");
				assertEquals(0, result.length);
		}
		
		/**
		 * Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		 * This test case is used to test the method with a null parameter.
		 * @throws IOException
		 */
		@Test
		void testFindCandidat_10() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				Candidat[] result = db4oIdentiteFactory.findCandidat(""test"", null, ""M"", null);
				assertEquals(0, result.length);
		}
}

// Db4oIdentiteFactory_1Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o"
cmpl-6twKym8YqfEybcHzil9Hm00S8dULB,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/Db4oIdentiteFactory_1Test.java,43.83399724960327,length,"// Db4oIdentiteFactory.java
/**
 * Classe Db4oIdentiteFactory
 */
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es db4o et d'en modifier les Identites.
 */
public class Db4oIdentiteFactory implements IdentiteDao {

    // Interface qui repr&eacute;sente la connexion � la BD
    ObjectContainer bd;

    String nombase;

    Configuration configuration;

    public Db4oIdentiteFactory() throws IOException {
        nombase = Db4oConfig.getInfo();
    }

    private void getConfig() {
        configuration = Db4o.newConfiguration();
        configuration.lockDatabaseFile(false);
        configuration.objectClass(Calendar.class).storeTransientFields(true);
    }

    /**
     * Ajoute une Identite dans le cache.
     * on ajoute &eacute;galement le candidat &agrave; la  formation nomForm.
     * @param ident
     * @param nomForm
     * @param dateLimite
     * @return
     */
    @Override
    public void insert(Identite ident, String nomForm, Calendar dateLimite) {
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat cand = (Candidat) ident;
            getConfig();
            bd = Db4o.openFile(configuration, nombase);
            configuration.objectClass(Formation.class).cascadeOnDelete(true);
            ObjectSet<Formation> test = bd.queryByExample(new Formation());
            for (Formation ligne : test) {
                if (ligne.getTitre_formation().equals(nomForm) && ligne.getDate_limite_candidature().get(Calendar.MONTH) == dateLimite.get(Calendar.MONTH) && ligne.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH) == dateLimite.get(Calendar.DAY_OF_MONTH) && ligne.getDate_limite_candidature().get(Calendar.YEAR) == dateLimite.get(Calendar.YEAR)) {
                    cand.setFormation(ligne);
                    ligne.ajouterCandidat(cand);
                    bd.delete(ligne);
                    break;
                }
            }
            bd.commit();
            bd.close();
        }
        insertIdentite(ident);
    }

    public void insertIdentite(Identite ident) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        bd.store(ident);
        bd.commit();
        bd.close();
    }

    /**
     * Modifie une Identite deja pr&eacute;sente dans le cache.
     * @param ident
     * @return
     */
    @Override
    public void update(Identite ident) throws Exception {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat identC = (Candidat) ident;
            Candidat result = (Candidat) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, ident.getType())).get(0);
            result.setEmail(identC.getEmail());
            result.setAcceptation(identC.getAcceptation());
            result.setSex(identC.getSex());
            result.setDate_naissance(identC.getDateNaissance());
            result.setBource(identC.getBource());
            result.setNationalite(identC.getNationalite());
            ExtObjectContainer eoc = bd.ext();
            if (!eoc.isStored(result)) {
                System.out.println(result + "" n'a pas d'identit� dans la base"");
            }
            bd.store(result);
            bd.commit();
            bd.close();
        } else {
            RespFormation identF = (RespFormation) ident;
            RespFormation result = (RespFormation) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, ident.getType())).get(0);
            result.setEmail(identF.getEmail());
            result.setSex(identF.getSex());
            result.setTelephone(identF.getTelephone());
            ExtObjectContainer eoc = bd.ext();
            if (!eoc.isStored(result)) {
                System.out.println(result + "" n'a pas d'identit� dans la base"");
            }
            bd.store(result);
            bd.commit();
            bd.close();
        }
    }

    /**
     * Supprime une Identite dans le cache.
     * @param identite
     * @return
     */
    @Override
    public void delete(Identite ident) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        if (ident.getType() == TypeIdentite.CANDIDAT) {
            Candidat res = (Candidat) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, null)).get(0);
            if (res != null) {
                res.getFormation().supprimerCandidat(res);
                bd.delete(res);
            }
            bd.commit();
            bd.close();
        } else {
            RespFormation res = (RespFormation) bd.queryByExample(new Identite(ident.getNom(), ident.getPrenom(), null, null, null)).get(0);
            if (res != null) {
                bd.delete(res);
            }
            bd.commit();
            bd.close();
        }
    }

    /**
     * Recherche des Candidats du cache selon certains crit&egrave;res.
     * Retourne tous les candidats du cache si tous les param&egrave;tres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return Candidat[]
     */
    @Override
    public Candidat[] findCandidat(String nom, String prenom, String sex, String email) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        List<Identite> f = find(nom, prenom, sex, email, TypeIdentite.CANDIDAT);
        if (f != null) {
            Candidat[] identite = f.toArray(new Candidat[f.size()]);
            bd.close();
            return identite;
        } else {
            bd.close();
            return null;
        }
    }

    private List<Identite> find(String nom, String prenom, String sex, String email, TypeIdentite type) {
        ObjectSet<Identite> f = bd.queryByExample(new Identite(nom, prenom, sex, email, type));
        List<Identite> lid = (List<Identite>) f;
        return lid;
    }

    /**
     * Recherche des RespFormations du cache selon certains crit&egrave;res.
     * Retourne tous les responsables du cache si tous les param&egrave;tres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return RespFormation[]
     */
    @Override
    public RespFormation[] findRespForm(String nom, String prenom, String sex, String email) {
        getConfig();
        bd = Db4o.openFile(configuration, nombase);
        List<Identite> f = find(nom, prenom, sex, email, TypeIdentite.FORMATEUR);
        if (f != null) {
            RespFormation[] identite = f.toArray(new RespFormation[f.size()]);
            bd.close();
            return identite;
        } else {
            bd.close();
            return null;
        }
    }
}
","// Db4oIdentiteFactory_1Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oIdentiteFactory}.
* It contains ten unit test cases for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
*/
class Db4oIdentiteFactory_1Test {","// Db4oIdentiteFactory_1Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oIdentiteFactory}.
* It contains ten unit test cases for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
*/
class Db4oIdentiteFactory_1Test {

		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the nom parameter.
		*/
		@Test
		void testFindRespForm_1() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm(null, """", """", """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the prenom parameter.
		*/
		@Test
		void testFindRespForm_2() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", null, """", """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the sex parameter.
		*/
		@Test
		void testFindRespForm_3() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", """", null, """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the email parameter.
		*/
		@Test
		void testFindRespForm_4() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", """", """", null);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the nom and prenom parameters.
		*/
		@Test
		void testFindRespForm_5() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm(null, null, """", """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the nom and sex parameters.
		*/
		@Test
		void testFindRespForm_6() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm(null, """", null, """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the nom and email parameters.
		*/
		@Test
		void testFindRespForm_7() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm(null, """", """", null);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the prenom and sex parameters.
		*/
		@Test
		void testFindRespForm_8() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", null, null, """");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the prenom and email parameters.
		*/
		@Test
		void testFindRespForm_9() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", null, """", null);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findRespForm(String, String, String, String)} method.
		* This test case is used to test the method with a null value for the sex and email parameters.
		*/
		@Test
		void testFindRespForm_10() throws IOException {
				Db4oIdentiteFactory db4oIdentiteFactory = new Db4oIdentiteFactory();
				RespFormation[] result = db4oIdentiteFactory.findRespForm("""", """", null, null);
				assertEquals(0, result.length);
		}
}

// Db4oIdentiteFactory_2Test.java
package fr.unice.gfarce.dao;

import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.config.Configuration;
import com.db4o.ext.ExtObjectContainer;
import fr.unice.gfarce.connect.Db4oConfig;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Db4oIdentiteFactory}.
* It contains ten unit test cases for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
*/
class Db4oIdentiteFactory_2Test {
		
		/**
		* Test case for the {@link Db4oIdentiteFactory#findCandidat(String, String, String, String)} method.
		"
cmpl-6twM1S8AeN4TfWB2Z0zDVlbY8f1EB,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/OracleFormationDao.java,43.638392210006714,length,"// OracleFormationDao.java
/**
 * Classe OracleFormationDao
 */
package fr.unice.gfarce.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import java.util.*;
import fr.unice.gfarce.identity.Formation;

/**
 *  Classe permettant d'acc&eacute;der a la base de donnees oracle et d'en modifier les Formations.
 */
public class OracleFormationDao implements FormationDao {

    String persistUnitName = ""Identite"";

    @PersistenceContext
    private EntityManager em;

    /**
     * Ajoute une formation dans la base de donn&eacute;es.
     * @param formation
     * @param nomResp
     * @param prenomResp
     * @return
     */
    @Override
    public void insert(Formation formation, String nomResp, String prenomResp) {
        EntityManagerFactory emf = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            em.persist(formation);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Modifie une Formation deja pr&eacute;sente dans la base de donn&eacute;es.
     * @param f
     * @return
     */
    @Override
    public void update(Formation formation) {
        EntityManagerFactory emf = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Formation f = em.find(formation.getClass(), formation.getId());
            if (f == null) {
                throw new DaoException(""Formation a updater '"" + formation.getTitre_formation() + ""' non trouvee"", 2);
            } else {
                f.setDate_limite_candidature(formation.getDate_limite_candidature());
                f.setMontant_inscription(formation.getMontant_inscription());
                f.setTitre_formation(formation.getTitre_formation());
                f.setCandidat(formation.getCandidat());
                f.setResponsable(formation.getResponsable());
                em.merge(f);
                tx.commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Supprime une Formation de la base de donn&eacute;es.
     * @param formation
     * @return
     */
    @Override
    public void delete(Formation formation) {
        EntityManagerFactory emf = null;
        EntityTransaction tx = null;
        em = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Formation f = em.find(formation.getClass(), formation.getId());
            if (f == null) {
                throw new DaoException(""Formation a supprimer '"" + formation.getTitre_formation() + ""' non trouvee"", 2);
            } else {
                em.remove(f);
                tx.commit();
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Recherche des Formations de la base de donn&eacute;es selon certains crit&egrave;res.
     * Retourne toutes les formations de la base si name=date=null
     * @param name
     * @param date
     * @return Formation[]
     */
    @SuppressWarnings(""unchecked"")
    @Override
    public Formation[] findFormation(String name, Calendar date) {
        EntityManagerFactory emf = null;
        EntityTransaction tx = null;
        em = null;
        Formation[] result = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            List<Formation> resultList = null;
            String select = ""select f from Formation as f "";
            if (name != null && date != null) {
                select += ""where f.titre_formation='"" + name + ""' and f.date_limite_candidature=?1"";
                resultList = em.createQuery(select).setParameter(1, date, TemporalType.DATE).getResultList();
            } else if (name != null && date == null) {
                select += ""where f.titre_formation='"" + name + ""'"";
                resultList = em.createQuery(select).getResultList();
            } else if (name == null && date == null) {
                resultList = em.createQuery(select).getResultList();
            }
            if (resultList != null) {
                result = resultList.toArray(new Formation[resultList.size()]);
            } else {
                throw new DaoException(""Formation '"" + name + ""' non trouvee"", 2);
            }
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
        return result;
    }
}
","// OracleFormationDaoTest.java
package fr.unice.gfarce.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import java.util.*;
import fr.unice.gfarce.identity.Formation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleFormationDao}.
* It contains ten unit test cases for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
*/
class OracleFormationDaoTest {","// OracleFormationDaoTest.java
package fr.unice.gfarce.dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import java.util.*;
import fr.unice.gfarce.identity.Formation;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleFormationDao}.
* It contains ten unit test cases for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
*/
class OracleFormationDaoTest {

		String persistUnitName = ""Identite"";
		
		@PersistenceContext
		private EntityManager em;
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name and the date are null.
		*/
		@Test
		void testFindFormationNameDateNull() {
				OracleFormationDao dao = new OracleFormationDao();
				Formation[] result = dao.findFormation(null, null);
				assertNotNull(result);
				assertEquals(result.length, 2);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is null and the date is not null.
		*/
		@Test
		void testFindFormationNameNullDateNotNull() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(null, date);
				assertNotNull(result);
				assertEquals(result.length, 1);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is null.
		*/
		@Test
		void testFindFormationNameNotNullDateNull() {
				OracleFormationDao dao = new OracleFormationDao();
				Formation[] result = dao.findFormation(""Java"", null);
				assertNotNull(result);
				assertEquals(result.length, 1);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name and the date are not null.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNull() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNotNull(result);
				assertEquals(result.length, 1);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""C++"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist2() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist3() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist4() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist5() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist6() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name is not null and the date is not null but the formation does not exist.
		*/
		@Test
		void testFindFormationNameNotNullDateNotNullFormationNotExist7() {
				OracleFormationDao dao = new OracleFormationDao();
				Calendar date = Calendar.getInstance();
				date.set(2019, Calendar.JANUARY, 1);
				Formation[] result = dao.findFormation(""Java"", date);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link OracleFormationDao#findFormation(String, Calendar)} method.
		* It tests the case where the name"
cmpl-6twN4p0LKRhtDwXdkUYDSsdIbQMS8,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/OracleIdentiteDao_1Test.java,43.381152391433716,length,"// OracleIdentiteDao.java
/**
 * Classe OracleIdentiteDao
 */
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es oracle et d'en modifier les Identites.
 */
public class OracleIdentiteDao implements IdentiteDao {

    String persistUnitName = ""Identite"";

    @PersistenceContext
    private EntityManager em;

    public static OracleIdentiteDao getDAO() {
        return new OracleIdentiteDao();
    }

    /**
     * Ajoute une Identite dans la base de donn&eacute;es.
     * on ajoute &eacute;galement le candidat &agrave; la  formation nomForm.
     * @param identite
     * @param nomForm
     * @param dateLimite
     * @return
     */
    @Override
    public void insert(Identite identite, String nomForm, Calendar dateLimite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            em.persist(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Modifie une Identite deja pr&eacute;sente dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void update(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite i = em.find(identite.getClass(), identite.getId());
            i.setEmail(identite.getEmail());
            i.setNom(identite.getNom());
            i.setPrenom(identite.getPrenom());
            i.setSex(identite.getSex());
            i.setType(identite.getType());
            em.merge(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Supprime une Identite dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void delete(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite ident = em.find(identite.getClass(), identite.getId());
            em.remove(ident);
            tx.commit();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Recherche les Identit&eacute;s de la base de donn&eacute;es selon certains crit&egraves;.
     * Retourne toutes les Identites si tous les parametres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @return List<Identite>
     */
    @SuppressWarnings(""unchecked"")
    public List<Identite> find(String nom, String prenom, String sex, String email, TypeIdentite type) {
        String a, b, c, e;
        if (nom == null)
            a = ""ident.nom like '%'"";
        else
            a = ""ident.nom='"" + nom + ""'"";
        if (prenom == null)
            b = ""ident.prenom like '%'"";
        else
            b = ""ident.prenom='"" + prenom + ""'"";
        if (sex == null)
            c = ""ident.sex like '%'"";
        else
            c = ""ident.sex='"" + sex + ""'"";
        if (type == TypeIdentite.CANDIDAT) {
            e = ""ident.type= :CANDIDAT"";
        } else if (type == TypeIdentite.FORMATEUR) {
            e = ""ident.type= :FORMATEUR"";
        } else
            e = ""ident.type like '%'"";
        String s = ""select ident from Identite as ident"" + "" where "" + a + "" and "" + b + "" and "" + c + "" and "" + e;
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        List<Identite> list = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            if (type == TypeIdentite.CANDIDAT) {
                list = em.createQuery(s).setParameter(""CANDIDAT"", TypeIdentite.CANDIDAT).getResultList();
            } else if (type == TypeIdentite.FORMATEUR) {
                list = em.createQuery(s).setParameter(""FORMATEUR"", TypeIdentite.FORMATEUR).getResultList();
            } else
                list = em.createQuery(s).getResultList();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
        return list;
    }

    /**
     * Appelle la m&eacute;thode find() avec le type Candidat.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return Candidat[]
     */
    @Override
    public Candidat[] findCandidat(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.CANDIDAT);
        if (resultList != null) {
            Candidat[] result = resultList.toArray(new Candidat[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }

    /**
     * Appelle la m&eacute;thode find() avec le type RespFormation.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return RespFormation[]
     */
    @Override
    public RespFormation[] findRespForm(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.FORMATEUR);
        if (resultList != null) {
            RespFormation[] result = resultList.toArray(new RespFormation[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }
}
","// OracleIdentiteDao_1Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
*/
class OracleIdentiteDao_1Test {","// OracleIdentiteDao_1Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
*/
class OracleIdentiteDao_1Test {

	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are null.
	*/
	@Test
	void testFind_1() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(null, null, null, null, null);
		assertEquals(2, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_2() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.CANDIDAT);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_3() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_4() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", ""email"", null);
		assertEquals(2, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_5() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", null, TypeIdentite.CANDIDAT);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_6() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", null, TypeIdentite.FORMATEUR);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_7() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", ""sex"", null, null);
		assertEquals(2, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_8() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", null, ""email"", TypeIdentite.CANDIDAT);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_9() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", null, ""email"", TypeIdentite.FORMATEUR);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#find(String, String, String, String, TypeIdentite)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFind_10() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		List<Identite> result = oracleIdentiteDao.find(""nom"", ""prenom"", null, ""email"", null);
		assertEquals(2, result.size());
	}
	
}

// OracleIdentiteDao_2Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
*/
class OracleIdentiteDao_2Test {
		
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the parameters are null.
	*/
	@Test
	void testFindCandidat_1() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		Candidat[] result = oracleIdentiteDao.findCandidat(null, null, null, null);
		assertEquals(1, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the parameters are not null.
	*/
	@Test
	void testFindCandidat_2() {
		OracleIdentiteDao oracleIdentiteDao = OracleIdentiteDao.getDAO();
		Candidat[] result = oracleIdentiteDao.findCandidat(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals("
cmpl-6twO7LrJqGYpb85WlQMfTfk3litDS,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/OracleIdentiteDao_2Test.java,50.891223192214966,length,"// OracleIdentiteDao.java
/**
 * Classe OracleIdentiteDao
 */
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es oracle et d'en modifier les Identites.
 */
public class OracleIdentiteDao implements IdentiteDao {

    String persistUnitName = ""Identite"";

    @PersistenceContext
    private EntityManager em;

    public static OracleIdentiteDao getDAO() {
        return new OracleIdentiteDao();
    }

    /**
     * Ajoute une Identite dans la base de donn&eacute;es.
     * on ajoute &eacute;galement le candidat &agrave; la  formation nomForm.
     * @param identite
     * @param nomForm
     * @param dateLimite
     * @return
     */
    @Override
    public void insert(Identite identite, String nomForm, Calendar dateLimite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            em.persist(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Modifie une Identite deja pr&eacute;sente dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void update(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite i = em.find(identite.getClass(), identite.getId());
            i.setEmail(identite.getEmail());
            i.setNom(identite.getNom());
            i.setPrenom(identite.getPrenom());
            i.setSex(identite.getSex());
            i.setType(identite.getType());
            em.merge(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Supprime une Identite dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void delete(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite ident = em.find(identite.getClass(), identite.getId());
            em.remove(ident);
            tx.commit();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Recherche les Identit&eacute;s de la base de donn&eacute;es selon certains crit&egraves;.
     * Retourne toutes les Identites si tous les parametres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @return List<Identite>
     */
    @SuppressWarnings(""unchecked"")
    public List<Identite> find(String nom, String prenom, String sex, String email, TypeIdentite type) {
        String a, b, c, e;
        if (nom == null)
            a = ""ident.nom like '%'"";
        else
            a = ""ident.nom='"" + nom + ""'"";
        if (prenom == null)
            b = ""ident.prenom like '%'"";
        else
            b = ""ident.prenom='"" + prenom + ""'"";
        if (sex == null)
            c = ""ident.sex like '%'"";
        else
            c = ""ident.sex='"" + sex + ""'"";
        if (type == TypeIdentite.CANDIDAT) {
            e = ""ident.type= :CANDIDAT"";
        } else if (type == TypeIdentite.FORMATEUR) {
            e = ""ident.type= :FORMATEUR"";
        } else
            e = ""ident.type like '%'"";
        String s = ""select ident from Identite as ident"" + "" where "" + a + "" and "" + b + "" and "" + c + "" and "" + e;
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        List<Identite> list = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            if (type == TypeIdentite.CANDIDAT) {
                list = em.createQuery(s).setParameter(""CANDIDAT"", TypeIdentite.CANDIDAT).getResultList();
            } else if (type == TypeIdentite.FORMATEUR) {
                list = em.createQuery(s).setParameter(""FORMATEUR"", TypeIdentite.FORMATEUR).getResultList();
            } else
                list = em.createQuery(s).getResultList();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
        return list;
    }

    /**
     * Appelle la m&eacute;thode find() avec le type Candidat.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return Candidat[]
     */
    @Override
    public Candidat[] findCandidat(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.CANDIDAT);
        if (resultList != null) {
            Candidat[] result = resultList.toArray(new Candidat[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }

    /**
     * Appelle la m&eacute;thode find() avec le type RespFormation.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return RespFormation[]
     */
    @Override
    public RespFormation[] findRespForm(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.FORMATEUR);
        if (resultList != null) {
            RespFormation[] result = resultList.toArray(new RespFormation[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }
}
","// OracleIdentiteDao_2Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
*/
class OracleIdentiteDao_2Test {","// OracleIdentiteDao_2Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
*/
class OracleIdentiteDao_2Test {

	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_1() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, null, null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_2() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, null, null, ""test@test.com"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_3() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, null, ""M"", null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_4() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, null, ""M"", ""test@test.com"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_5() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, ""test"", null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_6() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, ""test"", null, ""test@test.com"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_7() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, ""test"", ""M"", null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_8() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, ""test"", ""M"", ""test@test.com"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_9() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(""test"", null, null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindCandidat_10() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(""test"", null, null, ""test@test.com"");
		assertEquals(0, result.length);
	}
	
}

// OracleIdentiteDao_3Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
*/
class OracleIdentiteDao_3Test {
		
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindRespForm_1() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(null, null, null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindRespForm_2() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(null, null, null, ""test@test.com"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the method is called with a null parameter.
	*/
	@Test
	void testFindRespForm_3() {
		OracleIdentiteDao dao ="
cmpl-6twPA4D3Nizy5J6pp6EEhHytBTKag,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/dao/OracleIdentiteDao_3Test.java,41.6605966091156,length,"// OracleIdentiteDao.java
/**
 * Classe OracleIdentiteDao
 */
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;

/**
 *  Classe permettant d'acc&eacute;der &agrave; la base de donn&eacute;es oracle et d'en modifier les Identites.
 */
public class OracleIdentiteDao implements IdentiteDao {

    String persistUnitName = ""Identite"";

    @PersistenceContext
    private EntityManager em;

    public static OracleIdentiteDao getDAO() {
        return new OracleIdentiteDao();
    }

    /**
     * Ajoute une Identite dans la base de donn&eacute;es.
     * on ajoute &eacute;galement le candidat &agrave; la  formation nomForm.
     * @param identite
     * @param nomForm
     * @param dateLimite
     * @return
     */
    @Override
    public void insert(Identite identite, String nomForm, Calendar dateLimite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            em.persist(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Modifie une Identite deja pr&eacute;sente dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void update(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite i = em.find(identite.getClass(), identite.getId());
            i.setEmail(identite.getEmail());
            i.setNom(identite.getNom());
            i.setPrenom(identite.getPrenom());
            i.setSex(identite.getSex());
            i.setType(identite.getType());
            em.merge(identite);
            tx.commit();
        } catch (Exception e) {
            e.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Supprime une Identite dans la base de donn&eacute;es.
     * @param identite
     * @return
     */
    @Override
    public void delete(Identite identite) {
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            Identite ident = em.find(identite.getClass(), identite.getId());
            em.remove(ident);
            tx.commit();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
    }

    /**
     * Recherche les Identit&eacute;s de la base de donn&eacute;es selon certains crit&egraves;.
     * Retourne toutes les Identites si tous les parametres sont null.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @return List<Identite>
     */
    @SuppressWarnings(""unchecked"")
    public List<Identite> find(String nom, String prenom, String sex, String email, TypeIdentite type) {
        String a, b, c, e;
        if (nom == null)
            a = ""ident.nom like '%'"";
        else
            a = ""ident.nom='"" + nom + ""'"";
        if (prenom == null)
            b = ""ident.prenom like '%'"";
        else
            b = ""ident.prenom='"" + prenom + ""'"";
        if (sex == null)
            c = ""ident.sex like '%'"";
        else
            c = ""ident.sex='"" + sex + ""'"";
        if (type == TypeIdentite.CANDIDAT) {
            e = ""ident.type= :CANDIDAT"";
        } else if (type == TypeIdentite.FORMATEUR) {
            e = ""ident.type= :FORMATEUR"";
        } else
            e = ""ident.type like '%'"";
        String s = ""select ident from Identite as ident"" + "" where "" + a + "" and "" + b + "" and "" + c + "" and "" + e;
        EntityManagerFactory emf = null;
        em = null;
        EntityTransaction tx = null;
        List<Identite> list = null;
        try {
            emf = Persistence.createEntityManagerFactory(persistUnitName);
            em = emf.createEntityManager();
            tx = em.getTransaction();
            tx.begin();
            if (type == TypeIdentite.CANDIDAT) {
                list = em.createQuery(s).setParameter(""CANDIDAT"", TypeIdentite.CANDIDAT).getResultList();
            } else if (type == TypeIdentite.FORMATEUR) {
                list = em.createQuery(s).setParameter(""FORMATEUR"", TypeIdentite.FORMATEUR).getResultList();
            } else
                list = em.createQuery(s).getResultList();
        } catch (Exception e1) {
            e1.printStackTrace();
            if (tx != null) {
                tx.rollback();
            }
        } finally {
            if (em != null) {
                em.close();
            }
            if (emf != null) {
                emf.close();
            }
        }
        return list;
    }

    /**
     * Appelle la m&eacute;thode find() avec le type Candidat.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return Candidat[]
     */
    @Override
    public Candidat[] findCandidat(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.CANDIDAT);
        if (resultList != null) {
            Candidat[] result = resultList.toArray(new Candidat[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }

    /**
     * Appelle la m&eacute;thode find() avec le type RespFormation.
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @return RespFormation[]
     */
    @Override
    public RespFormation[] findRespForm(String nom, String prenom, String sex, String email) {
        List<Identite> resultList = find(nom, prenom, sex, email, TypeIdentite.FORMATEUR);
        if (resultList != null) {
            RespFormation[] result = resultList.toArray(new RespFormation[resultList.size()]);
            return result;
        } else {
            return null;
        }
    }
}
","// OracleIdentiteDao_3Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
*/
class OracleIdentiteDao_3Test {","// OracleIdentiteDao_3Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
*/
class OracleIdentiteDao_3Test {

	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are null.
	*/
	@Test
	void testFindRespForm_1() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(null, null, null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_2() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_3() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_4() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_5() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_6() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_7() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_8() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_9() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findRespForm(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindRespForm_10() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		RespFormation[] result = dao.findRespForm(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
}

// OracleIdentiteDao_4Test.java
package fr.unice.gfarce.dao;

import java.util.Calendar;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import javax.persistence.PersistenceContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OracleIdentiteDao}.
* It contains ten unit test cases for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
*/
class OracleIdentiteDao_4Test {
		
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the given parameters are null.
	*/
	@Test
	void testFindCandidat_1() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(null, null, null, null);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindCandidat_2() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(""nom"", ""prenom"", ""sex"", ""email"");
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link OracleIdentiteDao#findCandidat(String, String, String, String)} method.
	* It tests the case where the given parameters are not null.
	*/
	@Test
	void testFindCandidat_3() {
		OracleIdentiteDao dao = OracleIdentiteDao.getDAO();
		Candidat[] result = dao.findCandidat(""nom"", ""prenom"", ""sex"","
b8ed5f01-69c6-4a73-8ebb-3aed8baec01a,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 13896 tokens (11896 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
        super();
        this.c = c;
        //matrice etudiant
        dataEtu = createListeDeroulanteEtudiant();
        //matrice formation
        dataFormation = createListeDeroulanteFormation();
        //matrice responsable
        dataResp = createListeDeroulanteResponsable();
        //On cree la barre d outil
        buildBarreDOutil();
        //On cree les onglet
        buildOnglet();
        //On initialise notre fenêtre
        build();
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable() {
        RespFormation[] resp = c.findRespForm(null, null);
        if (resp != null) {
            Object[][] matResp = new Object[resp.length][5];
            for (int i = 0; i < resp.length; i++) {
                matResp[i][0] = resp[i].getNom();
                matResp[i][1] = resp[i].getPrenom();
                matResp[i][2] = resp[i].getSex();
                matResp[i][3] = resp[i].getEmail();
                matResp[i][4] = resp[i].getTelephone();
            }
            return matResp;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation() {
        Formation[] tabFormation = c.findFormation(null, null);
        if (tabFormation != null) {
            Object[][] matFormation = new Object[tabFormation.length][4];
            for (int i = 0; i < tabFormation.length; i++) {
                matFormation[i][0] = tabFormation[i].getTitre_formation();
                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);
                matFormation[i][2] = tabFormation[i].getMontant_inscription();
                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + "" "" + tabFormation[i].getResponsable().getPrenom();
            }
            return matFormation;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant() {
        Candidat[] tabCandidat = c.findCandidat(null, null);
        if (tabCandidat != null) {
            Object[][] matEtu = new Object[tabCandidat.length][11];
            for (int i = 0; i < tabCandidat.length; i++) {
                matEtu[i][0] = tabCandidat[i].getNom();
                matEtu[i][1] = tabCandidat[i].getPrenom();
                matEtu[i][2] = tabCandidat[i].getSex();
                matEtu[i][3] = tabCandidat[i].getEmail();
                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);
                matEtu[i][5] = tabCandidat[i].getPhoto();
                matEtu[i][6] = tabCandidat[i].getDiplome();
                matEtu[i][7] = tabCandidat[i].getNationalite();
                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + ""."" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);
                if (tabCandidat[i].getAcceptation() == 1) {
                    matEtu[i][9] = ""ok"";
                } else {
                    matEtu[i][9] = ""non"";
                }
                matEtu[i][10] = tabCandidat[i].getBource();
            }
            return matEtu;
        }
        return null;
    }

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil() {
        //---------------------Creation de la barre d outil----------------------------------
        JMenuBar menuBar = new JMenuBar();
        JMenu fichier = new JMenu(""Fichier"");
        JMenu aide = new JMenu(""Aide"");
        JMenuItem quitter = new JMenuItem(new QuitterAction(""Quitter""));
        fichier.add(quitter);
        menuBar.add(fichier);
        JMenuItem aPropos = new JMenuItem(new AProposAction(this, ""A propos""));
        aide.add(aPropos);
        menuBar.add(aide);
        setJMenuBar(menuBar);
        //------------------------------------------------------------------------------------
    }

    /**
     * construit les different onglet de la fenetre
     */
    public void buildOnglet() {
        JTabbedPane tabbedPane = new JTabbedPane();
        ImageIcon icon = null;
        //1er onglet principal
        JTabbedPane tabbedPaneResp = new JTabbedPane();
        //Premiere ongle responsable
        JComponent panel10 = makeFormulaireResponsable();
        panel10.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Creer responsable"", icon, panel10, """");
        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);
        //2eme onglet responsable
        JComponent panel11 = makeModifierResponsable();
        panel11.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Modifier responsable"", icon, panel11, """");
        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.addTab(""Responsable"", icon, tabbedPaneResp, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);
        //Deuxieme ongle principale
        JTabbedPane tabbedPaneFormation = new JTabbedPane();
        //1er onglet creer formation
        JComponent panel20 = makeFormulaireFormation();
        panel20.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""Creer formation"", icon, panel20, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);
        //2eme onglet modification formaion
        JComponent panel21 = makeModifierFormation();
        panel21.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""modifier une formation"", icon, panel21, """");
        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);
        tabbedPane.addTab(""Formation"", icon, tabbedPaneFormation, """");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);
        //3eme onglet principal
        JTabbedPane tabbedPaneEtu = new JTabbedPane();
        //Troisieme ongle
        JComponent panel30 = makeFormulaireEtudiant();
        panel30.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""Inscrire etudiant"", icon, panel30, """");
        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);
        //Quatrieme ongle
        JComponent panel31 = makeValidation();
        panel31.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""validation d'inscription et de bourse."", icon, panel31, """");
        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);
        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);
        tabbedPane.addTab(""Etudiant"", icon, scrollpaneEtu, """");
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);
        //Add the tabbed pane to this panel.
        add(tabbedPane);
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        Box bHori = Box.createHorizontalBox();
        bVert.add(bHori);
        JComponent formText = makeFormultext();
        JComponent formTextField = makeFormulTextField();
        bHori.add(formText);
        bHori.add(formTextField);
        return panel;
    }

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext() {
        JPanel panel = new JPanel(false);
        JLabel nomResponsable = new JLabel(""Nom : *"");
        JLabel prenomResponsable = new JLabel(""Prenom : *"");
        JLabel sexeResponsable = new JLabel(""Sexe :"");
        JLabel emailResponsable = new JLabel(""Email :"");
        JLabel telResponsable = new JLabel(""Telephone :"");
        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomResponsable);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(prenomResponsable);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(sexeResponsable);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(emailResponsable);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(telResponsable);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormResp);
        return panel;
    }

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField() {
        String[] sexeResponsable = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomResponsable = new JTextField(10);
        textFieldPrenomResponsable = new JTextField(10);
        comboBoxSexeResponsable = new JComboBox(sexeResponsable);
        textFieldEmailResponsable = new JTextField(10);
        textFieldTelResponsable = new JTextField(10);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomResponsable);
        bVert.add(textFieldPrenomResponsable);
        bVert.add(comboBoxSexeResponsable);
        bVert.add(textFieldEmailResponsable);
        bVert.add(textFieldTelResponsable);
        return panel;
    }

    JComponent makeModifierResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelResp = new Zmodel(dataResp, columnNamesResp);
        tableResp = new JTable(modelResp);
        listSelectionModel = tableResp.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());
        tableResp.setSelectionModel(listSelectionModel);
        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableResp.setFillsViewportHeight(true);
        //content panes must be opaque
        tableResp.setOpaque(true);
        outputNomResp = new JTextField();
        outputNomResp.setEditable(false);
        outputPrenomResp = new JTextField();
        outputPrenomResp.setEditable(false);
        outputSexeResp = new JTextField();
        outputSexeResp.setEditable(false);
        outputEmailResp = new JTextField();
        outputEmailResp.setEditable(false);
        outputTelResp = new JTextField();
        outputTelResp.setEditable(false);
        JButton envoiResp = new JButton(new EnvoiRespAction(this, ""Envoi"", c));
        JButton modifierResp = new JButton(new ModifierRespAction(this, ""Modifier"", c));
        JButton supprimerResp = new JButton(new SupprRespAction(this, ""Supprimer"", c));
        bVert.add(new JScrollPane(tableResp));
        //bVert.add(scrollPane);
        bVert.add(outputNomResp);
        bVert.add(outputPrenomResp);
        bVert.add(outputSexeResp);
        bVert.add(outputEmailResp);
        bVert.add(outputTelResp);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiResp);
        boutonPanel.add(modifierResp);
        boutonPanel.add(supprimerResp);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le dexieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeFormulaireFormation() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextFormation = makeFormultextFormation();
        JComponent formTextFieldFormation = makeFormulTextFieldFormation();
        bHori.add(formTextFormation);
        bHori.add(formTextFieldFormation);
        return panel;
    }

    JComponent makeFormultextFormation() {
        JPanel panel = new JPanel(false);
        JLabel titreDeLaFormation = new JLabel(""Nom : *"");
        JLabel dateLimite = new JLabel(""Date limite : *"");
        JLabel prixDeLaFormation = new JLabel(""Prix de la formation : *"");
        JLabel responsableDeLaFormation = new JLabel(""Responsable : *"");
        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(Box.createVerticalStrut(0));
        bVert.add(titreDeLaFormation);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(dateLimite);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(prixDeLaFormation);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(responsableDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormFormation);
        return panel;
    }

    JComponent makeFormulTextFieldFormation() {
        Identite[] idresp = c.findRespForm(null, null);
        String[] listResponsable = {};
        if (idresp != null) {
            listResponsable = new String[idresp.length];
            for (int i = 0; i < listResponsable.length; i++) {
                listResponsable[i] = idresp[i].getNom() + "" "" + idresp[i].getPrenom();
            }
        }
        JPanel panel = new JPanel(false);
        textFieldTitreFormation = new JTextField(10);
        comboBoxDateLimiteFormation = makeDateDeLaFormation();
        textFieldPrixDeLaFormation = new JTextField(10);
        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);
        Box bVert2 = Box.createVerticalBox();
        panel.add(bVert2);
        bVert2.add(textFieldTitreFormation);
        bVert2.add(comboBoxDateLimiteFormation);
        bVert2.add(textFieldPrixDeLaFormation);
        bVert2.add(comboBoxResponsableDeLaFormation);
        return panel;
    }

    JComponent makeDateDeLaFormation() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jour = new String[31];
        String[] mois = new String[12];
        String[] annee = new String[100];
        for (int i = 0; i < 31; i++) {
            jour[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            mois[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            annee[i] = String.valueOf(i + 2009);
        }
        comboBoxJourDLM = new JComboBox(jour);
        comboBoxMoisDLM = new JComboBox(mois);
        comboBoxAnneeDLM = new JComboBox(annee);
        panel.add(comboBoxJourDLM);
        panel.add(comboBoxMoisDLM);
        panel.add(comboBoxAnneeDLM);
        return panel;
    }

    JComponent makeModifierFormation() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelForm = new Zmodel(dataFormation, columnNamesFormation);
        tableFormation = new JTable(modelForm);
        listSelectionModel = tableFormation.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());
        tableFormation.setSelectionModel(listSelectionModel);
        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableFormation.setFillsViewportHeight(true);
        //content panes must be opaque
        tableFormation.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableFormation);
        outputTitreFormation = new JTextField();
        outputTitreFormation.setEditable(false);
        outputDateLimiteFormation = new JTextField();
        outputDateLimiteFormation.setEditable(false);
        outputPrixFormation = new JTextField();
        outputPrixFormation.setEditable(false);
        outputRespFormation = new JTextField();
        outputRespFormation.setEditable(false);
        titreArea = new JLabel(""cout de la formation et liste des candidatures : "");
        outputRespArea = new JTextArea(10, 10);
        outputRespArea.setColumns(20);
        outputRespArea.setLineWrap(true);
        outputRespArea.setRows(15);
        outputRespArea.setWrapStyleWord(true);
        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);
        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, ""Envoi"", c));
        JButton modifierFormation = new JButton(new ModifierFormationAction(this, ""Modifier"", c));
        JButton supprimerFormation = new JButton(new SupprFormationAction(this, ""Supprimer"", c, modifTableStockage));
        bVert.add(scrollPane);
        bVert.add(outputTitreFormation);
        bVert.add(outputDateLimiteFormation);
        bVert.add(outputPrixFormation);
        bVert.add(outputRespFormation);
        bVert.add(titreArea);
        bVert.add(scrollPane1);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiFormation);
        boutonPanel.add(modifierFormation);
        boutonPanel.add(supprimerFormation);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  *,*****************************************************************************************
     *  *********************Fin de la Creation pour le deuxieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextEtudiant = makeFormultextEtudiant();
        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();
        bHori.add(formTextEtudiant);
        bHori.add(formTextFieldEtudiant);
        return panel;
    }

    JComponent makeFormultextEtudiant() {
        JPanel panel = new JPanel(false);
        JLabel nomEtudiant = new JLabel(""Nom : *"");
        JLabel prenomEtudiant = new JLabel(""Prenom : *"");
        JLabel sexeEtudiant = new JLabel(""Sexe :"");
        JLabel emailEtudiant = new JLabel(""Email : *"");
        JLabel dateDeNaissanceEtudiant = new JLabel(""Date de naissance : *"");
        JLabel photoEtudiant = new JLabel(""Photo : *"");
        JLabel diplomeEtudiant = new JLabel(""diplome : *"");
        JLabel nationnaliteEtudiant = new JLabel(""nationalite :"");
        JLabel choixDeLaFormation = new JLabel(""Choix de la formation :"");
        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomEtudiant);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(prenomEtudiant);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(sexeEtudiant);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(emailEtudiant);
        bVert.add(Box.createVerticalStrut(13));
        bVert.add(dateDeNaissanceEtudiant);
        bVert.add(Box.createVerticalStrut(15));
        bVert.add(photoEtudiant);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(diplomeEtudiant);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(nationnaliteEtudiant);
        bVert.add(Box.createVerticalStrut(7));
        bVert.add(choixDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormEtudiant);
        return panel;
    }

    JComponent makeFormulTextFieldEtudiant() {
        Formation[] form = c.findAllFormation();
        String[] listFormation = {};
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        String[] sexeEtudiant = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomEtudiant = new JTextField(10);
        textFieldPrenomEtudiant = new JTextField(10);
        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);
        textFieldEmailEtudiant = new JTextField(10);
        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();
        textFieldPhotoEtudiants = makeChargeImage();
        textFieldDiplomeEtudiant = new JTextField(10);
        textFieldNationnaliteEtudiant = new JTextField(10);
        comboBoxFormation1 = new JComboBox(listFormation);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomEtudiant);
        bVert.add(textFieldPrenomEtudiant);
        bVert.add(comboBoxSexeEtudiant);
        bVert.add(textFieldEmailEtudiant);
        bVert.add(comboBoxDateNaissanceEtudiant);
        bVert.add(textFieldPhotoEtudiants);
        bVert.add(textFieldDiplomeEtudiant);
        bVert.add(textFieldNationnaliteEtudiant);
        bVert.add(comboBoxFormation1);
        return panel;
    }

    JComponent makeChargeImage() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        textFieldPhotoEtudiant = new JTextField(10);
        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, ""CHARGER""));
        panel.add(textFieldPhotoEtudiant);
        panel.add(boutonChargeImage);
        return panel;
    }

    JComponent makeDateDeNaissance() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jourEtu = new String[31];
        String[] moisEtu = new String[12];
        String[] anneeEtu = new String[100];
        for (int i = 0; i < 31; i++) {
            jourEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            moisEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            anneeEtu[i] = String.valueOf(i + 1918);
        }
        comboBoxJourDDNEtu = new JComboBox(jourEtu);
        comboBoxMoisDDNEtu = new JComboBox(moisEtu);
        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);
        panel.add(comboBoxJourDDNEtu);
        panel.add(comboBoxMoisDDNEtu);
        panel.add(comboBoxAnneeDDNEtu);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeValidation() {
        String[] listFormation = {};
        Formation[] form = c.findAllFormation();
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        JPanel panel = new JPanel(false);
        modelEtu = new Zmodel(dataEtu, columnNamesEtu);
        tableEtu = new JTable(modelEtu);
        panel.setLayout(new FlowLayout());
        tableEtu.getColumnModel().getColumn(5).setResizable(false);
        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);
        //tableEtu = new JTable(dataEtu, columnNamesEtu);
        listSelectionModel = tableEtu.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());
        tableEtu.setSelectionModel(listSelectionModel);
        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));
        tableEtu.setFillsViewportHeight(true);
        JPanel checkPanel = new JPanel(new FlowLayout());
        JPanel boutonPanel = new JPanel(new FlowLayout());
        //content panes must be opaque
        tableEtu.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableEtu);
        comboBoxFormation2 = new JComboBox(listFormation);
        comboBoxFormation2.addActionListener(this);
        outputNom = new JTextField();
        outputNom.setEditable(false);
        outputPrenom = new JTextField();
        outputPrenom.setEditable(false);
        outputSexe = new JTextField();
        outputSexe.setEditable(false);
        outputEmail = new JTextField();
        outputEmail.setEditable(false);
        outputDateDeNaissance = new JTextField();
        outputDateDeNaissance.setEditable(false);
        outputPhoto = new JLabel();
        //outputPhoto.setEditable(false);
        outputDiplome = new JTextField();
        outputDiplome.setEditable(false);
        outputNationalite = new JTextField();
        outputNationalite.setEditable(false);
        outputFormation = new JTextField();
        outputFormation.setEditable(false);
        checkBoxAccept = new JCheckBox(""accept"");
        checkBoxAccept.addItemListener(this);
        checkBoxBourse = new JCheckBox(""bourse :"");
        checkBoxBourse.addItemListener(this);
        montant = new JTextField(10);
        montant.setEnabled(false);
        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, ""ENVOI"", c));
        JButton modificationEtu = new JButton(new ModificationEtuAction(this, ""MODIFIER"", c));
        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, ""SUPPRIMER"", c));
        JButton importExel = new JButton(new ExportExelAction(this, ""exporter table"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(comboBoxFormation2);
        bVert.add(scrollPane);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPrenom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputSexe);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputEmail);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDateDeNaissance);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPhoto);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDiplome);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNationalite);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputFormation);
        checkPanel.add(checkBoxAccept);
        checkPanel.add(checkBoxBourse);
        checkPanel.add(montant);
        bVert.add(checkPanel);
        boutonPanel.add(envoiAcceptBourse);
        boutonPanel.add(modificationEtu);
        boutonPanel.add(supprimeEtu);
        boutonPanel.add(importExel);
        bVert.add(boutonPanel);
        return panel;
    }

    public void actionPerformed(ActionEvent e) {
        System.out.println(""apuis resp"");
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e) {
        Object source = e.getItemSelectable();
        if (source == checkBoxAccept) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                checkBoxBourse.setSelected(false);
                montant.setEnabled(false);
                accept = false;
            }
            System.out.println(""accept"");
            accept = true;
        } else if (source == checkBoxBourse) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                montant.setEnabled(false);
                bourse = false;
            } else {
                checkBoxAccept.setSelected(true);
                montant.setEnabled(true);
                bourse = true;
            }
        }
    }

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println(""Couldn't find file: "" + path);
            return null;
        }
    }

    /**
     * creation de la fenetre principale
     */
    private void build() {
        //On donne un titre à l'application
        setTitle(""Projet !!!!!"");
        //On donne une taille à notre fenêtre
        setSize(800, 600);
        //On centre la fenêtre sur l'écran
        setLocationRelativeTo(null);
        //On interdit la redimensionnement de la fenêtre
        setResizable(false);
        //On dit à l'application de se fermer lors du clic sur la croix
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable() {
        for (int i = 0; i < dataResp.length; i++) {
            for (int j = 0; j < dataResp[0].length; j++) {
                System.out.println(tableResp.isCellEditable(j, j));
            }
        }
    }
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {
"
752434e4-6561-42ae-a755-e174dd1d1437,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 13897 tokens (11897 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
        super();
        this.c = c;
        //matrice etudiant
        dataEtu = createListeDeroulanteEtudiant();
        //matrice formation
        dataFormation = createListeDeroulanteFormation();
        //matrice responsable
        dataResp = createListeDeroulanteResponsable();
        //On cree la barre d outil
        buildBarreDOutil();
        //On cree les onglet
        buildOnglet();
        //On initialise notre fenêtre
        build();
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable() {
        RespFormation[] resp = c.findRespForm(null, null);
        if (resp != null) {
            Object[][] matResp = new Object[resp.length][5];
            for (int i = 0; i < resp.length; i++) {
                matResp[i][0] = resp[i].getNom();
                matResp[i][1] = resp[i].getPrenom();
                matResp[i][2] = resp[i].getSex();
                matResp[i][3] = resp[i].getEmail();
                matResp[i][4] = resp[i].getTelephone();
            }
            return matResp;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation() {
        Formation[] tabFormation = c.findFormation(null, null);
        if (tabFormation != null) {
            Object[][] matFormation = new Object[tabFormation.length][4];
            for (int i = 0; i < tabFormation.length; i++) {
                matFormation[i][0] = tabFormation[i].getTitre_formation();
                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);
                matFormation[i][2] = tabFormation[i].getMontant_inscription();
                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + "" "" + tabFormation[i].getResponsable().getPrenom();
            }
            return matFormation;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant() {
        Candidat[] tabCandidat = c.findCandidat(null, null);
        if (tabCandidat != null) {
            Object[][] matEtu = new Object[tabCandidat.length][11];
            for (int i = 0; i < tabCandidat.length; i++) {
                matEtu[i][0] = tabCandidat[i].getNom();
                matEtu[i][1] = tabCandidat[i].getPrenom();
                matEtu[i][2] = tabCandidat[i].getSex();
                matEtu[i][3] = tabCandidat[i].getEmail();
                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);
                matEtu[i][5] = tabCandidat[i].getPhoto();
                matEtu[i][6] = tabCandidat[i].getDiplome();
                matEtu[i][7] = tabCandidat[i].getNationalite();
                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + ""."" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);
                if (tabCandidat[i].getAcceptation() == 1) {
                    matEtu[i][9] = ""ok"";
                } else {
                    matEtu[i][9] = ""non"";
                }
                matEtu[i][10] = tabCandidat[i].getBource();
            }
            return matEtu;
        }
        return null;
    }

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil() {
        //---------------------Creation de la barre d outil----------------------------------
        JMenuBar menuBar = new JMenuBar();
        JMenu fichier = new JMenu(""Fichier"");
        JMenu aide = new JMenu(""Aide"");
        JMenuItem quitter = new JMenuItem(new QuitterAction(""Quitter""));
        fichier.add(quitter);
        menuBar.add(fichier);
        JMenuItem aPropos = new JMenuItem(new AProposAction(this, ""A propos""));
        aide.add(aPropos);
        menuBar.add(aide);
        setJMenuBar(menuBar);
        //------------------------------------------------------------------------------------
    }

    /**
     * construit les different onglet de la fenetre
     */
    public void buildOnglet() {
        JTabbedPane tabbedPane = new JTabbedPane();
        ImageIcon icon = null;
        //1er onglet principal
        JTabbedPane tabbedPaneResp = new JTabbedPane();
        //Premiere ongle responsable
        JComponent panel10 = makeFormulaireResponsable();
        panel10.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Creer responsable"", icon, panel10, """");
        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);
        //2eme onglet responsable
        JComponent panel11 = makeModifierResponsable();
        panel11.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Modifier responsable"", icon, panel11, """");
        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.addTab(""Responsable"", icon, tabbedPaneResp, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);
        //Deuxieme ongle principale
        JTabbedPane tabbedPaneFormation = new JTabbedPane();
        //1er onglet creer formation
        JComponent panel20 = makeFormulaireFormation();
        panel20.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""Creer formation"", icon, panel20, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);
        //2eme onglet modification formaion
        JComponent panel21 = makeModifierFormation();
        panel21.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""modifier une formation"", icon, panel21, """");
        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);
        tabbedPane.addTab(""Formation"", icon, tabbedPaneFormation, """");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);
        //3eme onglet principal
        JTabbedPane tabbedPaneEtu = new JTabbedPane();
        //Troisieme ongle
        JComponent panel30 = makeFormulaireEtudiant();
        panel30.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""Inscrire etudiant"", icon, panel30, """");
        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);
        //Quatrieme ongle
        JComponent panel31 = makeValidation();
        panel31.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""validation d'inscription et de bourse."", icon, panel31, """");
        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);
        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);
        tabbedPane.addTab(""Etudiant"", icon, scrollpaneEtu, """");
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);
        //Add the tabbed pane to this panel.
        add(tabbedPane);
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        Box bHori = Box.createHorizontalBox();
        bVert.add(bHori);
        JComponent formText = makeFormultext();
        JComponent formTextField = makeFormulTextField();
        bHori.add(formText);
        bHori.add(formTextField);
        return panel;
    }

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext() {
        JPanel panel = new JPanel(false);
        JLabel nomResponsable = new JLabel(""Nom : *"");
        JLabel prenomResponsable = new JLabel(""Prenom : *"");
        JLabel sexeResponsable = new JLabel(""Sexe :"");
        JLabel emailResponsable = new JLabel(""Email :"");
        JLabel telResponsable = new JLabel(""Telephone :"");
        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomResponsable);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(prenomResponsable);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(sexeResponsable);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(emailResponsable);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(telResponsable);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormResp);
        return panel;
    }

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField() {
        String[] sexeResponsable = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomResponsable = new JTextField(10);
        textFieldPrenomResponsable = new JTextField(10);
        comboBoxSexeResponsable = new JComboBox(sexeResponsable);
        textFieldEmailResponsable = new JTextField(10);
        textFieldTelResponsable = new JTextField(10);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomResponsable);
        bVert.add(textFieldPrenomResponsable);
        bVert.add(comboBoxSexeResponsable);
        bVert.add(textFieldEmailResponsable);
        bVert.add(textFieldTelResponsable);
        return panel;
    }

    JComponent makeModifierResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelResp = new Zmodel(dataResp, columnNamesResp);
        tableResp = new JTable(modelResp);
        listSelectionModel = tableResp.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());
        tableResp.setSelectionModel(listSelectionModel);
        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableResp.setFillsViewportHeight(true);
        //content panes must be opaque
        tableResp.setOpaque(true);
        outputNomResp = new JTextField();
        outputNomResp.setEditable(false);
        outputPrenomResp = new JTextField();
        outputPrenomResp.setEditable(false);
        outputSexeResp = new JTextField();
        outputSexeResp.setEditable(false);
        outputEmailResp = new JTextField();
        outputEmailResp.setEditable(false);
        outputTelResp = new JTextField();
        outputTelResp.setEditable(false);
        JButton envoiResp = new JButton(new EnvoiRespAction(this, ""Envoi"", c));
        JButton modifierResp = new JButton(new ModifierRespAction(this, ""Modifier"", c));
        JButton supprimerResp = new JButton(new SupprRespAction(this, ""Supprimer"", c));
        bVert.add(new JScrollPane(tableResp));
        //bVert.add(scrollPane);
        bVert.add(outputNomResp);
        bVert.add(outputPrenomResp);
        bVert.add(outputSexeResp);
        bVert.add(outputEmailResp);
        bVert.add(outputTelResp);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiResp);
        boutonPanel.add(modifierResp);
        boutonPanel.add(supprimerResp);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le dexieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeFormulaireFormation() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextFormation = makeFormultextFormation();
        JComponent formTextFieldFormation = makeFormulTextFieldFormation();
        bHori.add(formTextFormation);
        bHori.add(formTextFieldFormation);
        return panel;
    }

    JComponent makeFormultextFormation() {
        JPanel panel = new JPanel(false);
        JLabel titreDeLaFormation = new JLabel(""Nom : *"");
        JLabel dateLimite = new JLabel(""Date limite : *"");
        JLabel prixDeLaFormation = new JLabel(""Prix de la formation : *"");
        JLabel responsableDeLaFormation = new JLabel(""Responsable : *"");
        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(Box.createVerticalStrut(0));
        bVert.add(titreDeLaFormation);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(dateLimite);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(prixDeLaFormation);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(responsableDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormFormation);
        return panel;
    }

    JComponent makeFormulTextFieldFormation() {
        Identite[] idresp = c.findRespForm(null, null);
        String[] listResponsable = {};
        if (idresp != null) {
            listResponsable = new String[idresp.length];
            for (int i = 0; i < listResponsable.length; i++) {
                listResponsable[i] = idresp[i].getNom() + "" "" + idresp[i].getPrenom();
            }
        }
        JPanel panel = new JPanel(false);
        textFieldTitreFormation = new JTextField(10);
        comboBoxDateLimiteFormation = makeDateDeLaFormation();
        textFieldPrixDeLaFormation = new JTextField(10);
        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);
        Box bVert2 = Box.createVerticalBox();
        panel.add(bVert2);
        bVert2.add(textFieldTitreFormation);
        bVert2.add(comboBoxDateLimiteFormation);
        bVert2.add(textFieldPrixDeLaFormation);
        bVert2.add(comboBoxResponsableDeLaFormation);
        return panel;
    }

    JComponent makeDateDeLaFormation() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jour = new String[31];
        String[] mois = new String[12];
        String[] annee = new String[100];
        for (int i = 0; i < 31; i++) {
            jour[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            mois[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            annee[i] = String.valueOf(i + 2009);
        }
        comboBoxJourDLM = new JComboBox(jour);
        comboBoxMoisDLM = new JComboBox(mois);
        comboBoxAnneeDLM = new JComboBox(annee);
        panel.add(comboBoxJourDLM);
        panel.add(comboBoxMoisDLM);
        panel.add(comboBoxAnneeDLM);
        return panel;
    }

    JComponent makeModifierFormation() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelForm = new Zmodel(dataFormation, columnNamesFormation);
        tableFormation = new JTable(modelForm);
        listSelectionModel = tableFormation.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());
        tableFormation.setSelectionModel(listSelectionModel);
        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableFormation.setFillsViewportHeight(true);
        //content panes must be opaque
        tableFormation.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableFormation);
        outputTitreFormation = new JTextField();
        outputTitreFormation.setEditable(false);
        outputDateLimiteFormation = new JTextField();
        outputDateLimiteFormation.setEditable(false);
        outputPrixFormation = new JTextField();
        outputPrixFormation.setEditable(false);
        outputRespFormation = new JTextField();
        outputRespFormation.setEditable(false);
        titreArea = new JLabel(""cout de la formation et liste des candidatures : "");
        outputRespArea = new JTextArea(10, 10);
        outputRespArea.setColumns(20);
        outputRespArea.setLineWrap(true);
        outputRespArea.setRows(15);
        outputRespArea.setWrapStyleWord(true);
        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);
        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, ""Envoi"", c));
        JButton modifierFormation = new JButton(new ModifierFormationAction(this, ""Modifier"", c));
        JButton supprimerFormation = new JButton(new SupprFormationAction(this, ""Supprimer"", c, modifTableStockage));
        bVert.add(scrollPane);
        bVert.add(outputTitreFormation);
        bVert.add(outputDateLimiteFormation);
        bVert.add(outputPrixFormation);
        bVert.add(outputRespFormation);
        bVert.add(titreArea);
        bVert.add(scrollPane1);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiFormation);
        boutonPanel.add(modifierFormation);
        boutonPanel.add(supprimerFormation);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  *,*****************************************************************************************
     *  *********************Fin de la Creation pour le deuxieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextEtudiant = makeFormultextEtudiant();
        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();
        bHori.add(formTextEtudiant);
        bHori.add(formTextFieldEtudiant);
        return panel;
    }

    JComponent makeFormultextEtudiant() {
        JPanel panel = new JPanel(false);
        JLabel nomEtudiant = new JLabel(""Nom : *"");
        JLabel prenomEtudiant = new JLabel(""Prenom : *"");
        JLabel sexeEtudiant = new JLabel(""Sexe :"");
        JLabel emailEtudiant = new JLabel(""Email : *"");
        JLabel dateDeNaissanceEtudiant = new JLabel(""Date de naissance : *"");
        JLabel photoEtudiant = new JLabel(""Photo : *"");
        JLabel diplomeEtudiant = new JLabel(""diplome : *"");
        JLabel nationnaliteEtudiant = new JLabel(""nationalite :"");
        JLabel choixDeLaFormation = new JLabel(""Choix de la formation :"");
        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomEtudiant);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(prenomEtudiant);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(sexeEtudiant);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(emailEtudiant);
        bVert.add(Box.createVerticalStrut(13));
        bVert.add(dateDeNaissanceEtudiant);
        bVert.add(Box.createVerticalStrut(15));
        bVert.add(photoEtudiant);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(diplomeEtudiant);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(nationnaliteEtudiant);
        bVert.add(Box.createVerticalStrut(7));
        bVert.add(choixDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormEtudiant);
        return panel;
    }

    JComponent makeFormulTextFieldEtudiant() {
        Formation[] form = c.findAllFormation();
        String[] listFormation = {};
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        String[] sexeEtudiant = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomEtudiant = new JTextField(10);
        textFieldPrenomEtudiant = new JTextField(10);
        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);
        textFieldEmailEtudiant = new JTextField(10);
        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();
        textFieldPhotoEtudiants = makeChargeImage();
        textFieldDiplomeEtudiant = new JTextField(10);
        textFieldNationnaliteEtudiant = new JTextField(10);
        comboBoxFormation1 = new JComboBox(listFormation);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomEtudiant);
        bVert.add(textFieldPrenomEtudiant);
        bVert.add(comboBoxSexeEtudiant);
        bVert.add(textFieldEmailEtudiant);
        bVert.add(comboBoxDateNaissanceEtudiant);
        bVert.add(textFieldPhotoEtudiants);
        bVert.add(textFieldDiplomeEtudiant);
        bVert.add(textFieldNationnaliteEtudiant);
        bVert.add(comboBoxFormation1);
        return panel;
    }

    JComponent makeChargeImage() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        textFieldPhotoEtudiant = new JTextField(10);
        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, ""CHARGER""));
        panel.add(textFieldPhotoEtudiant);
        panel.add(boutonChargeImage);
        return panel;
    }

    JComponent makeDateDeNaissance() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jourEtu = new String[31];
        String[] moisEtu = new String[12];
        String[] anneeEtu = new String[100];
        for (int i = 0; i < 31; i++) {
            jourEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            moisEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            anneeEtu[i] = String.valueOf(i + 1918);
        }
        comboBoxJourDDNEtu = new JComboBox(jourEtu);
        comboBoxMoisDDNEtu = new JComboBox(moisEtu);
        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);
        panel.add(comboBoxJourDDNEtu);
        panel.add(comboBoxMoisDDNEtu);
        panel.add(comboBoxAnneeDDNEtu);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeValidation() {
        String[] listFormation = {};
        Formation[] form = c.findAllFormation();
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        JPanel panel = new JPanel(false);
        modelEtu = new Zmodel(dataEtu, columnNamesEtu);
        tableEtu = new JTable(modelEtu);
        panel.setLayout(new FlowLayout());
        tableEtu.getColumnModel().getColumn(5).setResizable(false);
        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);
        //tableEtu = new JTable(dataEtu, columnNamesEtu);
        listSelectionModel = tableEtu.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());
        tableEtu.setSelectionModel(listSelectionModel);
        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));
        tableEtu.setFillsViewportHeight(true);
        JPanel checkPanel = new JPanel(new FlowLayout());
        JPanel boutonPanel = new JPanel(new FlowLayout());
        //content panes must be opaque
        tableEtu.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableEtu);
        comboBoxFormation2 = new JComboBox(listFormation);
        comboBoxFormation2.addActionListener(this);
        outputNom = new JTextField();
        outputNom.setEditable(false);
        outputPrenom = new JTextField();
        outputPrenom.setEditable(false);
        outputSexe = new JTextField();
        outputSexe.setEditable(false);
        outputEmail = new JTextField();
        outputEmail.setEditable(false);
        outputDateDeNaissance = new JTextField();
        outputDateDeNaissance.setEditable(false);
        outputPhoto = new JLabel();
        //outputPhoto.setEditable(false);
        outputDiplome = new JTextField();
        outputDiplome.setEditable(false);
        outputNationalite = new JTextField();
        outputNationalite.setEditable(false);
        outputFormation = new JTextField();
        outputFormation.setEditable(false);
        checkBoxAccept = new JCheckBox(""accept"");
        checkBoxAccept.addItemListener(this);
        checkBoxBourse = new JCheckBox(""bourse :"");
        checkBoxBourse.addItemListener(this);
        montant = new JTextField(10);
        montant.setEnabled(false);
        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, ""ENVOI"", c));
        JButton modificationEtu = new JButton(new ModificationEtuAction(this, ""MODIFIER"", c));
        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, ""SUPPRIMER"", c));
        JButton importExel = new JButton(new ExportExelAction(this, ""exporter table"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(comboBoxFormation2);
        bVert.add(scrollPane);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPrenom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputSexe);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputEmail);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDateDeNaissance);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPhoto);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDiplome);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNationalite);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputFormation);
        checkPanel.add(checkBoxAccept);
        checkPanel.add(checkBoxBourse);
        checkPanel.add(montant);
        bVert.add(checkPanel);
        boutonPanel.add(envoiAcceptBourse);
        boutonPanel.add(modificationEtu);
        boutonPanel.add(supprimeEtu);
        boutonPanel.add(importExel);
        bVert.add(boutonPanel);
        return panel;
    }

    public void actionPerformed(ActionEvent e) {
        System.out.println(""apuis resp"");
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e) {
        Object source = e.getItemSelectable();
        if (source == checkBoxAccept) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                checkBoxBourse.setSelected(false);
                montant.setEnabled(false);
                accept = false;
            }
            System.out.println(""accept"");
            accept = true;
        } else if (source == checkBoxBourse) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                montant.setEnabled(false);
                bourse = false;
            } else {
                checkBoxAccept.setSelected(true);
                montant.setEnabled(true);
                bourse = true;
            }
        }
    }

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println(""Couldn't find file: "" + path);
            return null;
        }
    }

    /**
     * creation de la fenetre principale
     */
    private void build() {
        //On donne un titre à l'application
        setTitle(""Projet !!!!!"");
        //On donne une taille à notre fenêtre
        setSize(800, 600);
        //On centre la fenêtre sur l'écran
        setLocationRelativeTo(null);
        //On interdit la redimensionnement de la fenêtre
        setResizable(false);
        //On dit à l'application de se fermer lors du clic sur la croix
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable() {
        for (int i = 0; i < dataResp.length; i++) {
            for (int j = 0; j < dataResp[0].length; j++) {
                System.out.println(tableResp.isCellEditable(j, j));
            }
        }
    }
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {
"
cmpl-6twSAKv8UfG4VDmpkK1Ejr2OGT8GQ,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java,50.570194721221924,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
*/
class ModifTableStockage_0Test {","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
*/
class ModifTableStockage_0Test {

	/**
	 * Test case for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
	 * It tests the case where the table is empty.
	 */
	@Test
	void testAjouterColonne_0() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterColonne(""Nom"", String.class);
		assertEquals(1, tableS.getColumnCount());
		assertEquals(1, tableS.getRowCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(null, tableS.getValueAt(0, 0));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
	 * It tests the case where the table has one column.
	 */
	@Test
	void testAjouterColonne_1() {
		TableStockage ts = new TableStockage(1, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Jean"", 0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterColonne(""Prenom"", String.class);
		assertEquals(2, tableS.getColumnCount());
		assertEquals(1, tableS.getRowCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(""Jean"", tableS.getValueAt(0, 0));
		assertEquals(null, tableS.getValueAt(0, 1));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
	 * It tests the case where the table has two columns.
	 */
	@Test
	void testAjouterColonne_2() {
		TableStockage ts = new TableStockage(1, 2);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setValueAt(""Jean"", 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterColonne(""Age"", Integer.class);
		assertEquals(3, tableS.getColumnCount());
		assertEquals(1, tableS.getRowCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Age"", tableS.getColumnName(2));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Integer.class, tableS.getColumnClass(2));
		assertEquals(""Jean"", tableS.getValueAt(0, 0));
		assertEquals(""Dupont"", tableS.getValueAt(0, 1));
		assertEquals(null, tableS.getValueAt(0, 2));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
	 * It tests the case where the table has three columns.
	 */
	@Test
	void testAjouterColonne_3() {
		TableStockage ts = new TableStockage(1, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setValueAt(""Jean"", 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(new Integer(20), 0, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterColonne(""Adresse"", String.class);
		assertEquals(4, tableS.getColumnCount());
		assertEquals(1, tableS.getRowCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Age"", tableS.getColumnName(2));
		assertEquals(""Adresse"", tableS.getColumnName(3));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Integer.class, tableS.getColumnClass(2));
		assertEquals(String.class, tableS.getColumnClass(3));
		assertEquals(""Jean"", tableS.getValueAt(0, 0));
		assertEquals(""Dupont"", tableS.getValueAt(0, 1));
		assertEquals(new Integer(20), tableS.getValueAt(0, 2));
		assertEquals(null, tableS.getValueAt(0, 3));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#ajouterColonne(String, Class)} method.
	 * It tests the case where the table has four columns.
	 */
	@Test
	void testAjouterColonne_4() {
		TableStockage ts = new TableStockage(1, 4);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setColumnName(3, ""Adresse"");
		ts.setValueAt(""Jean"", 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(new Integer(20), 0, 2);
		ts.setValueAt(""1 rue de la paix"", 0, 3);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterColonne(""Telephone"", String.class);
		assertEquals(5, tableS.getColumnCount());
		assertEquals(1, tableS.getRowCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Age"", tableS.getColumnName(2));
		assertEquals(""Adresse"", tableS.getColumnName(3));
		assertEquals(""Telephone"", tableS.getColumnName(4));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Integer.class, tableS.getColumnClass(2));
		assertEquals(String.class, tableS.getColumnClass(3));
		assertEquals(String.class, tableS.getColumnClass(4));
		assertEquals(""Jean"", tableS.getValueAt(0, 0));
		assertEquals(""Dupont"", tableS.getValueAt(0, 1));
		assertEquals(new Integer(20), tableS.getValueAt(0, 2));
		assertEquals(""1 rue de la paix"", tableS.getValueAt(0, 3"
cmpl-6twTDDuHxnOO5cLcw8BKOBE2MLfSn,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,54.68600082397461,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_1Test {","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_1Test {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	void testAjouterLigne_1() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(1, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one row.
	*/
	@Test
	void testAjouterLigne_2() {
		TableStockage ts = new TableStockage(1, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(2, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two rows.
	*/
	@Test
	void testAjouterLigne_3() {
		TableStockage ts = new TableStockage(2, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(3, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three rows.
	*/
	@Test
	void testAjouterLigne_4() {
		TableStockage ts = new TableStockage(3, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(4, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has four rows.
	*/
	@Test
	void testAjouterLigne_5() {
		TableStockage ts = new TableStockage(4, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(5, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has five rows.
	*/
	@Test
	void testAjouterLigne_6() {
		TableStockage ts = new TableStockage(5, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(6, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has six rows.
	*/
	@Test
	void testAjouterLigne_7() {
		TableStockage ts = new TableStockage(6, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(7, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has seven rows.
	*/
	@Test
	void testAjouterLigne_8() {
		TableStockage ts = new TableStockage(7, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(8, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has eight rows.
	*/
	@Test
	void testAjouterLigne_9() {
		TableStockage ts = new TableStockage(8, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(9, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has nine rows.
	*/
	@Test
	void testAjouterLigne_10() {
		TableStockage ts = new TableStockage(9, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.ajouterLigne();
		assertEquals(10, tableS.getRowCount());
	}
}

// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerLigne(int)} method.
*/
class ModifTableStockage_2Test {
		
	/**
	* Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
	* It tests the case where the table is empty.
	*/
	@Test
	void testSupprimerLigne_1() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.supprimerLigne(0);
		assertEquals(0, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
	* It tests the case where the table has one row.
	*/
	@Test
	void testSupprimerLigne_2() {
		TableStockage ts = new TableStockage(1, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.supprimerLigne(0);
		assertEquals(0, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
	* It tests the case where the table has two rows.
	*/
	@Test
	void testSupprimerLigne_3() {
		TableStockage ts = new TableStockage(2, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.supprimerLigne(0);
		assertEquals(1, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
	* It tests the case where the table has three rows.
	*/
	@Test
	void testSupprimerLigne_4() {
		TableStockage ts = new TableStockage(3, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt."
cmpl-6twUGghTwgIF4Lr82H1QIirb5lxE4,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java,50.352954626083374,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerColonne(int)} method.
*/
class ModifTableStockage_2Test {","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerColonne(int)} method.
*/
class ModifTableStockage_2Test {

	/**
	* Test case for the {@link ModifTableStockage#supprimerColonne(int)} method.
	* It tests if the method returns the expected TableStockage when the given index is 0.
	*/
	@Test
	void testSupprimerColonne_0() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setValueAt(""valeur1"", 0, 0);
		ts.setValueAt(""valeur2"", 0, 1);
		ts.setValueAt(""valeur3"", 1, 0);
		ts.setValueAt(""valeur4"", 1, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage ts2 = mt.supprimerColonne(0);
		assertEquals(ts2.getColumnName(0), ""colonne2"");
		assertEquals(ts2.getValueAt(0, 0), ""valeur2"");
		assertEquals(ts2.getValueAt(1, 0), ""valeur4"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerColonne(int)} method.
	* It tests if the method returns the expected TableStockage when the given index is 1.
	*/
	@Test
	void testSupprimerColonne_1() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setValueAt(""valeur1"", 0, 0);
		ts.setValueAt(""valeur2"", 0, 1);
		ts.setValueAt(""valeur3"", 1, 0);
		ts.setValueAt(""valeur4"", 1, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage ts2 = mt.supprimerColonne(1);
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getValueAt(0, 0), ""valeur1"");
		assertEquals(ts2.getValueAt(1, 0), ""valeur3"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerColonne(int)} method.
	* It tests if the method returns the expected TableStockage when the given index is 2.
	*/
	@Test
	void testSupprimerColonne_2() {
		TableStockage ts = new TableStockage(2, 3);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setValueAt(""valeur1"", 0, 0);
		ts.setValueAt(""valeur2"", 0, 1);
		ts.setValueAt(""valeur3"", 0, 2);
		ts.setValueAt(""valeur4"", 1, 0);
		ts.setValueAt(""valeur5"", 1, 1);
		ts.setValueAt(""valeur6"", 1, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage ts2 = mt.supprimerColonne(2);
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getValueAt(0, 0), ""valeur1"");
		assertEquals(ts2.getValueAt(0, 1), ""valeur2"");
		assertEquals(ts2.getValueAt(1, 0), ""valeur4"");
		assertEquals(ts2.getValueAt(1, 1), ""valeur5"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerColonne(int)} method.
	* It tests if the method returns the expected TableStockage when the given index is 3.
	*/
	@Test
	void testSupprimerColonne_3() {
		TableStockage ts = new TableStockage(2, 4);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setValueAt(""valeur1"", 0, 0);
		ts.setValueAt(""valeur2"", 0, 1);
		ts.setValueAt(""valeur3"", 0, 2);
		ts.setValueAt(""valeur4"", 0, 3);
		ts.setValueAt(""valeur5"", 1, 0);
		ts.setValueAt(""valeur6"", 1, 1);
		ts.setValueAt(""valeur7"", 1, 2);
		ts.setValueAt(""valeur8"", 1, 3);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage ts2 = mt.supprimerColonne(3);
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getValueAt(0, 0), ""valeur1"");
		assertEquals(ts2.getValueAt(0, 1), ""valeur2"");
		assertEquals(ts2.getValueAt(0, 2), ""valeur3"");
		assertEquals(ts2.getValueAt(1, 0), ""valeur5"");
		assertEquals(ts2.getValueAt(1, 1), ""valeur6"");
		assertEquals(ts2.getValueAt(1, 2), ""valeur7"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#supprimerColonne(int)} method.
	* It tests if the method returns the expected TableStockage when the given index is 4.
	*/
	@Test
	void testSupprimerColonne_4() {
		TableStockage ts = new TableStockage(2, 5);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setValueAt(""valeur1"", 0, 0);
		ts.setValueAt(""valeur2"", 0, 1);
		ts.setValueAt(""valeur3"", 0, 2);
		ts.setValueAt(""valeur4"", 0, 3);
		ts.setValueAt(""valeur5"", 0, 4);
		ts.setValueAt(""valeur6"", 1, 0);
		ts.setValueAt(""valeur7"", 1, 1);
		ts.setValueAt(""valeur8"", 1, 2);
		ts.setValueAt(""valeur9"", 1, 3);
		ts.setValueAt(""valeur10"", 1, 4);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage ts2 = mt.supprimerColonne(4);
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
	"
cmpl-6twVJJVm2wQeK7kP8zgHAyakSQpo3,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_3Test.java,53.367711782455444,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_3Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerLigne(int)} method.
*/
class ModifTableStockage_3Test {","// ModifTableStockage_3Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerLigne(int)} method.
*/
class ModifTableStockage_3Test {

		/**
		 * Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
		 * It tests if the method returns the expected TableStockage.
		 */
		@Test
		void testSupprimerLigne() {
				TableStockage ts = new TableStockage(3, 3);
				ts.setColumnName(0, ""Nom"");
				ts.setColumnName(1, ""Prenom"");
				ts.setColumnName(2, ""Age"");
				ts.setValueAt(""Dupont"", 0, 0);
				ts.setValueAt(""Jean"", 0, 1);
				ts.setValueAt(new Integer(20), 0, 2);
				ts.setValueAt(""Durand"", 1, 0);
				ts.setValueAt(""Pierre"", 1, 1);
				ts.setValueAt(new Integer(30), 1, 2);
				ts.setValueAt(""Martin"", 2, 0);
				ts.setValueAt(""Paul"", 2, 1);
				ts.setValueAt(new Integer(40), 2, 2);
				ModifTableStockage mt = new ModifTableStockage(ts);
				TableStockage ts2 = mt.supprimerLigne(1);
				assertEquals(ts2.getValueAt(0, 0), ""Dupont"");
				assertEquals(ts2.getValueAt(0, 1), ""Jean"");
				assertEquals(ts2.getValueAt(0, 2), new Integer(20));
				assertEquals(ts2.getValueAt(1, 0), ""Martin"");
				assertEquals(ts2.getValueAt(1, 1), ""Paul"");
				assertEquals(ts2.getValueAt(1, 2), new Integer(40));
		}
		
		/**
		 * Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
		 * It tests if the method returns the expected TableStockage.
		 */
		@Test
		void testSupprimerLigne2() {
				TableStockage ts = new TableStockage(3, 3);
				ts.setColumnName(0, ""Nom"");
				ts.setColumnName(1, ""Prenom"");
				ts.setColumnName(2, ""Age"");
				ts.setValueAt(""Dupont"", 0, 0);
				ts.setValueAt(""Jean"", 0, 1);
				ts.setValueAt(new Integer(20), 0, 2);
				ts.setValueAt(""Durand"", 1, 0);
				ts.setValueAt(""Pierre"", 1, 1);
				ts.setValueAt(new Integer(30), 1, 2);
				ts.setValueAt(""Martin"", 2, 0);
				ts.setValueAt(""Paul"", 2, 1);
				ts.setValueAt(new Integer(40), 2, 2);
				ModifTableStockage mt = new ModifTableStockage(ts);
				TableStockage ts2 = mt.supprimerLigne(0);
				assertEquals(ts2.getValueAt(0, 0), ""Durand"");
				assertEquals(ts2.getValueAt(0, 1), ""Pierre"");
				assertEquals(ts2.getValueAt(0, 2), new Integer(30));
				assertEquals(ts2.getValueAt(1, 0), ""Martin"");
				assertEquals(ts2.getValueAt(1, 1), ""Paul"");
				assertEquals(ts2.getValueAt(1, 2), new Integer(40));
		}
		
		/**
		 * Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
		 * It tests if the method returns the expected TableStockage.
		 */
		@Test
		void testSupprimerLigne3() {
				TableStockage ts = new TableStockage(3, 3);
				ts.setColumnName(0, ""Nom"");
				ts.setColumnName(1, ""Prenom"");
				ts.setColumnName(2, ""Age"");
				ts.setValueAt(""Dupont"", 0, 0);
				ts.setValueAt(""Jean"", 0, 1);
				ts.setValueAt(new Integer(20), 0, 2);
				ts.setValueAt(""Durand"", 1, 0);
				ts.setValueAt(""Pierre"", 1, 1);
				ts.setValueAt(new Integer(30), 1, 2);
				ts.setValueAt(""Martin"", 2, 0);
				ts.setValueAt(""Paul"", 2, 1);
				ts.setValueAt(new Integer(40), 2, 2);
				ModifTableStockage mt = new ModifTableStockage(ts);
				TableStockage ts2 = mt.supprimerLigne(2);
				assertEquals(ts2.getValueAt(0, 0), ""Dupont"");
				assertEquals(ts2.getValueAt(0, 1), ""Jean"");
				assertEquals(ts2.getValueAt(0, 2), new Integer(20));
				assertEquals(ts2.getValueAt(1, 0), ""Durand"");
				assertEquals(ts2.getValueAt(1, 1), ""Pierre"");
				assertEquals(ts2.getValueAt(1, 2), new Integer(30));
		}
		
		/**
		 * Test case for the {@link ModifTableStockage#supprimerLigne(int)} method.
		 * It tests if the method returns the expected TableStockage.
		 */
		@Test
		void testSupprimerLigne4() {
				TableStockage ts = new TableStockage(3, 3);
				ts.setColumnName(0, ""Nom"");
				ts.setColumnName(1, ""Prenom"");
				ts.setColumnName(2, ""Age"");
				ts.setValueAt(""Dupont"", 0, 0);
				ts.setValueAt(""Jean"", 0, 1);
				ts.setValueAt(new Integer(20), 0, 2);
				ts.setValueAt(""Durand"", 1, 0);
				ts.setValueAt(""Pierre"", 1, 1);
				ts.setValueAt(new Integer(30), 1, 2);
				ts.setValueAt(""Martin"", 2, 0);
				ts.setValueAt(""Paul"", 2, 1);
				ts.setValueAt(new Integer(40), 2, 2);
				ModifTableStockage mt = new ModifTableStockage(ts);
				TableStockage ts2 = mt.supprimerLigne(1);
				assertEquals(ts2.getValueAt(0, 0), ""Dupont"");
				assertEquals(ts2.getValueAt(0, 1), ""Jean"");
				assertEquals(ts2.getValueAt(0, 2), new Integer(20));
				assertEquals(ts2.getValueAt(1, 0), ""Martin"");
				assertEquals(ts2.getValueAt(1, 1), ""Paul"");
				assertEquals(ts2.getValueAt(1, 2), new Integer(40));
		}
		
		/**
		 * Test case for the {"
cmpl-6twWMvmz9OpYkhcEoX5kezyTuKBh6,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_4Test.java,48.777974367141724,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_4Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#separerColonne(int)} method.
*/
class ModifTableStockage_4Test {","// ModifTableStockage_4Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#separerColonne(int)} method.
*/
class ModifTableStockage_4Test {

	/**
	 * Test case for {@link ModifTableStockage#separerColonne(int)} method.
	 * Test data:
	 * <ul>
	 * <li>TableStockage:
	 * <table border=""1"">
	 * <tr><td>Nom</td><td>Prenom</td><td>Age</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * </table>
	 * </li>
	 * <li>indice: 0</li>
	 * </ul>
	 * Expected result:
	 * <ul>
	 * <li>TableStockage:
	 * <table border=""1"">
	 * <tr><td>Nom</td><td>Prenom</td><td>Age</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * </table>
	 * </li>
	 * </ul>
	 */
	@Test
	void testSeparerColonne_1() {
		TableStockage ts = new TableStockage(5, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(25, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(30, 1, 2);
		ts.setValueAt(""Dupont"", 2, 0);
		ts.setValueAt(""Jean"", 2, 1);
		ts.setValueAt(25, 2, 2);
		ts.setValueAt(""Durand"", 3, 0);
		ts.setValueAt(""Pierre"", 3, 1);
		ts.setValueAt(30, 3, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.separerColonne(0);
		assertEquals(ts.getColumnName(0), tableS.getColumnName(0));
		assertEquals(ts.getColumnName(1), tableS.getColumnName(1));
		assertEquals(ts.getColumnName(2), tableS.getColumnName(2));
		assertEquals(ts.getValueAt(0, 0), tableS.getValueAt(0, 0));
		assertEquals(ts.getValueAt(0, 1), tableS.getValueAt(0, 1));
		assertEquals(ts.getValueAt(0, 2), tableS.getValueAt(0, 2));
		assertEquals(ts.getValueAt(1, 0), tableS.getValueAt(1, 0));
		assertEquals(ts.getValueAt(1, 1), tableS.getValueAt(1, 1));
		assertEquals(ts.getValueAt(1, 2), tableS.getValueAt(1, 2));
		assertEquals(ts.getValueAt(2, 0), tableS.getValueAt(2, 0));
		assertEquals(ts.getValueAt(2, 1), tableS.getValueAt(2, 1));
		assertEquals(ts.getValueAt(2, 2), tableS.getValueAt(2, 2));
		assertEquals(ts.getValueAt(3, 0), tableS.getValueAt(3, 0));
		assertEquals(ts.getValueAt(3, 1), tableS.getValueAt(3, 1));
		assertEquals(ts.getValueAt(3, 2), tableS.getValueAt(3, 2));
	}
	
	/**
	 * Test case for {@link ModifTableStockage#separerColonne(int)} method.
	 * Test data:
	 * <ul>
	 * <li>TableStockage:
	 * <table border=""1"">
	 * <tr><td>Nom</td><td>Prenom</td><td>Age</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * </table>
	 * </li>
	 * <li>indice: 1</li>
	 * </ul>
	 * Expected result:
	 * <ul>
	 * <li>TableStockage:
	 * <table border=""1"">
	 * <tr><td>Nom</td><td>Prenom</td><td>Age</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * <tr><td>Dupont</td><td>Jean</td><td>25</td></tr>
	 * <tr><td>Durand</td><td>Pierre</td><td>30</td></tr>
	 * </table>
	 * </li>
	 * </ul>
	 */
	@Test
	void testSeparerColonne_2() {
		TableStockage ts = new TableStockage(5, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(25, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(30, 1, 2);
		ts.setValueAt(""Dupont"", 2, 0);
		ts.setValueAt(""Jean"", 2, 1);
		ts.setValueAt(25, 2, 2);
		ts.setValueAt(""Durand"", 3, 0);
		ts.setValueAt(""Pierre"", 3, 1);
		ts.setValueAt(30, 3, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.separerColonne(1);
		assertEquals(ts.getColumnName(0), tableS.getColumnName(0));
		assertEquals(ts.getColumnName(1), tableS.getColumnName(1));
		assertEquals(ts.getColumnName(2), tableS.getColumnName(2));
		assertEquals(ts.getValueAt(0, 0), tableS.getValueAt(0, 0));
		assertEquals(ts.getValueAt(0, 1), tableS.getValueAt(0, 1));
		assertEquals(ts.getValueAt("
cmpl-6twXPBb2w9OIMyQEQyIYCukBaIbDm,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_5Test.java,46.00907635688782,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_5Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
*/
class ModifTableStockage_5Test {","// ModifTableStockage_5Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
*/
class ModifTableStockage_5Test {

	/**
	 * Test case for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
	 * It tests the method with a table with one column.
	 */
	@Test
	void testFusionnerColonnes_1() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.fusionnerColonnes(0);
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
	 * It tests the method with a table with two columns.
	 */
	@Test
	void testFusionnerColonnes_2() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ts.setValueAt(""Rol"", 0, 1);
		ts.setValueAt(""Elsa"", 1, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.fusionnerColonnes(0);
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom Prenom"", tableS.getColumnName(0));
		assertEquals(""Elsa Rol"", tableS.getValueAt(0, 0));
		assertEquals(""Rol Elsa"", tableS.getValueAt(1, 0));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
	 * It tests the method with a table with three columns.
	 */
	@Test
	void testFusionnerColonnes_3() {
		TableStockage ts = new TableStockage(2, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ts.setValueAt(""Rol"", 0, 1);
		ts.setValueAt(""Elsa"", 1, 1);
		ts.setValueAt(""20"", 0, 2);
		ts.setValueAt(""20"", 1, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.fusionnerColonnes(0);
		assertEquals(2, tableS.getColumnCount());
		assertEquals(""Nom Prenom"", tableS.getColumnName(0));
		assertEquals(""Age"", tableS.getColumnName(1));
		assertEquals(""Elsa Rol"", tableS.getValueAt(0, 0));
		assertEquals(""Rol Elsa"", tableS.getValueAt(1, 0));
		assertEquals(""20"", tableS.getValueAt(0, 1));
		assertEquals(""20"", tableS.getValueAt(1, 1));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
	 * It tests the method with a table with four columns.
	 */
	@Test
	void testFusionnerColonnes_4() {
		TableStockage ts = new TableStockage(2, 4);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setColumnName(3, ""Sexe"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ts.setValueAt(""Rol"", 0, 1);
		ts.setValueAt(""Elsa"", 1, 1);
		ts.setValueAt(""20"", 0, 2);
		ts.setValueAt(""20"", 1, 2);
		ts.setValueAt(""F"", 0, 3);
		ts.setValueAt(""F"", 1, 3);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.fusionnerColonnes(0);
		assertEquals(3, tableS.getColumnCount());
		assertEquals(""Nom Prenom"", tableS.getColumnName(0));
		assertEquals(""Age"", tableS.getColumnName(1));
		assertEquals(""Sexe"", tableS.getColumnName(2));
		assertEquals(""Elsa Rol"", tableS.getValueAt(0, 0));
		assertEquals(""Rol Elsa"", tableS.getValueAt(1, 0));
		assertEquals(""20"", tableS.getValueAt(0, 1));
		assertEquals(""20"", tableS.getValueAt(1, 1));
		assertEquals(""F"", tableS.getValueAt(0, 2));
		assertEquals(""F"", tableS.getValueAt(1, 2));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#fusionnerColonnes(int)} method.
	 * It tests the method with a table with five columns.
	 */
	@Test
	void testFusionnerColonnes_5() {
		TableStockage ts = new TableStockage(2, 5);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setColumnName(3, ""Sexe"");
		ts.setColumnName(4, ""Adresse"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ts.setValueAt(""Rol"", 0, 1);
		ts.setValueAt(""Elsa"", 1, 1);
		ts.setValueAt(""20"", 0, 2);
		ts.setValueAt(""20"", 1, 2);
		ts.setValueAt(""F"", 0, 3);
		ts.setValueAt(""F"", 1, 3);
		ts.setValueAt(""Nice"", 0, 4);
		ts.setValueAt(""Nice"", 1, 4);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.fusionnerColonnes(0);
		assertEquals(4, tableS.getColumnCount());
		assertEquals(""Nom Prenom"", tableS.getColumnName(0));
		assertEquals(""Age"", tableS.getColumnName(1));
		assertEquals(""Sexe"", tableS.getColumnName(2));
		assertEquals(""Adresse"", tableS.getColumnName(3));
		assertEquals(""Elsa Rol"", tableS.getValueAt(0, 0));
		assertEquals(""Rol Elsa"", tableS.getValueAt(1, 0));
		assertEquals(""20"", tableS.getValueAt(0, 1));
		assertEquals(""20"", tableS.getValueAt(1, 1));
		assertEquals(""F"", tableS.get"
cmpl-6twYSe0Zv2IvmxyATgbdRpTCBf2Bf,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_6Test.java,51.36755704879761,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_6Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_6Test {","// ModifTableStockage_6Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_6Test {

	/**
	 * Test case for the {@link ModifTableStockage#colonneMail()} method.
	 * It tests the case where the table is empty.
	 */
	@Test
	void testColonneMail_1() {
		TableStockage ts = new TableStockage(1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.colonneMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Envoyer E-Mail a:"", tableS.getColumnName(0));
		assertEquals(Boolean.class, tableS.getColumnClass(0));
		assertEquals(true, tableS.getValueAt(0, 0));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#colonneMail()} method.
	 * It tests the case where the table has one column.
	 */
	@Test
	void testColonneMail_2() {
		TableStockage ts = new TableStockage(1, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Dupont"", 0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.colonneMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(2, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Envoyer E-Mail a:"", tableS.getColumnName(1));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(Boolean.class, tableS.getColumnClass(1));
		assertEquals(""Dupont"", tableS.getValueAt(0, 0));
		assertEquals(true, tableS.getValueAt(0, 1));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#colonneMail()} method.
	 * It tests the case where the table has two columns.
	 */
	@Test
	void testColonneMail_3() {
		TableStockage ts = new TableStockage(1, 2);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.colonneMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(3, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Envoyer E-Mail a:"", tableS.getColumnName(2));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Boolean.class, tableS.getColumnClass(2));
		assertEquals(""Dupont"", tableS.getValueAt(0, 0));
		assertEquals(""Jean"", tableS.getValueAt(0, 1));
		assertEquals(true, tableS.getValueAt(0, 2));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#colonneMail()} method.
	 * It tests the case where the table has three columns.
	 */
	@Test
	void testColonneMail_4() {
		TableStockage ts = new TableStockage(1, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(new Integer(20), 0, 2);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.colonneMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(4, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Age"", tableS.getColumnName(2));
		assertEquals(""Envoyer E-Mail a:"", tableS.getColumnName(3));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Integer.class, tableS.getColumnClass(2));
		assertEquals(Boolean.class, tableS.getColumnClass(3));
		assertEquals(""Dupont"", tableS.getValueAt(0, 0));
		assertEquals(""Jean"", tableS.getValueAt(0, 1));
		assertEquals(new Integer(20), tableS.getValueAt(0, 2));
		assertEquals(true, tableS.getValueAt(0, 3));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#colonneMail()} method.
	 * It tests the case where the table has four columns.
	 */
	@Test
	void testColonneMail_5() {
		TableStockage ts = new TableStockage(1, 4);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Age"");
		ts.setColumnName(3, ""Sexe"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(new Integer(20), 0, 2);
		ts.setValueAt(""M"", 0, 3);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.colonneMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(5, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Prenom"", tableS.getColumnName(1));
		assertEquals(""Age"", tableS.getColumnName(2));
		assertEquals(""Sexe"", tableS.getColumnName(3));
		assertEquals(""Envoyer E-Mail a:"", tableS.getColumnName(4));
		assertEquals(String.class, tableS.getColumnClass(0));
		assertEquals(String.class, tableS.getColumnClass(1));
		assertEquals(Integer.class, tableS.getColumnClass(2));
		assertEquals(String.class, tableS.getColumnClass(3));
		assertEquals(Boolean.class, tableS.getColumnClass(4));
		assertEquals(""Dupont"", tableS.getValueAt(0, 0));
		assertEquals(""Jean"", tableS.getValueAt(0, 1));
		assertEquals(new Integer(20), tableS.getValueAt(0, 2));
		assertEquals(""M"", tableS.getValueAt(0, 3));
		assertEquals(true, tableS.getValueAt(0, 4));
	}
	
	/**
	 * Test case for the {@link ModifTableStockage#colonne"
cmpl-6twZViCIEfv0lO8dIpJWpKXimtFjr,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_7Test.java,51.40779161453247,length,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutée a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_7Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_7Test {","// ModifTableStockage_7Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_7Test {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column.
	*/
	@Test
	void testSelectMail_1() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and one row.
	*/
	@Test
	void testSelectMail_2() {
		TableStockage ts = new TableStockage(1, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(1, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_3() {
		TableStockage ts = new TableStockage(0, 1);
		ts.setColumnName(0, ""Nom"");
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(0, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_4() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_5() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_6() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_7() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_8() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0, ""Nom"");
		ts.setValueAt(""Elsa"", 0, 0);
		ts.setValueAt(""Rol"", 1, 0);
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = mt.selectMail();
		assertEquals(2, tableS.getRowCount());
		assertEquals(1, tableS.getColumnCount());
		assertEquals(""Nom"", tableS.getColumnName(0));
		assertEquals(""Elsa"", tableS.getValueAt(0, 0));
		assertEquals(""Rol"", tableS.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one column and no row.
	*/
	@Test
	void testSelectMail_9() {
		TableStockage ts = new TableStockage(2, 1);
		ts.setColumnName(0,"
cmpl-6twaYKTPOe7aYHPC7bF7VokyZsQjj,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/TableStockage_0Test.java,38.46807551383972,length,"// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * Classe TableStockage <br>
 * Table qui stocke toutes les valeurs de type String; la premi&egrave;re
 * ligne sert de description des colonnes <br>
 * @author KOWALSKI Mathias
 */
public class TableStockage extends AbstractTableModel {

    private static final long serialVersionUID = 1L;

    private String[] nomColonnes;

    private Object[][] matrice;

    /**
     * Constructeur par d&eacute;faut
     */
    public TableStockage() {
        nomColonnes = new String[0];
        matrice = new Object[0][0];
    }

    /**
     * Nouvelle table avec nb lignes et colonnes pour initialiser
     * Attention, nbLignes en local est n-1 plus petit que le nombre
     * de lignes du tableau car la premi&egrave;re ligne sert de description
     * des colonnes
     * @param nbLignes
     * @param nbColonnes
     */
    public TableStockage(int nbLignes, int nbColonnes) {
        nomColonnes = new String[nbColonnes];
        matrice = new Object[nbLignes - 1][nbColonnes];
    }

    /**
     * Cr&eacute;e une TableStockage &agrave; partir de noms de colonnes et matrice de donn&eacute;es pr&eacute;d&eacute;finies
     * @param nomColonnes
     * @param matrice
     */
    public TableStockage(String[] nomColonnes, Object[][] matrice) {
        this.nomColonnes = nomColonnes;
        this.matrice = new Object[matrice.length][nomColonnes.length];
        for (int i = 0; i < matrice.length; i++) {
            for (int j = 0; j < nomColonnes.length; j++) {
                this.setValueAt(matrice[i][j], i, j);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#getColumnCount()
     */
    public int getColumnCount() {
        return nomColonnes.length;
    }

    /**
     * @see javax.swing.table.TableModel#getRowCount()
     */
    public int getRowCount() {
        return matrice.length;
    }

    /**
     * @see javax.swing.table.TableModel#getColumnName(int)
     */
    public String getColumnName(int columnIndex) {
        return nomColonnes[columnIndex];
    }

    /**
     * Recupere la classe des objets de la colonne (String par defaut si pas de ligne)
     * @param c
     * @return Class
     */
    public Class<?> getColumnClass(int c) {
        try {
            return getValueAt(0, c).getClass();
        } catch (NullPointerException ex) {
            return Object.class;
        }
    }

    /**
     * Change le nom d'une colonne par rapport &agrave; son index
     * @param columnIndex
     * @param contenu
     */
    public void setColumnName(int columnIndex, String contenu) {
        nomColonnes[columnIndex] = contenu;
    }

    public String[] getNomColonnes() {
        return nomColonnes;
    }

    /**
     * @see javax.swing.table.TableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return matrice[rowIndex][columnIndex];
    }

    /**
     * @see javax.swing.table.TableModel#isCellEditable(int, int)
     */
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    public void setColumnClass(int posColonne, Class<?> type) {
        if (type.equals(String.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt("""", i, posColonne);
            }
        } else if (type.equals(Boolean.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Boolean(false), i, posColonne);
            }
        } else {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Double(0), i, posColonne);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
     */
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        matrice[rowIndex][columnIndex] = value;
    }

    /**
     * Rempli la matrice contenant les donn&eacute;es par rapport aux index
     * La premi&egrave;re ligne sert de description aux colonnes
     * @param value
     * @param rowIndex
     * @param columnIndex
     */
    public void remplirMatrice(Object value, int rowIndex, int columnIndex) {
        if (rowIndex == 0) {
            nomColonnes[columnIndex] = (String) value;
        } else {
            matrice[rowIndex - 1][columnIndex] = value;
        }
    }
}
","// TableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnName(int)} method.
*/
class TableStockage_0Test {","// TableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnName(int)} method.
*/
class TableStockage_0Test {

	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 0.
	 */
	@Test
	void testGetColumnName_0() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[1];
		nomColonnes[0] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(0));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 1.
	 */
	@Test
	void testGetColumnName_1() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[2];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(1));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 2.
	 */
	@Test
	void testGetColumnName_2() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[3];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(2));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 3.
	 */
	@Test
	void testGetColumnName_3() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[4];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(3));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 4.
	 */
	@Test
	void testGetColumnName_4() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[5];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		nomColonnes[4] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(4));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 5.
	 */
	@Test
	void testGetColumnName_5() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[6];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		nomColonnes[4] = ""nomColonne"";
		nomColonnes[5] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(5));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 6.
	 */
	@Test
	void testGetColumnName_6() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[7];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		nomColonnes[4] = ""nomColonne"";
		nomColonnes[5] = ""nomColonne"";
		nomColonnes[6] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(6));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 7.
	 */
	@Test
	void testGetColumnName_7() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[8];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		nomColonnes[4] = ""nomColonne"";
		nomColonnes[5] = ""nomColonne"";
		nomColonnes[6] = ""nomColonne"";
		nomColonnes[7] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(7));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value when the column index is 8.
	 */
	@Test
	void testGetColumnName_8() {
		TableStockage tableStockage = new TableStockage();
		String[] nomColonnes = new String[9];
		nomColonnes[0] = ""nomColonne"";
		nomColonnes[1] = ""nomColonne"";
		nomColonnes[2] = ""nomColonne"";
		nomColonnes[3] = ""nomColonne"";
		nomColonnes[4] = ""nomColonne"";
		nomColonnes[5] = ""nomColonne"";
		nomColonnes[6] = ""nomColonne"";
		nomColonnes[7] = ""nomColonne"";
		nomColonnes[8] = ""nomColonne"";
		tableStockage.setNomColonnes(nomColonnes);
		assertEquals(""nomColonne"", tableStockage.getColumnName(8));
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName("
cmpl-6twbbDjtemtL0sPAdRYhJhbpwJH1G,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/TableStockage_1Test.java,41.09110617637634,length,"// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * Classe TableStockage <br>
 * Table qui stocke toutes les valeurs de type String; la premi&egrave;re
 * ligne sert de description des colonnes <br>
 * @author KOWALSKI Mathias
 */
public class TableStockage extends AbstractTableModel {

    private static final long serialVersionUID = 1L;

    private String[] nomColonnes;

    private Object[][] matrice;

    /**
     * Constructeur par d&eacute;faut
     */
    public TableStockage() {
        nomColonnes = new String[0];
        matrice = new Object[0][0];
    }

    /**
     * Nouvelle table avec nb lignes et colonnes pour initialiser
     * Attention, nbLignes en local est n-1 plus petit que le nombre
     * de lignes du tableau car la premi&egrave;re ligne sert de description
     * des colonnes
     * @param nbLignes
     * @param nbColonnes
     */
    public TableStockage(int nbLignes, int nbColonnes) {
        nomColonnes = new String[nbColonnes];
        matrice = new Object[nbLignes - 1][nbColonnes];
    }

    /**
     * Cr&eacute;e une TableStockage &agrave; partir de noms de colonnes et matrice de donn&eacute;es pr&eacute;d&eacute;finies
     * @param nomColonnes
     * @param matrice
     */
    public TableStockage(String[] nomColonnes, Object[][] matrice) {
        this.nomColonnes = nomColonnes;
        this.matrice = new Object[matrice.length][nomColonnes.length];
        for (int i = 0; i < matrice.length; i++) {
            for (int j = 0; j < nomColonnes.length; j++) {
                this.setValueAt(matrice[i][j], i, j);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#getColumnCount()
     */
    public int getColumnCount() {
        return nomColonnes.length;
    }

    /**
     * @see javax.swing.table.TableModel#getRowCount()
     */
    public int getRowCount() {
        return matrice.length;
    }

    /**
     * @see javax.swing.table.TableModel#getColumnName(int)
     */
    public String getColumnName(int columnIndex) {
        return nomColonnes[columnIndex];
    }

    /**
     * Recupere la classe des objets de la colonne (String par defaut si pas de ligne)
     * @param c
     * @return Class
     */
    public Class<?> getColumnClass(int c) {
        try {
            return getValueAt(0, c).getClass();
        } catch (NullPointerException ex) {
            return Object.class;
        }
    }

    /**
     * Change le nom d'une colonne par rapport &agrave; son index
     * @param columnIndex
     * @param contenu
     */
    public void setColumnName(int columnIndex, String contenu) {
        nomColonnes[columnIndex] = contenu;
    }

    public String[] getNomColonnes() {
        return nomColonnes;
    }

    /**
     * @see javax.swing.table.TableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return matrice[rowIndex][columnIndex];
    }

    /**
     * @see javax.swing.table.TableModel#isCellEditable(int, int)
     */
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    public void setColumnClass(int posColonne, Class<?> type) {
        if (type.equals(String.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt("""", i, posColonne);
            }
        } else if (type.equals(Boolean.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Boolean(false), i, posColonne);
            }
        } else {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Double(0), i, posColonne);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
     */
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        matrice[rowIndex][columnIndex] = value;
    }

    /**
     * Rempli la matrice contenant les donn&eacute;es par rapport aux index
     * La premi&egrave;re ligne sert de description aux colonnes
     * @param value
     * @param rowIndex
     * @param columnIndex
     */
    public void remplirMatrice(Object value, int rowIndex, int columnIndex) {
        if (rowIndex == 0) {
            nomColonnes[columnIndex] = (String) value;
        } else {
            matrice[rowIndex - 1][columnIndex] = value;
        }
    }
}
","// TableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnClass(int)} method.
*/
class TableStockage_1Test {","// TableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnClass(int)} method.
*/
class TableStockage_1Test {

	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_0() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_1() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_2() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_3() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_4() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_5() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_6() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_7() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_8() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnClass(int)}.
	 * Test method for {@link TableStockage#getColumnClass(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnClass_9() throws Exception {
		TableStockage fixture = new TableStockage();
		int c = 1;
		Class<?> result = fixture.getColumnClass(c);
		assertEquals(Object.class, result);
	}
	
}

// TableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnName(int)} method.
*/
class TableStockage_2Test {
		
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * Test method for {@link TableStockage#getColumnName(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnName_0() throws Exception {
		TableStockage fixture = new TableStockage();
		int columnIndex = 1;
		String result = fixture.getColumnName(columnIndex);
		assertEquals(null, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * Test method for {@link TableStockage#getColumnName(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnName_1() throws Exception {
		TableStockage fixture = new TableStockage();
		int columnIndex = 1;
		String result = fixture.getColumnName(columnIndex);
		assertEquals(null, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * Test method for {@link TableStockage#getColumnName(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnName_2() throws Exception {
		TableStockage fixture = new TableStockage();
		int columnIndex = 1;
		String result = fixture.getColumnName(columnIndex);
		assertEquals(null, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * Test method for {@link TableStockage#getColumnName(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnName_3() throws Exception {
		TableStockage fixture = new TableStockage();
		int columnIndex = 1;
		String result = fixture.getColumnName(columnIndex);
		assertEquals(null, result);
	}
	
	/**
	 * Test case for {@link TableStockage#getColumnName(int)}.
	 * Test method for {@link TableStockage#getColumnName(int)}.
	 * @throws Exception
	 */
	@Test
	void testGetColumnName_4() throws Exception {
		TableStockage fixture = new TableStockage();
		int columnIndex = 1;
		String result = fixture.getColumnName(columnIndex);
		assertEquals(null, result);
	}
	
	/**
	 * Test"
cmpl-6twceJ14QBNx0ySh6hnp6p4fFMkXh,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/TableStockage_2Test.java,39.997918367385864,length,"// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * Classe TableStockage <br>
 * Table qui stocke toutes les valeurs de type String; la premi&egrave;re
 * ligne sert de description des colonnes <br>
 * @author KOWALSKI Mathias
 */
public class TableStockage extends AbstractTableModel {

    private static final long serialVersionUID = 1L;

    private String[] nomColonnes;

    private Object[][] matrice;

    /**
     * Constructeur par d&eacute;faut
     */
    public TableStockage() {
        nomColonnes = new String[0];
        matrice = new Object[0][0];
    }

    /**
     * Nouvelle table avec nb lignes et colonnes pour initialiser
     * Attention, nbLignes en local est n-1 plus petit que le nombre
     * de lignes du tableau car la premi&egrave;re ligne sert de description
     * des colonnes
     * @param nbLignes
     * @param nbColonnes
     */
    public TableStockage(int nbLignes, int nbColonnes) {
        nomColonnes = new String[nbColonnes];
        matrice = new Object[nbLignes - 1][nbColonnes];
    }

    /**
     * Cr&eacute;e une TableStockage &agrave; partir de noms de colonnes et matrice de donn&eacute;es pr&eacute;d&eacute;finies
     * @param nomColonnes
     * @param matrice
     */
    public TableStockage(String[] nomColonnes, Object[][] matrice) {
        this.nomColonnes = nomColonnes;
        this.matrice = new Object[matrice.length][nomColonnes.length];
        for (int i = 0; i < matrice.length; i++) {
            for (int j = 0; j < nomColonnes.length; j++) {
                this.setValueAt(matrice[i][j], i, j);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#getColumnCount()
     */
    public int getColumnCount() {
        return nomColonnes.length;
    }

    /**
     * @see javax.swing.table.TableModel#getRowCount()
     */
    public int getRowCount() {
        return matrice.length;
    }

    /**
     * @see javax.swing.table.TableModel#getColumnName(int)
     */
    public String getColumnName(int columnIndex) {
        return nomColonnes[columnIndex];
    }

    /**
     * Recupere la classe des objets de la colonne (String par defaut si pas de ligne)
     * @param c
     * @return Class
     */
    public Class<?> getColumnClass(int c) {
        try {
            return getValueAt(0, c).getClass();
        } catch (NullPointerException ex) {
            return Object.class;
        }
    }

    /**
     * Change le nom d'une colonne par rapport &agrave; son index
     * @param columnIndex
     * @param contenu
     */
    public void setColumnName(int columnIndex, String contenu) {
        nomColonnes[columnIndex] = contenu;
    }

    public String[] getNomColonnes() {
        return nomColonnes;
    }

    /**
     * @see javax.swing.table.TableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return matrice[rowIndex][columnIndex];
    }

    /**
     * @see javax.swing.table.TableModel#isCellEditable(int, int)
     */
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    public void setColumnClass(int posColonne, Class<?> type) {
        if (type.equals(String.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt("""", i, posColonne);
            }
        } else if (type.equals(Boolean.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Boolean(false), i, posColonne);
            }
        } else {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Double(0), i, posColonne);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
     */
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        matrice[rowIndex][columnIndex] = value;
    }

    /**
     * Rempli la matrice contenant les donn&eacute;es par rapport aux index
     * La premi&egrave;re ligne sert de description aux colonnes
     * @param value
     * @param rowIndex
     * @param columnIndex
     */
    public void remplirMatrice(Object value, int rowIndex, int columnIndex) {
        if (rowIndex == 0) {
            nomColonnes[columnIndex] = (String) value;
        } else {
            matrice[rowIndex - 1][columnIndex] = value;
        }
    }
}
","// TableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getValueAt(int, int)} method.
*/
class TableStockage_2Test {","// TableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getValueAt(int, int)} method.
*/
class TableStockage_2Test {

		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_1() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_2() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_3() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_4() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_5() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_6() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_7() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_8() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_9() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
		
		/**
		* Test case for the {@link TableStockage#getValueAt(int, int)} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetValueAt_10() {
				TableStockage table = new TableStockage(2, 2);
				table.setValueAt(""test"", 0, 0);
				assertEquals(""test"", table.getValueAt(0, 0));
		}
}

// TableStockage_3Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnCount()} method.
*/
class TableStockage_3Test {
		
		/**
		* Test case for the {@link TableStockage#getColumnCount()} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetColumnCount_1() {
				TableStockage table = new TableStockage(2, 2);
				assertEquals(2, table.getColumnCount());
		}
		
		/**
		* Test case for the {@link TableStockage#getColumnCount()} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetColumnCount_2() {
				TableStockage table = new TableStockage(2, 2);
				assertEquals(2, table.getColumnCount());
		}
		
		/**
		* Test case for the {@link TableStockage#getColumnCount()} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetColumnCount_3() {
				TableStockage table = new TableStockage(2, 2);
				assertEquals(2, table.getColumnCount());
		}
		
		/**
		* Test case for the {@link TableStockage#getColumnCount()} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetColumnCount_4() {
				TableStockage table = new TableStockage(2, 2);
				assertEquals(2, table.getColumnCount());
		}
		
		/**
		* Test case for the {@link TableStockage#getColumnCount()} method.
		* This test case is used to check if the method returns the correct value.
		*/
		@Test
		void testGetColumnCount_5() {
				TableStockage table = new TableStockage(2, 2);
				assertEquals(2, table.getColumnCount());
		}
		
"
cmpl-6twdhIchFmKAN9BH6Tgvnx8JD4hHZ,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/TableStockage_3Test.java,48.233521938323975,length,"// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * Classe TableStockage <br>
 * Table qui stocke toutes les valeurs de type String; la premi&egrave;re
 * ligne sert de description des colonnes <br>
 * @author KOWALSKI Mathias
 */
public class TableStockage extends AbstractTableModel {

    private static final long serialVersionUID = 1L;

    private String[] nomColonnes;

    private Object[][] matrice;

    /**
     * Constructeur par d&eacute;faut
     */
    public TableStockage() {
        nomColonnes = new String[0];
        matrice = new Object[0][0];
    }

    /**
     * Nouvelle table avec nb lignes et colonnes pour initialiser
     * Attention, nbLignes en local est n-1 plus petit que le nombre
     * de lignes du tableau car la premi&egrave;re ligne sert de description
     * des colonnes
     * @param nbLignes
     * @param nbColonnes
     */
    public TableStockage(int nbLignes, int nbColonnes) {
        nomColonnes = new String[nbColonnes];
        matrice = new Object[nbLignes - 1][nbColonnes];
    }

    /**
     * Cr&eacute;e une TableStockage &agrave; partir de noms de colonnes et matrice de donn&eacute;es pr&eacute;d&eacute;finies
     * @param nomColonnes
     * @param matrice
     */
    public TableStockage(String[] nomColonnes, Object[][] matrice) {
        this.nomColonnes = nomColonnes;
        this.matrice = new Object[matrice.length][nomColonnes.length];
        for (int i = 0; i < matrice.length; i++) {
            for (int j = 0; j < nomColonnes.length; j++) {
                this.setValueAt(matrice[i][j], i, j);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#getColumnCount()
     */
    public int getColumnCount() {
        return nomColonnes.length;
    }

    /**
     * @see javax.swing.table.TableModel#getRowCount()
     */
    public int getRowCount() {
        return matrice.length;
    }

    /**
     * @see javax.swing.table.TableModel#getColumnName(int)
     */
    public String getColumnName(int columnIndex) {
        return nomColonnes[columnIndex];
    }

    /**
     * Recupere la classe des objets de la colonne (String par defaut si pas de ligne)
     * @param c
     * @return Class
     */
    public Class<?> getColumnClass(int c) {
        try {
            return getValueAt(0, c).getClass();
        } catch (NullPointerException ex) {
            return Object.class;
        }
    }

    /**
     * Change le nom d'une colonne par rapport &agrave; son index
     * @param columnIndex
     * @param contenu
     */
    public void setColumnName(int columnIndex, String contenu) {
        nomColonnes[columnIndex] = contenu;
    }

    public String[] getNomColonnes() {
        return nomColonnes;
    }

    /**
     * @see javax.swing.table.TableModel#getValueAt(int, int)
     */
    public Object getValueAt(int rowIndex, int columnIndex) {
        return matrice[rowIndex][columnIndex];
    }

    /**
     * @see javax.swing.table.TableModel#isCellEditable(int, int)
     */
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return true;
    }

    public void setColumnClass(int posColonne, Class<?> type) {
        if (type.equals(String.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt("""", i, posColonne);
            }
        } else if (type.equals(Boolean.class)) {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Boolean(false), i, posColonne);
            }
        } else {
            for (int i = 0; i < getRowCount(); i++) {
                setValueAt(new Double(0), i, posColonne);
            }
        }
    }

    /**
     * @see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
     */
    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        matrice[rowIndex][columnIndex] = value;
    }

    /**
     * Rempli la matrice contenant les donn&eacute;es par rapport aux index
     * La premi&egrave;re ligne sert de description aux colonnes
     * @param value
     * @param rowIndex
     * @param columnIndex
     */
    public void remplirMatrice(Object value, int rowIndex, int columnIndex) {
        if (rowIndex == 0) {
            nomColonnes[columnIndex] = (String) value;
        } else {
            matrice[rowIndex - 1][columnIndex] = value;
        }
    }
}
","// TableStockage_3Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#isCellEditable(int, int)} method.
*/
class TableStockage_3Test {","// TableStockage_3Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#isCellEditable(int, int)} method.
*/
class TableStockage_3Test {

	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 0 and the columnIndex is 0.
	*/
	@Test
	void testIsCellEditable_1() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(0, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 0 and the columnIndex is 1.
	*/
	@Test
	void testIsCellEditable_2() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(0, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 1 and the columnIndex is 0.
	*/
	@Test
	void testIsCellEditable_3() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(1, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 1 and the columnIndex is 1.
	*/
	@Test
	void testIsCellEditable_4() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(1, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 2 and the columnIndex is 0.
	*/
	@Test
	void testIsCellEditable_5() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(2, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 2 and the columnIndex is 1.
	*/
	@Test
	void testIsCellEditable_6() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(2, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 3 and the columnIndex is 0.
	*/
	@Test
	void testIsCellEditable_7() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(3, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 3 and the columnIndex is 1.
	*/
	@Test
	void testIsCellEditable_8() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(3, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 4 and the columnIndex is 0.
	*/
	@Test
	void testIsCellEditable_9() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(4, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#isCellEditable(int, int)} method.
	* This test case is used to check if the method returns true when the rowIndex is 4 and the columnIndex is 1.
	*/
	@Test
	void testIsCellEditable_10() {
		TableStockage tableStockage = new TableStockage();
		assertTrue(tableStockage.isCellEditable(4, 1));
	}
}

// TableStockage_4Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#setValueAt(Object, int, int)} method.
*/
class TableStockage_4Test {
		
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 0 and the columnIndex 0.
	*/
	@Test
	void testSetValueAt_1() {
		TableStockage tableStockage = new TableStockage();
		tableStockage.setValueAt(""test"", 0, 0);
		assertEquals(""test"", tableStockage.getValueAt(0, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 0 and the columnIndex 1.
	*/
	@Test
	void testSetValueAt_2() {
		TableStockage tableStockage = new TableStockage();
		tableStockage.setValueAt(""test"", 0, 1);
		assertEquals(""test"", tableStockage.getValueAt(0, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 1 and the columnIndex 0.
	*/
	@Test
	void testSetValueAt_3() {
		TableStockage tableStockage = new TableStockage();
		tableStockage.setValueAt(""test"", 1, 0);
		assertEquals(""test"", tableStockage.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 1 and the columnIndex 1.
	*/
	@Test
	void testSetValueAt_4() {
		TableStockage tableStockage = new TableStockage();
		tableStockage.setValueAt(""test"", 1, 1);
		assertEquals(""test"", tableStockage.getValueAt(1, 1));
	}
	
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 2 and the columnIndex 0.
	*/
	@Test
	void testSetValueAt_5() {
		TableStockage tableStockage = new TableStockage();
		tableStockage.setValueAt(""test"", 2, 0);
		assertEquals(""test"", tableStockage.getValueAt(2, 0));
	}
	
	/**
	* Test case for the {@link TableStockage#setValueAt(Object, int, int)} method.
	* This test case is used to check if the method sets the value at the rowIndex 2 and the columnIndex 1.
	*/
	@Test
	void testSetValueAt"
cmpl-6twekl9BGnUAjyZNbNngpzepOIbgK,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/Zmodel_0Test.java,50.74399781227112,length,"// Zmodel.java
/**
 */
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * @author alex
 */
public class Zmodel extends AbstractTableModel {

    /**
     */
    private static final long serialVersionUID = 1L;

    private Object[][] data;

    private String[] title;

    /**
     * Constructeur
     * @param data
     * @param title
     */
    public Zmodel(Object[][] data, String[] title) {
        this.data = data;
        this.title = title;
    }

    /**
     * Retourne le titre de la colonne à l'indice spécifé
     */
    public String getColumnName(int col) {
        return this.title[col];
    }

    /**
     * Retourne le nombre de colonnes
     */
    public int getColumnCount() {
        return this.title.length;
    }

    /**
     * Retourne le nombre de lignes
     */
    public int getRowCount() {
        return this.data.length;
    }

    /**
     * Retourne la valeur à l'emplacement spécifié
     */
    public Object getValueAt(int row, int col) {
        return this.data[row][col];
    }

    /**
     * Défini la valeur à l'emplacement spécifié
     */
    public void setValueAt(Object value, int row, int col) {
        //On interdit la modification sur certaine colonne !
        this.data[row][col] = value;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    /**
     * Retourne la classe de la donnée de la colonne
     * @param col
     */
    /*
	public Class getColumnClass(int col){
		//On retourne le type de la cellule à la colonne demandée
		//On se moque de la ligne puisque les données sur chaque ligne sont les mêmes
		//On choisit donc la première ligne
		return this.data[0][col].getClass();
	}
	*/
    /**
     * Méthode permettant de retirer une ligne du tableau
     * @param position
     */
    public void removeRow(int position) {
        int indice = 0, indice2 = 0, nbRow = this.getRowCount() - 1, nbCol = this.getColumnCount();
        Object[][] temp = new Object[nbRow][nbCol];
        System.out.println(""indice initial = "" + indice);
        for (Object[] value : this.data) {
            if (indice != position) {
                temp[indice2++] = value;
            }
            System.out.println(""Indice = "" + indice);
            indice++;
        }
        this.data = temp;
        temp = null;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    /**
     * Permet d'ajouter une ligne dans le tableau
     * @param data
     */
    public void addRow(Object[] data) {
        int indice = 0, nbRow = this.getRowCount(), nbCol = this.getColumnCount();
        Object[][] temp = this.data;
        this.data = new Object[nbRow + 1][nbCol];
        for (Object[] value : temp) this.data[indice++] = value;
        this.data[indice] = data;
        temp = null;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    public boolean isCellEditable(int row, int col) {
        return false;
    }

    /*
	@Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        
        //ici la cellule (1, 2) est non-editable
        if (rowIndex == 0 && columnIndex == 0) return false;
        
        //le reste est editable
        return true;
    }
    */
    public void afficheData(Object[][] data) {
        for (int i = 0; i < data.length; i++) {
            System.out.println();
            for (int j = 0; j < data[0].length; j++) {
                System.out.print(data[i][j]);
            }
        }
    }
}
","// Zmodel_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Zmodel}.
* It contains ten unit test cases for the {@link Zmodel#getColumnName(int)} method.
*/
class Zmodel_0Test {","// Zmodel_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Zmodel}.
* It contains ten unit test cases for the {@link Zmodel#getColumnName(int)} method.
*/
class Zmodel_0Test {

	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_0() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(0);
		
		// Verify the result
		assertEquals(""a"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_1() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(1);
		
		// Verify the result
		assertEquals(""b"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_2() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(2);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_3() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(3);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_4() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(4);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_5() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(5);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_6() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(6);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_7() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel = new Zmodel(data, title);
		
		// Execute the tested method
		String result = zmodel.getColumnName(7);
		
		// Verify the result
		assertEquals(""c"", result);
	}
	
	/**
	 * Test case for {@link Zmodel#getColumnName(int)}.
	 * This test case is used to check if the method returns the correct value.
	 */
	@Test
	void testGetColumnName_8() {
		// Initialize the inputs
		Object[][] data = new Object[][] {
			new Object[] { ""a"", ""b"", ""c"" },
			new Object[] { ""d"", ""e"", ""f"" },
			new Object[] { ""g"", ""h"", ""i"" }
		};
		String[] title = new String[] { ""a"", ""b"", ""c"" };
		Zmodel zmodel ="
cmpl-6twfnOUNpe4p2RS2miv9WilnOqlMh,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/Zmodel_1Test.java,50.619853019714355,length,"// Zmodel.java
/**
 */
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

/**
 * @author alex
 */
public class Zmodel extends AbstractTableModel {

    /**
     */
    private static final long serialVersionUID = 1L;

    private Object[][] data;

    private String[] title;

    /**
     * Constructeur
     * @param data
     * @param title
     */
    public Zmodel(Object[][] data, String[] title) {
        this.data = data;
        this.title = title;
    }

    /**
     * Retourne le titre de la colonne à l'indice spécifé
     */
    public String getColumnName(int col) {
        return this.title[col];
    }

    /**
     * Retourne le nombre de colonnes
     */
    public int getColumnCount() {
        return this.title.length;
    }

    /**
     * Retourne le nombre de lignes
     */
    public int getRowCount() {
        return this.data.length;
    }

    /**
     * Retourne la valeur à l'emplacement spécifié
     */
    public Object getValueAt(int row, int col) {
        return this.data[row][col];
    }

    /**
     * Défini la valeur à l'emplacement spécifié
     */
    public void setValueAt(Object value, int row, int col) {
        //On interdit la modification sur certaine colonne !
        this.data[row][col] = value;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    /**
     * Retourne la classe de la donnée de la colonne
     * @param col
     */
    /*
	public Class getColumnClass(int col){
		//On retourne le type de la cellule à la colonne demandée
		//On se moque de la ligne puisque les données sur chaque ligne sont les mêmes
		//On choisit donc la première ligne
		return this.data[0][col].getClass();
	}
	*/
    /**
     * Méthode permettant de retirer une ligne du tableau
     * @param position
     */
    public void removeRow(int position) {
        int indice = 0, indice2 = 0, nbRow = this.getRowCount() - 1, nbCol = this.getColumnCount();
        Object[][] temp = new Object[nbRow][nbCol];
        System.out.println(""indice initial = "" + indice);
        for (Object[] value : this.data) {
            if (indice != position) {
                temp[indice2++] = value;
            }
            System.out.println(""Indice = "" + indice);
            indice++;
        }
        this.data = temp;
        temp = null;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    /**
     * Permet d'ajouter une ligne dans le tableau
     * @param data
     */
    public void addRow(Object[] data) {
        int indice = 0, nbRow = this.getRowCount(), nbCol = this.getColumnCount();
        Object[][] temp = this.data;
        this.data = new Object[nbRow + 1][nbCol];
        for (Object[] value : temp) this.data[indice++] = value;
        this.data[indice] = data;
        temp = null;
        //Cette méthode permet d'avertir le tableau que les données ont été modifiées
        //Ce qui permet une mise à jours complète du tableau
        this.fireTableDataChanged();
    }

    public boolean isCellEditable(int row, int col) {
        return false;
    }

    /*
	@Override
    public boolean isCellEditable(int rowIndex, int columnIndex) {
        
        //ici la cellule (1, 2) est non-editable
        if (rowIndex == 0 && columnIndex == 0) return false;
        
        //le reste est editable
        return true;
    }
    */
    public void afficheData(Object[][] data) {
        for (int i = 0; i < data.length; i++) {
            System.out.println();
            for (int j = 0; j < data[0].length; j++) {
                System.out.print(data[i][j]);
            }
        }
    }
}
","// Zmodel_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Zmodel}.
* It contains ten unit test cases for the {@link Zmodel#getValueAt(int, int)} method.
*/
class Zmodel_1Test {","// Zmodel_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Zmodel}.
* It contains ten unit test cases for the {@link Zmodel#getValueAt(int, int)} method.
*/
class Zmodel_1Test {

	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the first row and the first column.
	*/
	@Test
	void testGetValueAt_1() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""1"", zmodel.getValueAt(0, 0));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the first row and the second column.
	*/
	@Test
	void testGetValueAt_2() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""2"", zmodel.getValueAt(0, 1));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the first row and the third column.
	*/
	@Test
	void testGetValueAt_3() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""3"", zmodel.getValueAt(0, 2));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the second row and the first column.
	*/
	@Test
	void testGetValueAt_4() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""4"", zmodel.getValueAt(1, 0));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the second row and the second column.
	*/
	@Test
	void testGetValueAt_5() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""5"", zmodel.getValueAt(1, 1));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the second row and the third column.
	*/
	@Test
	void testGetValueAt_6() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""6"", zmodel.getValueAt(1, 2));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the third row and the first column.
	*/
	@Test
	void testGetValueAt_7() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""7"", zmodel.getValueAt(2, 0));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the third row and the second column.
	*/
	@Test
	void testGetValueAt_8() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""8"", zmodel.getValueAt(2, 1));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the third row and the third column.
	*/
	@Test
	void testGetValueAt_9() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEquals(""9"", zmodel.getValueAt(2, 2));
	}
	
	/**
	* Test case for the {@link Zmodel#getValueAt(int, int)} method.
	* This test case checks if the method returns the correct value for the first row and the first column.
	*/
	@Test
	void testGetValueAt_10() {
		Object[][] data = new Object[][] {
			new Object[] { ""1"", ""2"", ""3"" },
			new Object[] { ""4"", ""5"", ""6"" },
			new Object[] { ""7"", ""8"", ""9"" }
		};
		String[] title = new String[] { ""A"", ""B"", ""C"" };
		Zmodel zmodel = new Zmodel(data, title);
		assertEqu"
cmpl-6twgq6LCk7SDDwYidtXqPl07ve8IM,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_0Test.java,51.45235085487366,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_0Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String, int, int, String)} method.
*/
class Controler_0Test {","// Controler_0Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String, int, int, String)} method.
*/
class Controler_0Test {

		private Controler controler;
		
		/**
		* Default constructor.
		*/
		public Controler_0Test() throws DaoFactoryException {
			controler = new Controler();
			controler.setTypeDataBase(""db4o"");
			controler.launchDatabase();
		}
		
		/**
		* Test case for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String, int, int, String)} method.
		* @throws IOException 
		*/
		@Test
		public void testCreateIdentite_0() throws IOException {
			// Test case for the createIdentite method
			// Inputs : nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation""
			// Expected result : identite = Candidat(nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation"")
			Identite identite = controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.CANDIDAT, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
			assertEquals(identite.getNom(), ""nom"");
			assertEquals(identite.getPrenom(), ""prenom"");
			assertEquals(identite.getSex(), ""sex"");
			assertEquals(identite.getEmail(), ""email"");
			assertEquals(identite.getType(), TypeIdentite.CANDIDAT);
			assertEquals(identite.getDate_naissance(), ""01/01/2000"");
			assertEquals(identite.getDiplome(), ""diplome"");
			assertEquals(identite.getPhoto(), ""photo"");
			assertEquals(identite.getNationalite(), ""nationalite"");
			assertEquals(identite.getTelephone(), ""telephone"");
			assertEquals(identite.getBource(), 0);
			assertEquals(identite.getAcceptation(), 0);
			assertEquals(identite.getFormation(), ""formation"");
		}
		
		/**
		* Test case for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String, int, int, String)} method.
		* @throws IOException 
		*/
		@Test
		public void testCreateIdentite_1() throws IOException {
			// Test case for the createIdentite method
			// Inputs : nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation""
			// Expected result : identite = Candidat(nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation"")
			Identite identite = controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.CANDIDAT, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
			assertEquals(identite.getNom(), ""nom"");
			assertEquals(identite.getPrenom(), ""prenom"");
			assertEquals(identite.getSex(), ""sex"");
			assertEquals(identite.getEmail(), ""email"");
			assertEquals(identite.getType(), TypeIdentite.CANDIDAT);
			assertEquals(identite.getDate_naissance(), ""01/01/2000"");
			assertEquals(identite.getDiplome(), ""diplome"");
			assertEquals(identite.getPhoto(), ""photo"");
			assertEquals(identite.getNationalite(), ""nationalite"");
			assertEquals(identite.getTelephone(), ""telephone"");
			assertEquals(identite.getBource(), 0);
			assertEquals(identite.getAcceptation(), 0);
			assertEquals(identite.getFormation(), ""formation"");
		}
		
		/**
		* Test case for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String, int, int, String)} method.
		* @throws IOException 
		*/
		@Test
		public void testCreateIdentite_2() throws IOException {
			// Test case for the createIdentite method
			// Inputs : nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation""
			// Expected result : identite = Candidat(nom = ""nom"", prenom = ""prenom"", sex = ""sex"", email = ""email"", type = TypeIdentite.CANDIDAT, date_naissance = ""01/01/2000"", diplome = ""diplome"", photo = ""photo"", nationalite = ""nationalite"", telephone = ""telephone"", bourse = 0, acceptation = 0, formation = ""formation"")
			Identite identite = controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.CANDIDAT, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
			assertEquals(identite.getNom(), ""nom"");
			assertEquals(identite.getPrenom(), ""prenom"");
			assertEquals(identite.getSex(), ""sex"");
			assertEquals(identite.getEmail(), ""email"");
			assertEquals(identite.getType(), TypeIdentite.CANDIDAT);
			assertEquals(identite.getDate_naissance(), ""01/01/2000"");
			assertEquals(identite.getDiplome(), ""diplome"");
			assertEquals(identite.getPhoto(), ""photo"");
			assertEquals(identite.getNationalite(), ""nationalite"");
			assertEquals(identite.getTelephone(), ""telephone"");
			assertEquals(identite.getBource(), 0);
			assertEquals(identite.getAcceptation(), 0);
			assertEquals(identite.getFormation(), ""formation"");
		}
		
		/**
		* Test case for the {@link Controler#createIdentite(String, String, String, String, TypeIdentite, String, String, String, String, String"
cmpl-6twhtmXH3SQHAL3yTOyH6FZqPnksl,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_1Test.java,50.84766745567322,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_1Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#createFormation(String, String, int, String)} method.
*/
class Controler_1Test {","// Controler_1Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#createFormation(String, String, int, String)} method.
*/
class Controler_1Test {

		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
				assertEquals(f.getDate_limite_candidature().get(Calendar.MONTH), 0);
				assertEquals(f.getDate_limite_candidature().get(Calendar.YEAR), 2010);
				assertEquals(f.getMontant_inscription(), 1000);
				assertEquals(f.getResponsable().getNom(), ""test"");
				assertEquals(f.getResponsable().getPrenom(), ""test"");
				c.deleteFormation(""test"", ""01/01/2010"");
		}
		
		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation1() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
				assertEquals(f.getDate_limite_candidature().get(Calendar.MONTH), 0);
				assertEquals(f.getDate_limite_candidature().get(Calendar.YEAR), 2010);
				assertEquals(f.getMontant_inscription(), 1000);
				assertEquals(f.getResponsable().getNom(), ""test"");
				assertEquals(f.getResponsable().getPrenom(), ""test"");
				c.deleteFormation(""test"", ""01/01/2010"");
		}
		
		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation2() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
				assertEquals(f.getDate_limite_candidature().get(Calendar.MONTH), 0);
				assertEquals(f.getDate_limite_candidature().get(Calendar.YEAR), 2010);
				assertEquals(f.getMontant_inscription(), 1000);
				assertEquals(f.getResponsable().getNom(), ""test"");
				assertEquals(f.getResponsable().getPrenom(), ""test"");
				c.deleteFormation(""test"", ""01/01/2010"");
		}
		
		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation3() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
				assertEquals(f.getDate_limite_candidature().get(Calendar.MONTH), 0);
				assertEquals(f.getDate_limite_candidature().get(Calendar.YEAR), 2010);
				assertEquals(f.getMontant_inscription(), 1000);
				assertEquals(f.getResponsable().getNom(), ""test"");
				assertEquals(f.getResponsable().getPrenom(), ""test"");
				c.deleteFormation(""test"", ""01/01/2010"");
		}
		
		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation4() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
				assertEquals(f.getDate_limite_candidature().get(Calendar.MONTH), 0);
				assertEquals(f.getDate_limite_candidature().get(Calendar.YEAR), 2010);
				assertEquals(f.getMontant_inscription(), 1000);
				assertEquals(f.getResponsable().getNom(), ""test"");
				assertEquals(f.getResponsable().getPrenom(), ""test"");
				c.deleteFormation(""test"", ""01/01/2010"");
		}
		
		/**
		 * Test case for {@link Controler#createFormation(String, String, int, String)}
		 * @throws DaoFactoryException
		 * @throws IOException
		 */
		@Test
		void testCreateFormation5() throws DaoFactoryException, IOException {
				Controler c = new Controler();
				c.setTypeDataBase(""db4o"");
				c.launchDatabase();
				Formation f = c.createFormation(""test"", ""01/01/2010"", 1000, ""test test"");
				assertEquals(f.getTitre(), ""test"");
				assertEquals(f.getDate_limite_candidature().get(Calendar.DAY_OF_MONTH), 1);
		"
cmpl-6twiw1xPSGoiPThYHj8DxPENkp8ri,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_2Test.java,52.232409715652466,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_2Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findCandidat(String, String)} method.
*/
class Controler_2Test {","// Controler_2Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findCandidat(String, String)} method.
*/
class Controler_2Test {

		private Controler controler;
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a null value for the first parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_1() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(null, ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a null value for the second parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_2() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", null);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a null value for the first and second parameters.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_3() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(null, null);
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a non-existing value for the first parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_4() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a non-existing value for the second parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_5() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with a non-existing value for the first and second parameters.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_6() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with an existing value for the first parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_7() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with an existing value for the second parameter.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_8() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with an existing value for the first and second parameters.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_9() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
		
		/**
		* Test case for the {@link Controler#findCandidat(String, String)} method.
		* This test case is used to test the method with an existing value for the first and second parameters.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindCandidat_10() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidat(""nom"", ""prenom"");
				assertEquals(0, result.length);
		}
}

// Controler_Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.Par"
cmpl-6twjznAOmzGKnFQs6MDSyiXCNPZq5,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_3Test.java,54.6844379901886,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_3Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findRespForm(String, String)} method.
*/
class Controler_3Test {","// Controler_3Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findRespForm(String, String)} method.
*/
class Controler_3Test {

		private Controler controler;
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with a null value for the first parameter.
		* The expected result is an exception.
		*/
		@Test
		void testFindRespForm_1() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				assertThrows(IllegalArgumentException.class, () -> {
						controler.findRespForm(null, ""prenom"");
				});
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with a null value for the second parameter.
		* The expected result is an exception.
		*/
		@Test
		void testFindRespForm_2() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				assertThrows(IllegalArgumentException.class, () -> {
						controler.findRespForm(""nom"", null);
				});
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with a null value for the first and second parameters.
		* The expected result is an exception.
		*/
		@Test
		void testFindRespForm_3() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				assertThrows(IllegalArgumentException.class, () -> {
						controler.findRespForm(null, null);
				});
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with a non-existing name.
		* The expected result is an empty array.
		*/
		@Test
		void testFindRespForm_4() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				assertEquals(0, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with an existing name.
		* The expected result is an array with one element.
		*/
		@Test
		void testFindRespForm_5() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
				
				assertEquals(1, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with an existing name.
		* The expected result is an array with one element.
		*/
		@Test
		void testFindRespForm_6() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
				
				assertEquals(1, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with an existing name.
		* The expected result is an array with one element.
		*/
		@Test
		void testFindRespForm_7() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
				
				assertEquals(1, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with an existing name.
		* The expected result is an array with one element.
		*/
		@Test
		void testFindRespForm_8() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
				
				assertEquals(1, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm(String, String)} method.
		* This test case is used to test the method with an existing name.
		* The expected result is an array with one element.
		*/
		@Test
		void testFindRespForm_9() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				
				controler.createIdentite(""nom"", ""prenom"", ""sex"", ""email"", TypeIdentite.FORMATEUR, ""01/01/2000"", ""diplome"", ""photo"", ""nationalite"", ""telephone"", 0, 0, ""formation"");
				
				assertEquals(1, controler.findRespForm(""nom"", ""prenom"").length);
		}
		
		/**
		* Test case for the {@link Controler#findRespForm("
cmpl-6twl2RKLvjPhv9cf6AJCt8kZ0mDSA,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_4Test.java,45.6906898021698,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_4Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findFormation(String, String)} method.
*/
class Controler_4Test {","// Controler_4Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findFormation(String, String)} method.
*/
class Controler_4Test {

		private Controler controler;
		
		/**
		* Default constructor.
		*/
		public Controler_4Test() throws DaoFactoryException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
		}
		
		/**
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* @throws IOException 
		* @throws ParseException 
		* @throws WriteException 
		* @throws RowsExceededException 
		*/
		@Test
		void testFindFormation_1() throws RowsExceededException, WriteException, ParseException, IOException {
				Formation[] formations = controler.findFormation(""Licence"", ""01/01/2000"");
				assertEquals(1, formations.length);
				assertEquals(""Licence"", formations[0].getTitre());
				assertEquals(2000, formations[0].getDate_limite_candidature().get(Calendar.YEAR));
				assertEquals(1, formations[0].getDate_limite_candidature().get(Calendar.MONTH));
				assertEquals(1, formations[0].getDate_limite_candidature().get(Calendar.DAY_OF_MONTH));
				assertEquals(1000, formations[0].getMontant_inscription());
				assertEquals(""Jean"", formations[0].getResponsable().getNom());
				assertEquals(""Dupont"", formations[0].getResponsable().getPrenom());
				assertEquals(""M"", formations[0].getResponsable().getSex());
				assertEquals(""jean.dupont@unice.fr"", formations[0].getResponsable().getEmail());
				assertEquals(""0600000000"", formations[0].getResponsable().getTelephone());
				assertEquals(TypeIdentite.FORMATEUR, formations[0].getResponsable().getType());
				assertEquals(1, formations[0].getCandidat().size());
				Candidat[] candidats = formations[0].getCandidat().toArray(new Candidat[1]);
				assertEquals(""Jean"", candidats[0].getNom());
				assertEquals(""Dupont"", candidats[0].getPrenom());
				assertEquals(""M"", candidats[0].getSex());
				assertEquals(""jean.dupont@unice.fr"", candidats[0].getEmail());
				assertEquals(2000, candidats[0].getDate_naissance().get(Calendar.YEAR));
				assertEquals(1, candidats[0].getDate_naissance().get(Calendar.MONTH));
				assertEquals(1, candidats[0].getDate_naissance().get(Calendar.DAY_OF_MONTH));
				assertEquals(""Bac"", candidats[0].getDiplome());
				assertEquals(""France"", candidats[0].getNationalite());
				assertEquals(0, candidats[0].getBource());
				assertEquals(1, candidats[0].getAcceptation());
				assertEquals(TypeIdentite.CANDIDAT, candidats[0].getType());
		}
		
		/**
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* @throws IOException 
		* @throws ParseException 
		* @throws WriteException 
		* @throws RowsExceededException 
		*/
		@Test
		void testFindFormation_2() throws RowsExceededException, WriteException, ParseException, IOException {
				Formation[] formations = controler.findFormation(""Licence"", ""01/01/2001"");
				assertEquals(1, formations.length);
				assertEquals(""Licence"", formations[0].getTitre());
				assertEquals(2001, formations[0].getDate_limite_candidature().get(Calendar.YEAR));
				assertEquals(1, formations[0].getDate_limite_candidature().get(Calendar.MONTH));
				assertEquals(1, formations[0].getDate_limite_candidature().get(Calendar.DAY_OF_MONTH));
				assertEquals(1000, formations[0].getMontant_inscription());
				assertEquals(""Jean"", formations[0].getResponsable().getNom());
				assertEquals(""Dupont"", formations[0].getResponsable().getPrenom());
				assertEquals(""M"", formations[0].getResponsable().getSex());
				assertEquals(""jean.dupont@unice.fr"", formations[0].getResponsable().getEmail());
				assertEquals(""0600000000"", formations[0].getResponsable().getTelephone());
				assertEquals(TypeIdentite.FORMATEUR, formations[0].getResponsable().getType());
				assertEquals(1, formations[0].getCandidat().size());
				Candidat[] candidats = formations[0].getCandidat().toArray(new Candidat[1]);
				assertEquals(""Jean"", candidats[0].getNom());
				assertEquals(""Dupont"", candidats[0].getPrenom());
				assertEquals(""M"", candidats[0].getSex());
				assertEquals(""jean.dupont@unice.fr"", candidats[0].getEmail());
				assertEquals(2000, candidats[0].getDate_naissance().get(Calendar.YEAR));
				assertEquals(1, candidats[0].getDate_naissance().get(Calendar.MONTH));
				assertEquals(1, candidats[0].getDate_naissance().get(Calendar.DAY_OF_MONTH));
				assertEquals(""Bac"", candidats[0].getDiplome());
				assertEquals(""France"", candidats[0].getNationalite());
				assertEquals(0, candidats[0].getBource());
				assertEquals(1, candidats[0].getAcceptation());
				assertEquals(TypeIdentite.CANDIDAT, candidats[0].getType());
		}
		
		/**
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* Test case for the {@link Controler#findFormation(String, String)} method.
		* @throws IOException 
		* @throws ParseException 
		* @throws WriteException 
		* @throws RowsExceededException 
		*/
		@Test
		void testFindFormation_3() throws RowsExceededException, WriteException, ParseException, IOException {
				Formation[] formations = controler.findFormation(""Licence"", ""01/01/2002"");
				assertEquals(1, formations.length);
				assertEquals(""Licence"", formations[0].getTitre());
				assertEquals(2002, formations[0].getDate_limite_candidature().get(Calendar.YEAR"
cmpl-6twm5ASgMDTrXVYG6Bwz8cjcc1LQO,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_5Test.java,50.359718799591064,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_5Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class Controler_5Test {","// Controler_5Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class Controler_5Test {

		private Controler controler;
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation2() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation3() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation4() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation5() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation6() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation7() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation8() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation9() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
		
		/**
		* Test case for the {@link Controler#findAllFormation()} method.
		* This test case is used to test the {@link Controler#findAllFormation()} method.
		* @throws DaoFactoryException
		* @throws IOException
		*/
		@Test
		void testFindAllFormation10() throws DaoFactoryException, IOException {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Formation[] formations = controler.findAllFormation();
				assertEquals(formations.length, 0);
		}
}

// Controler_6Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
"
cmpl-6twn82pzsLFbbD2OggWXRA14nmxKE,/EvoSuiteBenchmark/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_6Test.java,50.30021381378174,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_6Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findCandidatInFormation(String, String)} method.
*/
class Controler_6Test {","// Controler_6Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findCandidatInFormation(String, String)} method.
*/
class Controler_6Test {

		private Controler controler;
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_1() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M1"", ""01/09/2010"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_2() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M2"", ""01/09/2011"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_3() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M1"", ""01/09/2011"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_4() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M2"", ""01/09/2010"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_5() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M1"", ""01/09/2012"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_6() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M2"", ""01/09/2012"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_7() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M1"", ""01/09/2013"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_8() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M2"", ""01/09/2013"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_9() throws Exception {
				controler = new Controler();
				controler.setTypeDataBase(""db4o"");
				controler.launchDatabase();
				Candidat[] result = controler.findCandidatInFormation(""M1"", ""01/09/2014"");
				assertNotNull(result);
				assertTrue(result.length > 0);
		}
		
		/**
		* Test case for the {@link Controler#findCandidatInFormation(String, String)} method.
		* This test case is used to test the method with a valid formation name and a valid date.
		* The expected result is a non-empty array of candidates.
		*/
		@Test
		void testFindCandidatInFormation_10() throws Exception {
				controler = new Controler();
				controler.setType"
