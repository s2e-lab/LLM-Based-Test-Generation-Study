ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u32u88LZS03St1ybiLPqbiLVSQbo,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_0Test.java,49.00494575500488,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(int)} method.
*/
class ComponentInfo_0Test {","// ComponentInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(int)} method.
*/
class ComponentInfo_0Test {

		/**
		 * Test case 1 for method getField(int).
		 * 
		 * @see ComponentInfo#getField(int)
		 */
		@Test
		void testGetField_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				componentInfo.addField(new FieldInfo(), 1.0);
				componentInfo.addComponent(new ComponentInfo(), 1.0);
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setGroup(new GroupInfo());
				componentInfo.addField(fieldInfo, 1.0);
				FieldInfo result = componentInfo.getField(1);
				assertEquals(fieldInfo, result);
		}
		
		/**
		 * Test case 2 for method getField(int).
		 * 
		 * @see ComponentInfo#getField(int)
		 */
		@Test
		void testGetField_2() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				componentInfo.addField(new FieldInfo(), 1.0);
				componentInfo.addComponent(new ComponentInfo(), 1.0);
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setGroup(new GroupInfo());
				componentInfo.addField(fieldInfo, 1.0);
				FieldInfo result = componentInfo.getField(2);
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method getField(int).
		 * 
		 * @see ComponentInfo#getField(int)
		 */
		@Test
		void testGetField_3() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				componentInfo.addField(new FieldInfo(), 1.0);
				componentInfo.addComponent(new ComponentInfo(), 1.0);
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setGroup(new GroupInfo());
				componentInfo.addField(fieldInfo, 1.0);
				FieldInfo result = componentInfo.getField(0);
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getField(int).
		 * 
		 * @see ComponentInfo#getField(int)
		 */
		@Test
		void testGetField_4() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				componentInfo.addField(new FieldInfo(), 1.0);
				componentInfo.addComponent(new ComponentInfo(), 1.0);
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setGroup(new GroupInfo());
				componentInfo.addField(fieldInfo, 1.0);
				FieldInfo result = componentInfo.getField(3);
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getField(int).
		 * 
		 * @see ComponentInfo#getField(int)
		 */
		@Test
		void testGetField_5() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				componentInfo.addField(new FieldInfo(), 1.0);
				componentInfo.addComponent(new ComponentInfo(), 1.0);
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName(""name"");
				fieldInfo.setTagNumber(1);
				fieldInfo.setType(""type"");
				fieldInfo.setAbbreviation(""abbreviation"");
				fieldInfo.setDescription(""description"");
				fieldInfo.setEnumeration(""enumeration"");
				fieldInfo.setNotRequiredXml(true);
				fieldInfo.setRequired(true);
				fieldInfo.setGroup(new GroupInfo());
				componentInfo.addField(fieldInfo, 1.0);"
cmpl-6u33x3HIL3VYFqGtj6QPOfA2cMRDo,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_1Test.java,51.31231760978699,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(String)} method.
*/
class ComponentInfo_1Test {","// ComponentInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getField(String)} method.
*/
class ComponentInfo_1Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map is null.
		 * </p>
		 */
		@Test
		void testGetField_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = null;
				assertNull(componentInfo.getField(""""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map is empty.
		 * </p>
		 */
		@Test
		void testGetField_2() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				assertNull(componentInfo.getField(""""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains one element.
		 * </p>
		 */
		@Test
		void testGetField_3() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains two elements.
		 * </p>
		 */
		@Test
		void testGetField_4() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 5.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains three elements.
		 * </p>
		 */
		@Test
		void testGetField_5() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 6.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains four elements.
		 * </p>
		 */
		@Test
		void testGetField_6() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 7.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains five elements.
		 * </p>
		 */
		@Test
		void testGetField_7() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo4);
				FieldInfo fieldInfo5 = new FieldInfo();
				fieldInfo5.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo5);
				assertEquals(fieldInfo, componentInfo.getField(""""));
		}
		
		/**
		 * Test case 8.
		 * 
		 * <p>
		 * This test case checks the {@link ComponentInfo#getField(String)} method
		 * when the fieldsByName map contains six elements.
		 * </p>
		 */
		@Test
		void testGetField_8() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.fieldsByName = new TreeMap<String, FieldInfo>();
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo);
				FieldInfo fieldInfo2 = new FieldInfo();
				fieldInfo2.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo2);
				FieldInfo fieldInfo3 = new FieldInfo();
				fieldInfo3.setName("""");
				componentInfo.fieldsByName.put("""", fieldInfo3);
				FieldInfo fieldInfo4 = new FieldInfo();
				fieldInfo4.set"
cmpl-6u350o4Kbc4oL1eWnSJ91KwsDsvbU,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_2Test.java,58.5051691532135,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(int)} method.
*/
class ComponentInfo_2Test {","// ComponentInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(int)} method.
*/
class ComponentInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * @see ComponentInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setId(1);
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				ComponentInfo componentInfo2 = new ComponentInfo();
				componentInfo2.setId(2);
				componentInfo2.setName(""name2"");
				componentInfo2.setComponentType(""componentType2"");
				componentInfo2.setCategory(""category2"");
				componentInfo2.setAbbreviation(""abbreviation2"");
				componentInfo2.setNotRequiredXml(false);
				componentInfo2.setRequired(false);
				
				componentInfo.addComponent(componentInfo2, 1.0);
				
				ComponentInfo componentInfo3 = new ComponentInfo();
				componentInfo3.setId(3);
				componentInfo3.setName(""name3"");
				componentInfo3.setComponentType(""componentType3"");
				componentInfo3.setCategory(""category3"");
				componentInfo3.setAbbreviation(""abbreviation3"");
				componentInfo3.setNotRequiredXml(true);
				componentInfo3.setRequired(true);
				
				componentInfo.addComponent(componentInfo3, 2.0);
				
				ComponentInfo componentInfo4 = new ComponentInfo();
				componentInfo4.setId(4);
				componentInfo4.setName(""name4"");
				componentInfo4.setComponentType(""componentType4"");
				componentInfo4.setCategory(""category4"");
				componentInfo4.setAbbreviation(""abbreviation4"");
				componentInfo4.setNotRequiredXml(false);
				componentInfo4.setRequired(false);
				
				componentInfo.addComponent(componentInfo4, 3.0);
				
				ComponentInfo componentInfo5 = new ComponentInfo();
				componentInfo5.setId(5);
				componentInfo5.setName(""name5"");
				componentInfo5.setComponentType(""componentType5"");
				componentInfo5.setCategory(""category5"");
				componentInfo5.setAbbreviation(""abbreviation5"");
				componentInfo5.setNotRequiredXml(true);
				componentInfo5.setRequired(true);
				
				componentInfo.addComponent(componentInfo5, 4.0);
				
				ComponentInfo componentInfo6 = new ComponentInfo();
				componentInfo6.setId(6);
				componentInfo6.setName(""name6"");
				componentInfo6.setComponentType(""componentType6"");
				componentInfo6.setCategory(""category6"");
				componentInfo6.setAbbreviation(""abbreviation6"");
				componentInfo6.setNotRequiredXml(false);
				componentInfo6.setRequired(false);
				
				componentInfo.addComponent(componentInfo6, 5.0);
				
				ComponentInfo componentInfo7 = new ComponentInfo();
				componentInfo7.setId(7);
				componentInfo7.setName(""name7"");
				componentInfo7.setComponentType(""componentType7"");
				componentInfo7.setCategory(""category7"");
				componentInfo7.setAbbreviation(""abbreviation7"");
				componentInfo7.setNotRequiredXml(true);
				componentInfo7.setRequired(true);
				
				componentInfo.addComponent(componentInfo7, 6.0);
				
				ComponentInfo componentInfo8 = new ComponentInfo();
				componentInfo8.setId(8);
				componentInfo8.setName(""name8"");
				componentInfo8.setComponentType(""componentType8"");
				componentInfo8.setCategory(""category8"");
				componentInfo8.setAbbreviation(""abbreviation8"");
				componentInfo8.setNotRequiredXml(false);
				componentInfo8.setRequired(false);
				
				componentInfo.addComponent(componentInfo8, 7.0);
				
				ComponentInfo componentInfo9 = new ComponentInfo();
				componentInfo9.setId(9);
				componentInfo9.setName(""name9"");
				componentInfo9.setComponentType(""componentType9"");
				componentInfo9.setCategory(""category9"");
				componentInfo9.setAbbreviation(""abbreviation9"");
				componentInfo9.setNotRequiredXml(true);
				componentInfo9.setRequired(true);
				
				componentInfo.addComponent(componentInfo9, 8.0);
				
				ComponentInfo componentInfo10 = new ComponentInfo();
				componentInfo10.setId(10);
				componentInfo10.setName(""name10"");
				componentInfo10.setComponentType(""componentType10"");
				componentInfo10.setCategory(""category10"");
				componentInfo10.setAbbreviation(""abbreviation10"");
				componentInfo10.setNotRequiredXml(false);
				componentInfo10.setRequired(false);
				
				componentInfo.addComponent(componentInfo10, 9.0);
				
				ComponentInfo componentInfo11 = new ComponentInfo();
				componentInfo11.setId(11);
				componentInfo11.setName(""name11"");
				componentInfo11.setComponentType(""componentType11"");
				componentInfo11.setCategory(""category11"");
				componentInfo11.setAbbreviation(""abbreviation11"");
				componentInfo11.setNotRequiredXml(true);
				componentInfo11.setRequired(true);
				
				componentInfo.addComponent(componentInfo11, 10.0);
				
				ComponentInfo componentInfo12 = new ComponentInfo();
				componentInfo12.setId(12);
				componentInfo12.setName(""name12"");
				componentInfo12.setComponentType(""componentType12"");
				componentInfo12.setCategory(""category12"");
				componentInfo12.setAbbreviation(""abbreviation12"");
				componentInfo12.setNotRequiredXml(false);
				componentInfo12.setRequired(false);
				
				componentInfo.addComponent(componentInfo12, 11.0);
				
				ComponentInfo componentInfo13 = new ComponentInfo();
				componentInfo13.setId(13);
				componentInfo13.setName(""name13"");
				componentInfo13.setComponentType(""componentType13"");
				componentInfo13.setCategory(""category13"");
				componentInfo13.setAbbreviation(""abbreviation13"");
				componentInfo13.setNotRequiredXml(true);
				componentInfo"
cmpl-6u3634j3L7peLKhluWnQK1leqsdct,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/ComponentInfo_3Test.java,56.81476712226868,length,"// ComponentInfo.java
/**
 * ComponentInfo.java 10:36:09 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Component as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class ComponentInfo implements CompositeFixInfo {

    private String name;

    private String componentType;

    private String category;

    private int id;

    private String abbreviation;

    private boolean isNotRequiredXml;

    private boolean isRequired;

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    /**
     * Returns the name
     *
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the name
     *
     * @param name - the name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the componentType
     *
     * @return the componentType
     */
    public String getComponentType() {
        return componentType;
    }

    /**
     * Modifies the componentType
     *
     * @param componentType - the componentType to set
     */
    public void setComponentType(String componentType) {
        this.componentType = componentType;
    }

    /**
     * Returns the category
     *
     * @return the category
     */
    public String getCategory() {
        return category;
    }

    /**
     * Modifies the category
     *
     * @param category - the category to set
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Returns the id
     *
     * @return the id
     */
    public int getId() {
        return id;
    }

    /**
     * Modifies the id
     *
     * @param id - the id to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the isRequired
     *
     * @return the isRequired
     */
    public boolean isRequired() {
        return isRequired;
    }

    /**
     * Modifies the isRequired
     *
     * @param isRequired - the isRequired to set
     */
    public void setRequired(boolean isRequired) {
        this.isRequired = isRequired;
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// ComponentInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_3Test {","// ComponentInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ComponentInfo}.
* It contains ten unit test cases for the {@link ComponentInfo#getComponent(String)} method.
*/
class ComponentInfo_3Test {

		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * @see ComponentInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				ComponentInfo componentInfo = new ComponentInfo();
				componentInfo.setName(""name"");
				componentInfo.setComponentType(""componentType"");
				componentInfo.setCategory(""category"");
				componentInfo.setId(1);
				componentInfo.setAbbreviation(""abbreviation"");
				componentInfo.setNotRequiredXml(true);
				componentInfo.setRequired(true);
				
				FieldInfo fieldInfo1 = new FieldInfo();
				fieldInfo1.setName(""name1"");
				fieldInfo1.setTagNumber(1);
				fieldInfo1.setType(""type1"");
				fieldInfo1.setDescription(""description1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1.setPresence(""presence1"");
				fieldInfo1.setFixVersion(""fixVersion1"");
				fieldInfo1.setComponentType(""componentType1"");
				fieldInfo1.setCategory(""category1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1.setPresence(""presence1"");
				fieldInfo1.setFixVersion(""fixVersion1"");
				fieldInfo1.setComponentType(""componentType1"");
				fieldInfo1.setCategory(""category1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1.setPresence(""presence1"");
				fieldInfo1.setFixVersion(""fixVersion1"");
				fieldInfo1.setComponentType(""componentType1"");
				fieldInfo1.setCategory(""category1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1.setPresence(""presence1"");
				fieldInfo1.setFixVersion(""fixVersion1"");
				fieldInfo1.setComponentType(""componentType1"");
				fieldInfo1.setCategory(""category1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1.setPresence(""presence1"");
				fieldInfo1.setFixVersion(""fixVersion1"");
				fieldInfo1.setComponentType(""componentType1"");
				fieldInfo1.setCategory(""category1"");
				fieldInfo1.setAbbreviation(""abbreviation1"");
				fieldInfo1.setNotRequiredXml(true);
				fieldInfo1.setRequired(true);
				fieldInfo1.setValue(""value1"");
				fieldInfo1.setEnumeration(""enumeration1"");
				fieldInfo1.setMinLength(1);
				fieldInfo1.setMaxLength(1);
				fieldInfo1.setMinValue(""minValue1"");
				fieldInfo1.setMaxValue(""maxValue1"");
				fieldInfo1.setMinInclusive(true);
				fieldInfo1.setMaxInclusive(true);
				fieldInfo1.setCharacterEncoding(""characterEncoding1"");
				fieldInfo1.setDataType(""dataType1"");
				fieldInfo1.setSemanticType(""semanticType1"");
				fieldInfo1."
cmpl-6u376DARTO4Y1awtC7u34YJPxXZuc,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java,58.32173943519592,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {","// DictionaryInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.
*/
class DictionaryInfo_0Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private List<FieldInfo> fields;
		
		private int tagNumber;
		
		private String name;
		
		private String type;
		
		private String description;
		
		private String value;
		
		private String enumType;
		
		private String[] enums;
		
		private String[] enumsDescriptions;
		
		private String[] enumsValues;
		
		private String[] enumsValuesDescriptions;
		
		private String[] enumsValuesDescriptions2;
		
		private String[] enumsValuesDescriptions3;
		
		private String[] enumsValuesDescriptions4;
		
		private String[] enumsValuesDescriptions5;
		
		private String[] enumsValuesDescriptions6;
		
		private String[] enumsValuesDescriptions7;
		
		private String[] enumsValuesDescriptions8;
		
		private String[] enumsValuesDescriptions9;
		
		private String[] enumsValuesDescriptions10;
		
		private String[] enumsValuesDescriptions11;
		
		private String[] enumsValuesDescriptions12;
		
		private String[] enumsValuesDescriptions13;
		
		private String[] enumsValuesDescriptions14;
		
		private String[] enumsValuesDescriptions15;
		
		private String[] enumsValuesDescriptions16;
		
		private String[] enumsValuesDescriptions17;
		
		private String[] enumsValuesDescriptions18;
		
		private String[] enumsValuesDescriptions19;
		
		private String[] enumsValuesDescriptions20;
		
		private String[] enumsValuesDescriptions21;
		
		private String[] enumsValuesDescriptions22;
		
		private String[] enumsValuesDescriptions23;
		
		private String[] enumsValuesDescriptions24;
		
		private String[] enumsValuesDescriptions25;
		
		private String[] enumsValuesDescriptions26;
		
		private String[] enumsValuesDescriptions27;
		
		private String[] enumsValuesDescriptions28;
		
		private String[] enumsValuesDescriptions29;
		
		private String[] enumsValuesDescriptions30;
		
		private String[] enumsValuesDescriptions31;
		
		private String[] enumsValuesDescriptions32;
		
		private String[] enumsValuesDescriptions33;
		
		private String[] enumsValuesDescriptions34;
		
		private String[] enumsValuesDescriptions35;
		
		private String[] enumsValuesDescriptions36;
		
		private String[] enumsValuesDescriptions37;
		
		private String[] enumsValuesDescriptions38;
		
		private String[] enumsValuesDescriptions39;
		
		private String[] enumsValuesDescriptions40;
		
		private String[] enumsValuesDescriptions41;
		
		private String[] enumsValuesDescriptions42;
		
		private String[] enumsValuesDescriptions43;
		
		private String[] enumsValuesDescriptions44;
		
		private String[] enumsValuesDescriptions45;
		
		private String[] enumsValuesDescriptions46;
		
		private String[] enumsValuesDescriptions47;
		
		private String[] enumsValuesDescriptions48;
		
		private String[] enumsValuesDescriptions49;
		
		private String[] enumsValuesDescriptions50;
		
		private String[] enumsValuesDescriptions51;
		
		private String[] enumsValuesDescriptions52;
		
		private String[] enumsValuesDescriptions53;
		
		private String[] enumsValuesDescriptions54;
		
		private String[] enumsValuesDescriptions55;
		
		private String[] enumsValuesDescriptions56;
		
		private String[] enumsValuesDescriptions57;
		
		private String[] enumsValuesDescriptions58;
		
		private String[] enumsValuesDescriptions59;
		
		private String[] enumsValuesDescriptions60;
		
		private String[] enumsValuesDescriptions61;
		
		private String[] enumsValuesDescriptions62;
		
		private String[] enumsValuesDescriptions63;
		
		private String[] enumsValuesDescriptions64;
		
		private String[] enumsValuesDescriptions65;
		
		private String[] enumsValuesDescriptions66;
		
		private String[] enumsValuesDescriptions67;
		
		private String[] enumsValuesDescriptions68;
		
		private String[] enumsValuesDescriptions69;
		
		private String[] enumsValuesDescriptions70;
		
		private String[] enumsValuesDescriptions71;
		
		private String[] enumsValuesDescriptions72;
		
		private String[] enumsValuesDescriptions73;
		
		private String[] enumsValuesDescriptions74;
		
		private String[] enumsValuesDescriptions75;
		
		private String[] enumsValuesDescriptions76;
		
		private String[] enumsValuesDescriptions77;
		
		private String[] enumsValuesDescriptions78;
		
		private String[] enumsValuesDescriptions79;
		
		private String[] enumsValuesDescriptions80;
		
		private String[] enumsValuesDescriptions81;
		
		private String[] enumsValuesDescriptions82;
		
		private String[] enumsValuesDescriptions83;
		
		private String[] enumsValuesDescriptions84;
		
		private String[] enumsValuesDescriptions85;
		
		private String[] enumsValuesDescriptions86;
		
		private String[] enumsValuesDescriptions87;
		
		private String[] enumsValuesDescriptions88;
		
		private String[] enumsValuesDescriptions89;
		
		private String[] enumsValuesDescriptions90;
		
		private String[] enumsValuesDescriptions91;
		
		private String[] enumsValuesDescriptions92;
		
		private String[] enumsValuesDescriptions93;
		
		private String[] enumsValuesDescriptions94;
		
		private String[] enumsValuesDescriptions95;
		
		private String[] enumsValuesDescriptions96;
		
		private String[] enumsValuesDescriptions97;
		
		private String[] enumsValuesDescriptions98;
		
		private String[] enumsValuesDescriptions99;
		
		private String[] enumsValuesDescriptions100;
		
		private String[] enumsValuesDescriptions101;
		
		private String[] enumsValuesDescriptions102;
		
		private String[] enumsValuesDescriptions103;
		
		private String[] enumsValuesDescriptions104;
		
		private String[] enumsValuesDescriptions105;
		
		private String[] enumsValuesDescriptions106;
		
		private String[] enumsValuesDescriptions107;
		
		"
cmpl-6u389m5ackig4D3SJbFl7NHXyk68r,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java,56.046003580093384,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {","// DictionaryInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.
*/
class DictionaryInfo_1Test {

		private DictionaryInfo dictionaryInfo;
		
		private FieldInfo fieldInfo;
		
		private TreeMap<String, FieldInfo> fieldsByName;
		
		private String name;
		
		private FieldInfo result;
		
		private List<FieldInfo> fields;
		
		private TreeMap<Integer, FieldInfo> fieldsByTagNumber;
		
		private int tagNumber;
		
		private TreeMap<String, ComponentInfo> componentsByName;
		
		private TreeMap<Integer, ComponentInfo> componentsById;
		
		private TreeMap<String, MessageInfo> messagesByName;
		
		private TreeMap<Integer, MessageInfo> messagesById;
		
		private String version;
		
		private int loadCount;
		
		private boolean result2;
		
		private ComponentInfo componentInfo;
		
		private List<ComponentInfo> components;
		
		private MessageInfo messageInfo;
		
		private List<MessageInfo> messages;
		
		private FieldInfo fieldInfo2;
		
		private GroupInfo groupInfo;
		
		private FieldInfo fieldInfo3;
		
		private FieldInfo fieldInfo4;
		
		private FieldInfo fieldInfo5;
		
		private FieldInfo fieldInfo6;
		
		private FieldInfo fieldInfo7;
		
		private FieldInfo fieldInfo8;
		
		private FieldInfo fieldInfo9;
		
		private FieldInfo fieldInfo10;
		
		private FieldInfo fieldInfo11;
		
		private FieldInfo fieldInfo12;
		
		private FieldInfo fieldInfo13;
		
		private FieldInfo fieldInfo14;
		
		private FieldInfo fieldInfo15;
		
		private FieldInfo fieldInfo16;
		
		private FieldInfo fieldInfo17;
		
		private FieldInfo fieldInfo18;
		
		private FieldInfo fieldInfo19;
		
		private FieldInfo fieldInfo20;
		
		private FieldInfo fieldInfo21;
		
		private FieldInfo fieldInfo22;
		
		private FieldInfo fieldInfo23;
		
		private FieldInfo fieldInfo24;
		
		private FieldInfo fieldInfo25;
		
		private FieldInfo fieldInfo26;
		
		private FieldInfo fieldInfo27;
		
		private FieldInfo fieldInfo28;
		
		private FieldInfo fieldInfo29;
		
		private FieldInfo fieldInfo30;
		
		private FieldInfo fieldInfo31;
		
		private FieldInfo fieldInfo32;
		
		private FieldInfo fieldInfo33;
		
		private FieldInfo fieldInfo34;
		
		private FieldInfo fieldInfo35;
		
		private FieldInfo fieldInfo36;
		
		private FieldInfo fieldInfo37;
		
		private FieldInfo fieldInfo38;
		
		private FieldInfo fieldInfo39;
		
		private FieldInfo fieldInfo40;
		
		private FieldInfo fieldInfo41;
		
		private FieldInfo fieldInfo42;
		
		private FieldInfo fieldInfo43;
		
		private FieldInfo fieldInfo44;
		
		private FieldInfo fieldInfo45;
		
		private FieldInfo fieldInfo46;
		
		private FieldInfo fieldInfo47;
		
		private FieldInfo fieldInfo48;
		
		private FieldInfo fieldInfo49;
		
		private FieldInfo fieldInfo50;
		
		private FieldInfo fieldInfo51;
		
		private FieldInfo fieldInfo52;
		
		private FieldInfo fieldInfo53;
		
		private FieldInfo fieldInfo54;
		
		private FieldInfo fieldInfo55;
		
		private FieldInfo fieldInfo56;
		
		private FieldInfo fieldInfo57;
		
		private FieldInfo fieldInfo58;
		
		private FieldInfo fieldInfo59;
		
		private FieldInfo fieldInfo60;
		
		private FieldInfo fieldInfo61;
		
		private FieldInfo fieldInfo62;
		
		private FieldInfo fieldInfo63;
		
		private FieldInfo fieldInfo64;
		
		private FieldInfo fieldInfo65;
		
		private FieldInfo fieldInfo66;
		
		private FieldInfo fieldInfo67;
		
		private FieldInfo fieldInfo68;
		
		private FieldInfo fieldInfo69;
		
		private FieldInfo fieldInfo70;
		
		private FieldInfo fieldInfo71;
		
		private FieldInfo fieldInfo72;
		
		private FieldInfo fieldInfo73;
		
		private FieldInfo fieldInfo74;
		
		private FieldInfo fieldInfo75;
		
		private FieldInfo fieldInfo76;
		
		private FieldInfo fieldInfo77;
		
		private FieldInfo fieldInfo78;
		
		private FieldInfo fieldInfo79;
		
		private FieldInfo fieldInfo80;
		
		private FieldInfo fieldInfo81;
		
		private FieldInfo fieldInfo82;
		
		private FieldInfo fieldInfo83;
		
		private FieldInfo fieldInfo84;
		
		private FieldInfo fieldInfo85;
		
		private FieldInfo fieldInfo86;
		
		private FieldInfo fieldInfo87;
		
		private FieldInfo fieldInfo88;
		
		private FieldInfo fieldInfo89;
		
		private FieldInfo fieldInfo90;
		
		private FieldInfo fieldInfo91;
		
		private FieldInfo fieldInfo92;
		
		private FieldInfo fieldInfo93;
		
		private FieldInfo fieldInfo94;
		
		private FieldInfo fieldInfo95;
		
		private FieldInfo fieldInfo96;
		
		private FieldInfo fieldInfo97;
		
		private FieldInfo fieldInfo98;
		
		private FieldInfo fieldInfo99;
		
		private FieldInfo fieldInfo100;
		
		private FieldInfo fieldInfo101;
		
		private FieldInfo fieldInfo102;
		
		private FieldInfo fieldInfo103;
		
		private FieldInfo fieldInfo104;
		
		private FieldInfo fieldInfo105;
		
		private FieldInfo fieldInfo106;
		
		private FieldInfo fieldInfo107;
		
		private FieldInfo fieldInfo108;
		
		private FieldInfo fieldInfo109;
		
		private FieldInfo fieldInfo110;
		
		private FieldInfo fieldInfo111;
		
		private FieldInfo fieldInfo112;
		
		private FieldInfo fieldInfo113;
		
		private FieldInfo fieldInfo114;
		
		private FieldInfo fieldInfo115;
		
		private FieldInfo fieldInfo116;
		
		private FieldInfo fieldInfo117;
		
		private FieldInfo fieldInfo118;
		
		private FieldInfo fieldInfo119;
		
		private FieldInfo fieldInfo120;
		
		private FieldInfo fieldInfo121;
		
		private FieldInfo fieldInfo122;
		
		private FieldInfo fieldInfo123;
		
		private FieldInfo fieldInfo124;
		
		private FieldInfo fieldInfo125;
		
		private FieldInfo fieldInfo126;
		
		private FieldInfo fieldInfo127;
		
		private FieldInfo fieldInfo128;
		
		private FieldInfo fieldInfo129;
		
		private FieldInfo fieldInfo130;
		
		private FieldInfo fieldInfo131;
		
		private FieldInfo fieldInfo132;
		
		private FieldInfo fieldInfo133;
		
		private Field"
cmpl-6u39Ckb56eWtHrCqnPU8LU4ENtRNk,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java,48.19264078140259,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {","// DictionaryInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the component with the given id.
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertEquals(componentInfo, dictionaryInfo.getComponent(1));
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(2));
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(3));
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(4));
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(5));
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(6));
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(7));
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(8));
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(9));
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * Test case 10 is a negative test case.
		 * 
		 * Test case 10 tests the case where the component with the given id does not exist.
		 * 
		 * Test case 10 expects the method to return null.
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				ComponentInfo componentInfo = new ComponentInfo(1, ""TestComponent"");
				dictionaryInfo.addComponent(componentInfo);
				assertNull(dictionaryInfo.getComponent(10));
		}
}

// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		"
cmpl-6u3AFBYOamRvr6PmU1dr2sXdcziEU,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java,49.56191802024841,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {","// DictionaryInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.
*/
class DictionaryInfo_3Test {

		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * Test case 4 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * Test case 5 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * Test case 6 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 7 for method getComponent(String).
		 * 
		 * Test case 7 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 8 for method getComponent(String).
		 * 
		 * Test case 8 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 9 for method getComponent(String).
		 * 
		 * Test case 9 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
		
		/**
		 * Test case 10 for method getComponent(String).
		 * 
		 * Test case 10 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(""""));
		}
}

// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.
*/
class DictionaryInfo_4Test {
		
		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * Test case 1 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * Test case 2 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * Test case 3 covers the following requirements:
		 * 
		 * 		- The method returns null if the component is not found.
		 * 
		 * @see DictionaryInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				assertNull(dictionaryInfo.getComponent(0));
		}
		
		/**
		 * Test case 4"
cmpl-6u3BISCSOcRsDaNqoFoyhdPsjHu3s,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java,45.13840699195862,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {","// DictionaryInfo_4Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.
*/
class DictionaryInfo_4Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_1() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(1);
				assertEquals(messageInfo, result);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_2() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(2);
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_3() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(0);
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_4() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(-1);
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_5() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_6() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE);
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_7() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE - 1);
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_8() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE + 1);
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_9() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MAX_VALUE / 2);
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method {@link DictionaryInfo#getMessage(int)}.
		 * 
		 * @see DictionaryInfo#getMessage(int)
		 */
		@Test
		public void testGetMessage_10() {
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.4"");
				MessageInfo messageInfo = new MessageInfo(1, ""Heartbeat"");
				dictionaryInfo.addMessage(messageInfo);
				MessageInfo result = dictionaryInfo.getMessage(Integer.MIN_VALUE / 2);
				assertNull(result);
		}
}

// MessageInfo.java
/**
 * MessageInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *"
cmpl-6u3CLPLK8KLPUL3p5D22B9sUCXfpv,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java,41.43594527244568,length,"// DictionaryInfo.java
/**
 * DictionaryInfo.java 11:33:45 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a FIX version specification. DictionaryInfo acts as a central
 * storage for all items defined in a version.
 *
 * @author jramoyo
 */
public class DictionaryInfo {

    private String version;

    private int loadCount;

    // Default collection
    private TreeMap<String, MessageInfo> messagesByName;

    private TreeMap<Integer, MessageInfo> messagesById;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new DictionaryInfo
     *
     * @param version - a version
     */
    public DictionaryInfo(String version) {
        this.version = version;
    }

    /**
     * Returns the fields
     *
     * @return the fields
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * Returns a field given a tagNumber
     *
     * @param tagNumber - a tagNumber
     * @return a field given a tagNumber
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * Returns a field given a name
     *
     * @param name - a name
     * @return a field given a name
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a field
     *
     * @param field - a field
     */
    public void addField(FieldInfo field) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
    }

    /**
     * Returns the components
     *
     * @return the components
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * Returns a component given an id
     *
     * @param id - an id
     * @return a component given an id
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * Returns a component given a name
     *
     * @param name - a name
     * @return a component given a name
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * Adds a component
     *
     * @param component
     */
    public void addComponent(ComponentInfo component) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
    }

    /**
     * Replace the field by a group. This is used by FPL parsers which cannot
     * tell if a field is a group just from Fields.xml
     *
     * @param field - a field
     * @param group - a group
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
    }

    /**
     * Returns a message given an id
     *
     * @param id - an id
     * @return a message given an id
     */
    public MessageInfo getMessage(int id) {
        if (messagesById != null) {
            return messagesById.get(id);
        } else {
            return null;
        }
    }

    /**
     * Returns a message given a name
     *
     * @param name - a name
     * @return a message given a name
     */
    public MessageInfo getMessage(String name) {
        if (messagesByName != null) {
            return messagesByName.get(name);
        } else {
            return null;
        }
    }

    public List<MessageInfo> getMessages() {
        return new ArrayList<MessageInfo>(messagesById.values());
    }

    /**
     * Adds a message
     *
     * @param message - a message
     */
    public void addMessage(MessageInfo message) {
        if (messagesByName == null) {
            messagesByName = new TreeMap<String, MessageInfo>();
            messagesById = new TreeMap<Integer, MessageInfo>();
        }
        messagesById.put(message.getId(), message);
        messagesByName.put(message.getName(), message);
    }

    /**
     * Returns the version
     *
     * @return the version
     */
    public String getVersion() {
        return version;
    }

    /**
     * Modifies the version
     *
     * @param version - the version to set
     */
    public void setVersion(String version) {
        this.version = version;
    }

    /**
     * Increments the loadCount
     */
    public void incrementLoadCount() {
        loadCount++;
    }

    /**
     * Returns whether the dictionary is loaded
     *
     * @return whether the dictionary is loaded
     */
    public boolean isLoaded() {
        return loadCount == 5;
    }
}
","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {","// DictionaryInfo_5Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DictionaryInfo}.
* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.
*/
class DictionaryInfo_5Test {

		/**
		 * Test case 1 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the case where the message name is not null.
		 * 
		 * Test case 1 expects the method to return the message with the given name.
		 */
		@Test
		void testGetMessage_1() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message"");
				
				// Verify
				assertEquals(messageInfo, actual);
		}
		
		/**
		 * Test case 2 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the message name is null.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetMessage_2() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(null);
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 3 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the message name is empty.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetMessage_3() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage("""");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 4 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetMessage_4() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 5 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetMessage_5() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 6 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetMessage_6() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 7 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetMessage_7() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 8 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 8 is a negative test case.
		 * 
		 * Test case 8 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 8 expects the method to return null.
		 */
		@Test
		void testGetMessage_8() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				// Exercise
				MessageInfo actual = dictionaryInfo.getMessage(""Message1"");
				
				// Verify
				assertNull(actual);
		}
		
		/**
		 * Test case 9 for method {@link DictionaryInfo#getMessage(String)}.
		 * 
		 * Test case 9 is a negative test case.
		 * 
		 * Test case 9 tests the case where the message name is not in the dictionary.
		 * 
		 * Test case 9 expects the method to return null.
		 */
		@Test
		void testGetMessage_9() {
				// Setup
				DictionaryInfo dictionaryInfo = new DictionaryInfo(""FIX.4.2"");
				MessageInfo messageInfo = new MessageInfo(1, ""Message"");
				dictionaryInfo.addMessage(messageInfo);
				
				"
cmpl-6u3DOLhRrG2Y5QsOODul4CkI97niF,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java,55.31188988685608,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {","// FieldInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.
*/
class FieldInfo_0Test {

		/**
		 * Test case 1 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertTrue(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 2 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				assertFalse(fieldInfo.isRequiredInComponent(componentInfo));
		}
		
		/**
		 * Test case 3 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(null));
		}
		
		/**
		 * Test case 4 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 5 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_5() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 6 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_6() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 7 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_7() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 8 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_8() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 9 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_9() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
		
		/**
		 * Test case 10 for method isRequiredInComponent.
		 * 
		 * @see FieldInfo#isRequiredInComponent(ComponentInfo)
		 */
		@Test
		void testIsRequiredInComponent_10() {
				FieldInfo fieldInfo = new FieldInfo();
				ComponentInfo componentInfo = new ComponentInfo();
				fieldInfo.addRequiringComponent(componentInfo);
				assertFalse(fieldInfo.isRequiredInComponent(new ComponentInfo()));
		}
}

// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {
		
		/**
		 * Test case 1 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_1() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertTrue(fieldInfo.isValidValue(valueInfo.getValue()));
		}
		
		/**
		 * Test case 2 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_2() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(null));
		}
		
		/**
		 * Test case 3 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_3() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 4 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
		void testIsValidValue_4() {
				FieldInfo fieldInfo = new FieldInfo();
				ValueInfo valueInfo = new ValueInfo();
				fieldInfo.addValidValue(valueInfo);
				assertFalse(fieldInfo.isValidValue(""""));
		}
		
		/**
		 * Test case 5 for method isValidValue.
		 * 
		 * @see FieldInfo#isValidValue(String)
		 */
		@Test
"
cmpl-6u3ERUbqu13J0hPlM9jGfaGME5KpC,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java,39.70395302772522,length,"// FieldInfo.java
/**
 * FieldInfo.java 9:05:06 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a Field as defined by the FIX specification.
 *
 * @author jramoyo
 */
public class FieldInfo implements FixInfo {

    private int tagNumber;

    private String name;

    private String dataType;

    private String description;

    private String abbreviation;

    private String overrideXmlName;

    private String baseCategory;

    private String baseCategoryXmlName;

    private String unionDataType;

    private String usesEnumFromTag;

    private String comments;

    private int length;

    private boolean isNotRequiredXml;

    private String deprecatingVersion;

    private List<ComponentInfo> requiringComponents;

    private TreeMap<String, ValueInfo> validValues;

    /**
     * Returns the tagNumber
     *
     * @return the tagNumber
     */
    public int getTagNumber() {
        return tagNumber;
    }

    /**
     * Modifies the tagNumber
     *
     * @param tagNumber - the tagNumber to set
     */
    public void setTagNumber(int tagNumber) {
        this.tagNumber = tagNumber;
    }

    /**
     * Returns the fieldName
     *
     * @return the fieldName
     */
    public String getName() {
        return name;
    }

    /**
     * Modifies the fieldName
     *
     * @param name - the fieldName to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the dataType
     *
     * @return the dataType
     */
    public String getDataType() {
        return dataType;
    }

    /**
     * Modifies the dataType
     *
     * @param dataType - the dataType to set
     */
    public void setDataType(String dataType) {
        this.dataType = dataType;
    }

    /**
     * Returns the description
     *
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Modifies the description
     *
     * @param description - the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the comments
     *
     * @return the comments
     */
    public String getComments() {
        return comments;
    }

    /**
     * Modifies the comments
     *
     * @param comments - the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }

    /**
     * Returns the abbreviation
     *
     * @return the abbreviation
     */
    public String getAbbreviation() {
        return abbreviation;
    }

    /**
     * Modifies the abbreviation
     *
     * @param abbreviation - the abbreviation to set
     */
    public void setAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
    }

    /**
     * Returns the overrideXmlName
     *
     * @return the overrideXmlName
     */
    public String getOverrideXmlName() {
        return overrideXmlName;
    }

    /**
     * Modifies the overrideXmlName
     *
     * @param overrideXmlName - the overrideXmlName to set
     */
    public void setOverrideXmlName(String overrideXmlName) {
        this.overrideXmlName = overrideXmlName;
    }

    /**
     * Returns the baseCategory
     *
     * @return the baseCategory
     */
    public String getBaseCategory() {
        return baseCategory;
    }

    /**
     * Modifies the baseCategory
     *
     * @param baseCategory - the baseCategory to set
     */
    public void setBaseCategory(String baseCategory) {
        this.baseCategory = baseCategory;
    }

    /**
     * Returns the baseCategoryXmlName
     *
     * @return the baseCategoryXmlName
     */
    public String getBaseCategoryXmlName() {
        return baseCategoryXmlName;
    }

    /**
     * Modifies the baseCategoryXmlName
     *
     * @param baseCategoryXmlName - the baseCategoryXmlName to set
     */
    public void setBaseCategoryXmlName(String baseCategoryXmlName) {
        this.baseCategoryXmlName = baseCategoryXmlName;
    }

    /**
     * Returns the unionDataType
     *
     * @return the unionDataType
     */
    public String getUnionDataType() {
        return unionDataType;
    }

    /**
     * Modifies the unionDataType
     *
     * @param unionDataType - the unionDataType to set
     */
    public void setUnionDataType(String unionDataType) {
        this.unionDataType = unionDataType;
    }

    /**
     * Returns the usesEnumFromTag
     *
     * @return the usesEnumFromTag
     */
    public String getUsesEnumFromTag() {
        return usesEnumFromTag;
    }

    /**
     * Modifies the usesEnumFromTag
     *
     * @param usesEnumFromTag - the usesEnumFromTag to set
     */
    public void setUsesEnumFromTag(String usesEnumFromTag) {
        this.usesEnumFromTag = usesEnumFromTag;
    }

    /**
     * Returns the length
     *
     * @return the length
     */
    public int getLength() {
        return length;
    }

    /**
     * Modifies the length
     *
     * @param length - the length to set
     */
    public void setLength(int length) {
        this.length = length;
    }

    /**
     * Returns the isNotRequiredXml
     *
     * @return the isNotRequiredXml
     */
    public boolean isNotRequiredXml() {
        return isNotRequiredXml;
    }

    /**
     * Modifies the isNotRequiredXml
     *
     * @param isNotRequiredXml - the isNotRequiredXml to set
     */
    public void setNotRequiredXml(boolean isNotRequiredXml) {
        this.isNotRequiredXml = isNotRequiredXml;
    }

    /**
     * Returns the deprecatingVersion
     *
     * @return the deprecatingVersion
     */
    public String getDeprecatingVersion() {
        return deprecatingVersion;
    }

    /**
     * Modifies the deprecatingVersion
     *
     * @param deprecatingVersion - the deprecatingVersion to set
     */
    public void setDeprecatingVersion(String deprecatingVersion) {
        this.deprecatingVersion = deprecatingVersion;
    }

    /**
     * Returns the requiringComponents
     *
     * @return the requiringComponents
     */
    public List<ComponentInfo> getRequiringComponents() {
        return requiringComponents;
    }

    /**
     * Add a requiringComponent
     *
     * @param component - a requiringComponent
     */
    public void addRequiringComponent(ComponentInfo component) {
        if (requiringComponents == null) {
            requiringComponents = new ArrayList<ComponentInfo>();
        }
        requiringComponents.add(component);
    }

    /**
     * Modifies the requiringComponents
     *
     * @param requiringComponents - the requiringComponent to set
     */
    protected void setRequiringComponents(List<ComponentInfo> requiringComponents) {
        this.requiringComponents = requiringComponents;
    }

    /**
     * Returns whether this field is required in the specified component
     *
     * @param component - a component
     * @return whether this field is required in the specified component
     */
    public boolean isRequiredInComponent(ComponentInfo component) {
        if (requiringComponents != null) {
            return requiringComponents.contains(component);
        } else {
            return false;
        }
    }

    /**
     * Returns the validValues
     *
     * @return the validValues
     */
    public List<ValueInfo> getValidValues() {
        if (validValues != null) {
            return new ArrayList<ValueInfo>(validValues.values());
        } else {
            return null;
        }
    }

    /**
     * Adds a value
     *
     * @param value - a value
     */
    public void addValidValue(ValueInfo value) {
        if (validValues == null) {
            validValues = new TreeMap<String, ValueInfo>();
        }
        validValues.put(value.getValue(), value);
    }

    /**
     * Returns whether a given value is valid
     *
     * @param value - a value
     * @return whether a given value is valid
     */
    public boolean isValidValue(String value) {
        return validValues.keySet().contains(value);
    }

    /**
     * Modifies the validValues
     *
     * @param validValues - the validValues to set
     */
    protected void setValidValues(TreeMap<String, ValueInfo> validValues) {
        this.validValues = validValues;
    }

    /**
     * Returns the validValues Map
     *
     * @return the validValues Map
     */
    protected TreeMap<String, ValueInfo> getValidValuesMap() {
        return validValues;
    }
}
","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {","// FieldInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FieldInfo}.
* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.
*/
class FieldInfo_1Test {

		/**
		 * Test case 1.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns true if the given value is valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_1() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertTrue(fieldInfo.isValidValue(""1""));
				assertTrue(fieldInfo.isValidValue(""2""));
				assertTrue(fieldInfo.isValidValue(""3""));
				assertTrue(fieldInfo.isValidValue(""4""));
				assertTrue(fieldInfo.isValidValue(""5""));
				assertTrue(fieldInfo.isValidValue(""6""));
				assertTrue(fieldInfo.isValidValue(""7""));
				assertTrue(fieldInfo.isValidValue(""8""));
				assertTrue(fieldInfo.isValidValue(""9""));
				assertTrue(fieldInfo.isValidValue(""10""));
		}
		
		/**
		 * Test case 2.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_2() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 3.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_3() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""3"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""4"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""5"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""6"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""7"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""8"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""9"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""10"", new ValueInfo());
				assertFalse(fieldInfo.isValidValue(""11""));
				assertFalse(fieldInfo.isValidValue(""12""));
				assertFalse(fieldInfo.isValidValue(""13""));
				assertFalse(fieldInfo.isValidValue(""14""));
				assertFalse(fieldInfo.isValidValue(""15""));
				assertFalse(fieldInfo.isValidValue(""16""));
				assertFalse(fieldInfo.isValidValue(""17""));
				assertFalse(fieldInfo.isValidValue(""18""));
				assertFalse(fieldInfo.isValidValue(""19""));
				assertFalse(fieldInfo.isValidValue(""20""));
		}
		
		/**
		 * Test case 4.
		 * 
		 * <p>
		 * Test case for the {@link FieldInfo#isValidValue(String)} method.
		 * </p>
		 * 
		 * <p>
		 * This test case is for the following requirements:
		 * <ul>
		 * <li>The {@link FieldInfo#isValidValue(String)} method returns false if the given value is not valid.</li>
		 * </ul>
		 * </p>
		 */
		@Test
		void testIsValidValue_4() {
				FieldInfo fieldInfo = new FieldInfo();
				fieldInfo.setValidValues(new TreeMap<String, ValueInfo>());
				fieldInfo.getValidValuesMap().put(""1"", new ValueInfo());
				fieldInfo.getValidValuesMap().put(""2"", new ValueInfo());
				fieldInfo.getValidValuesMap"
cmpl-6u3FUhpljrU3Hu066qIQKZUoF8l9k,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_0Test.java,46.95141649246216,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(int)} method.
*/
class GroupInfo_0Test {","// GroupInfo_0Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(int)} method.
*/
class GroupInfo_0Test {

		/**
		* Test case 1.
		*
		* @throws Exception
		*																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																				"
cmpl-6u3GXbrhmMvI0uiSwkZ2qoXamoxpY,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_1Test.java,54.77897644042969,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(String)} method.
*/
class GroupInfo_1Test {","// GroupInfo_1Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getField(String)} method.
*/
class GroupInfo_1Test {

		/**
		 * Test case 1:
		 * 
		 * <PRE>
		 * 																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																			"
cmpl-6u3HaRDW34uTufvEEv3DjuxRISETU,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_2Test.java,43.22027802467346,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(int)} method.
*/
class GroupInfo_2Test {","// GroupInfo_2Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(int)} method.
*/
class GroupInfo_2Test {

		/**
		 * Test case 1 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_1() {
				// Test case 1
				// Input:
				// -1
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(-1);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 2 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_2() {
				// Test case 2
				// Input:
				// 0
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(0);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_3() {
				// Test case 3
				// Input:
				// 1
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(1);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_4() {
				// Test case 4
				// Input:
				// 2
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(2);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_5() {
				// Test case 5
				// Input:
				// 3
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(3);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_6() {
				// Test case 6
				// Input:
				// 4
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(4);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_7() {
				// Test case 7
				// Input:
				// 5
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(5);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 8 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_8() {
				// Test case 8
				// Input:
				// 6
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(6);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 9 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_9() {
				// Test case 9
				// Input:
				// 7
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(7);
				// Check result
				assertNull(result);
		}
		
		/**
		 * Test case 10 for method getComponent(int).
		 * 
		 * @see GroupInfo#getComponent(int)
		 */
		@Test
		void testGetComponent_10() {
				// Test case 10
				// Input:
				// 8
				// Expected output:
				// null
				// Create object
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				// Execute method
				ComponentInfo result = groupInfo.getComponent(8);
				// Check result
				assertNull(result);
		}
}

// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {
		
		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * @see GroupInfo#getComponent(String)
		 */
		@Test
		void testGetComponent_1() {
				// Test case 1
				// Input:
				// null
				// Expected output:
				// null
				// Create object
			"
cmpl-6u3IduzgFsdNNwbJjK53VTMQh6tok,/EvoSuiteBenchmark/74_fixsuite/src/main/java/org/fixsuite/message/info/GroupInfo_3Test.java,47.40804862976074,length,"// GroupInfo.java
/**
 * GroupInfo.java 9:20:12 PM Apr 21, 2008
 *
 * <PRE>
 * Copyright (c) 2008, Jan Amoyo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     - Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     - Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS';
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * </PRE>
 */
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

/**
 * Represents a group as defined by the FIX specification
 *
 * @author jramoyo
 */
public class GroupInfo extends FieldInfo implements CompositeFixInfo {

    // Default collection
    private TreeMap<Double, FixInfo> itemsByPosition;

    private HashMap<FixInfo, Double> itemsByContent;

    // Default collection
    private TreeMap<Integer, FieldInfo> fieldsByTagNumber;

    private TreeMap<String, FieldInfo> fieldsByName;

    // Default collection
    private TreeMap<String, ComponentInfo> componentsByName;

    private TreeMap<Integer, ComponentInfo> componentsById;

    /**
     * Creates a new GroupInfo
     *
     * @param field - a field to populate from
     */
    public GroupInfo(FieldInfo field) {
        setTagNumber(field.getTagNumber());
        setName(field.getName());
        setDataType(field.getDataType());
        setDescription(getDescription());
        setAbbreviation(field.getAbbreviation());
        setOverrideXmlName(field.getOverrideXmlName());
        setBaseCategory(field.getBaseCategory());
        setBaseCategoryXmlName(field.getBaseCategoryXmlName());
        setUnionDataType(field.getUnionDataType());
        setUsesEnumFromTag(field.getUsesEnumFromTag());
        setComments(field.getComments());
        setLength(field.getLength());
        setDeprecatingVersion(field.getDeprecatingVersion());
        setRequiringComponents(field.getRequiringComponents());
        setValidValues(field.getValidValuesMap());
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getFields()
     */
    public List<FieldInfo> getFields() {
        if (fieldsByTagNumber != null) {
            return new ArrayList<FieldInfo>(fieldsByTagNumber.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(int)
     */
    public FieldInfo getField(int tagNumber) {
        if (fieldsByTagNumber != null) {
            return fieldsByTagNumber.get(tagNumber);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getField(java.lang.String)
     */
    public FieldInfo getField(String name) {
        if (fieldsByName != null) {
            return fieldsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addField(org.fixsuite.message.info.FieldInfo,
     *      double)
     */
    public void addField(FieldInfo field, double position) {
        if (fieldsByTagNumber == null) {
            fieldsByTagNumber = new TreeMap<Integer, FieldInfo>();
            fieldsByName = new TreeMap<String, FieldInfo>();
        }
        fieldsByTagNumber.put(field.getTagNumber(), field);
        fieldsByName.put(field.getName(), field);
        addItem(field, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponents()
     */
    public List<ComponentInfo> getComponents() {
        if (componentsByName != null) {
            return new ArrayList<ComponentInfo>(componentsByName.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(int)
     */
    public ComponentInfo getComponent(int id) {
        if (componentsById != null) {
            return componentsById.get(id);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getComponent(java.lang.String)
     */
    public ComponentInfo getComponent(String name) {
        if (componentsByName != null) {
            return componentsByName.get(name);
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#addComponent(org.fixsuite.message.info.ComponentInfo,
     *      double)
     */
    public void addComponent(ComponentInfo component, double position) {
        if (componentsByName == null) {
            componentsByName = new TreeMap<String, ComponentInfo>();
            componentsById = new TreeMap<Integer, ComponentInfo>();
        }
        componentsByName.put(component.getName(), component);
        componentsById.put(component.getId(), component);
        addItem(component, position);
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#getItems()
     */
    public List<FixInfo> getItems() {
        if (itemsByPosition != null) {
            return new ArrayList<FixInfo>(itemsByPosition.values());
        }
        return null;
    }

    /**
     * @see org.fixsuite.message.info.CompositeFixInfo#replaceAsGroup(org.fixsuite.message.info.FieldInfo,
     *      org.fixsuite.message.info.GroupInfo)
     */
    public void replaceAsGroup(FieldInfo field, GroupInfo group) {
        fieldsByTagNumber.put(field.getTagNumber(), group);
        fieldsByName.put(field.getName(), group);
        double position = itemsByContent.get(field);
        itemsByContent.remove(field);
        itemsByContent.put(group, position);
        itemsByPosition.put(position, group);
    }

    private void addItem(FixInfo item, double position) {
        if (itemsByPosition == null) {
            itemsByPosition = new TreeMap<Double, FixInfo>();
            itemsByContent = new HashMap<FixInfo, Double>();
        }
        itemsByPosition.put(position, item);
        itemsByContent.put(item, position);
    }
}
","// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {","// GroupInfo_3Test.java
package org.fixsuite.message.info;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GroupInfo}.
* It contains ten unit test cases for the {@link GroupInfo#getComponent(String)} method.
*/
class GroupInfo_3Test {

		/**
		 * Test case 1 for method getComponent(String).
		 * 
		 * Test case 1 is a positive test case.
		 * 
		 * Test case 1 tests the normal case.
		 * 
		 * Test case 1 expects the method to return the component with the specified name.
		 */
		@Test
		void testGetComponent_1() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent(""componentInfo"");
				
				// Assert that the result is not null.
				assertNotNull(result);
				
				// Assert that the result is the same as the ComponentInfo object.
				assertSame(componentInfo, result);
		}
		
		/**
		 * Test case 2 for method getComponent(String).
		 * 
		 * Test case 2 is a negative test case.
		 * 
		 * Test case 2 tests the case where the specified name is null.
		 * 
		 * Test case 2 expects the method to return null.
		 */
		@Test
		void testGetComponent_2() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent(null);
				
				// Assert that the result is null.
				assertNull(result);
		}
		
		/**
		 * Test case 3 for method getComponent(String).
		 * 
		 * Test case 3 is a negative test case.
		 * 
		 * Test case 3 tests the case where the specified name is empty.
		 * 
		 * Test case 3 expects the method to return null.
		 */
		@Test
		void testGetComponent_3() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent("""");
				
				// Assert that the result is null.
				assertNull(result);
		}
		
		/**
		 * Test case 4 for method getComponent(String).
		 * 
		 * Test case 4 is a negative test case.
		 * 
		 * Test case 4 tests the case where the specified name is a blank string.
		 * 
		 * Test case 4 expects the method to return null.
		 */
		@Test
		void testGetComponent_4() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent("" "");
				
				// Assert that the result is null.
				assertNull(result);
		}
		
		/**
		 * Test case 5 for method getComponent(String).
		 * 
		 * Test case 5 is a negative test case.
		 * 
		 * Test case 5 tests the case where the specified name is a string of spaces.
		 * 
		 * Test case 5 expects the method to return null.
		 */
		@Test
		void testGetComponent_5() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent(""  "");
				
				// Assert that the result is null.
				assertNull(result);
		}
		
		/**
		 * Test case 6 for method getComponent(String).
		 * 
		 * Test case 6 is a negative test case.
		 * 
		 * Test case 6 tests the case where the specified name is a string of tabs.
		 * 
		 * Test case 6 expects the method to return null.
		 */
		@Test
		void testGetComponent_6() {
				// Create a new GroupInfo object.
				GroupInfo groupInfo = new GroupInfo(new FieldInfo());
				
				// Create a new ComponentInfo object.
				ComponentInfo componentInfo = new ComponentInfo();
				
				// Set the name of the ComponentInfo object.
				componentInfo.setName(""componentInfo"");
				
				// Add the ComponentInfo object to the GroupInfo object.
				groupInfo.addComponent(componentInfo, 0.0);
				
				// Call the method to be tested.
				ComponentInfo result = groupInfo.getComponent(""\t\t"");
				
				// Assert that the result is null.
				assertNull(result);
		}
		
		/**
		 * Test case 7 for method getComponent(String).
		 * 
		 * Test case 7 is a negative test case.
		 * 
		 * Test case 7 tests the case where the specified name is a string of newline characters.
		 * 
		 * Test case 7 expects the method to return null.
		 */
		@Test
		void testGetComponent_7() {
				// Create a new GroupInfo object.
		"
