ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u5onaxJixLTKvXlbDupgd8J8IcZf,/EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_0Test.java,76.37246322631836,length,"// ObjectFactory.java
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage() {
        return new Page();
    }

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage() {
        return new StaticPage();
    }

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination() {
        return new Pagination();
    }

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactory_0Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {","// ObjectFactory_0Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {

	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page result = objectFactory.createPage();
		assertNotNull(result);
	}
	
}

// ObjectFactory_1Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage result = objectFactory.createStaticPage();
		assertNotNull(result);
	}
	
}

// ObjectFactory_2Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination result = objectFactory.createPagination();
		assertNotNull(result);
	}
	
}

// ObjectFactory_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages result = objectFactory.createPages();
		assertNotNull(result);
	}
	
}

// Page.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href="""
cmpl-6u5q1N9QCWFgeylv3RGNVEFqtO70l,/EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_1Test.java,84.70041179656982,length,"// ObjectFactory.java
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage() {
        return new Page();
    }

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage() {
        return new StaticPage();
    }

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination() {
        return new Pagination();
    }

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactory_1Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {","// ObjectFactory_1Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {

	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_1() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_2() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(2);
		assertEquals(2, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_3() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(3);
		assertEquals(3, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_4() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(4);
		assertEquals(4, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_5() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(5);
		assertEquals(5, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_6() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(6);
		assertEquals(6, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_7() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(7);
		assertEquals(7, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_8() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(8);
		assertEquals(8, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_9() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(9);
		assertEquals(9, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_10() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(10);
		assertEquals(10, staticPage.getPageNumber());
	}
	
}

// ObjectFactory_2Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_2Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_1() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_2() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(2);
		assertEquals(2, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_3() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(3);
		assertEquals(3, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_4() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(4);
		assertEquals(4, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_5() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(5);
		assertEquals(5, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_6() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(6);
		assertEquals(6, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_7() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(7);
		assertEquals(7, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_8() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(8);
		assertEquals(8, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_9() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(9);
		assertEquals(9, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_10() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(10);
		assertEquals(10, staticPage.getPageNumber());
	}
	
}

// ObjectFactory_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_3Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_1() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_2() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(2);
		assertEquals(2, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_3() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(3);
		assertEquals(3, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_4() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(4);
		assertEquals(4, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_5() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(5);
		assertEquals(5, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_6() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(6);
		assertEquals(6, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_7() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(7);
		assertEquals(7, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_8() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(8);
		assertEquals(8, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_9() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(9);
		assertEquals(9, staticPage.getPageNumber());
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testCreateStaticPage_10() {
		StaticPage staticPage = new ObjectFactory().createStaticPage();
		staticPage.setPageNumber(10);
		assertEquals(10, staticPage.getPageNumber());
	}
	
}

// ObjectFactory_4Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage"
cmpl-6u5rOylPx4WcYoEFzQGjqr9TQq3Ca,/EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_2Test.java,74.56793522834778,length,"// ObjectFactory.java
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage() {
        return new Page();
    }

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage() {
        return new StaticPage();
    }

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination() {
        return new Pagination();
    }

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactory_2Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {","// ObjectFactory_2Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {

	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	* It tests the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertNotNull(pagination);
	}
}

// ObjectFactory_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	* It tests the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// ObjectFactory_4Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_4Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	* It tests the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// ObjectFactory_5Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_5Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// Page.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;

/**
 * <p>Java class for Page complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""Page"">
 *   &lt;simpleContent>
 *     &lt;extension base=""&lt;http://www.w3.org/2001/XMLSchema>string"">
 *       &lt;attribute name=""number"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""Page"", propOrder = {
    ""value""
})
public class Page {

    @XmlValue
    protected String value;
    @XmlAttribute(name = ""number"")
    protected Integer number;
    @XmlAttribute(name = ""url"")
    protected String url;

    /**
     * Gets the value of the value property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Gets the value of the number property.
     *
     * @return
     *     possible object is
     *     {@link Integer }
     *
     */
    public Integer getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     *
     * @param value
     *     allowed object is
     *     {@link Integer }
     *
     */
    public void setNumber(Integer value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUrl(String value) {
        this.url = value;
    }

}

// Page_1Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class Page_1Test {
		
	/**
	* Test case for the {@link Page#getNumber()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		Integer number = page.getNumber();
		assertNull(number);
	}
}

// Page_2Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#setNumber(Integer)} method.
*/
class Page_2Test {
		
	/**
	* Test case for the {@link Page#setNumber(Integer)} method.
	* It tests the {@link Page#setNumber(Integer)} method.
	*/
	@Test
	void testSetNumber() {
		Page page = new Page();
		Integer number = new Integer(1);
		page.setNumber(number);
		assertEquals(number, page.getNumber());
	}
}

// Page_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getUrl()} method.
*/
class Page_3Test {
		
	/**
	* Test case for the {@link Page#getUrl()} method.
	* It tests the {@link Page#getUrl()} method.
	*/
	@Test
	void testGetUrl() {
		Page page = new Page();
		String url = page.getUrl();
		assertNull(url);
	}
}

// Page_4Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#setUrl(String)} method.
*/
class Page_4Test {
		
	/**
	* Test case for the {@link Page#setUrl(String)} method.
	* It tests the {@link Page#setUrl(String)} method.
	*/
	@Test
	void testSetUrl() {
		Page page = new Page();
		String url = ""http://www.tripfilms.com"";
		page.setUrl(url);
		assertEquals(url, page.getUrl());
	}
}

// Page_5Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getValue()} method.
*/
class Page_5Test {
		
	/**
	* Test case for the {@link Page#getValue"
cmpl-6u5saaAmApUBaiXpOhxYFQ19hnUv2,/EvoSuiteBenchmark/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_3Test.java,75.44637179374695,length,"// ObjectFactory.java
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage() {
        return new Page();
    }

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage() {
        return new StaticPage();
    }

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination() {
        return new Pagination();
    }

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactory_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {","// ObjectFactory_3Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {

	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_1() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_2() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_3() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_4() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_5() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_6() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_7() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_8() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_9() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePages_10() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pages result = fixture.createPages();
		assertNotNull(result);
	}
	
}

// ObjectFactory_4Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_4Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_1() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_2() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_3() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_4() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_5() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_6() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_7() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_8() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_9() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreatePagination_10() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		Pagination result = fixture.createPagination();
		assertNotNull(result);
	}
	
}

// ObjectFactory_5Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_5Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_1() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_2() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_3() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_4() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_5() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_6() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_7() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_8() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_9() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*
	* @throws Exception
	* 				if any error occurs during the test.
	*/
	@Test
	void testCreateStaticPage_10() throws Exception {
		ObjectFactory fixture = new ObjectFactory();
		StaticPage result = fixture.createStaticPage();
		assertNotNull(result);
	}
	
}

// ObjectFactory_6Test.java
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833
// See <a href=""http://java.sun.com/xml/jaxb"">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2013.06.11 at 02:28:24 PM BST
//
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_6Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*
	* @throws Exception
	* 				if any error"
cmpl-6u5to4LC1gmu4P52Rgga3zBWnVLvW,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/bo/TagUtil_0Test.java,82.09750413894653,length,"// TagUtil.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.bo;

import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;

/**
 * @author luc
 */
public class TagUtil {

    private static final String SLASH = ""/"";

    /**
     * (from ImportTag, standard taglib 1.0, apache)
     * <p>
     * Valid characters in a scheme.
     * </p>
     * <p>
     * RFC 1738 says the following:
     * </p>
     * <blockquote> Scheme names consist of a sequence of characters. The lower
     * case letters ""a""--""z"", digits, and the characters plus (""+""), period
     * ("".""), and hyphen (""-"") are allowed. For resiliency, programs
     * interpreting URLs should treat upper case letters as equivalent to lower
     * case in scheme names (e.g., allow ""HTTP"" as well as ""http"").
     * </blockquote>
     * <p>
     * We treat as absolute any URL that begins with such a scheme name,
     * followed by a colon.
     * </p>
     */
    public static final String VALID_SCHEME_CHARS = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+.-"";

    /**
     * (from ImportTag, standard taglib 1.0, apache) Returns <tt>true</tt> if
     * our current URL is absolute, <tt>false</tt> otherwise.
     */
    public static boolean isAbsoluteUrl(String url) {
        // a null URL is not absolute, by our definition
        if (url == null)
            return false;
        // do a fast, simple check first
        int colonPos;
        if ((colonPos = url.indexOf("":"")) == -1)
            return false;
        // if we DO have a colon, make sure that every character
        // leading up to it is a valid scheme character
        for (int i = 0; i < colonPos; i++) if (VALID_SCHEME_CHARS.indexOf(url.charAt(i)) == -1)
            return false;
        // if so, we've got an absolute url
        return true;
    }

    public static String resolveUrl(String pURL, String pContext, PageContext pPageContext) throws JspException {
        if (pPageContext == null)
            return pURL;
        // don't touch absolute URLs
        if (isAbsoluteUrl(pURL))
            return pURL;
        // normalize relative URLs against a context root
        HttpServletRequest request = (HttpServletRequest) pPageContext.getRequest();
        if (pContext == null) {
            if (pURL.startsWith(SLASH)) {
                return (request.getContextPath() + pURL);
            } else {
                return pURL;
            }
        } else {
            if (!pContext.startsWith(SLASH) || !pURL.startsWith(SLASH))
                throw new JspTagException(""Invalid context"");
            return (pContext + pURL);
        }
    }

    public static String rewriteURL(String pURL, PageContext pPageContext) throws JspException {
        if (pPageContext == null)
            return pURL;
        // add (already encoded) parameters
        String oBaseUrl = resolveUrl(pURL, null, pPageContext);
        String oResult = oBaseUrl;
        // String oResult = params.aggregateParams(baseUrl);
        // if the URL is relative, rewrite it
        if (!isAbsoluteUrl(oResult)) {
            HttpServletResponse response = ((HttpServletResponse) pPageContext.getResponse());
            oResult = response.encodeURL(oResult);
        }
        return oResult;
    }

    public static class ParamManager {

        private static final String QUESTION_MARK = ""?"";

        private static final String AMPERSAND = ""&"";

        private static final String EMPTY = """";

        private List<String> mNames = new LinkedList<String>();

        private List<String> mValues = new LinkedList<String>();

        private boolean mDone = false;

        /**
         * Adds a new parameter to the list.
         *
         * @param pName
         * @param pValue
         */
        public void addParameter(String pName, String pValue) {
            if (mDone)
                throw new IllegalStateException();
            if (pName != null) {
                mNames.add(pName);
                if (pValue != null)
                    mValues.add(pValue);
                else
                    mValues.add(EMPTY);
            }
        }

        /**
         * Produces a new URL with the stored parameters, in the appropriate
         * order.
         */
        public String aggregateParams(String pURL) {
            /*
			 * Since for efficiency we're destructive to the param lists, we
			 * don't want to run multiple times.
			 */
            if (mDone)
                throw new IllegalStateException();
            mDone = true;
            // // reverse the order of our two lists
            // Collections.reverse(this.names);
            // Collections.reverse(this.values);
            // build a string from the parameter list
            StringBuffer oNewParams = new StringBuffer();
            for (int i = 0; i < mNames.size(); i++) {
                oNewParams.append(mNames.get(i) + ""="" + mValues.get(i));
                if (i < (mNames.size() - 1))
                    oNewParams.append(AMPERSAND);
            }
            // insert these parameters into the URL as appropriate
            if (oNewParams.length() > 0) {
                int oQuestionMark = pURL.indexOf(QUESTION_MARK);
                if (oQuestionMark == -1) {
                    return (pURL + QUESTION_MARK + oNewParams);
                } else {
                    StringBuffer oWorkingUrl = new StringBuffer(pURL);
                    oWorkingUrl.insert(oQuestionMark + 1, (oNewParams + AMPERSAND));
                    return oWorkingUrl.toString();
                }
            } else {
                return pURL;
            }
        }
    }
}
","// TagUtil_0Test.java
package net.sourceforge.ext4j.taglib.bo;

import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagUtil}.
* It contains ten unit test cases for the {@link TagUtil#isAbsoluteUrl(String)} method.
*/
class TagUtil_0Test {","// TagUtil_0Test.java
package net.sourceforge.ext4j.taglib.bo;

import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagUtil}.
* It contains ten unit test cases for the {@link TagUtil#isAbsoluteUrl(String)} method.
*/
class TagUtil_0Test {

	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is null.
	 */
	@Test
	void testIsAbsoluteUrl_0() {
		String url = null;
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is empty.
	 */
	@Test
	void testIsAbsoluteUrl_1() {
		String url = """";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testIsAbsoluteUrl_2() {
		String url = ""relative"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testIsAbsoluteUrl_3() {
		String url = ""relative/url"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testIsAbsoluteUrl_4() {
		String url = ""relative/url/"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testIsAbsoluteUrl_5() {
		String url = ""relative/url/with/path"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testIsAbsoluteUrl_6() {
		String url = ""relative/url/with/path/"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertFalse(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testIsAbsoluteUrl_7() {
		String url = ""http://absolute/url"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertTrue(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testIsAbsoluteUrl_8() {
		String url = ""http://absolute/url/"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertTrue(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testIsAbsoluteUrl_9() {
		String url = ""http://absolute/url/with/path"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertTrue(result);
	}
	
	/**
	 * Test case for {@link TagUtil#isAbsoluteUrl(String)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testIsAbsoluteUrl_10() {
		String url = ""http://absolute/url/with/path/"";
		boolean result = TagUtil.isAbsoluteUrl(url);
		assertTrue(result);
	}
}

// TagUtil_1Test.java
package net.sourceforge.ext4j.taglib.bo;

import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagUtil}.
* It contains ten unit test cases for the {@link TagUtil#resolveUrl(String, String, PageContext)} method.
*/
class TagUtil_1Test {
		
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is null.
	 */
	@Test
	void testResolveUrl_0() {
		String url = null;
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is empty.
	 */
	@Test
	void testResolveUrl_1() {
		String url = """";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testResolveUrl_2() {
		String url = ""relative"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""relative"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testResolveUrl_3() {
		String url = ""relative/url"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""relative/url"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testResolveUrl_4() {
		String url = ""relative/url/"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""relative/url/"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testResolveUrl_5() {
		String url = ""relative/url/with/path"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""relative/url/with/path"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testResolveUrl_6() {
		String url = ""relative/url/with/path/"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""relative/url/with/path/"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testResolveUrl_7() {
		String url = ""http://absolute/url"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""http://absolute/url"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testResolveUrl_8() {
		String url = ""http://absolute/url/"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""http://absolute/url/"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testResolveUrl_9() {
		String url = ""http://absolute/url/with/path"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""http://absolute/url/with/path"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#resolveUrl(String, String, PageContext)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testResolveUrl_10() {
		String url = ""http://absolute/url/with/path/"";
		String context = null;
		PageContext pageContext = null;
		String result = TagUtil.resolveUrl(url, context, pageContext);
		assertEquals(""http://absolute/url/with/path/"", result);
	}
}

// TagUtil_2Test.java
package net.sourceforge.ext4j.taglib.bo;

import java.util.LinkedList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspTagException;
import javax.servlet.jsp.PageContext;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TagUtil}.
* It contains ten unit test cases for the {@link TagUtil#rewriteURL(String, PageContext)} method.
*/
class TagUtil_2Test {
		
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is null.
	 */
	@Test
	void testRewriteURL_0() {
		String url = null;
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is empty.
	 */
	@Test
	void testRewriteURL_1() {
		String url = """";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testRewriteURL_2() {
		String url = ""relative"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""relative"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testRewriteURL_3() {
		String url = ""relative/url"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""relative/url"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testRewriteURL_4() {
		String url = ""relative/url/"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""relative/url/"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testRewriteURL_5() {
		String url = ""relative/url/with/path"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""relative/url/with/path"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is a relative URL.
	 */
	@Test
	void testRewriteURL_6() {
		String url = ""relative/url/with/path/"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""relative/url/with/path/"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests the case that the given URL is an absolute URL.
	 */
	@Test
	void testRewriteURL_7() {
		String url = ""http://absolute/url"";
		PageContext pageContext = null;
		String result = TagUtil.rewriteURL(url, pageContext);
		assertEquals(""http://absolute/url"", result);
	}
	
	/**
	 * Test case for {@link TagUtil#rewriteURL(String, PageContext)}.
	 * It tests"
8d05e689-6f11-46ab-b47c-39a5256ef2f1,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_12Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9272 tokens (5272 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_12Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_12Test {","// Functions_12Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_12Test {
"
b6fb1925-715e-4316-8346-93814cde8032,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_13Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9270 tokens (5270 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_13Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class Functions_13Test {","// Functions_13Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class Functions_13Test {
"
e2d7a52e-2b79-4b99-9303-bac1c155fec6,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_14Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9273 tokens (5273 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_14Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#blurbChar(String, int)} method.
*/
class Functions_14Test {","// Functions_14Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#blurbChar(String, int)} method.
*/
class Functions_14Test {
"
77aa8ae7-8853-4163-ab8d-4054fc44219a,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_15Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9273 tokens (5273 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_15Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#cutWordCR(String, int)} method.
*/
class Functions_15Test {","// Functions_15Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#cutWordCR(String, int)} method.
*/
class Functions_15Test {
"
92eb5b69-71f9-47c1-9597-52a49d519c84,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_16Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9274 tokens (5274 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_16Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#cutWordCRText(String, int)} method.
*/
class Functions_16Test {","// Functions_16Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#cutWordCRText(String, int)} method.
*/
class Functions_16Test {
"
6d4bb84d-9a34-4b2a-82e4-7cd114eb7af0,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_17Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9272 tokens (5272 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_17Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#replaceCRWithBR(String)} method.
*/
class Functions_17Test {","// Functions_17Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#replaceCRWithBR(String)} method.
*/
class Functions_17Test {
"
0ff3776d-f116-4b7a-8b76-dafd8bb5593c,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_18Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9273 tokens (5273 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_18Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_18Test {","// Functions_18Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_18Test {
"
a140b13c-517e-4563-b623-9de814c3a7f4,/EvoSuiteBenchmark/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_19Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9272 tokens (5272 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Functions.java
/**
 * @author luc
 */
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    //private static final String FILENAME_VAR_REGEX = ""\\$\\{filename\\}"";
    static {
        NUMBERS_WORD.put(0, ""zero"");
        NUMBERS_WORD.put(1, ""one"");
        NUMBERS_WORD.put(2, ""two"");
        NUMBERS_WORD.put(3, ""three"");
        NUMBERS_WORD.put(4, ""four"");
        NUMBERS_WORD.put(5, ""five"");
        NUMBERS_WORD.put(6, ""six"");
        NUMBERS_WORD.put(7, ""seven"");
        NUMBERS_WORD.put(8, ""eight"");
        NUMBERS_WORD.put(9, ""nine"");
        NUMBERS_WORD.put(10, ""ten"");
        NUMBERS_WORD.put(11, ""eleven"");
        NUMBERS_WORD.put(12, ""twelve"");
        NUMBERS_WORD.put(13, ""thirteen"");
        NUMBERS_WORD.put(14, ""fourteen"");
        NUMBERS_WORD.put(15, ""fifteen"");
        NUMBERS_WORD.put(16, ""sixteen"");
        NUMBERS_WORD.put(17, ""seventeen"");
        NUMBERS_WORD.put(18, ""eighteen"");
        NUMBERS_WORD.put(19, ""nineteen"");
        fillTens(20, ""twenty"");
        fillTens(30, ""thirty"");
        fillTens(40, ""fourty"");
        fillTens(50, ""fifty"");
        fillTens(60, ""sixty"");
        fillTens(70, ""seventy"");
        fillTens(80, ""eighty"");
        fillTens(90, ""ninety"");
    }

    public static int year(int pOffset) {
        Calendar c = Calendar.getInstance();
        int oYear = c.get(Calendar.YEAR);
        return oYear + pOffset;
    }

    public static char toUpper(char c) {
        return Character.toUpperCase(c);
    }

    public static char forDigit(int pDigit, int pRadix) {
        return Character.forDigit(pDigit, pRadix);
    }

    public static int length(Object pCollection) throws JspTagException {
        if (pCollection == null)
            return 0;
        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {
            Iterable<Object> oIterable = (Iterable<Object>) pCollection;
            int oSize = 0;
            for (Object oKey : oIterable) {
                oSize++;
            }
            return oSize;
        } else {
            return org.apache.taglibs.standard.functions.Functions.length(pCollection);
        }
    }

    public static String join(String[] pStrings, String pSep) {
        if (pStrings == null || pStrings.length == 0)
            return STRING_EMPTY;
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < pStrings.length; i++) {
            if (oBuf.length() > 0)
                oBuf.append(pSep);
            oBuf.append(pStrings[i]);
        }
        return oBuf.toString();
    }

    public static String seo(String pValue) {
        if (pValue == null)
            return pValue;
        String oResult = pValue;
        oResult = oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);
        for (int i = 0; i < TO_REPLACE.length; i++) {
            oResult = oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);
        }
        // trim ""_""s
        oResult = oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);
        return oResult;
    }

    public static long round(double pValue) {
        return Math.round(pValue);
    }

    public static String stripHTML(String s) {
        if (s == null)
            return null;
        return s.replaceAll(""\\<[^>]*\\>"", STRING_EMPTY);
    }

    public static String blurb(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = stripHTML(s);
        if (oResult.length() < pMaxLength)
            return oResult;
        StringBuilder oBuf = new StringBuilder();
        String[] oWords = oResult.split(STRING_SPACE);
        int i = 0;
        while (i < oWords.length && oBuf.length() < pMaxLength) {
            oBuf.append(oWords[i]);
            oBuf.append(STRING_SPACE);
            i++;
        }
        oResult = oBuf.toString().trim();
        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {
            oResult = oResult.substring(0, oResult.length() - 1);
        }
        //oResult = stripHTML(oResult); // moved above
        return oResult + BLURB_SUFFIX;
    }

    public static String blurbHTML(String s, int pMaxLength) {
        if (s == null)
            return null;
        String oResult = s.replaceAll(""<p>"", STRING_SPACE);
        oResult = oResult.replaceAll(""</p>"", STRING_EMPTY);
        oResult = oResult.replaceAll(""<br />"", STRING_SPACE);
        oResult = oResult.replaceAll(""<br>"", STRING_SPACE);
        return blurb(oResult, pMaxLength);
    }

    public static String since(Date pFrom) {
        if (pFrom == null)
            return """";
        String oCaption = null;
        long oDiff = Calendar.getInstance().getTime().getTime() - pFrom.getTime();
        long oDaysPassed = oDiff / (1000 * 60 * 60 * 24);
        if (oDaysPassed <= 1) {
            long oMinutesPassed = oDiff / (1000 * 60);
            if (oMinutesPassed <= 1) {
                oCaption = ""1 minute ago"";
            } else if (oMinutesPassed <= 5) {
                oCaption = ""5 minutes ago"";
            } else if (oMinutesPassed <= 30) {
                oCaption = ""30 minutes ago"";
            }
            long oHours = oMinutesPassed / 60;
            if (oHours <= 1) {
                oCaption = ""1 hour ago"";
            } else if (oHours <= 11) {
                oCaption = oHours + "" hours ago"";
            } else {
                oCaption = ""today"";
            }
        } else if (oDaysPassed > 1 && oDaysPassed <= 2) {
            oCaption = ""yesterday"";
        } else if (oDaysPassed <= 7) {
            oCaption = ""this week"";
        } else if (oDaysPassed > 7 && oDaysPassed <= 14) {
            oCaption = ""last week"";
        } else if (oDaysPassed > 14 && oDaysPassed <= 21) {
            oCaption = ""2 weeks ago"";
        } else if (oDaysPassed > 21 && oDaysPassed <= 28) {
            oCaption = ""3 weeks ago"";
        } else if (oDaysPassed > 28 && oDaysPassed <= 60) {
            oCaption = ""last month"";
        } else if (oDaysPassed > 60 && oDaysPassed <= 365) {
            int oMonths = ((int) oDaysPassed) / 30;
            oCaption = oMonths + "" months ago"";
        } else {
            oCaption = ""over a year ago"";
        }
        return oCaption;
    }

    public static String decimalFormat(double pDouble, String pPattern) {
        DecimalFormat oFormatter = new DecimalFormat(pPattern);
        return oFormatter.format(pDouble);
    }

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength) {
        if (s == null)
            return null;
        //		if (s.length() < pMaxLength) return s.replaceAll(STRING_CR, "" "");
        //		return s.substring(0, pMaxLength).replaceAll(STRING_CR, "" "") + BLURB_SUFFIX;
        if (s.length() < pMaxLength)
            return s.replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "");
        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, "" "").replaceAll(EOL_MAC_LEGACY, "" "").replaceAll(EOL_LINUX, "" "") + BLURB_SUFFIX;
    }

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength) {
        if (s == null)
            return null;
        if (s.length() < pMaxLength)
            return s;
        String oString = s;
        String oReturn = """";
        do {
            oReturn = oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;
            oString = oString.substring(pMaxLength, oString.length());
        } while (oString.length() > pMaxLength);
        if (oString.trim().length() == 0) {
            oReturn = oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());
        } else {
            oReturn = oReturn + oString;
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength) {
        if (pText == null)
            return null;
        if (pText.length() < pMaxLength)
            return pText;
        String oReturn = """";
        int c = 0;
        for (int i = 0; i < pText.length(); i++) {
            if (pText.charAt(i) == ' ')
                c = 0;
            else if (c >= pMaxLength) {
                oReturn = oReturn + STRING_HTML_CR;
                c = 0;
            } else
                c++;
            oReturn = oReturn + pText.charAt(i);
        }
        return oReturn;
    }

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText) {
        if (pText == null)
            return null;
        return pText.replaceAll(""\r\n|\n"", ""<br />"");
    }

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator) {
        if (s == null || s.trim().length() == 0 || s.equals(pSeparator))
            return null;
        String[] oWords = s.split(pSeparator);
        Arrays.sort(oWords);
        StringBuffer oBuf = new StringBuffer();
        for (int i = 0; i < oWords.length; i++) {
            oBuf.append(oWords[i]);
            if ((i + 1) < oWords.length)
                oBuf.append(pSeparator);
        }
        return oBuf.toString();
    }

    public static String capFirstLetters(String s) {
        if (s == null || s.trim().length() == 0)
            return s;
        String oLowerCase = s.toLowerCase();
        StringTokenizer oTokenizer = new StringTokenizer(oLowerCase, STRING_SPACE);
        StringBuffer oBuf = new StringBuffer();
        String oToken = null;
        while (oTokenizer.hasMoreTokens()) {
            oToken = oTokenizer.nextToken();
            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));
            if (oTokenizer.hasMoreTokens())
                oBuf.append(STRING_SPACE);
        }
        return oBuf.toString();
    }

    private static void fillTens(int pTen, String pTenWord) {
        NUMBERS_WORD.put(pTen, pTenWord);
        for (int i = 1; i < 10; i++) {
            NUMBERS_WORD.put(pTen + i, pTenWord + ""-"" + NUMBERS_WORD.get(i));
        }
    }

    public static String numberInWord(int pValue) throws Exception {
        String oWord = NUMBERS_WORD.get(pValue);
        if (oWord == null)
            oWord = Integer.toString(pValue);
        return oWord;
    }

    public static String ordinal(int pInteger) {
        int oDigit = getLastDigit(pInteger);
        if ((pInteger > 20 || pInteger < 10) && oDigit < 4) {
            switch(oDigit) {
                case 1:
                    return pInteger + ""st"";
                case 2:
                    return pInteger + ""nd"";
                case 3:
                    return pInteger + ""rd"";
            }
        }
        return pInteger + ""th"";
    }

    private static int getLastDigit(int pInteger) {
        String s = Integer.toString(pInteger);
        return Integer.parseInt(s.substring(s.length() - 1));
    }

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {
        return pRequest.removeParam(pName);
    }

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.addParam(pName, pValue);
    }

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {
        return pRequest.setParam(pName, pValue);
    }
}
","// Functions_19Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#orderWords(String, String)} method.
*/
class Functions_19Test {","// Functions_19Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#orderWords(String, String)} method.
*/
class Functions_19Test {
"
