ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6txmi6l8v7e4z9LN8rm8bSsx7t0uZ,/EvoSuiteBenchmark/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilter.java,30.83660364151001,stop,"// HTMLFilter.java
/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the ""License""); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.imsmart.servlet;

/**
 * HTML filter utility.
 *
 * @author Craig R. McClanahan
 * @author Tim Tye
 * @version $Revision: 467217 $ $Date: 2006-10-24 05:14:34 +0200 (mar., 24 oct. 2006) $
 */
public final class HTMLFilter {

    /**
     * Filter the specified message string for characters that are sensitive
     * in HTML.  This avoids potential attacks caused by including JavaScript
     * codes in the request URL that is often reported in error messages.
     *
     * @param message The message string to be filtered
     */
    public static String filter(String message) {
        if (message == null)
            return (null);
        char[] content = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length + 50);
        for (int i = 0; i < content.length; i++) {
            switch(content[i]) {
                case '<':
                    result.append(""&lt;"");
                    break;
                case '>':
                    result.append(""&gt;"");
                    break;
                case '&':
                    result.append(""&amp;"");
                    break;
                case '""':
                    result.append(""&quot;"");
                    break;
                default:
                    result.append(content[i]);
            }
        }
        return (result.toString());
    }
}
","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {

		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string is null.
		*/
		@Test
		void testFilterNull() {
				assertNull(HTMLFilter.filter(null));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string is empty.
		*/
		@Test
		void testFilterEmpty() {
				assertEquals("""", HTMLFilter.filter(""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one character.
		*/
		@Test
		void testFilterOneChar() {
				assertEquals(""a"", HTMLFilter.filter(""a""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar() {
				assertEquals(""&lt;"", HTMLFilter.filter(""<""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar2() {
				assertEquals(""&gt;"", HTMLFilter.filter("">""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar3() {
				assertEquals(""&amp;"", HTMLFilter.filter(""&""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar4() {
				assertEquals(""&quot;"", HTMLFilter.filter(""\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar5() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar6() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar7() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar8() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar9() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* It tests the case when the input string contains only one special character.
		*/
		@Test
		void testFilterOneSpecialChar10() {
				assertEquals(""&lt;&gt;&amp;&quot;"", HTMLFilter.filter(""<>&\""""));
		}
		
}</code>





A:

You can use the following code to generate the test cases:
<code>public static void main(String[] args) {
    String[] specialChars = {""&lt;"", ""&gt;"", ""&amp;"", ""\""""};
    for (int i = 0; i &lt; specialChars.length; i++) {
        System.out.println(""/**"");
        System.out.println(""* Test case for {@link HTMLFilter#filter(String)} method."");
        System.out.println(""* It tests the case when the input string contains only one special character."");
        System.out.println(""*/"");
        System.out.println(""@Test"");
        System.out.println(""void testFilterOneSpecialChar"" + (i + 1) + ""() {"");
        System.out.println(""assertEquals(\"""" + specialChars[i] + ""\"", HTMLFilter.filter(\"""" + specialChars[i] + ""\""));"");
        System.out.println(""}"");
        System.out.println();
    }
}
</code>
"
