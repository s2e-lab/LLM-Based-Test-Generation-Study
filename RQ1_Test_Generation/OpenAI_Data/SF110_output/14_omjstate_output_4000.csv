ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u1pQLtLGlW5epKVh16BY0PjzWLIr,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_0Test.java,97.20256781578064,length,"// EndState.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton() {
        return SINGLETON;
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState) {
        return EqualsBuilder.reflectionEquals(this, pIState);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName() {
        return NAME;
    }

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {","// EndState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndState_0Test {

	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_0() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_1() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getName()} method.
*/
class EndState_1Test {
		
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_0() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_1() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		String name = endState.getName();
		assertNotNull(name);
	}
	
}

// EndState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndState_2Test {
		
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_0() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_1() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		Object object = endState.toObject();
		assertNotNull(object);
	}
	
}

// EndState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#equals(Object)} method.
*/
class EndState_3Test {
		
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_0() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_1() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState.equals(endState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
		boolean equals = endState."
cmpl-6u1qu2KZUYtdDt1tyiGXIVUjIVLPa,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState_1Test.java,97.4123272895813,length,"// EndState.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    private static final java.lang.String NAME = ""com.objectmentors.state.EndState"";

    /**
     * Variable used to store the singleton instance of the EndState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final EndState SINGLETON = new EndState();

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton() {
        return SINGLETON;
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>EndState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState) {
        return EqualsBuilder.reflectionEquals(this, pIState);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (20/02/01 10:55:55 AM)
     * @return java.lang.String
     */
    public java.lang.String getName() {
        return NAME;
    }

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndState_1Test {","// EndState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndState_1Test {

	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_1() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_2() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_3() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_4() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_5() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_6() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_7() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_8() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject_9() {
		EndState endState = EndState.getSingleton();
		Object object = endState.toObject();
		assertEquals(endState, object);
	}
	
}

// EndState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getName()} method.
*/
class EndState_2Test {
		
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_1() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_2() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_3() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_4() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_5() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_6() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_7() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_8() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
	/**
	* Test case for {@link EndState#getName()}.
	*/
	@Test
	void testGetName_9() {
		EndState endState = EndState.getSingleton();
		String name = endState.getName();
		assertEquals(""com.objectmentors.state.EndState"", name);
	}
	
}

// EndState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#equals(Object)} method.
*/
class EndState_3Test {
		
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_1() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_2() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_3() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_4() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_5() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_6() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_7() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_8() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link EndState#equals(Object)}.
	*/
	@Test
	void testEquals_9() {
		EndState endState = EndState.getSingleton();
		EndState endState2 = EndState.getSingleton();
		boolean equals = endState.equals(endState2);
		assertTrue(equals);
	}
	
}

// EndState_4Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#hashCode()} method.
*/
class EndState_4Test {
		
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_1() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_2() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_3() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_4() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_5() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_6() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_7() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_8() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link EndState#hashCode()}.
	*/
	@Test
	void testHashCode_9() {
		EndState endState = EndState.getSingleton();
		int hashCode = endState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
}

// EndState_5Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.j"
cmpl-6u1sUpUSUaXkTcI34amoiKWMqIUHh,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/IntegerGreaterThanGuardCondition.java,23.143831729888916,stop,"// IntegerGreaterThanGuardCondition.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/15/01 2:33:42 PM)
 * @author:
 */
public class IntegerGreaterThanGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    private transient final int Value;

    private IntegerGreaterThanGuardCondition() {
        Value = 0;
    }

    /**
     * IntegerGreaterThanGuardCondition constructor comment.
     */
    public IntegerGreaterThanGuardCondition(final int pInt) {
        super();
        Value = pInt;
    }

    /**
     * evaluate method comment.
     */
    public boolean evaluate(final Object object) {
        boolean retVal = false;
        try {
            final java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) object).getParameters();
            final Integer integer = (Integer) params.elementAt(0);
            if (integer.intValue() > Value) {
                retVal = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return retVal;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:37:29 PM)
     * @return int
     */
    public int getValue() {
        return Value;
    }
}
","// IntegerGreaterThanGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntegerGreaterThanGuardCondition}.
* It contains ten unit test cases for the {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
*/
class IntegerGreaterThanGuardConditionTest {","// IntegerGreaterThanGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IntegerGreaterThanGuardCondition}.
* It contains ten unit test cases for the {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
*/
class IntegerGreaterThanGuardConditionTest {

	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code null}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_Null() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(null));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector())}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_EmptyEvent() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(new Event(new Vector())));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(0)))}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_Zero() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(0)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(1)))}.
	* Expected result: {@code true}.
	*/
	@Test
	void testEvaluate_One() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertTrue(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(1)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(-1)))}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_MinusOne() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(-1)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(Integer.MAX_VALUE)))}.
	* Expected result: {@code true}.
	*/
	@Test
	void testEvaluate_MaxValue() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertTrue(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(Integer.MAX_VALUE)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(Integer.MIN_VALUE)))}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_MinValue() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(Integer.MIN_VALUE)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(Integer.MAX_VALUE - 1)))}.
	* Expected result: {@code true}.
	*/
	@Test
	void testEvaluate_MaxValueMinusOne() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertTrue(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(Integer.MAX_VALUE - 1)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(Integer.MIN_VALUE + 1)))}.
	* Expected result: {@code false}.
	*/
	@Test
	void testEvaluate_MinValuePlusOne() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertFalse(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(Integer.MIN_VALUE + 1)))));
	}
	
	/**
	* Test case for {@link IntegerGreaterThanGuardCondition#evaluate(Object)} method.
	* Test data: {@code new Event(new Vector(new Integer(Integer.MAX_VALUE / 2)))}.
	* Expected result: {@code true}.
	*/
	@Test
	void testEvaluate_MaxValueDividedByTwo() {
		IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
		assertTrue(integerGreaterThanGuardCondition.evaluate(new Event(new Vector(new Integer(Integer.MAX_VALUE / 2)))));
	}
	
}"
cmpl-6u1tXQLdOTIoS9M7k4dAafzFWtG5O,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_0Test.java,82.23700833320618,length,"// StartState.java
/*
    This code is (c) Don Stewart 2001.

This file is part of OMJState.

    OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
        super();
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState) {
        return EqualsBuilder.reflectionEquals(this, pIState);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName() {
        return NAME;
    }

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton() {
        return SINGLETON;
    }

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {","// StartState_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_0Test {

	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a non-null value.
	*/
	@Test
	void testGetSingleton_0() {
		assertNotNull(StartState.getSingleton());
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link StartState}.
	*/
	@Test
	void testGetSingleton_1() {
		assertTrue(StartState.getSingleton() instanceof StartState);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link IState}.
	*/
	@Test
	void testGetSingleton_2() {
		assertTrue(StartState.getSingleton() instanceof IState);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link Object}.
	*/
	@Test
	void testGetSingleton_3() {
		assertTrue(StartState.getSingleton() instanceof Object);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link uk.me.jockmacmad.jstate.patterns.ISingleton}.
	*/
	@Test
	void testGetSingleton_4() {
		assertTrue(StartState.getSingleton() instanceof uk.me.jockmacmad.jstate.patterns.ISingleton);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link java.lang.Object}.
	*/
	@Test
	void testGetSingleton_5() {
		assertTrue(StartState.getSingleton() instanceof java.lang.Object);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetSingleton_6() {
		assertTrue(StartState.getSingleton() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetSingleton_7() {
		assertTrue(StartState.getSingleton() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetSingleton_8() {
		assertTrue(StartState.getSingleton() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	* <p>
	* This test case checks if the {@link StartState#getSingleton()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetSingleton_9() {
		assertTrue(StartState.getSingleton() instanceof java.lang.String);
	}
	
}

// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getName()} method.
*/
class StartState_1Test {
		
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a non-null value.
	*/
	@Test
	void testGetName_0() {
		assertNotNull(StartState.getSingleton().getName());
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link StartState}.
	*/
	@Test
	void testGetName_1() {
		assertTrue(StartState.getSingleton().getName() instanceof StartState);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link IState}.
	*/
	@Test
	void testGetName_2() {
		assertTrue(StartState.getSingleton().getName() instanceof IState);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link Object}.
	*/
	@Test
	void testGetName_3() {
		assertTrue(StartState.getSingleton().getName() instanceof Object);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link uk.me.jockmacmad.jstate.patterns.ISingleton}.
	*/
	@Test
	void testGetName_4() {
		assertTrue(StartState.getSingleton().getName() instanceof uk.me.jockmacmad.jstate.patterns.ISingleton);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link java.lang.Object}.
	*/
	@Test
	void testGetName_5() {
		assertTrue(StartState.getSingleton().getName() instanceof java.lang.Object);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetName_6() {
		assertTrue(StartState.getSingleton().getName() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetName_7() {
		assertTrue(StartState.getSingleton().getName() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetName_8() {
		assertTrue(StartState.getSingleton().getName() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	* <p>
	* This test case checks if the {@link StartState#getName()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testGetName_9() {
		assertTrue(StartState.getSingleton().getName() instanceof java.lang.String);
	}
	
}

// StartState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartState_2Test {
		
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a non-null value.
	*/
	@Test
	void testToObject_0() {
		assertNotNull(StartState.getSingleton().toObject());
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link StartState}.
	*/
	@Test
	void testToObject_1() {
		assertTrue(StartState.getSingleton().toObject() instanceof StartState);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link IState}.
	*/
	@Test
	void testToObject_2() {
		assertTrue(StartState.getSingleton().toObject() instanceof IState);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link Object}.
	*/
	@Test
	void testToObject_3() {
		assertTrue(StartState.getSingleton().toObject() instanceof Object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link uk.me.jockmacmad.jstate.patterns.ISingleton}.
	*/
	@Test
	void testToObject_4() {
		assertTrue(StartState.getSingleton().toObject() instanceof uk.me.jockmacmad.jstate.patterns.ISingleton);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link java.lang.Object}.
	*/
	@Test
	void testToObject_5() {
		assertTrue(StartState.getSingleton().toObject() instanceof java.lang.Object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testToObject_6() {
		assertTrue(StartState.getSingleton().toObject() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testToObject_7() {
		assertTrue(StartState.getSingleton().toObject() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testToObject_8() {
		assertTrue(StartState.getSingleton().toObject() instanceof java.lang.String);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	* <p>
	* This test case checks if the {@link StartState#toObject()} method returns a value of type {@link java.lang.String}.
	*/
	@Test
	void testToObject_9() {
		assertTrue(StartState.getSingleton().toObject() instanceof java.lang.String);
	}
	
}

// StartState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#equals(Object)} method.
*/
class StartState_3Test {
		
	/**
	* Test case for {@link StartState#equals(Object)}.
	* <p>
	* This test case checks if the {@link StartState#equals(Object)} method returns a non-null value.
	*/
	@Test
	void testEquals_0() {
		assertNotNull(StartState.getSingleton().equals(StartState.getSingleton()));
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	* <p>
	* This test case checks if the {@link StartState#equals(Object)} method returns a value of type {@link StartState}.
	*/
	@Test
	void testEquals_1() {
		assertTrue(StartState.getSingleton().equals(StartState.getSingleton()) instanceof StartState);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	* <p>
	* This test case checks if the {@link StartState#equals(Object)} method returns a value of type {@link IState}.
	*/
	@Test
	void testEquals_2() {
		assertTrue(StartState.getSingleton().equals(StartState.getSingleton()) instanceof IState);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	* <p>
	* This test case checks if the {@link StartState#equals(Object)} method returns a value of type {@link Object}.
	*/
	@Test
	void testEquals_3() {
		assertTrue(StartState.getSingleton().equals(StartState.getSingleton()) instanceof Object);
	}
	
	/**
	"
cmpl-6u1urqhuplox0sMhUatgpyRjxLv1I,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState_1Test.java,91.26317238807678,length,"// StartState.java
/*
    This code is (c) Don Stewart 2001.

This file is part of OMJState.

    OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Field storing a stringified version of the classname.
     * @since 0.1
     */
    public static final java.lang.String NAME = ""com.objectmentors.state.StartState"";

    /**
     * Variable used to store the singleton instance of the StartState class.
     *
     * Uses the private constructor to create the instance on the loading this
     * class.
     * @since 0.1
     */
    private static final StartState SINGLETON = new StartState();

    /**
     * Private constructor, makes sure that there is no default constructor
     * by which people can create a new instance of the StartState.
     *
     * Creation date: (2/20/01 11:12:56 AM)
     * @since 0.1
     * @see getSingleton()
     */
    private StartState() {
        super();
    }

    /**
     *  Method to compare two IState objects.
     * <p>
     *  Returns true if both IState objects are instances of
     *  <code>StartState</code>, otherwise returns false.
     *  <p>
     *  Uses the Apache Commons Lang
     *   <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     *  @since 0.1
     *  @return boolean
     *  @param pIState the State to compare against
     *  the State to compare against
     */
    @Override
    public boolean equals(final Object pIState) {
        return EqualsBuilder.reflectionEquals(this, pIState);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Field storing a stringified version of the classname.
     * Creation date: (2/20/01 10:55:55 AM)
     * @return java.lang.String
     */
    @Override
    public java.lang.String getName() {
        return NAME;
    }

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton() {
        return SINGLETON;
    }

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartState_1Test {","// StartState_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartState_1Test {

	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_1() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_2() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_3() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_4() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_5() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_6() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_7() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_8() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject_9() {
		StartState startState = StartState.getSingleton();
		Object object = startState.toObject();
		assertEquals(startState, object);
	}
	
}

// StartState_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getName()} method.
*/
class StartState_2Test {
		
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_1() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_2() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_3() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_4() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_5() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_6() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_7() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_8() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
	/**
	* Test case for {@link StartState#getName()}.
	*/
	@Test
	void testGetName_9() {
		StartState startState = StartState.getSingleton();
		String name = startState.getName();
		assertEquals(""com.objectmentors.state.StartState"", name);
	}
	
}

// StartState_3Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#equals(Object)} method.
*/
class StartState_3Test {
		
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_1() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_2() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_3() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_4() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_5() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_6() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_7() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_8() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
	/**
	* Test case for {@link StartState#equals(Object)}.
	*/
	@Test
	void testEquals_9() {
		StartState startState = StartState.getSingleton();
		boolean equals = startState.equals(startState);
		assertTrue(equals);
	}
	
}

// StartState_4Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#hashCode()} method.
*/
class StartState_4Test {
		
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_1() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_2() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_3() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_4() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_5() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_6() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_7() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_8() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
	/**
	* Test case for {@link StartState#hashCode()}.
	*/
	@Test
	void testHashCode_9() {
		StartState startState = StartState.getSingleton();
		int hashCode = startState.hashCode();
		assertEquals(hashCode, hashCode);
	}
	
}

// StartState_5Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartState_5Test {
		
	/**
	* Test case for {@link StartState#getSingleton()}.
	*/
	@Test
	void testGetSingleton() {
		StartState startState = StartState.getSingleton();
		assertEquals(startState, startState);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*/
	@Test"
cmpl-6u1wKnlvr4XFAq8ha9BQwSRBbdplq,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,19.972720623016357,stop,"// StringMatchesGuardCondition.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    private final java.lang.String Value;

    /**
     * StringMatchesGuardCondition constructor comment.
     */
    public StringMatchesGuardCondition(java.lang.String newStr) {
        super();
        Value = newStr;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:11:09 PM)
     * @return java.lang.String
     */
    public final java.lang.String getValue() {
        return Value;
    }

    /**
     * Returns a String that represents the value of this object.
     * @return a string representation of the receiver
     */
    @Override
    public String toString() {
        // Insert code to print the receiver here.
        // This implementation forwards the message to super. You may replace or supplement this.
        return super.toString();
    }
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test"");
		assertTrue(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate2() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test2"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate3() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test3"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate4() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test4"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate5() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test5"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate6() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test6"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate7() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test7"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate8() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test8"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate9() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test9"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)}.
	* Test method for {@link StringMatchesGuardCondition#evaluate(Object)}.
	*/
	@Test
	void testEvaluate10() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(""test"");
		Event event = new Event(""test10"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
}"
cmpl-6u1xNbGlj31Lwjt2ibssPfie3Kuz2,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_0Test.java,88.21375966072083,length,"// Transition.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
        super();
        name = pName;
        initialState = pInitialState;
        outcomeState = pOutcomeState;
        triggerEvent = pTriggerEvent;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard) {
        guardConditions.add((IGuardCondition) pGuard);
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard) {
        guardConditions.add(pGuard);
    }

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition) {
        return EqualsBuilder.reflectionEquals(this, pTransition);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions() {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState() {
        return initialState;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState() {
        return outcomeState;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent() {
        return triggerEvent;
    }

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {","// Transition_0Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_0Test {

		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_0() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_1() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_2() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_3() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_4() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_5() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_6() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_7() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_8() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testTrigger_9() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final IState result = transition.trigger(initialState, triggerEvent);
				// Then
				assertEquals(outcomeState, result);
		}
		
}

// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_0() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_1() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_2() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_3() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_4() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_5() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_6() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_7() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
				final Event triggerEvent = new Event(""triggerEvent"");
				final Transition transition = new Transition(""transition"", triggerEvent, initialState, outcomeState);
				// When
				final boolean result = transition.willTrigger(initialState, triggerEvent);
				// Then
				assertTrue(result);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* The test case is successful if the method returns the expected outcome state.
		*/
		@Test
		void testWillTrigger_8() {
				// Given
				final IState initialState = new State(""initialState"");
				final IState outcomeState = new State(""outcomeState"");
			"
cmpl-6u1ynQJtUUtuYgvhkSwXEuIzzFYlg,/EvoSuiteBenchmark/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition_1Test.java,87.52164697647095,length,"// Transition.java
/*
	This code is (c) Don Stewart 2001.

This file is part of OMJState.

	OMJState is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    OMJState is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with OMJState; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 * @author:
 */
public class Transition {

    /**
     * The initial state that the state machine must
     * be in for this transition to apply.
     */
    private final IState initialState;

    /**
     * The outcome state that the state machine will be
     *   in if this transition applies.
     */
    private final IState outcomeState;

    /**
     * List of guard conditions that must be
     * evaluated and return true before the transition
     * can execute.
     */
    private final java.util.List<IGuardCondition> guardConditions = new java.util.ArrayList<IGuardCondition>();

    /**
     * The event upon which this transition takes place.
     */
    private final Event triggerEvent;

    /**
     * The name of the transition.
     */
    private final java.lang.String name;

    /**
     * Transition constructor comment.
     *
     * @param pName the name of this Transition
     * @param pTriggerEvent the Event that causes
     * this Transition
     * @param pInitialState the State which we must
     * be in to initiate this Transition
     * @param pOutcomeState the State we will be
     * in once we have performed this Transition
     */
    public Transition(final java.lang.String pName, final Event pTriggerEvent, final IState pInitialState, final IState pOutcomeState) {
        super();
        name = pName;
        initialState = pInitialState;
        outcomeState = pOutcomeState;
        triggerEvent = pTriggerEvent;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final uk.me.jockmacmad.jstate.predicate.IPredicate pGuard) {
        guardConditions.add((IGuardCondition) pGuard);
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 2:57:02 PM)
     * @param pGuard com.objectmentors.state.IGuardCondition
     */
    public final void addGuardCondition(final IGuardCondition pGuard) {
        guardConditions.add(pGuard);
    }

    /**
     * Method to compare two Transition objects.
     *
     * Returns true if both Transition objects are identical,
     * otherwise returns false.
     * <p>
     * Uses the Apache Commons Lang
     *  <code>EqualsBuilder.reflectionEquals(this, pIState);</code> function.
     * @since 0.1
     * @return boolean
     * @param pTransition the Transition to compare against
     * the State to compare against
     */
    @Override
    public final boolean equals(final Object pTransition) {
        return EqualsBuilder.reflectionEquals(this, pTransition);
    }

    /**
     *  Builds the <code>hashCode</code> of this <code>Object</code>
     *  using the Apache Commons Lang
     *  <code>HashCodeBuilder.reflectionHashCode(this);</code> function.
     * @return int the HashCode of this <code>Object</code>
     */
    @Override
    public final int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/14/01 6:19:57 PM)
     */
    protected void evaluateGuardConditions() {
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getInitialState() {
        return initialState;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.IState
     */
    public final IState getOutcomeState() {
        return outcomeState;
    }

    /**
     * Insert the method's description here.
     * Creation date: (2/15/01 9:34:41 AM)
     * @return com.objectmentors.state.Event
     */
    public final Event getTriggerEvent() {
        return triggerEvent;
    }

    /**
     * Insert the method's description here.
     * Creation date: (15/02/01 2:14:58 PM)
     * @return java.lang.String
     */
    @Override
    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {","// Transition_1Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class Transition_1Test {

		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_1() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_2() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_3() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_4() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_5() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_6() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_7() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_8() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_9() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
		
		/**
		* Test case for the {@link Transition#willTrigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = false</li>
		* </ul>
		*/
		@Test
		void testWillTrigger_10() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final boolean retVal = transition.willTrigger(pCurrentState, pEvent);
				
				// Assert
				assertFalse(retVal);
		}
}

// Transition_2Test.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class Transition_2Test {
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = {@link State#State(String)}</li>
		* </ul>
		*/
		@Test
		void testTrigger_1() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final IState retVal = transition.trigger(pCurrentState, pEvent);
				
				// Assert
				assertEquals(new State(""State""), retVal);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = {@link State#State(String)}</li>
		* </ul>
		*/
		@Test
		void testTrigger_2() {
				// Arrange
				final IState pCurrentState = new State(""State"");
				final Event pEvent = new Event(""Event"");
				final Transition transition = new Transition(""Transition"", new Event(""Event""), new State(""State""), new State(""State""));
				
				// Act
				final IState retVal = transition.trigger(pCurrentState, pEvent);
				
				// Assert
				assertEquals(new State(""State""), retVal);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* <p>
		* This test case is for the following input:
		* <ul>
		* <li>pCurrentState = {@link State#State(String)}</li>
		* <li>pEvent = {@link Event#Event(String)}</li>
		* </ul>
		* <p>
		* The expected output is:
		* <ul>
		* <li>retVal = {@link State#State(String"
