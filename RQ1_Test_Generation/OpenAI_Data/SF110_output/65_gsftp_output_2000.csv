ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uBMsWAqxeNrYWRTtnWr365QCHMXS,/EvoSuiteBenchmark/65_gsftp/src/main/java/com/isnetworks/ssh/FileList.java,43.22943830490112,length,"// FileList.java
/**
 * ***************************************************************************
 *
 *  Modified by Zhong Li, added modify time
 *
 *  Copyright (c) 2001 by ISNetworks, Seattle, WA.
 *                        www.isnetworks.com, info@isnetworks.com
 *  Based on MindTerm from Mindbright Technology AB, Stockholm, Sweden.
 *                         www.mindbright.se, info@mindbright.se
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * ***************************************************************************
 */
/**
 * Subclass of java.awt.List which allows the List to be treated as though
 * it directly help FileListItems instead of Strings.  Handles the setting
 * and getting of the List's contents as FileListItems.
 */
package com.isnetworks.ssh;

import java.awt.*;
import java.util.*;

public class FileList extends java.awt.List {

    /**
     * Array of FileListItems which corresponds to the contents of the List
     */
    private Vector mListItems;

    private String formatString(String s1, String s2, int len) {
        int an = len - s1.length();
        if (an < 4) {
            an = 4;
        }
        for (int i = 0; i < an; i++) {
            s1 += "" "";
        }
        s1 += s2;
        return s1;
    }

    /**
     * Set the contents of the List to be the array
     */
    public void setListItems(Vector listItems) {
        this.setVisible(false);
        clear();
        mListItems = listItems;
        for (int i = 0; i < listItems.size(); i++) {
            FileListItem item = (FileListItem) listItems.elementAt(i);
            String text = """";
            if (item.isDirectory()) {
                text = ""["" + item.getName() + ""]"";
            } else {
                text = item.getName();
                long s = item.getSize();
                String ls = """" + s + ""B"";
                if (s > 1024) {
                    if (s < 1024 * 1024L)
                        ls = """" + s / 1024L + ""KB"";
                    else
                        ls = """" + s / (1024L * 1024L) + ""MB"";
                }
                text = formatString(text, ""("" + ls + "")"", 24);
            }
            if (item.getLastModify() > 0) {
                text = formatString(text, ""<"" + new Date(item.getLastModify()).toLocaleString() + "">"", 36);
            }
            add(text);
        }
        this.setVisible(true);
    }

    /**
     * Gets the first selected item in the list
     */
    public FileListItem getSelectedFileListItem() {
        if (getSelectedIndex() != -1) {
            return (FileListItem) mListItems.elementAt(getSelectedIndex());
        }
        return null;
    }

    /**
     * Gets all of the current selected items in the list.  Filters out the
     * entry "".."" if it exists since the user can't do anything with
     * it, except double click on it to move to the parent directory
     */
    public FileListItem[] getSelectedFileListItems() {
        int[] selectedIndexes = getSelectedIndexes();
        FileListItem[] selectedItems = new FileListItem[getSelectionCount()];
        // Don't count .. in the selected list
        boolean skipZero = isIndexSelected(0) && ((FileListItem) mListItems.elementAt(0)).getName().equals("".."");
        int itemIndex = 0;
        for (int i = 0; i < selectedIndexes.length; i++) {
            if (selectedIndexes[i] != 0 || !skipZero) {
                selectedItems[itemIndex++] = (FileListItem) mListItems.elementAt(selectedIndexes[i]);
            }
        }
        return selectedItems;
    }

    /**
     * @return Number of items currently selected in the list, not counting "".."" if it is selected
     */
    public int getSelectionCount() {
        int[] selectedIndexes = getSelectedIndexes();
        // Don't count .. in the selected list
        if (isIndexSelected(0) && ((FileListItem) mListItems.elementAt(0)).getName().equals("".."")) {
            return selectedIndexes.length - 1;
        }
        return selectedIndexes.length;
    }

    /**
     * @return The FileListItem that matches the given String, displayed in the list, or null if it does not exist
     */
    public FileListItem getFileListItem(String name) {
        for (int i = 0; i < getItemCount(); i++) {
            if (name.equals(getItem(i))) {
                return (FileListItem) mListItems.elementAt(i);
            }
        }
        return null;
    }
}
","// FileListTest.java
/**
 * Subclass of java.awt.List which allows the List to be treated as though
 * it directly help FileListItems instead of Strings.  Handles the setting
 * and getting of the List's contents as FileListItems.
 */
package com.isnetworks.ssh;

import java.awt.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileList}.
* It contains ten unit test cases for the {@link FileList#getFileListItem(String)} method.
*/
class FileListTest {","// FileListTest.java
/**
 * Subclass of java.awt.List which allows the List to be treated as though
 * it directly help FileListItems instead of Strings.  Handles the setting
 * and getting of the List's contents as FileListItems.
 */
package com.isnetworks.ssh;

import java.awt.*;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileList}.
* It contains ten unit test cases for the {@link FileList#getFileListItem(String)} method.
*/
class FileListTest {

		/**
		* Test case 1 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is null.
		*/
		@Test
		void testGetFileListItem1() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNull(fileList.getFileListItem(null));
		}
		
		/**
		* Test case 2 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is empty.
		*/
		@Test
		void testGetFileListItem2() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNull(fileList.getFileListItem(""""));
		}
		
		/**
		* Test case 3 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is not in the list.
		*/
		@Test
		void testGetFileListItem3() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNull(fileList.getFileListItem(""test4""));
		}
		
		/**
		* Test case 4 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem4() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test1""));
		}
		
		/**
		* Test case 5 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem5() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test2""));
		}
		
		/**
		* Test case 6 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem6() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test3""));
		}
		
		/**
		* Test case 7 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem7() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test1""));
		}
		
		/**
		* Test case 8 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem8() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test2""));
		}
		
		/**
		* Test case 9 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem9() {
				FileList fileList = new FileList();
				Vector<FileListItem> listItems = new Vector<FileListItem>();
				listItems.add(new FileListItem(""test1"", false, 0, 0));
				listItems.add(new FileListItem(""test2"", false, 0, 0));
				listItems.add(new FileListItem(""test3"", false, 0, 0));
				fileList.setListItems(listItems);
				assertNotNull(fileList.getFileListItem(""test3""));
		}
		
		/**
		* Test case 10 for {@link FileList#getFileListItem(String)} method.
		* It tests the case when the given String is in the list.
		*/
		@Test
		void testGetFileListItem10() {
"
cmpl-6uBNu1qBwojpCYmtfUghQt9qSqhMb,/EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogs_0Test.java,51.45255422592163,length,"// SSHMiscDialogs.java
/**
 * ***************************************************************************
 *
 *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.
 *                  www.mindbright.se, info@mindbright.se
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * ****************************************************************************
 *  $Author: webjabber $
 *  $Date: 2006/06/13 18:43:42 $
 *  $Name:  $
 * ****************************************************************************
 *
 *  Modified by ISNetworks
 *
 * ***************************************************************************
 */
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;

public final class SSHMiscDialogs {

    private static Dialog alertDialog = null;

    private static Label alertLabel;

    private static Button okAlertBut;

    public static void alert(String title, String message, Frame parent) {
        if (alertDialog == null) {
            alertDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            alertDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.weightx = 1.0;
            gridc.weighty = 1.0;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            alertLabel = new Label();
            grid.setConstraints(alertLabel, gridc);
            alertDialog.add(alertLabel);
            okAlertBut = new Button(""OK"");
            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));
            gridc.fill = GridBagConstraints.NONE;
            gridc.gridy = 1;
            grid.setConstraints(okAlertBut, gridc);
            alertDialog.add(okAlertBut);
            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));
            AWTConvenience.setBackgroundOfChildren(alertDialog);
            alertDialog.setResizable(true);
        }
        alertDialog.setTitle(title);
        alertDialog.remove(alertLabel);
        alertLabel.setText(message);
        alertDialog.add(alertLabel);
        alertDialog.pack();
        AWTConvenience.placeDialog(alertDialog);
        okAlertBut.requestFocus();
        alertDialog.setVisible(true);
    }

    /**
     * Original method
     */
    public static String password(String title, String message, Frame parent) {
        return password(title, message, parent, '*', """", ""Password:"");
    }

    /**
     * Create a dialog box with a title, a text field, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent) {
        return password(title, """", parent, (char) 0, """", message);
    }

    /**
     * Create a dialog box with a title, a text field with a default value, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent, String defaultValue) {
        return password(title, """", parent, (char) 0, defaultValue, message);
    }

    private static Dialog passwordDialog = null;

    private static Label pwdMsgLabel;

    private static Label pwdTextBoxLabel;

    private static String pwdAnswer;

    private static TextField pwdPassword;

    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {
        if (passwordDialog == null) {
            passwordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            passwordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            pwdMsgLabel = new Label();
            grid.setConstraints(pwdMsgLabel, gridc);
            passwordDialog.add(pwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            pwdTextBoxLabel = new Label(""Password:"");
            grid.setConstraints(pwdTextBoxLabel, gridc);
            passwordDialog.add(pwdTextBoxLabel);
            pwdPassword = new TextField();
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(pwdPassword, gridc);
            passwordDialog.add(pwdPassword);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        pwdAnswer = pwdPassword.getText();
                    } else {
                        pwdAnswer = null;
                    }
                    passwordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 2;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            passwordDialog.add(bp);
            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(passwordDialog);
            passwordDialog.setResizable(true);
        }
        passwordDialog.setTitle(title);
        passwordDialog.remove(pwdMsgLabel);
        pwdMsgLabel.setText(message);
        pwdPassword.setText(defaultValue);
        pwdPassword.setEchoChar(echo);
        pwdPassword.setColumns(40);
        passwordDialog.add(pwdMsgLabel);
        passwordDialog.pack();
        pwdTextBoxLabel.setText(textBoxLabel);
        passwordDialog.setSize(450, 150);
        AWTConvenience.placeDialog(passwordDialog);
        passwordDialog.setVisible(true);
        return pwdAnswer;
    }

    private static Dialog setPasswordDialog = null;

    private static Label setPwdMsgLabel;

    private static String setPwdAnswer;

    private static TextField setPwdText, setPwdText2;

    public static String setPassword(String title, String message, Frame parent) {
        if (setPasswordDialog == null) {
            setPasswordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            setPasswordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            setPwdMsgLabel = new Label();
            grid.setConstraints(setPwdMsgLabel, gridc);
            setPasswordDialog.add(setPwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            lbl = new Label(""Password:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText = new TextField("""", 12);
            grid.setConstraints(setPwdText, gridc);
            setPwdText.setEchoChar('*');
            setPasswordDialog.add(setPwdText);
            gridc.gridy = 2;
            lbl = new Label(""Password again:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText2 = new TextField("""", 12);
            grid.setConstraints(setPwdText2, gridc);
            setPwdText2.setEchoChar('*');
            setPasswordDialog.add(setPwdText2);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        setPwdAnswer = setPwdText.getText();
                        if (!setPwdAnswer.equals(setPwdText2.getText())) {
                            setPwdText.setText("""");
                            setPwdText2.setText("""");
                            return;
                        }
                    } else {
                        setPwdAnswer = null;
                    }
                    setPasswordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 3;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            setPasswordDialog.add(bp);
            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);
            setPasswordDialog.setResizable(true);
        }
        setPasswordDialog.setTitle(title);
        setPasswordDialog.remove(setPwdMsgLabel);
        setPwdMsgLabel.setText(message);
        setPwdText.setText("""");
        setPwdText2.setText("""");
        setPasswordDialog.add(setPwdMsgLabel);
        setPasswordDialog.pack();
        AWTConvenience.placeDialog(setPasswordDialog);
        setPasswordDialog.setVisible(true);
        return setPwdAnswer;
    }

    private static Dialog confirmDialog = null;

    private static Label confirmLabel;

    private static boolean confirmRet;

    private static Button yesBut, noBut;

    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {
        if (confirmDialog == null) {
            confirmDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            confirmDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            confirmLabel = new Label();
            grid.setConstraints(confirmLabel, gridc);
            confirmDialog.add(confirmLabel);
            Panel bp = new Panel(new FlowLayout());
            bp.add(yesBut = new Button(""Yes""));
            yesBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""Yes""))
                        confirmRet = true;
                    else
                        confirmRet = false;
                    confirmDialog.setVisible(false);
                }
            });
            bp.add(noBut = new Button(""No""));
            noBut.addActionListener(al);
            gridc.gridy = 1;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            confirmDialog.add(bp);
            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));
            AWTConvenience.setBackgroundOfChildren(confirmDialog);
            confirmDialog.setResizable(true);
        }
        confirmDialog.remove(confirmLabel);
        confirmLabel.setText(message);
        confirmDialog.add(confirmLabel);
        confirmDialog.pack();
        AWTConvenience.placeDialog(confirmDialog);
        if (defAnswer)
            yesBut.requestFocus();
        else
            noBut.requestFocus();
        confirmDialog.setVisible(true);
        return confirmRet;
    }

    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {
        Dialog textDialog = null;
        TextArea textArea;
        Button okTextBut;
        textDialog = new Dialog(parent, title, true);
        GridBagLayout grid = new GridBagLayout();
        GridBagConstraints gridc = new GridBagConstraints();
        textDialog.setLayout(grid);
        gridc.fill = GridBagConstraints.NONE;
        gridc.gridwidth = GridBagConstraints.REMAINDER;
        gridc.anchor = GridBagConstraints.CENTER;
        gridc.insets = new Insets(4, 4, 4, 4);
        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);
        grid.setConstraints(textArea, gridc);
        textDialog.add(textArea);
        textArea.setEditable(false);
        okTextBut = new Button(""OK"");
        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));
        gridc.fill = GridBagConstraints.NONE;
        grid.setConstraints(okTextBut, gridc);
        textDialog.add(okTextBut);
        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));
        AWTConvenience.setBackgroundOfChildren(textDialog);
        textDialog.setResizable(true);
        textDialog.pack();
        AWTConvenience.placeDialog(textDialog);
        okTextBut.requestFocus();
        textDialog.setVisible(true);
    }
}
","// SSHMiscDialogs_0Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
*/
class SSHMiscDialogs_0Test {","// SSHMiscDialogs_0Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
*/
class SSHMiscDialogs_0Test {

		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is null and the message is null and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_0() {
				String title = null;
				String message = null;
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_1() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_2() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_3() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_4() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_5() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_6() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_7() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the echo is '*' and the defaultValue is """" and the textBoxLabel is ""Password:"" and the result is null.
		*/
		@Test
		public void testPassword_8() {
				String title = """";
				String message = """";
				Frame parent = null;
				char echo = '*';
				String defaultValue = """";
				String textBoxLabel = ""Password:"";
				String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
				assertNull(result);
		}
		
		/**
		* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
		* It tests the case that the title is empty and the message is empty and the parent is null and the"
cmpl-6uBOxOXiGCBq1KVxI5EhJ0pnfnnkz,/EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogs_1Test.java,50.205199241638184,length,"// SSHMiscDialogs.java
/**
 * ***************************************************************************
 *
 *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.
 *                  www.mindbright.se, info@mindbright.se
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * ****************************************************************************
 *  $Author: webjabber $
 *  $Date: 2006/06/13 18:43:42 $
 *  $Name:  $
 * ****************************************************************************
 *
 *  Modified by ISNetworks
 *
 * ***************************************************************************
 */
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;

public final class SSHMiscDialogs {

    private static Dialog alertDialog = null;

    private static Label alertLabel;

    private static Button okAlertBut;

    public static void alert(String title, String message, Frame parent) {
        if (alertDialog == null) {
            alertDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            alertDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.weightx = 1.0;
            gridc.weighty = 1.0;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            alertLabel = new Label();
            grid.setConstraints(alertLabel, gridc);
            alertDialog.add(alertLabel);
            okAlertBut = new Button(""OK"");
            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));
            gridc.fill = GridBagConstraints.NONE;
            gridc.gridy = 1;
            grid.setConstraints(okAlertBut, gridc);
            alertDialog.add(okAlertBut);
            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));
            AWTConvenience.setBackgroundOfChildren(alertDialog);
            alertDialog.setResizable(true);
        }
        alertDialog.setTitle(title);
        alertDialog.remove(alertLabel);
        alertLabel.setText(message);
        alertDialog.add(alertLabel);
        alertDialog.pack();
        AWTConvenience.placeDialog(alertDialog);
        okAlertBut.requestFocus();
        alertDialog.setVisible(true);
    }

    /**
     * Original method
     */
    public static String password(String title, String message, Frame parent) {
        return password(title, message, parent, '*', """", ""Password:"");
    }

    /**
     * Create a dialog box with a title, a text field, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent) {
        return password(title, """", parent, (char) 0, """", message);
    }

    /**
     * Create a dialog box with a title, a text field with a default value, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent, String defaultValue) {
        return password(title, """", parent, (char) 0, defaultValue, message);
    }

    private static Dialog passwordDialog = null;

    private static Label pwdMsgLabel;

    private static Label pwdTextBoxLabel;

    private static String pwdAnswer;

    private static TextField pwdPassword;

    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {
        if (passwordDialog == null) {
            passwordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            passwordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            pwdMsgLabel = new Label();
            grid.setConstraints(pwdMsgLabel, gridc);
            passwordDialog.add(pwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            pwdTextBoxLabel = new Label(""Password:"");
            grid.setConstraints(pwdTextBoxLabel, gridc);
            passwordDialog.add(pwdTextBoxLabel);
            pwdPassword = new TextField();
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(pwdPassword, gridc);
            passwordDialog.add(pwdPassword);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        pwdAnswer = pwdPassword.getText();
                    } else {
                        pwdAnswer = null;
                    }
                    passwordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 2;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            passwordDialog.add(bp);
            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(passwordDialog);
            passwordDialog.setResizable(true);
        }
        passwordDialog.setTitle(title);
        passwordDialog.remove(pwdMsgLabel);
        pwdMsgLabel.setText(message);
        pwdPassword.setText(defaultValue);
        pwdPassword.setEchoChar(echo);
        pwdPassword.setColumns(40);
        passwordDialog.add(pwdMsgLabel);
        passwordDialog.pack();
        pwdTextBoxLabel.setText(textBoxLabel);
        passwordDialog.setSize(450, 150);
        AWTConvenience.placeDialog(passwordDialog);
        passwordDialog.setVisible(true);
        return pwdAnswer;
    }

    private static Dialog setPasswordDialog = null;

    private static Label setPwdMsgLabel;

    private static String setPwdAnswer;

    private static TextField setPwdText, setPwdText2;

    public static String setPassword(String title, String message, Frame parent) {
        if (setPasswordDialog == null) {
            setPasswordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            setPasswordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            setPwdMsgLabel = new Label();
            grid.setConstraints(setPwdMsgLabel, gridc);
            setPasswordDialog.add(setPwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            lbl = new Label(""Password:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText = new TextField("""", 12);
            grid.setConstraints(setPwdText, gridc);
            setPwdText.setEchoChar('*');
            setPasswordDialog.add(setPwdText);
            gridc.gridy = 2;
            lbl = new Label(""Password again:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText2 = new TextField("""", 12);
            grid.setConstraints(setPwdText2, gridc);
            setPwdText2.setEchoChar('*');
            setPasswordDialog.add(setPwdText2);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        setPwdAnswer = setPwdText.getText();
                        if (!setPwdAnswer.equals(setPwdText2.getText())) {
                            setPwdText.setText("""");
                            setPwdText2.setText("""");
                            return;
                        }
                    } else {
                        setPwdAnswer = null;
                    }
                    setPasswordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 3;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            setPasswordDialog.add(bp);
            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);
            setPasswordDialog.setResizable(true);
        }
        setPasswordDialog.setTitle(title);
        setPasswordDialog.remove(setPwdMsgLabel);
        setPwdMsgLabel.setText(message);
        setPwdText.setText("""");
        setPwdText2.setText("""");
        setPasswordDialog.add(setPwdMsgLabel);
        setPasswordDialog.pack();
        AWTConvenience.placeDialog(setPasswordDialog);
        setPasswordDialog.setVisible(true);
        return setPwdAnswer;
    }

    private static Dialog confirmDialog = null;

    private static Label confirmLabel;

    private static boolean confirmRet;

    private static Button yesBut, noBut;

    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {
        if (confirmDialog == null) {
            confirmDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            confirmDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            confirmLabel = new Label();
            grid.setConstraints(confirmLabel, gridc);
            confirmDialog.add(confirmLabel);
            Panel bp = new Panel(new FlowLayout());
            bp.add(yesBut = new Button(""Yes""));
            yesBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""Yes""))
                        confirmRet = true;
                    else
                        confirmRet = false;
                    confirmDialog.setVisible(false);
                }
            });
            bp.add(noBut = new Button(""No""));
            noBut.addActionListener(al);
            gridc.gridy = 1;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            confirmDialog.add(bp);
            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));
            AWTConvenience.setBackgroundOfChildren(confirmDialog);
            confirmDialog.setResizable(true);
        }
        confirmDialog.remove(confirmLabel);
        confirmLabel.setText(message);
        confirmDialog.add(confirmLabel);
        confirmDialog.pack();
        AWTConvenience.placeDialog(confirmDialog);
        if (defAnswer)
            yesBut.requestFocus();
        else
            noBut.requestFocus();
        confirmDialog.setVisible(true);
        return confirmRet;
    }

    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {
        Dialog textDialog = null;
        TextArea textArea;
        Button okTextBut;
        textDialog = new Dialog(parent, title, true);
        GridBagLayout grid = new GridBagLayout();
        GridBagConstraints gridc = new GridBagConstraints();
        textDialog.setLayout(grid);
        gridc.fill = GridBagConstraints.NONE;
        gridc.gridwidth = GridBagConstraints.REMAINDER;
        gridc.anchor = GridBagConstraints.CENTER;
        gridc.insets = new Insets(4, 4, 4, 4);
        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);
        grid.setConstraints(textArea, gridc);
        textDialog.add(textArea);
        textArea.setEditable(false);
        okTextBut = new Button(""OK"");
        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));
        gridc.fill = GridBagConstraints.NONE;
        grid.setConstraints(okTextBut, gridc);
        textDialog.add(okTextBut);
        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));
        AWTConvenience.setBackgroundOfChildren(textDialog);
        textDialog.setResizable(true);
        textDialog.pack();
        AWTConvenience.placeDialog(textDialog);
        okTextBut.requestFocus();
        textDialog.setVisible(true);
    }
}
","// SSHMiscDialogs_1Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
*/
class SSHMiscDialogs_1Test {","// SSHMiscDialogs_1Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
*/
class SSHMiscDialogs_1Test {

	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the title is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullTitle() {
		try {
			SSHMiscDialogs.textfield(null, ""message"", new Frame());
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the title is empty and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_EmptyTitle() {
		try {
			SSHMiscDialogs.textfield("""", ""message"", new Frame());
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the message is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullMessage() {
		try {
			SSHMiscDialogs.textfield(""title"", null, new Frame());
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the message is empty and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_EmptyMessage() {
		try {
			SSHMiscDialogs.textfield(""title"", """", new Frame());
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the parent is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullParent() {
		try {
			SSHMiscDialogs.textfield(""title"", ""message"", null);
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the title is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullTitle_DefaultValue() {
		try {
			SSHMiscDialogs.textfield(null, ""message"", new Frame(), ""defaultValue"");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the title is empty and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_EmptyTitle_DefaultValue() {
		try {
			SSHMiscDialogs.textfield("""", ""message"", new Frame(), ""defaultValue"");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the message is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullMessage_DefaultValue() {
		try {
			SSHMiscDialogs.textfield(""title"", null, new Frame(), ""defaultValue"");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the message is empty and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_EmptyMessage_DefaultValue() {
		try {
			SSHMiscDialogs.textfield(""title"", """", new Frame(), ""defaultValue"");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the parent is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullParent_DefaultValue() {
		try {
			SSHMiscDialogs.textfield(""title"", ""message"", null, ""defaultValue"");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the default value is null and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_NullDefaultValue() {
		try {
			SSHMiscDialogs.textfield(""title"", ""message"", new Frame(), null);
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame)} method.
	* It tests the case that the default value is empty and expects IllegalArgumentException.
	*/
	@Test
	void testTextfield_EmptyDefaultValue() {
		try {
			SSHMiscDialogs.textfield(""title"", ""message"", new Frame(), """");
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
}

// SSHMiscDialogs_2Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
*/
class SSHMiscDialogs_2Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
	* It tests the case that the title is null and expects IllegalArgumentException.
	*/
	@Test
	void testPassword_NullTitle() {
		try {
			SSHMiscDialogs.password(null, ""message"", new Frame());
			fail(""IllegalArgumentException expected."");
		} catch (IllegalArgumentException e) {
			// As expected.
		}
	}
	
	/**
	* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method"
cmpl-6uBQ0LRN5rXBa0t7oEQ4R5UKHEcep,/EvoSuiteBenchmark/65_gsftp/src/main/java/mindbright/ssh/SSHMiscDialogs_2Test.java,49.71513915061951,,"// SSHMiscDialogs.java
/**
 * ***************************************************************************
 *
 *  Copyright (c) 1998,99 by Mindbright Technology AB, Stockholm, Sweden.
 *                  www.mindbright.se, info@mindbright.se
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * ****************************************************************************
 *  $Author: webjabber $
 *  $Date: 2006/06/13 18:43:42 $
 *  $Name:  $
 * ****************************************************************************
 *
 *  Modified by ISNetworks
 *
 * ***************************************************************************
 */
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;

public final class SSHMiscDialogs {

    private static Dialog alertDialog = null;

    private static Label alertLabel;

    private static Button okAlertBut;

    public static void alert(String title, String message, Frame parent) {
        if (alertDialog == null) {
            alertDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            alertDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.weightx = 1.0;
            gridc.weighty = 1.0;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            alertLabel = new Label();
            grid.setConstraints(alertLabel, gridc);
            alertDialog.add(alertLabel);
            okAlertBut = new Button(""OK"");
            okAlertBut.addActionListener(new AWTConvenience.CloseAction(alertDialog));
            gridc.fill = GridBagConstraints.NONE;
            gridc.gridy = 1;
            grid.setConstraints(okAlertBut, gridc);
            alertDialog.add(okAlertBut);
            alertDialog.addWindowListener(new AWTConvenience.CloseAdapter(okAlertBut));
            AWTConvenience.setBackgroundOfChildren(alertDialog);
            alertDialog.setResizable(true);
        }
        alertDialog.setTitle(title);
        alertDialog.remove(alertLabel);
        alertLabel.setText(message);
        alertDialog.add(alertLabel);
        alertDialog.pack();
        AWTConvenience.placeDialog(alertDialog);
        okAlertBut.requestFocus();
        alertDialog.setVisible(true);
    }

    /**
     * Original method
     */
    public static String password(String title, String message, Frame parent) {
        return password(title, message, parent, '*', """", ""Password:"");
    }

    /**
     * Create a dialog box with a title, a text field, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent) {
        return password(title, """", parent, (char) 0, """", message);
    }

    /**
     * Create a dialog box with a title, a text field with a default value, and label for the text field
     */
    public static String textfield(String title, String message, Frame parent, String defaultValue) {
        return password(title, """", parent, (char) 0, defaultValue, message);
    }

    private static Dialog passwordDialog = null;

    private static Label pwdMsgLabel;

    private static Label pwdTextBoxLabel;

    private static String pwdAnswer;

    private static TextField pwdPassword;

    public static String password(String title, String message, Frame parent, char echo, String defaultValue, String textBoxLabel) {
        if (passwordDialog == null) {
            passwordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            passwordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            pwdMsgLabel = new Label();
            grid.setConstraints(pwdMsgLabel, gridc);
            passwordDialog.add(pwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            pwdTextBoxLabel = new Label(""Password:"");
            grid.setConstraints(pwdTextBoxLabel, gridc);
            passwordDialog.add(pwdTextBoxLabel);
            pwdPassword = new TextField();
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(pwdPassword, gridc);
            passwordDialog.add(pwdPassword);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        pwdAnswer = pwdPassword.getText();
                    } else {
                        pwdAnswer = null;
                    }
                    passwordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 2;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            passwordDialog.add(bp);
            passwordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(passwordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(passwordDialog);
            passwordDialog.setResizable(true);
        }
        passwordDialog.setTitle(title);
        passwordDialog.remove(pwdMsgLabel);
        pwdMsgLabel.setText(message);
        pwdPassword.setText(defaultValue);
        pwdPassword.setEchoChar(echo);
        pwdPassword.setColumns(40);
        passwordDialog.add(pwdMsgLabel);
        passwordDialog.pack();
        pwdTextBoxLabel.setText(textBoxLabel);
        passwordDialog.setSize(450, 150);
        AWTConvenience.placeDialog(passwordDialog);
        passwordDialog.setVisible(true);
        return pwdAnswer;
    }

    private static Dialog setPasswordDialog = null;

    private static Label setPwdMsgLabel;

    private static String setPwdAnswer;

    private static TextField setPwdText, setPwdText2;

    public static String setPassword(String title, String message, Frame parent) {
        if (setPasswordDialog == null) {
            setPasswordDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            setPasswordDialog.setLayout(grid);
            Label lbl;
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            setPwdMsgLabel = new Label();
            grid.setConstraints(setPwdMsgLabel, gridc);
            setPasswordDialog.add(setPwdMsgLabel);
            gridc.gridy = 1;
            gridc.gridwidth = 1;
            gridc.anchor = GridBagConstraints.WEST;
            lbl = new Label(""Password:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText = new TextField("""", 12);
            grid.setConstraints(setPwdText, gridc);
            setPwdText.setEchoChar('*');
            setPasswordDialog.add(setPwdText);
            gridc.gridy = 2;
            lbl = new Label(""Password again:"");
            grid.setConstraints(lbl, gridc);
            setPasswordDialog.add(lbl);
            setPwdText2 = new TextField("""", 12);
            grid.setConstraints(setPwdText2, gridc);
            setPwdText2.setEchoChar('*');
            setPasswordDialog.add(setPwdText2);
            Panel bp = new Panel(new FlowLayout());
            Button okBut, cancBut;
            bp.add(okBut = new Button(""OK""));
            okBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""OK"")) {
                        setPwdAnswer = setPwdText.getText();
                        if (!setPwdAnswer.equals(setPwdText2.getText())) {
                            setPwdText.setText("""");
                            setPwdText2.setText("""");
                            return;
                        }
                    } else {
                        setPwdAnswer = null;
                    }
                    setPasswordDialog.setVisible(false);
                }
            });
            bp.add(cancBut = new Button(""Cancel""));
            cancBut.addActionListener(al);
            gridc.gridy = 3;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            setPasswordDialog.add(bp);
            setPasswordDialog.addWindowListener(new AWTConvenience.CloseAdapter(cancBut));
            AWTConvenience.setKeyListenerOfChildren(setPasswordDialog, new AWTConvenience.OKCancelAdapter(okBut, cancBut), null);
            AWTConvenience.setBackgroundOfChildren(setPasswordDialog);
            setPasswordDialog.setResizable(true);
        }
        setPasswordDialog.setTitle(title);
        setPasswordDialog.remove(setPwdMsgLabel);
        setPwdMsgLabel.setText(message);
        setPwdText.setText("""");
        setPwdText2.setText("""");
        setPasswordDialog.add(setPwdMsgLabel);
        setPasswordDialog.pack();
        AWTConvenience.placeDialog(setPasswordDialog);
        setPasswordDialog.setVisible(true);
        return setPwdAnswer;
    }

    private static Dialog confirmDialog = null;

    private static Label confirmLabel;

    private static boolean confirmRet;

    private static Button yesBut, noBut;

    public static boolean confirm(String title, String message, boolean defAnswer, Frame parent) {
        if (confirmDialog == null) {
            confirmDialog = new Dialog(parent, title, true);
            GridBagLayout grid = new GridBagLayout();
            GridBagConstraints gridc = new GridBagConstraints();
            ActionListener al;
            confirmDialog.setLayout(grid);
            gridc.fill = GridBagConstraints.HORIZONTAL;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            gridc.anchor = GridBagConstraints.CENTER;
            gridc.insets = new Insets(8, 4, 4, 8);
            gridc.gridy = 0;
            confirmLabel = new Label();
            grid.setConstraints(confirmLabel, gridc);
            confirmDialog.add(confirmLabel);
            Panel bp = new Panel(new FlowLayout());
            bp.add(yesBut = new Button(""Yes""));
            yesBut.addActionListener(al = new ActionListener() {

                public void actionPerformed(ActionEvent e) {
                    if (e.getActionCommand().equals(""Yes""))
                        confirmRet = true;
                    else
                        confirmRet = false;
                    confirmDialog.setVisible(false);
                }
            });
            bp.add(noBut = new Button(""No""));
            noBut.addActionListener(al);
            gridc.gridy = 1;
            gridc.gridwidth = GridBagConstraints.REMAINDER;
            grid.setConstraints(bp, gridc);
            confirmDialog.add(bp);
            confirmDialog.addWindowListener(new AWTConvenience.CloseAdapter(noBut));
            AWTConvenience.setBackgroundOfChildren(confirmDialog);
            confirmDialog.setResizable(true);
        }
        confirmDialog.remove(confirmLabel);
        confirmLabel.setText(message);
        confirmDialog.add(confirmLabel);
        confirmDialog.pack();
        AWTConvenience.placeDialog(confirmDialog);
        if (defAnswer)
            yesBut.requestFocus();
        else
            noBut.requestFocus();
        confirmDialog.setVisible(true);
        return confirmRet;
    }

    public static void notice(String title, String text, int rows, int cols, boolean scrollbar, Frame parent) {
        Dialog textDialog = null;
        TextArea textArea;
        Button okTextBut;
        textDialog = new Dialog(parent, title, true);
        GridBagLayout grid = new GridBagLayout();
        GridBagConstraints gridc = new GridBagConstraints();
        textDialog.setLayout(grid);
        gridc.fill = GridBagConstraints.NONE;
        gridc.gridwidth = GridBagConstraints.REMAINDER;
        gridc.anchor = GridBagConstraints.CENTER;
        gridc.insets = new Insets(4, 4, 4, 4);
        textArea = new TextArea(text, rows, cols, scrollbar ? TextArea.SCROLLBARS_VERTICAL_ONLY : TextArea.SCROLLBARS_NONE);
        grid.setConstraints(textArea, gridc);
        textDialog.add(textArea);
        textArea.setEditable(false);
        okTextBut = new Button(""OK"");
        okTextBut.addActionListener(new AWTConvenience.CloseAction(textDialog));
        gridc.fill = GridBagConstraints.NONE;
        grid.setConstraints(okTextBut, gridc);
        textDialog.add(okTextBut);
        textDialog.addWindowListener(new AWTConvenience.CloseAdapter(okTextBut));
        AWTConvenience.setBackgroundOfChildren(textDialog);
        textDialog.setResizable(true);
        textDialog.pack();
        AWTConvenience.placeDialog(textDialog);
        okTextBut.requestFocus();
        textDialog.setVisible(true);
    }
}
","// SSHMiscDialogs_2Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame, String)} method.
*/
class SSHMiscDialogs_2Test {","// SSHMiscDialogs_2Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#textfield(String, String, Frame, String)} method.
*/
class SSHMiscDialogs_2Test {

	/**
	* Test case for the {@link SSHMiscDialogs#textfield(String, String, Frame, String)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testTextfield() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		String defaultValue = ""defaultValue"";
		String result = SSHMiscDialogs.textfield(title, message, parent, defaultValue);
		assertEquals(defaultValue, result);
	}
}

// SSHMiscDialogs_3Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame, char, String, String)} method.
*/
class SSHMiscDialogs_3Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#password(String, String, Frame, char, String, String)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testPassword() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		char echo = '*';
		String defaultValue = ""defaultValue"";
		String textBoxLabel = ""textBoxLabel"";
		String result = SSHMiscDialogs.password(title, message, parent, echo, defaultValue, textBoxLabel);
		assertEquals(defaultValue, result);
	}
}

// SSHMiscDialogs_4Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#setPassword(String, String, Frame)} method.
*/
class SSHMiscDialogs_4Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#setPassword(String, String, Frame)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testSetPassword() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		String result = SSHMiscDialogs.setPassword(title, message, parent);
		assertEquals(null, result);
	}
}

// SSHMiscDialogs_5Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#confirm(String, String, boolean, Frame)} method.
*/
class SSHMiscDialogs_5Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#confirm(String, String, boolean, Frame)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testConfirm() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		boolean defAnswer = true;
		boolean result = SSHMiscDialogs.confirm(title, message, defAnswer, parent);
		assertEquals(true, result);
	}
}

// SSHMiscDialogs_6Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#notice(String, String, int, int, boolean, Frame)} method.
*/
class SSHMiscDialogs_6Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#notice(String, String, int, int, boolean, Frame)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testNotice() {
		Frame parent = new Frame();
		String title = ""title"";
		String text = ""text"";
		int rows = 1;
		int cols = 1;
		boolean scrollbar = true;
		SSHMiscDialogs.notice(title, text, rows, cols, scrollbar, parent);
	}
}

// SSHMiscDialogs_7Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#alert(String, String, Frame)} method.
*/
class SSHMiscDialogs_7Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#alert(String, String, Frame)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testAlert() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		SSHMiscDialogs.alert(title, message, parent);
	}
}

// SSHMiscDialogs_8Test.java
package mindbright.ssh;

import java.awt.*;
import java.awt.event.*;
import mindbright.util.AWTConvenience;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SSHMiscDialogs}.
* It contains ten unit test cases for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
*/
class SSHMiscDialogs_8Test {
		
	/**
	* Test case for the {@link SSHMiscDialogs#password(String, String, Frame)} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testPassword() {
		Frame parent = new Frame();
		String title = ""title"";
		String message = ""message"";
		String result = SSHMiscDialogs.password(title, message, parent);
		assertEquals(null, result);
	}
}"
