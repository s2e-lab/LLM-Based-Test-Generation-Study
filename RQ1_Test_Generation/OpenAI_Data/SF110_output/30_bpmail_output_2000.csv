ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uBccOLc4KXiHiuPwy2FSflUDnx75,/EvoSuiteBenchmark/30_bpmail/src/main/java/ch/bluepenguin/email/client/service/impl/EmailFacadeState.java,41.31472444534302,stop,"// EmailFacadeState.java
/*
 * Created on 29.06.2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package ch.bluepenguin.email.client.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 * @author Christian
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class EmailFacadeState {

    private HashMap states;

    public EmailFacadeState() {
        states = new HashMap();
    }

    public void setState(Integer ID, boolean dirtyFlag) {
        states.put(ID, new Boolean(dirtyFlag));
    }

    public void clear() {
        states.clear();
    }

    /**
     * @return true if the boolean flag is true or if the id
     * does not exist in the map
     */
    public boolean isDirty(Integer ID) {
        Boolean dirty = (Boolean) states.get(ID);
        if (dirty == null)
            return true;
        return dirty.booleanValue();
    }

    public void setAll(boolean dirtyFlag) {
        Iterator keys = states.keySet().iterator();
        while (keys.hasNext()) {
            Integer key = (Integer) keys.next();
            setState(key, dirtyFlag);
        }
    }

    public boolean isAllClean() {
        //empty is pristine state
        if (states.size() == 0)
            return false;
        Iterator keys = states.keySet().iterator();
        while (keys.hasNext()) {
            Integer key = (Integer) keys.next();
            if (isDirty(key)) {
                return false;
            }
        }
        return true;
    }
}
","// EmailFacadeStateTest.java
package ch.bluepenguin.email.client.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EmailFacadeState}.
* It contains ten unit test cases for the {@link EmailFacadeState#isDirty(Integer)} method.
*/
class EmailFacadeStateTest {","// EmailFacadeStateTest.java
package ch.bluepenguin.email.client.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EmailFacadeState}.
* It contains ten unit test cases for the {@link EmailFacadeState#isDirty(Integer)} method.
*/
class EmailFacadeStateTest {

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is empty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_EmptyState() {
		EmailFacadeState state = new EmailFacadeState();
		assertTrue(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_DirtyState() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), true);
		assertTrue(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is clean</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns false</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_CleanState() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		assertFalse(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state does not contain the id</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateDoesNotContainId() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		assertTrue(state.isDirty(new Integer(2)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsId() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		assertFalse(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsIdAndIsDirty() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), true);
		assertTrue(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsIdAndIsClean() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		assertFalse(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsIdAndIsDirtyAndIsClean() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), true);
		state.setState(new Integer(1), false);
		assertFalse(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsIdAndIsCleanAndIsDirty() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		state.setState(new Integer(1), true);
		assertTrue(state.isDirty(new Integer(1)));
	}

	/**
	 * Test case for {@link EmailFacadeState#isDirty(Integer)}
	 * <p>
	 * Tested Case:
	 * <ul>
	 * <li>The state is not empty</li>
	 * <li>The state contains the id</li>
	 * <li>The state is dirty</li>
	 * </ul>
	 * Expected Result:
	 * <ul>
	 * <li>The method returns true</li>
	 * </ul>
	 */
	@Test
	public void testIsDirty_StateContainsIdAndIsCleanAndIsClean() {
		EmailFacadeState state = new EmailFacadeState();
		state.setState(new Integer(1), false);
		state.setState(new Integer(1), false);
		assertFalse(state.isDirty(new Integer(1)));
	}
}"
cmpl-6uBdfqJBo2bUo00sG4RSE3zgE17lJ,/EvoSuiteBenchmark/30_bpmail/src/main/java/ch/bluepenguin/email/client/tapestry/helpers/TreeModelHelper_1Test.java,33.48493981361389,stop,"// TreeModelHelper.java
/*
 * Created on 28.01.2005
 *
 * Helper class for manipulating tree hierarchies
 */
package ch.bluepenguin.email.client.tapestry.helpers;

import java.util.ArrayList;
import java.util.Iterator;
import org.apache.tapestry.IComponent;
import org.apache.tapestry.IRequestCycle;
import org.apache.tapestry.contrib.tree.model.ITreeDataModel;
import ch.bluepenguin.email.client.Folder;
import ch.bluepenguin.tapestry.components.menu.model.IMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.IMenuModel;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel;
import ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer;

/**
 * @author Christian
 */
public class TreeModelHelper {

    public IMenuModel buildFolderModel(Folder[] folders, IComponent component, IRequestCycle cycle) {
        IMenuModel folderModel = new DefaultMenuModel();
        ArrayList menuItems = new ArrayList();
        for (int i = 0; i < folders.length; i++) {
            Folder currentFolder = folders[i];
            //renderer
            DirectLinkMenuItemRenderer renderer = new DirectLinkMenuItemRenderer();
            renderer.setComponent(component);
            renderer.setCycle(cycle);
            Object[] parameters = { currentFolder };
            renderer.setParameters(parameters);
            IMenuItem item = new DefaultMenuItem(currentFolder);
            item.setParent(currentFolder.getParent());
            item.setName(currentFolder.getName());
            menuItems.add(item);
            folderModel.addMenuItem(item, renderer);
        }
        return folderModel;
    }

    /**
     * returns depth first ordering of the data model
     * @param menuDataModel
     * @return
     */
    public ArrayList getMenuListDepthFirst(ITreeDataModel menuDataModel) {
        Object root = menuDataModel.getRoot();
        ArrayList result = new ArrayList();
        traverseMenu(root, menuDataModel, result);
        return result;
    }

    /**
     * @param root
     */
    private void traverseMenu(Object parent, ITreeDataModel menuDataModel, ArrayList result) {
        Iterator children = menuDataModel.getChildren(parent);
        result.add(parent);
        while (children.hasNext()) {
            Object child = children.next();
            traverseMenu(child, menuDataModel, result);
        }
    }
}
","// TreeModelHelper_1Test.java
package ch.bluepenguin.email.client.tapestry.helpers;

import java.util.ArrayList;
import java.util.Iterator;
import org.apache.tapestry.IComponent;
import org.apache.tapestry.IRequestCycle;
import org.apache.tapestry.contrib.tree.model.ITreeDataModel;
import ch.bluepenguin.email.client.Folder;
import ch.bluepenguin.tapestry.components.menu.model.IMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.IMenuModel;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel;
import ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TreeModelHelper}.
* It contains ten unit test cases for the {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)} method.
*/
class TreeModelHelper_1Test {","// TreeModelHelper_1Test.java
package ch.bluepenguin.email.client.tapestry.helpers;

import java.util.ArrayList;
import java.util.Iterator;
import org.apache.tapestry.IComponent;
import org.apache.tapestry.IRequestCycle;
import org.apache.tapestry.contrib.tree.model.ITreeDataModel;
import ch.bluepenguin.email.client.Folder;
import ch.bluepenguin.tapestry.components.menu.model.IMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.IMenuModel;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuItem;
import ch.bluepenguin.tapestry.components.menu.model.impl.DefaultMenuModel;
import ch.bluepenguin.tapestry.components.menu.renderer.impl.DirectLinkMenuItemRenderer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TreeModelHelper}.
* It contains ten unit test cases for the {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)} method.
*/
class TreeModelHelper_1Test {

	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertNotNull(result);
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_1() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_2() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_3() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_4() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_5() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_6() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_7() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_8() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_9() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
	/**
	 * Test case for {@link TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)}
	 *
	 * @see TreeModelHelper#getMenuListDepthFirst(ITreeDataModel)
	 */
	@Test
	void testGetMenuListDepthFirst_10() {
		TreeModelHelper treeModelHelper = new TreeModelHelper();
		ITreeDataModel menuDataModel = null;
		ArrayList result = treeModelHelper.getMenuListDepthFirst(menuDataModel);
		assertEquals(0, result.size());
	}
	
}"
