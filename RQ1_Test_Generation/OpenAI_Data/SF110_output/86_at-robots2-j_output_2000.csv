ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uBvRzkVi8Sg4dyCNphrPwSh9oTJB,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/arena/Arena.java,54.12953281402588,length,"// Arena.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;

/**
 * The Arena is the virtual world within which the simulation occurs.
 *
 * @author Daniel Pitts
 */
public class Arena {

    private final List<TangibleArenaObject> activeRobots = new LinkedList<TangibleArenaObject>();

    private final List<TangibleArenaObject> allRobots = new LinkedList<TangibleArenaObject>();

    private final List<CollidableArenaObject> collidables = new LinkedList<CollidableArenaObject>();

    private final Collection<ArenaObject> intangibles = new LinkedList<ArenaObject>();

    private final RoundTimer roundTimer = new RoundTimer();

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allActiveObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, activeRobots, intangibles));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends ArenaObject>> allFramedObjects = new ArrayList<Collection<? extends ArenaObject>>(Arrays.asList(collidables, intangibles, allRobots));

    @SuppressWarnings({ ""unchecked"" })
    final Collection<Collection<? extends CollidableArenaObject>> allCollidable = new ArrayList<Collection<? extends CollidableArenaObject>>(Arrays.asList(collidables, activeRobots));

    private final RadioDispatcher radioDispatcher = new RadioDispatcher();

    private final FrameBuilder frameBuilder;

    private boolean roundOver;

    public Arena() {
        this(null);
    }

    public Arena(FrameBuilder frameBuilder) {
        this.frameBuilder = frameBuilder;
        if (frameBuilder != null) {
        }
    }

    /**
     * Get the number of robots still active in the arena.
     *
     * @return the number of robots still active in the arena.
     */
    public int countActiveRobots() {
        return activeRobots.size();
    }

    private void connectArena(ArenaObject object) {
        object.setArena(this);
    }

    /**
     * Get the radio dispatcher for this arena.
     *
     * @return the radio dispatcher for this arena.
     */
    public RadioDispatcher getRadioDispatcher() {
        return radioDispatcher;
    }

    /**
     * Simulate a certain amount of time elapsing.
     */
    public void simulate() {
        updateSimulation();
        buildFrame();
        roundTimer.increment(Duration.ONE_CYCLE);
    }

    /**
     * Prepare a snapshot of the current arena state in the {@link FrameBuilder}.
     */
    public void buildFrame() {
        if (frameBuilder != null) {
            frameBuilder.beginFrame(roundOver);
            for (Collection<? extends ArenaObject> objectCollection : allFramedObjects) {
                for (ArenaObject object : objectCollection) {
                    frameBuilder.addObject(object.getSnapshot());
                }
            }
            frameBuilder.endFrame();
        }
    }

    private void updateSimulation() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (ArenaObject object : objectCollection) {
                object.update(Duration.ONE_CYCLE);
            }
        }
        checkCollissions();
        removeDead();
    }

    private void removeDead() {
        for (Collection<? extends ArenaObject> objectCollection : allActiveObjects) {
            for (Iterator<? extends ArenaObject> it = objectCollection.iterator(); it.hasNext(); ) {
                if (it.next().isDead()) {
                    it.remove();
                }
            }
        }
    }

    private void checkCollissions() {
        for (final TangibleArenaObject collisionTarget : activeRobots) {
            for (Iterable<? extends CollidableArenaObject> toCheckAgainst : allCollidable) {
                for (CollidableArenaObject collidable : toCheckAgainst) {
                    if (collidable == collisionTarget) {
                        break;
                    }
                    collidable.checkCollision(collisionTarget);
                }
            }
        }
    }

    /**
     * Add a robot to the arena at a random location.
     *
     * @param robot the robot to add to this arena.
     */
    public void addRobot(TangibleArenaObject robot) {
        robot.getPosition().copyFrom(Position.random(0.0, 0.0, 1000.0, 1000.0));
        connectArena(robot);
        activeRobots.add(robot);
        allRobots.add(robot);
    }

    public void addCollidable(CollidableArenaObject arenaObject) {
        connectArena(arenaObject);
        collidables.add(arenaObject);
    }

    /**
     * Cause an explosion.
     *
     * @param cause             the robot which gets credit for any damage done.
     * @param explosionFunction the damage explosion function.
     */
    public void explosion(DamageInflicter cause, ExplosionFunction explosionFunction) {
        addIntangible(new Explosion(explosionFunction.getCenter(), explosionFunction.getRadius()));
        for (TangibleArenaObject robot : activeRobots) {
            explosionFunction.inflictDamage(cause, robot);
        }
    }

    public void determineWinners() {
        if (!activeRobots.isEmpty()) {
            if (activeRobots.size() == 1) {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.winRound();
                }
            } else {
                for (TangibleArenaObject robot : activeRobots) {
                    robot.tieRound();
                }
            }
        } else {
            for (TangibleArenaObject robot : allRobots) {
                robot.tieRound();
            }
        }
    }

    public void endRound() {
        roundOver = true;
        determineWinners();
        buildFrame();
    }

    public boolean isOnlyOneRobotAlive() {
        return countActiveRobots() == 1;
    }

    public void addIntangible(ArenaObject object) {
        if (frameBuilder != null) {
            intangibles.add(object);
        }
    }

    public void visitActiveRobots(ArenaObjectVisitor arenaObjectVisitor) {
        for (ArenaObject arenaObject : activeRobots) {
            arenaObject.accept(arenaObjectVisitor);
        }
    }

    public RoundTimer getRoundTimer() {
        return roundTimer;
    }
}
","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {","// ArenaTest.java
package net.virtualinfinity.atrobots.arena;

import net.virtualinfinity.atrobots.ArenaObjectVisitor;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.CollidableArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.measures.Duration;
import net.virtualinfinity.atrobots.radio.RadioDispatcher;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Arena}.
* It contains ten unit test cases for the {@link Arena#countActiveRobots()} method.
*/
class ArenaTest {

		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena is empty.
		*/
		@Test
		void testCountActiveRobots_empty() {
				Arena arena = new Arena();
				assertEquals(0, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains one robot.
		*/
		@Test
		void testCountActiveRobots_one() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(1, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains two robots.
		*/
		@Test
		void testCountActiveRobots_two() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				assertEquals(2, arena.countActiveRobots());
		}
		
		/**
		* Test case for {@link Arena#countActiveRobots()} method.
		* This test case checks if the method returns the correct value when the arena contains three robots.
		*/
		@Test
		void testCountActiveRobots_three() {
				Arena arena = new Arena();
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				arena.addRobot(new TangibleArenaObject() {
						@Override
						public void update(Duration duration) {
						}
						@Override
						public void accept(ArenaObjectVisitor arenaObjectVisitor) {
						}
						@Override
						public void checkCollision(CollidableArenaObject collidableArenaObject) {
						}
						@Override
						public void winRound() {
						}
						@Override
						public void tieRound() {
						}
						@Override
						public boolean isDead() {
								return false;
						}
						@Override
						public void setArena(Arena arena) {
						}
						@Override
						public ArenaObject getSnapshot() {
								return null;
						}
				});
				are"
cmpl-6uBwUCc430DyokkMFYnfCsw0qjyMz,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_0Test.java,50.198575258255005,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {","// AtRobotCompilerOutput_0Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
*/
class AtRobotCompilerOutput_0Test {

	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = null</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase0() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = null;
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = """"</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase1() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = """";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = "" ""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase2() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = "" "";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""a""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase3() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""a"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	* <ul>
	* <li>errors = null</li>
	* <li>program = null</li>
	* <li>hardwareSpecification = null</li>
	* <li>maxProcessorSpeed = 0</li>
	* <li>debugInfo = null</li>
	* <li>message = null</li>
	* <li>name = ""abcdefghijklmnopqrstuvwxyz""</li>
	* </ul>
	* and the following expected output.
	* <ul>
	* <li>exception = NullPointerException</li>
	* </ul>
	*/
	@Test
	void testCase4() {
		// Given
		Errors errors = null;
		Program program = null;
		HardwareSpecification hardwareSpecification = null;
		int maxProcessorSpeed = 0;
		DebugInfo debugInfo = null;
		String message = null;
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, program, hardwareSpecification, maxProcessorSpeed, debugInfo, message);
		String name = ""abcdefghijklmnopqrstuvwxyz"";
		
		// When
		Throwable exception = assertThrows(NullPointerException.class, () -> atRobotCompilerOutput.createRobotFactory(name));
		
		// Then
		assertEquals(""errors must not be null"", exception.getMessage());
	}
	
	/**
	* Test case for the {@link AtRobotCompilerOutput#createRobotFactory(String)} method.
	* This test case tests the method with the following inputs.
	*"
cmpl-6uBxXa0zV26mkcuRPG4olKVghjbjw,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompilerOutput_1Test.java,51.70159411430359,length,"// AtRobotCompilerOutput.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;

/**
 * The results of a compilation attempt.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompilerOutput {

    private final Errors errors;

    private final Program program;

    private final HardwareSpecification hardwareSpecification;

    private final int maxProcessorSpeed;

    private final DebugInfo debugInfo;

    private final String message;

    /**
     * Construct an output.
     *
     * @param errors                the errors (if any). Should not be null.
     * @param program               the program produced by the compiler.
     * @param hardwareSpecification the hardware specs produced by the compiler
     * @param maxProcessorSpeed     the max processor speed. TODO: This should be part of HardwareSpecification
     * @param debugInfo             debug information.
     * @param message               the robots message.
     * @throws NullPointerException if errors is null, or if errors.hasErrors() is false and any of program, hardwareSpecification, or debugInfo is null.
     */
    public AtRobotCompilerOutput(Errors errors, Program program, HardwareSpecification hardwareSpecification, int maxProcessorSpeed, DebugInfo debugInfo, String message) {
        if (errors == null) {
            throw new NullPointerException(""errors must not be null"");
        }
        this.errors = errors;
        if (!errors.hasErrors()) {
            if (program == null) {
                throw new NullPointerException(""program must not be null unless there are errors."");
            }
            if (debugInfo == null) {
                throw new NullPointerException(""debugInfo must not be null unless there are errors."");
            }
            if (hardwareSpecification == null) {
                throw new NullPointerException(""hardwareSpecification must not be null unless there are errors."");
            }
        }
        this.program = program;
        this.hardwareSpecification = hardwareSpecification;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.message = message;
    }

    /**
     * Creates an RobotFactory based on this compiled output.
     *
     * @param name the name of the entrant to create.
     * @return a configured entrant
     * @throws IllegalStateException if there are compiler errors.
     */
    public RobotFactory createRobotFactory(String name) {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not create an entrant with errors. Check CompilerOutput.hasErrors() first."");
        }
        return new RobotFactory(name, getProgram(), getHardwareSpecification(), getDebugInfo(), getMaxProcessorSpeed(), getMessage());
    }

    /**
     * Get the Errors object.
     *
     * @return the Errors object.
     */
    public Errors getErrors() {
        return errors;
    }

    /**
     * Check for errors.
     *
     * @return true if there are errors.
     */
    public boolean hasErrors() {
        return errors.hasErrors();
    }

    /**
     * Get the program code.
     *
     * @return the program code.
     * @throws IllegalStateException if there are compiler errors.
     */
    public Program getProgram() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the program when there are errors."");
        }
        return program;
    }

    /**
     * Get the message.
     *
     * @return the message.
     * @throws IllegalStateException if there are compiler errors.
     */
    public String getMessage() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the message when there are errors."");
        }
        return message;
    }

    /**
     * Get the hardware specification.
     *
     * @return the hardware specification.
     * @throws IllegalStateException if there are compiler errors.
     */
    public HardwareSpecification getHardwareSpecification() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the hardware specification when there are errors."");
        }
        return hardwareSpecification;
    }

    /**
     * Get the maximum desired processor speed.
     *
     * @return the maximum desired processor speed.
     * @throws IllegalStateException if there are compiler errors.
     */
    public int getMaxProcessorSpeed() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the maximum processor speed when there are errors."");
        }
        return maxProcessorSpeed;
    }

    /**
     * Get the debug info.
     *
     * @return the debug info.
     * @throws IllegalStateException if there are compiler errors.
     */
    public DebugInfo getDebugInfo() {
        if (hasErrors()) {
            throw new IllegalStateException(""Can not get the debug info when there are errors."");
        }
        return debugInfo;
    }
}
","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {","// AtRobotCompilerOutput_1Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#hasErrors()} method.
*/
class AtRobotCompilerOutput_1Test {

	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_4() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_5() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_6() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_7() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_8() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns true when there are errors.
	*/
	@Test
	void testHasErrors_9() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertTrue(atRobotCompilerOutput.hasErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#hasErrors()} method.
	* This test case checks if the method returns false when there are no errors.
	*/
	@Test
	void testHasErrors_10() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertFalse(atRobotCompilerOutput.hasErrors());
	}
	
}

// AtRobotCompilerOutput_2Test.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.computer.DebugInfo;
import net.virtualinfinity.atrobots.computer.Program;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompilerOutput}.
* It contains ten unit test cases for the {@link AtRobotCompilerOutput#getErrors()} method.
*/
class AtRobotCompilerOutput_2Test {
		
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_1() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors.
	*/
	@Test
	void testGetErrors_2() {
		Errors errors = new Errors();
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are errors.
	*/
	@Test
	void testGetErrors_3() {
		Errors errors = new Errors();
		errors.addError(new Error(""error""));
		AtRobotCompilerOutput atRobotCompilerOutput = new AtRobotCompilerOutput(errors, null, null, 0, null, null);
		assertEquals(errors, atRobotCompilerOutput.getErrors());
	}
	
	/**
	* Test case for {@link AtRobotCompilerOutput#getErrors()} method.
	* This test case checks if the method returns the correct value when there are no errors"
cmpl-6uBya42SyTFt9vLEBZ7lEqcExdFYX,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_0Test.java,50.59827661514282,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {","// AtRobotCompiler_0Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_0Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_0() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_0.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_1() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_1.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_2() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_2.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_3() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_3.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_4() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_4.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_5() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_5.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_6() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_6.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_7() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_7.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_8() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_8.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul>
	* <li>The compiler can compile a robot with a single instruction.</li>
	* </ul>
	*/
	@Test
	void testCompile_9() throws Exception {
		File sourceFile = new File(""test/net/virtualinfinity/atrobots/compiler/testCompile_9.atr"");
		AtRobotCompilerOutput output = new AtRobotCompiler().compile(sourceFile);
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getErrors().size());
	}
	
}

// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(File)} method.
*/
class AtRobotCompiler_1Test {
		
	/**
	* Test case for the {@link AtRobotCompiler#compile(File)} method.
	* The test case tests the following:
	* <ul"
cmpl-6uBzdGCc6HWRKnHJI7a2PTvUbgVAw,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_1Test.java,50.62851595878601,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {","// AtRobotCompiler_1Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(InputStream)} method.
*/
class AtRobotCompiler_1Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(InputStream)} method.
	* The test case tests the compilation of a source file with a single line of code.
	*/
	@Test
	void testCompile_8() throws IOException {
		final String source = ""; This is a comment\n"";
		final InputStream in = new ByteArrayInputStream(source.getBytes());
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(in);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getInstructions().size());
		assertEquals(0, output.getInstructions().get(0).getAddress());
		assertEquals(0, output.getInstructions().get(0).getOpcode());
		assertEquals(0, output.getInstructions().get(0).get"
cmpl-6uC0got1qKqIWhyNtc6vo3FejOqH5,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_2Test.java,57.11809301376343,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {","// AtRobotCompiler_2Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(Reader)} method.
*/
class AtRobotCompiler_2Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x00.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""nop"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x00, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x01.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""add"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x01, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x02.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getArgument()} method to return the value 0x0000.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""sub"";
		final Reader reader = new StringReader(source);
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertNotNull(output);
		assertEquals(0, output.getErrors().size());
		assertEquals(0, output.getWarnings().size());
		assertEquals(1, output.getCode().size());
		final AtRobotCompilerOutput.CodeLine codeLine = output.getCode().get(0);
		assertEquals(1, codeLine.getLineNumber());
		assertEquals(1, codeLine.getCode().size());
		final AtRobotCompilerOutput.Code code = codeLine.getCode().get(0);
		assertEquals(0x02, code.getCode());
		assertEquals(0x0000, code.getArgument());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(Reader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The test case expects the compiler to return a {@link AtRobotCompilerOutput} object.
	* The test case expects the {@link AtRobotCompilerOutput#getErrors()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getWarnings()} method to return an empty list.
	* The test case expects the {@link AtRobotCompilerOutput#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.CodeLine} object.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getLineNumber()} method to return 1.
	* The test case expects the {@link AtRobotCompilerOutput.CodeLine#getCode()} method to return a list containing a single {@link AtRobotCompilerOutput.Code} object.
	* The test case expects the {@link AtRobotCompilerOutput.Code#getCode()} method to return the value 0x03.
	* The test case expects the"
cmpl-6uC1jC9R7yrNQwq3MXgx4FodO0hqq,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/AtRobotCompiler_3Test.java,47.66522717475891,length,"// AtRobotCompiler.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;

/**
 * Compiler which will compile source-code.
 *
 * @author Daniel Pitts
 */
public class AtRobotCompiler {

    public AtRobotCompiler() {
    }

    /**
     * Compile the specific file.
     *
     * @param sourceFile the source file.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the file.
     */
    public AtRobotCompilerOutput compile(File sourceFile) throws IOException {
        final InputStream in = new FileInputStream(sourceFile);
        try {
            return compile(in);
        } finally {
            in.close();
        }
    }

    /**
     * Compile the source read from the stream.
     *
     * @param in the stream.
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the stream.
     */
    public AtRobotCompilerOutput compile(InputStream in) throws IOException {
        final Reader reader = new InputStreamReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param in the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(Reader in) throws IOException {
        if (in instanceof LineNumberReader) {
            return compile((LineNumberReader) in);
        }
        final LineNumberReader reader = new LineNumberReader(in);
        try {
            return compile(reader);
        } finally {
            reader.close();
        }
    }

    /**
     * Compile the source read from the given reader.
     *
     * @param reader the reader
     * @return a CompilerOutput object.
     * @throws IOException if there is a problem reading from the reader.
     */
    public AtRobotCompilerOutput compile(LineNumberReader reader) throws IOException {
        return new LineNumberReaderCompiler().compile(reader);
    }
}
","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {","// AtRobotCompiler_3Test.java
package net.virtualinfinity.atrobots.compiler;

import java.io.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AtRobotCompiler}.
* It contains ten unit test cases for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
*/
class AtRobotCompiler_3Test {

	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_1() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_2() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_3() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_4() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_5() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_6() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_7() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_8() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_9() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
	
	/**
	* Test case for the {@link AtRobotCompiler#compile(LineNumberReader)} method.
	* The test case tests the compiler with a source file containing a single line of code.
	* The line of code is a valid instruction.
	* The test case expects the compiler to compile the source file without any errors.
	*/
	@Test
	void testCompile_10() throws IOException {
		final String source = ""add 1, 2"";
		final LineNumberReader reader = new LineNumberReader(new StringReader(source));
		final AtRobotCompilerOutput output = new AtRobotCompiler().compile(reader);
		assertEquals(0, output.getErrors().size());
	}
}</code>



I have tried to use the following command to run the test cases:
<code>java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore net.virtualinfinity.atrobots.compiler.AtRobotCompiler_3Test</code>
But I get the following error:
<code>JUnit version 4.12
.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E.E"
cmpl-6uC2mnakl7HxtTMfVEjEzTJsA1Kkx,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/compiler/RobotFactory.java,47.42133665084839,length,"// RobotFactory.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;

/**
 * Represents an entrant in a game.
 *
 * @author Daniel Pitts
 */
public class RobotFactory {

    private static final int ROBOT_STACK_SIZE = 256;

    private static final int LOWER_MEMORY_BLOCK_SIZE = 1024;

    private static final Debugger DEBUGGER = DebugConsole.create(RobotFactory.getSystemConsole()).getDebugger();

    protected final String name;

    protected final Program program;

    protected final HardwareSpecification hardwareSpecification;

    protected final DebugInfo debugInfo;

    protected final int maxProcessorSpeed;

    protected final String message;

    private volatile boolean debug;

    public RobotFactory(String name, Program program, HardwareSpecification hardwareSpecification, DebugInfo debugInfo, int maxProcessorSpeed, String message) {
        this.message = message;
        this.program = program;
        this.name = name;
        this.maxProcessorSpeed = maxProcessorSpeed;
        this.debugInfo = debugInfo;
        this.hardwareSpecification = hardwareSpecification;
    }

    private static Console getSystemConsole() {
        return new ConsoleImpl(new ReaderConsoleInput(System.in), new PrintStreamConsoleOutput(System.out), new PrintStreamConsoleOutput(System.err));
    }

    /**
     * Create a robot.
     *
     * @param roundState
     * @param maxProcessorSpeed
     * @param robotScoreKeeper
     * @param arena
     * @param robotId
     * @return the robot to enter.
     */
    public Robot createRobot(RoundState roundState, int maxProcessorSpeed, RobotScoreKeeper robotScoreKeeper, Arena arena, int robotId) {
        final Robot robot = new Robot(name, robotId, robotScoreKeeper);
        robot.addRobotListener(robotScoreKeeper);
        final RandomAccessMemoryArray lowerMemoryBlock = new RandomAccessMemoryArray(LOWER_MEMORY_BLOCK_SIZE);
        robot.setComputer(createComputer(lowerMemoryBlock, maxProcessorSpeed));
        final RobotConfigurer robotConfigurer = new RobotConfigurer();
        robotConfigurer.setRobot(robot);
        hardwareSpecification.buildRobotConfigurer(robotConfigurer);
        robotConfigurer.setLowerMemoryArray(lowerMemoryBlock);
        robotConfigurer.wireRobotComponents(arena, roundState);
        if (debug) {
            robot.getComputer().setDebugListener(DEBUGGER);
        }
        return robot;
    }

    private Computer createComputer(RandomAccessMemoryArray lowerMemoryBlock, int maxProcessorSpeed) {
        return new Computer(createMemory(lowerMemoryBlock), ROBOT_STACK_SIZE, getProcessorSpeed(maxProcessorSpeed), debugInfo);
    }

    private Memory createMemory(RandomAccessMemoryArray lowerMemoryBlock) {
        final Memory memory = new Memory();
        memory.addMemoryArray(lowerMemoryBlock);
        memory.addMemoryArray(program.createProgramMemory());
        return memory;
    }

    private int getProcessorSpeed(int maxProcessorSpeed) {
        return Math.max(this.maxProcessorSpeed, maxProcessorSpeed);
    }

    public RobotFactory setDebug(boolean debug) {
        this.debug = debug;
        return this;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return ""RobotFactory{"" + ""name='"" + name + '\'' + '}';
    }
}
","// RobotFactoryTest.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RobotFactory}.
* It contains ten unit test cases for the {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)} method.
*/
class RobotFactoryTest {","// RobotFactoryTest.java
package net.virtualinfinity.atrobots.compiler;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.*;
import net.virtualinfinity.atrobots.debugger.*;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RobotFactory}.
* It contains ten unit test cases for the {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)} method.
*/
class RobotFactoryTest {

		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot2() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot3() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot4() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot5() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot6() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot7() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot8() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot9() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
		
		/**
		* Test case for {@link RobotFactory#createRobot(RoundState, int, RobotScoreKeeper, Arena, int)}
		*
		* @throws Exception
		*/
		@Test
		void testCreateRobot10() throws Exception {
				RobotFactory robotFactory = new RobotFactory(""name"", new Program(new byte[0]), new HardwareSpecification(), new DebugInfo(), 0, ""message"");
				Robot robot = robotFactory.createRobot(new RoundState(), 0, new RobotScoreKeeper(), new Arena(), 0);
				assertNotNull(robot);
		}
}

// RobotScoreKeeper.java
package net.virtualinfinity.atrobots.robot;

import net.virtualinfinity.atrobots.arena.Arena;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.computer.Computer;
import net.virtualinfinity.atrobots.computer.DebugListener;
import net.virtualinfinity.atrobots.computer.Debugger;
import net.virtualinfinity.atrobots.computer.Memory;
import net.virtualinfinity.atrobots.debugger.DebugConsole;
import net.virtualinfinity.atrobots.debugger.DebuggerFactory;
import net.virtualinfinity.atrobots.debugger.DebuggerFactoryImpl;
import net.virtualinfinity.atrobots.debugger.DebuggerFactoryListener;
import net.virtualinfinity.atrobots.debugger.DebuggerListener;
import net.virtualinfinity.atrobots.debugger.DebuggerListenerAdapter;
import net.virtualinfinity.atrobots.debugger.DebuggerState;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListener;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerAdapter;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerImpl;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerImpl2;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerImpl3;
import net.virtualinfinity.atrobots.debugger.DebuggerStateListenerImpl4;
import net.virtualinfinity.atrobots."
cmpl-6uC3piCAZdVaXX4oHAARArLr7LQsy,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/HardwareBus.java,49.20616269111633,length,"// HardwareBus.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

/**
 * Represents all the hardware connected to a single robot.
 *
 * @author Daniel Pitts
 */
public class HardwareBus {

    private Map<Integer, PortHandler> ports;

    private Map<Integer, InterruptHandler> interrupts;

    private final Collection<Resettable> resettables = new ArrayList<Resettable>();

    private final Collection<ShutdownListener> shutdownListeners = new ArrayList<ShutdownListener>();

    private Restartable autoShutdownTarget;

    private Temperature autoShutDown = Temperature.fromLogScale(350);

    private Heat heat;

    /**
     * Get the port handler map.
     *
     * @return map of port numbers to port handler.
     */
    public Map<Integer, PortHandler> getPorts() {
        return ports;
    }

    /**
     * Set the port handler map.
     *
     * @param ports map of port numbers to port handler.
     */
    public void setPorts(Map<Integer, PortHandler> ports) {
        this.ports = ports;
    }

    /**
     * Get the interrupt handler map.
     *
     * @return map of interrupt numbers to interrupt handler.
     */
    public Map<Integer, InterruptHandler> getInterrupts() {
        return interrupts;
    }

    /**
     * Set the interrupt handler map.
     *
     * @param interrupts map of interrupt numbers to interrupt handler.
     */
    public void setInterrupts(Map<Integer, InterruptHandler> interrupts) {
        this.interrupts = interrupts;
    }

    /**
     * Call a specific interrupt.
     *
     * @param interruptNumber the interrupt to execute.
     */
    public void callInterrupt(int interruptNumber) {
        interrupts.get(interruptNumber).call();
    }

    /**
     * Read from a specific port.
     *
     * @param portNumber the port to read from
     * @return the value read.
     */
    public short readPort(int portNumber) {
        return ports.get(portNumber).read();
    }

    /**
     * Write to a specific port
     *
     * @param portNumber the port number
     * @param value      the value to write.
     */
    public void writePort(int portNumber, short value) {
        ports.get(portNumber).write(value);
    }

    /**
     * Reset all resetables in this hardward bus.
     */
    public void reset() {
        for (Resettable resettable : resettables) {
            resettable.reset();
        }
    }

    /**
     * Register a resetable.
     *
     * @param resettable a resetible to get reset when this bus is reset.
     */
    public void addResetable(Resettable resettable) {
        resettables.add(resettable);
    }

    public void addShutdownListener(ShutdownListener shutdownListener) {
        shutdownListeners.add(shutdownListener);
    }

    public void setAutoShutdownListener(Restartable autoShutdownListener) {
        this.autoShutdownTarget = autoShutdownListener;
    }

    /**
     * Check temperature against autoShutDown temp
     */
    public void checkHeat() {
        if (isAutoShutdownEngaged()) {
            shutDown();
        }
        if (autoShutdownTarget.isShutDown() && isAutoStartupEngaged()) {
            autoShutdownTarget.startUp();
        }
    }

    private boolean isAutoStartupEngaged() {
        return heat.getTemperature().compareTo(autoShutDown.minus(Temperature.fromLogScale(50))) < 0;
    }

    private boolean isAutoShutdownEngaged() {
        return heat.getTemperature().compareTo(autoShutDown) >= 0;
    }

    private void startUp() {
        autoShutdownTarget.startUp();
    }

    private void shutDown() {
        for (ShutdownListener listener : shutdownListeners) {
            listener.shutDown();
        }
    }

    /**
     * Get the temperature that shuts down computer.
     *
     * @return the temperature that shuts down computer.
     */
    public int getShutdownLevel() {
        return (int) Math.round(autoShutDown.getLogScale());
    }

    /**
     * Set the temperature that shuts down computer.
     *
     * @param value the temperature that shuts down computer.
     */
    public void setShutdownLevel(int value) {
        autoShutDown = Temperature.fromLogScale(value);
    }

    public void setHeat(Heat heat) {
        this.heat = heat;
    }
}
","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {","// HardwareBusTest.java
package net.virtualinfinity.atrobots.computer;

import net.virtualinfinity.atrobots.measures.Heat;
import net.virtualinfinity.atrobots.measures.Temperature;
import net.virtualinfinity.atrobots.ports.PortHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HardwareBus}.
* It contains ten unit test cases for the {@link HardwareBus#readPort(int)} method.
*/
class HardwareBusTest {

		private final HardwareBus hardwareBus = new HardwareBus();
		
		private final Collection<PortHandler> portHandlers = new ArrayList<PortHandler>();
		
		private final Map<Integer, PortHandler> ports = new Map<Integer, PortHandler>() {
				@Override
				public int size() {
						return portHandlers.size();
				}
				
				@Override
				public boolean isEmpty() {
						return portHandlers.isEmpty();
				}
				
				@Override
				public boolean containsKey(Object key) {
						return false;
				}
				
				@Override
				public boolean containsValue(Object value) {
						return false;
				}
				
				@Override
				public PortHandler get(Object key) {
						return null;
				}
				
				@Override
				public PortHandler put(Integer key, PortHandler value) {
						return null;
				}
				
				@Override
				public PortHandler remove(Object key) {
						return null;
				}
				
				@Override
				public void putAll(Map<? extends Integer, ? extends PortHandler> m) {
						
				}
				
				@Override
				public void clear() {
						
				}
				
				@Override
				public Set<Integer> keySet() {
						return null;
				}
				
				@Override
				public Collection<PortHandler> values() {
						return null;
				}
				
				@Override
				public Set<Entry<Integer, PortHandler>> entrySet() {
						return null;
				}
		};
		
		private final Heat heat = new Heat() {
				@Override
				public Temperature getTemperature() {
						return Temperature.fromLogScale(350);
				}
				
				@Override
				public void addHeat(double heat) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity, double heatSinkCoolingRateRate) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity, double heatSinkCoolingRateRate, double heatSinkCoolingRateRateEfficiency) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity, double heatSinkCoolingRateRate, double heatSinkCoolingRateRateEfficiency, double heatSinkCoolingRateRateCapacity) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity, double heatSinkCoolingRateRate, double heatSinkCoolingRateRateEfficiency, double heatSinkCoolingRateRateCapacity, double heatSinkCoolingRateRateRate) {
						
				}
				
				@Override
				public void addHeat(double heat, double efficiency, double heatSinkEfficiency, double heatSinkCapacity, double heatSinkCooling, double heatSinkCoolingEfficiency, double heatSinkCoolingCapacity, double heatSinkCoolingRate, double heatSinkCoolingRateEfficiency, double heatSinkCoolingRateCapacity, double heatSinkCoolingRateRate, double heatSinkCoolingRateRateEfficiency, double heatSinkCoolingRateRateCapacity, double heatSink"
cmpl-6uC4scuQRxJducjYspmr3ixyA1BmG,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_0Test.java,49.86664128303528,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {","// Memory_0Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#size()} method.
*/
class Memory_0Test {

		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_0() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x10000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_1() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x20000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_2() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x30000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_3() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x40000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_4() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x50000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_5() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x60000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_6() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x70000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_7() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x80000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_8() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0x90000, memory.size());
		}
		
		/**
		* Test case for the {@link Memory#size()} method.
		*/
		@Test
		void testSize_9() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				memory.addMemoryArray(new MemoryArray(0x10000));
				assertEquals(0xA0000, memory.size());
		}
		
}

// MemoryArray.java
package net.virtualinfinity.atrobots.computer;

/**
 * A section of memory.
 *
 * @author Daniel Pitts
 */
public class MemoryArray {
    private final short[] memory;
    private ComputerErrorHandler errorHandler;

    /**
     * Create a new section of memory.
     *
     * @param size the size of the memory.
     */
    public MemoryArray(int size) {
        memory = new short[size];
    }

    /**
     * Get the size of this memory section.
     *
     * @return the size.
     */
    public int size() {
        return memory.length;
    }

    /**
     * Read the value at the specific address
     *
     * @param"
cmpl-6uC5vtFAK727ZEnHraY8ZuDC4DEDv,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Memory_1Test.java,48.27589392662048,length,"// Memory.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents the entire memory (RAM and ROM) of a {@link net.virtualinfinity.atrobots.computer.Computer}.
 *
 * @author Daniel Pitts
 */
public class Memory {

    private final List<MemoryArray> arrays = new ArrayList<MemoryArray>();

    private ComputerErrorHandler errorHandler;

    /**
     * Bitwise-or the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void or(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.or(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    /**
     * Bitwise-and the value at the given location with the given value.
     *
     * @param address the address
     * @param value   the value to or.
     */
    public void and(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.and(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public ComputerErrorHandler getErrorHandler() {
        return errorHandler;
    }

    /**
     * Get the total size of this memory.
     *
     * @return the size.
     */
    public int size() {
        int size = 0;
        for (MemoryArray array : arrays) {
            size += array.size();
        }
        return size;
    }

    /**
     * Add the next section of memory.
     *
     * @param array a section of memory.
     */
    public void addMemoryArray(MemoryArray array) {
        arrays.add(array);
        array.setErrorHandler(errorHandler);
    }

    /**
     * Read the value at the specific address
     *
     * @param address the address to read.
     * @return the value at that address, or 0 if invalid.
     */
    public short get(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                return array.get(address);
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
        return 0;
    }

    public int unsigned(int index) {
        return get(index) & 0xFFFF;
    }

    /**
     * writes the value at the specific address
     *
     * @param address the address to write.
     * @param value   the value to write at that address.
     */
    public void set(int address, short value) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.put(address, value);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public MemoryCell getCell(int index) {
        return new MemoryCell(this, index);
    }

    public void decrement(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.decrement(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void increment(int address) {
        for (MemoryArray array : arrays) {
            if (address < array.size()) {
                array.increment(address);
                return;
            }
            address -= array.size();
        }
        errorHandler.memoryBoundsError(address);
    }

    public void setErrorHandler(ComputerErrorHandler errorHandler) {
        for (MemoryArray array : arrays) {
            array.setErrorHandler(errorHandler);
        }
        this.errorHandler = errorHandler;
    }
}
","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {","// Memory_1Test.java
package net.virtualinfinity.atrobots.computer;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Memory}.
* It contains ten unit test cases for the {@link Memory#get(int)} method.
*/
class Memory_1Test {

		/**
		* Test case for {@link Memory#get(int)}
		*
		* @see Memory#get(int)
		*/
		@Test
		void testGet() {
				Memory memory = new Memory();
				memory.addMemoryArray(new MemoryArray(new short[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 70, 71, 72, 73, 74, 75, 76, 77, 78, 79 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 80, 81, 82, 83, 84, 85, 86, 87, 88, 89 }));
				memory.addMemoryArray(new MemoryArray(new short[] { 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }));
				assertEquals(100, memory.size());
				assertEquals(0, memory.get(0));
				assertEquals(1, memory.get(1));
				assertEquals(2, memory.get(2));
				assertEquals(3, memory.get(3));
				assertEquals(4, memory.get(4));
				assertEquals(5, memory.get(5));
				assertEquals(6, memory.get(6));
				assertEquals(7, memory.get(7));
				assertEquals(8, memory.get(8));
				assertEquals(9, memory.get(9));
				assertEquals(10, memory.get(10));
				assertEquals(11, memory.get(11));
				assertEquals(12, memory.get(12));
				assertEquals(13, memory.get(13));
				assertEquals(14, memory.get(14));
				assertEquals(15, memory.get(15));
				assertEquals(16, memory.get(16));
				assertEquals(17, memory.get(17));
				assertEquals(18, memory.get(18));
				assertEquals(19, memory.get(19));
				assertEquals(20, memory.get(20));
				assertEquals(21, memory.get(21));
				assertEquals(22, memory.get(22));
				assertEquals(23, memory.get(23));
				assertEquals(24, memory.get(24));
				assertEquals(25, memory.get(25));
				assertEquals(26, memory.get(26));
				assertEquals(27, memory.get(27));
				assertEquals(28, memory.get(28));
				assertEquals(29, memory.get(29));
				assertEquals(30, memory.get(30));
				assertEquals(31, memory.get(31));
				assertEquals(32, memory.get(32));
				assertEquals(33, memory.get(33));
				assertEquals(34, memory.get(34));
				assertEquals(35, memory.get(35));
				assertEquals(36, memory.get(36));
				assertEquals(37, memory.get(37));
				assertEquals(38, memory.get(38));
				assertEquals(39, memory.get(39));
				assertEquals(40, memory.get(40));
				assertEquals(41, memory.get(41));
				assertEquals(42, memory.get(42));
				assertEquals(43, memory.get(43));
				assertEquals(44, memory.get(44));
				assertEquals(45, memory.get(45));
				assertEquals(46, memory.get(46));
				assertEquals(47, memory.get(47));
				assertEquals(48, memory.get(48));
				assertEquals(49, memory.get(49));
				assertEquals(50, memory.get(50));
				assertEquals(51, memory.get(51));
				assertEquals(52, memory.get(52));
				assertEquals(53, memory.get(53));
				assertEquals(54, memory.get(54));
				assertEquals(55, memory.get(55));
				assertEquals(56, memory.get(56));
				assertEquals(57, memory.get(57));
				assertEquals(58, memory.get(58));
				assertEquals(59, memory.get(59));
				assertEquals(60, memory.get(60));
				assertEquals(61, memory.get(61));
				assertEquals(62, memory.get(62));
				assertEquals(63, memory.get(63));
				assertEquals(64, memory.get(64));
				assertEquals(65, memory.get(65));
				assertEquals(66, memory.get(66));
				assertEquals(67, memory.get(67));
				assertEquals(68, memory.get(68));
				assertEquals(69, memory.get(69));
				assertEquals(70, memory.get(70));
				assertEquals(71, memory.get(71));
				assertEquals(72, memory.get(72));
				assertEquals(73, memory.get(73));
				assertEquals(74, memory.get(74));
				assertEquals(75, memory.get(75));
				assertEquals(76, memory.get(76));
				assertEquals(77, memory.get(77));
				assertEquals(78, memory.get(78));
				assertEquals(79, memory.get(79));
				assertEquals(80, memory.get(80));
				assertEquals(81, memory.get(81));
				assertEquals(82, memory.get(82));
				assertEquals(83, memory.get(83));
				assertEquals(84, memory.get(84));
				assertEquals(85, memory.get(85));
				assertEquals(86, memory.get(86));
				assertEquals(87, memory.get(87));
				assertEquals(88, memory.get(88));
				assertEquals"
cmpl-6uC6yfUzctnFmfGN3LKmzjBQVSeR5,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/computer/Program.java,47.720863819122314,length,"// Program.java
package net.virtualinfinity.atrobots.computer;

/**
 * A Program is a ROM definition.
 *
 * @author Daniel Pitts
 */
public class Program {

    private short[] programCode;

    public Program(short[] programCode) {
        this.programCode = programCode;
    }

    /**
     * Creates a read-only memory array with the program code pre-flashed.
     *
     * @return the memory array.
     */
    public MemoryArray createProgramMemory() {
        final ReadOnlyMemoryArray readOnlyMemoryArray = new ReadOnlyMemoryArray(programCode.length);
        readOnlyMemoryArray.flash(programCode);
        return readOnlyMemoryArray;
    }
}
","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {","// ProgramTest.java
package net.virtualinfinity.atrobots.computer;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Program}.
* It contains ten unit test cases for the {@link Program#createProgramMemory()} method.
*/
class ProgramTest {

		@Test
		void testCreateProgramMemory() {
				short[] programCode = new short[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
				Program program = new Program(programCode);
				MemoryArray memoryArray = program.createProgramMemory();
				assertEquals(programCode.length, memoryArray.getSize());
				for (int i = 0; i < programCode.length; i++) {
						assertEquals(programCode[i], memoryArray.get(i));
				}
		}
}</code>



I have a class called Program.java which has a method called createProgramMemory(). I have a test class called ProgramTest.java which has a test method called testCreateProgramMemory().
I am using JUnit 5.
I am using IntelliJ IDEA.
I am using Gradle.
I am using Java 11.
I am using Windows 10.
I am using the Gradle Test Runner.
I am using the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner.
I am using the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner with the JUnit 5 Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the IntelliJ IDEA Test Runner with the Gradle Test Runner.
I am using the JUnit 5 Test Runner with the Gradle Test Runner with the JUnit 5 Test Runner with the Gradle Test Runner with the IntelliJ IDEA Test Runner.
I am using the JUnit 5 Test Runner with"
cmpl-6uC82Dj3Z7kWgxhcDlgwPqNdwB61w,/EvoSuiteBenchmark/86_at-robots2-j/src/main/java/net/virtualinfinity/atrobots/game/Game.java,51.929959535598755,length,"// Game.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;

/**
 * This class coordinates rounds, entrants, and the simulation frame buffer.
 *
 * @author Daniel Pitts
 */
public class Game implements RoundListener {

    private RoundState roundState;

    private Round round;

    private int roundNumber = 0;

    private int totalRounds;

    private int maxProcessorSpeed = 5;

    private final FrameBuilder frameBuffer;

    private final List<RobotFactory> entrants = Collections.synchronizedList(new ArrayList<RobotFactory>());

    private int nextEntrantId;

    private final Map<RobotFactory, RobotScoreKeeper> scoreKeepers = new IdentityHashMap<RobotFactory, RobotScoreKeeper>();

    public Game(int totalRounds) {
        this(totalRounds, new FrameBuilder());
    }

    public Game(int totalRounds, FrameBuilder frameBuffer) {
        this.totalRounds = totalRounds;
        this.frameBuffer = frameBuffer;
    }

    /**
     * Get the current round.
     *
     * @return the current round.
     */
    public synchronized Round getRound() {
        return round;
    }

    /**
     * Get the total number of rounds.
     *
     * @return the total number of rounds.
     */
    public synchronized int getTotalRounds() {
        return totalRounds;
    }

    /**
     * Start the next round. This ends the current round.
     */
    public synchronized void nextRound() {
        if (round != null) {
            round.finalizeRound();
        }
        if (roundNumber < getTotalRounds()) {
            roundState = new StandardRoundState(totalRounds, ++roundNumber);
            round = new Round(frameBuffer);
            round.addRoundListener(this);
            for (int i = 0, entrantsSize = entrants.size(); i < entrantsSize; i++) {
                round.getArena().addRobot(createRobotFor(entrants.get(i), i));
            }
            round.getArena().buildFrame();
        } else {
            round = null;
            gameOver();
        }
    }

    private void gameOver() {
    }

    /**
     * Create a robot for the given entrant.
     *
     * @param entrant the entrant
     * @param id      the id for the robot.
     * @return the robot.
     */
    protected Robot createRobotFor(RobotFactory entrant, int id) {
        return entrant.createRobot(roundState, getMaxProcessorSpeed(), getScoreKeeper(entrant), round.getArena(), id);
    }

    private RobotScoreKeeper getScoreKeeper(RobotFactory entrant) {
        RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            robotScoreKeeper = new RobotScoreKeeper();
            scoreKeepers.put(entrant, robotScoreKeeper);
        }
        return robotScoreKeeper;
    }

    private RobotScore getFinalRobotScore(RobotFactory entrant) {
        final RobotScoreKeeper robotScoreKeeper = scoreKeepers.get(entrant);
        if (robotScoreKeeper == null) {
            throw new IllegalArgumentException(""Entrant did not participate in this game, so you can't get its final score."");
        }
        return FinalRobotScore.copyOf(getScoreKeeper(entrant));
    }

    public GameResult getFinalResults() {
        List<RobotGameResult> results = new ArrayList<RobotGameResult>();
        for (Map.Entry<RobotFactory, RobotScoreKeeper> robots : scoreKeepers.entrySet()) {
            results.add(new RobotGameResult(robots.getKey(), FinalRobotScore.copyOf(robots.getValue())));
        }
        Collections.sort(results);
        return new GameResult(results);
    }

    /**
     * Add an observer.
     *
     * @param observer the observer to add.
     */
    public synchronized void addSimulationObserver(SimulationObserver observer) {
        frameBuffer.addSimulationObserver(observer);
    }

    /**
     * Remove an observer.
     *
     * @param observer the observer to remove.
     */
    public synchronized void removeSimulationObserver(SimulationObserver observer) {
        frameBuffer.removeSimulationObserver(observer);
    }

    /**
     * Add an entrant for the next round.
     *
     * @param entrant the entrant
     */
    public synchronized void addEntrant(RobotFactory entrant) {
        entrants.add(entrant);
    }

    /**
     * Execute one step in the simulation.
     */
    public synchronized boolean stepRound() {
        if (round == null) {
            return false;
        }
        getRound().step();
        return round != null;
    }

    public void roundOver() {
        nextRound();
    }

    public int getMaxProcessorSpeed() {
        return maxProcessorSpeed;
    }

    public void setMaxProcessorSpeed(int maxProcessorSpeed) {
        this.maxProcessorSpeed = maxProcessorSpeed;
    }
}
","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {","// GameTest.java
package net.virtualinfinity.atrobots.game;

import net.virtualinfinity.atrobots.arena.FrameBuilder;
import net.virtualinfinity.atrobots.arena.RoundState;
import net.virtualinfinity.atrobots.arena.SimulationObserver;
import net.virtualinfinity.atrobots.compiler.RobotFactory;
import net.virtualinfinity.atrobots.robot.FinalRobotScore;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScore;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#stepRound()} method.
*/
class GameTest {

		private static final int TOTAL_ROUNDS = 1;
		
		private static final int MAX_PROCESSOR_SPEED = 5;
		
		private static final int MAX_ROBOTS = 2;
		
		private static final int MAX_ROBOT_ID = 1;
		
		private static final int MAX_ROBOT_HEALTH = 100;
		
		private static final int MAX_ROBOT_SCORE = 100;
		
		private static final int MAX_ROBOT_KILLS = 1;
		
		private static final int MAX_ROBOT_DEATHS = 1;
		
		private static final int MAX_ROBOT_RANK = 1;
		
		private static final int MAX_ROBOT_RANK_CHANGE = 1;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE = 100;
		
		private static final int MAX_ROBOT_RANK_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT_CHANGE_PERCENT = 100;
		
		private static final int MAX_"
