ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6ttFS7VAmBGU4fToBBkGii95HfkmS,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/sfmis/personinfo/business/PersonInfoMgr_0Test.java,89.86417055130005,length,"// PersonInfoMgr.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;

/**
 * @author 忧里修斯
 * 用户信息的管理
 */
public class PersonInfoMgr extends DaoFactory {

    /**
     * 增加或更新用户的信息
     * @param pInfo
     */
    public String saveOrUpdate(APersonInfo pInfo) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            if (pInfo.getPersonid() == null || pInfo.getPersonid().equalsIgnoreCase("""")) {
                //新增
                this.save(pInfo);
            } else {
                this.update(pInfo);
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }

    /**
     * 删除用户的信息
     * @param pInfo
     */
    public String deleteByIds(String[] idnos) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            String hql = ""delete from APersonInfo where personid=?"";
            for (int i = 0; i < idnos.length; i++) {
                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }
}
","// PersonInfoMgr_0Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#saveOrUpdate(APersonInfo)} method.
*/
class PersonInfoMgr_0Test {","// PersonInfoMgr_0Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#saveOrUpdate(APersonInfo)} method.
*/
class PersonInfoMgr_0Test {

	/**
	* Test case 1:
	* 		pInfo: null
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase1() {
		// Arrange
		APersonInfo pInfo = null;
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 2:
	* 		pInfo: {personid: null, personname: null, personsex: null, personage: null, personaddress: null, personphone: null, personemail: null, personqq: null, personwechat: null, personremark: null}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase2() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(null);
		pInfo.setPersonname(null);
		pInfo.setPersonsex(null);
		pInfo.setPersonage(null);
		pInfo.setPersonaddress(null);
		pInfo.setPersonphone(null);
		pInfo.setPersonemail(null);
		pInfo.setPersonqq(null);
		pInfo.setPersonwechat(null);
		pInfo.setPersonremark(null);
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 3:
	* 		pInfo: {personid: """", personname: """", personsex: """", personage: """", personaddress: """", personphone: """", personemail: """", personqq: """", personwechat: """", personremark: """"}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase3() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid("""");
		pInfo.setPersonname("""");
		pInfo.setPersonsex("""");
		pInfo.setPersonage("""");
		pInfo.setPersonaddress("""");
		pInfo.setPersonphone("""");
		pInfo.setPersonemail("""");
		pInfo.setPersonqq("""");
		pInfo.setPersonwechat("""");
		pInfo.setPersonremark("""");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 4:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase4() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 5:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase5() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 6:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase6() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 7:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase7() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 8:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase8() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 9:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase9() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 10:
	* 		pInfo: {personid: ""1"", personname: ""1"", personsex: ""1"", personage: ""1"", personaddress: ""1"", personphone: ""1"", personemail: ""1"", personqq: ""1"", personwechat: ""1"", personremark: ""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase10() {
		// Arrange
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(""1"");
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		pInfo.setPersonemail(""1"");
		pInfo.setPersonqq(""1"");
		pInfo.setPersonwechat(""1"");
		pInfo.setPersonremark(""1"");
		
		// Act
		String actual = new PersonInfoMgr().saveOrUpdate(pInfo);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
}

// PersonInfoMgr_1Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#deleteByIds(String[])} method.
*/
class PersonInfoMgr_1Test {
		
	/**
	* Test case 1:
	* 		idnos: null
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase1() {
		// Arrange
		String[] idnos = null;
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 2:
	* 		idnos: {""""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase2() {
		// Arrange
		String[] idnos = {""""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 3:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase3() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 4:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase4() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 5:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase5() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 6:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase6() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 7:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase7() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 8:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase8() {
		// Arrange
		String[] idnos = {""1""};
		
		// Act
		String actual = new PersonInfoMgr().deleteByIds(idnos);
		
		// Assert
		assertEquals(""0"", actual);
	}
	
	/**
	* Test case 9:
	* 		idnos: {""1""}
	* 		Expected: NullPointerException
	*/
	@Test
	void testCase9"
cmpl-6ttGulgLGr0YCEYRKrjzhFunAugEx,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/sfmis/personinfo/business/PersonInfoMgr_1Test.java,93.8136875629425,length,"// PersonInfoMgr.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;

/**
 * @author 忧里修斯
 * 用户信息的管理
 */
public class PersonInfoMgr extends DaoFactory {

    /**
     * 增加或更新用户的信息
     * @param pInfo
     */
    public String saveOrUpdate(APersonInfo pInfo) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            if (pInfo.getPersonid() == null || pInfo.getPersonid().equalsIgnoreCase("""")) {
                //新增
                this.save(pInfo);
            } else {
                this.update(pInfo);
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }

    /**
     * 删除用户的信息
     * @param pInfo
     */
    public String deleteByIds(String[] idnos) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            String hql = ""delete from APersonInfo where personid=?"";
            for (int i = 0; i < idnos.length; i++) {
                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }
}
","// PersonInfoMgr_1Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#deleteByIds(String[])} method.
*/
class PersonInfoMgr_1Test {","// PersonInfoMgr_1Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#deleteByIds(String[])} method.
*/
class PersonInfoMgr_1Test {

	/**
	* Test case 1 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos is null,
	* the method deleteByIds will throw a NullPointerException.
	*/
	@Test
	void testDeleteByIds_1() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = null;
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 2 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos is empty,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_2() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[0];
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos is empty"", exception.getMessage());
	}
	
	/**
	* Test case 3 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains null element,
	* the method deleteByIds will throw a NullPointerException.
	*/
	@Test
	void testDeleteByIds_3() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = null;
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains null element"", exception.getMessage());
	}
	
	/**
	* Test case 4 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains empty element,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_4() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = """";
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains empty element"", exception.getMessage());
	}
	
	/**
	* Test case 5 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains duplicate element,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_5() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[2];
		idnos[0] = ""1"";
		idnos[1] = ""1"";
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains duplicate element"", exception.getMessage());
	}
	
	/**
	* Test case 6 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains element which is not a number,
	* the method deleteByIds will throw a NumberFormatException.
	*/
	@Test
	void testDeleteByIds_6() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = ""a"";
		
		// Act
		Throwable exception = assertThrows(NumberFormatException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""For input string: \""a\"""", exception.getMessage());
	}
	
	/**
	* Test case 7 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains element which is not a integer,
	* the method deleteByIds will throw a NumberFormatException.
	*/
	@Test
	void testDeleteByIds_7() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = ""1.1"";
		
		// Act
		Throwable exception = assertThrows(NumberFormatException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""For input string: \""1.1\"""", exception.getMessage());
	}
	
	/**
	* Test case 8 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains element which is not a positive integer,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_8() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = ""-1"";
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains element which is not a positive integer"", exception.getMessage());
	}
	
	/**
	* Test case 9 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains element which is not a positive integer,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_9() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = ""0"";
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains element which is not a positive integer"", exception.getMessage());
	}
	
	/**
	* Test case 10 for method deleteByIds.
	* The test case aims to test the situation that when the parameter idnos contains element which is not a positive integer,
	* the method deleteByIds will throw a IllegalArgumentException.
	*/
	@Test
	void testDeleteByIds_10() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		String[] idnos = new String[1];
		idnos[0] = ""2147483648"";
		
		// Act
		Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
			personInfoMgr.deleteByIds(idnos);
		});
		
		// Assert
		assertEquals(""idnos contains element which is not a positive integer"", exception.getMessage());
	}
}

// PersonInfoMgr_2Test.java
package com.hf.sfm.sfmis.personinfo.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.pdo.APersonInfo;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PersonInfoMgr}.
* It contains ten unit test cases for the {@link PersonInfoMgr#saveOrUpdate(APersonInfo)} method.
*/
class PersonInfoMgr_2Test {
		
	/**
	* Test case 1 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_1() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = null;
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 2 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_2() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 3 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_3() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 4 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_4() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 5 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_5() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 6 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_6() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(1);
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 7 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_7() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(1);
		pInfo.setPersonaddress(""1"");
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception.getMessage());
	}
	
	/**
	* Test case 8 for method saveOrUpdate.
	* The test case aims to test the situation that when the parameter pInfo is not null,
	* the method saveOrUpdate will throw a NullPointerException.
	*/
	@Test
	void testSaveOrUpdate_8() {
		// Arrange
		PersonInfoMgr personInfoMgr = new PersonInfoMgr();
		APersonInfo pInfo = new APersonInfo();
		pInfo.setPersonid(""1"");
		pInfo.setPersonname(""1"");
		pInfo.setPersonsex(""1"");
		pInfo.setPersonage(1);
		pInfo.setPersonaddress(""1"");
		pInfo.setPersonphone(""1"");
		
		// Act
		Throwable exception = assertThrows(NullPointerException.class, () -> {
			personInfoMgr.saveOrUpdate(pInfo);
		});
		
		// Assert
		assertEquals(""pInfo is marked non-null but is null"", exception"
cmpl-6ttIQK8QBTIcp22tPlygedQOhGG7t,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/WorkerMgr_0Test.java,86.0557222366333,length,"// WorkerMgr.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;

/**
 * @author 忧里修斯
 * 用户登录信息管理
 */
public class WorkerMgr extends DaoFactory {

    /**
     * 增加或更新用户登录信息
     * @param pInfo
     */
    public String saveOrUpdate(AWorker worker) {
        //密码加密
        worker.setPassword(encrypt(worker.getPassword()));
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            if (worker.getIdno() == null || worker.getIdno().equalsIgnoreCase("""")) {
                //新增
                this.save(worker);
            } else {
                //更新
                this.update(worker);
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }

    /**
     * 删除用户登录的信息
     * @param idnos
     */
    public String deleteByIds(String[] idnos) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            String hql = ""delete from AWorker where idno=?"";
            for (int i = 0; i < idnos.length; i++) {
                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }
}
","// WorkerMgr_0Test.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WorkerMgr}.
* It contains ten unit test cases for the {@link WorkerMgr#saveOrUpdate(AWorker)} method.
*/
class WorkerMgr_0Test {","// WorkerMgr_0Test.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WorkerMgr}.
* It contains ten unit test cases for the {@link WorkerMgr#saveOrUpdate(AWorker)} method.
*/
class WorkerMgr_0Test {

	/**
	* Test case 1:
	* 		idno: null
	* 		password: null
	* 		name: null
	* 		sex: null
	* 		birthday: null
	* 		idtype: null
	* 		idno: null
	* 		address: null
	* 		postcode: null
	* 		tel: null
	* 		mobile: null
	* 		email: null
	* 		qq: null
	* 		msn: null
	* 		remark: null
	* 		status: null
	* 		createdate: null
	* 		updatedate: null
	* 		createuser: null
	* 		updateuser: null
	* 		deptid: null
	* 		deptname: null
	* 		roleid: null
	* 		rolename: null
	* 		roledesc: null
	* 		roletype: null
	* 		rolelevel: null
	* 		rolesort: null
	* 		roleremark: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	* 		roleqq: null
	* 		rolemsn: null
	* 		roleremark: null
	* 		rolestatus: null
	* 		rolecreatedate: null
	* 		roleupdatedate: null
	* 		rolecreateuser: null
	* 		roleupdateuser: null
	* 		roleidno: null
	* 		roleidtype: null
	* 		roleidtypename: null
	* 		rolesex: null
	* 		rolesexname: null
	* 		rolebirthday: null
	* 		roleaddress: null
	* 		rolepostcode: null
	* 		roletel: null
	* 		rolemobile: null
	* 		roleemail: null
	*"
cmpl-6ttJoobIQGF1ZZsv2sOtqvFHEOwTJ,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/system/business/WorkerMgr_1Test.java,87.62588500976562,length,"// WorkerMgr.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;

/**
 * @author 忧里修斯
 * 用户登录信息管理
 */
public class WorkerMgr extends DaoFactory {

    /**
     * 增加或更新用户登录信息
     * @param pInfo
     */
    public String saveOrUpdate(AWorker worker) {
        //密码加密
        worker.setPassword(encrypt(worker.getPassword()));
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            if (worker.getIdno() == null || worker.getIdno().equalsIgnoreCase("""")) {
                //新增
                this.save(worker);
            } else {
                //更新
                this.update(worker);
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }

    /**
     * 删除用户登录的信息
     * @param idnos
     */
    public String deleteByIds(String[] idnos) {
        //0为执行失败，1为执行成功
        String rtn = ""0"";
        Transaction tx = null;
        try {
            this.currentSession();
            tx = this.session.beginTransaction();
            String hql = ""delete from AWorker where idno=?"";
            for (int i = 0; i < idnos.length; i++) {
                this.session.createQuery(hql).setString(0, idnos[i]).executeUpdate();
            }
            tx.commit();
            rtn = ""1"";
        } catch (Exception e) {
            tx.rollback();
            e.printStackTrace();
        } finally {
            this.closeSession();
        }
        return rtn;
    }
}
","// WorkerMgr_1Test.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WorkerMgr}.
* It contains ten unit test cases for the {@link WorkerMgr#deleteByIds(String[])} method.
*/
class WorkerMgr_1Test {","// WorkerMgr_1Test.java
package com.hf.sfm.system.business;

import org.hibernate.Transaction;
import com.hf.sfm.sfmis.personinfo.business.PersonInfoMgr;
import com.hf.sfm.system.pdo.AWorker;
import com.hf.sfm.util.DaoFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WorkerMgr}.
* It contains ten unit test cases for the {@link WorkerMgr#deleteByIds(String[])} method.
*/
class WorkerMgr_1Test {

	/**
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
	* Test case 1 for method deleteByIds.
"
cmpl-6ttLDbqRT6DO40Y2Mqoj7TaCDc7Ui,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/DaoFactory_0Test.java,100.91382098197937,length,"// DaoFactory.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;

public class DaoFactory {

    private static Log log = LogFactory.getLog(DaoFactory.class);

    public Session session = null;

    public CallableStatement ps = null;

    public ResultSet rs = null;

    public Connection conn = null;

    private Transaction tx = null;

    public DaoFactory() {
    }

    /**
     * 创建会话session
     */
    public void currentSession() {
        this.session = HibernateSessionFactory.currentSession();
    }

    /**
     * 关闭session
     */
    public void closeSession() {
        HibernateSessionFactory.closeSession();
    }

    /**
     * 提交事务并关闭相关资源
     */
    public void commit() {
        this.tx.commit();
        closeAll();
    }

    /**
     * 创建session开启事务
     */
    public void beginTransaction() {
        currentSession();
        tx = this.session.beginTransaction();
    }

    /**
     * 回滚事务
     */
    public void rollback() {
        tx.rollback();
    }

    /**
     * 密码加密
     */
    public String encrypt(String str) {
        return Base64.byteArrayToBase64(str.getBytes());
    }

    /**
     * 密码解密
     */
    public String decrypt(String s) {
        return new String(Base64.base64ToByteArray(s));
    }

    /**
     * 持久化一个对象
     * @param obj
     */
    public void save(Object obj) {
        session.save(obj);
    }

    /**
     * 更新一个对象
     * @param obj
     */
    public void update(Object obj) {
        session.update(obj);
    }

    /**
     * 关闭数据库操作所使用的相关资源
     */
    public void closeAll() {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (ps != null) {
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (session != null) {
            session.close();
        }
    }
}
","// DaoFactory_0Test.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DaoFactory}.
* It contains ten unit test cases for the {@link DaoFactory#encrypt(String)} method.
*/
class DaoFactory_0Test {","// DaoFactory_0Test.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DaoFactory}.
* It contains ten unit test cases for the {@link DaoFactory#encrypt(String)} method.
*/
class DaoFactory_0Test {

		private static Log log = LogFactory.getLog(DaoFactory.class);

		public Session session = null;

		public CallableStatement ps = null;

		public ResultSet rs = null;

		public Connection conn = null;

		private Transaction tx = null;

		public DaoFactory_0Test() {
		}

		/**
		 * 创建会话session
		 */
		public void currentSession() {
				this.session = HibernateSessionFactory.currentSession();
		}

		/**
		 * 关闭session
		 */
		public void closeSession() {
				HibernateSessionFactory.closeSession();
		}

		/**
		 * 提交事务并关闭相关资源
		 */
		public void commit() {
				this.tx.commit();
				closeAll();
		}

		/**
		 * 创建session开启事务
		 */
		public void beginTransaction() {
				currentSession();
				tx = this.session.beginTransaction();
		}

		/**
		 * 回滚事务
		 */
		public void rollback() {
				tx.rollback();
		}

		/**
		 * 密码加密
		 */
		public String encrypt(String str) {
				return Base64.byteArrayToBase64(str.getBytes());
		}

		/**
		 * 密码解密
		 */
		public String decrypt(String s) {
				return new String(Base64.base64ToByteArray(s));
		}

		/**
		 * 持久化一个对象
		 * @param obj
		 */
		public void save(Object obj) {
				session.save(obj);
		}

		/**
		 * 更新一个对象
		 * @param obj
		 */
		public void update(Object obj) {
				session.update(obj);
		}

		/**
		 * 关闭数据库操作所使用的相关资源
		 */
		public void closeAll() {
				if (rs != null) {
						try {
								rs.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (ps != null) {
						try {
								ps.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (conn != null) {
						try {
								conn.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (session != null) {
						session.close();
				}
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_0() {
				String str = ""123456"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2"", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_1() {
				String str = ""1234567"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nw=="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_2() {
				String str = ""12345678"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_3() {
				String str = ""123456789"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5"", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_4() {
				String str = ""1234567890"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MA=="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_5() {
				String str = ""12345678901"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MDE="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_6() {
				String str = ""123456789012"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MDEy"", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_7() {
				String str = ""1234567890123"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MDEyMw=="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_8() {
				String str = ""12345678901234"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MDEyMzQ="", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#encrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#encrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testEncrypt_9() {
				String str = ""123456789012345"";
				String result = encrypt(str);
				assertEquals(""MTIzNDU2Nzg5MDEyMzQ1"", result);
		}
		
}

// DaoFactory_1Test.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DaoFactory}.
* It contains ten unit test cases for the {@link DaoFactory#decrypt(String)} method.
*/
class DaoFactory_1Test {
		
		private static Log log = LogFactory.getLog(DaoFactory.class);

		public Session session = null;

		public CallableStatement ps = null;

		public ResultSet rs = null;

		public Connection conn = null;

		private Transaction tx = null;

		public DaoFactory_1Test() {
		}

		/**
		 * 创建会话session
		 */
		public void currentSession() {
				this.session = HibernateSessionFactory.currentSession();
		}

		/**
		 * 关闭session
		 */
		public void closeSession() {
				HibernateSessionFactory.closeSession();
		}

		/**
		 * 提交事务并关闭相关资源
		 */
		public void commit() {
				this.tx.commit();
				closeAll();
		}

		/**
		 * 创建session开启事务
		 */
		public void beginTransaction() {
				currentSession();
				tx = this.session.beginTransaction();
		}

		/**
		 * 回滚事务
		 */
		public void rollback() {
				tx.rollback();
		}

		/**
		 * 密码加密
		 */
		public String encrypt(String str) {
				return Base64.byteArrayToBase64(str.getBytes());
		}

		/**
		 * 密码解密
		 */
		public String decrypt(String s) {
				return new String(Base64.base64ToByteArray(s));
		}

		/**
		 * 持久化一个对象
		 * @param obj
		 */
		public void save(Object obj) {
				session.save(obj);
		}

		/**
		 * 更新一个对象
		 * @param obj
		 */
		public void update(Object obj) {
				session.update(obj);
		}

		/**
		 * 关闭数据库操作所使用的相关资源
		 */
		public void closeAll() {
				if (rs != null) {
						try {
								rs.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (ps != null) {
						try {
								ps.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (conn != null) {
						try {
								conn.close();
						} catch (SQLException e) {
								e.printStackTrace();
						}
				}
				if (session != null) {
						session.close();
				}
		}
		
		/**
		 * Test case for the {@link DaoFactory#decrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#decrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testDecrypt_0() {
				String s = ""MTIzNDU2"";
				String result = decrypt(s);
				assertEquals(""123456"", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#decrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#decrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
		 */
		@Test
		public void testDecrypt_1() {
				String s = ""MTIzNDU2Nw=="";
				String result = decrypt(s);
				assertEquals(""1234567"", result);
		}
		
		/**
		 * Test case for the {@link DaoFactory#decrypt(String)} method.
		 * This test case is used to test the {@link DaoFactory#decrypt(String)} method.
		 * The test case is passed if the method returns the correct value.
	"
cmpl-6ttMqzCzcujSosw8K13sKaQUOxh6N,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/DaoFactory_1Test.java,94.28908562660217,length,"// DaoFactory.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;

public class DaoFactory {

    private static Log log = LogFactory.getLog(DaoFactory.class);

    public Session session = null;

    public CallableStatement ps = null;

    public ResultSet rs = null;

    public Connection conn = null;

    private Transaction tx = null;

    public DaoFactory() {
    }

    /**
     * 创建会话session
     */
    public void currentSession() {
        this.session = HibernateSessionFactory.currentSession();
    }

    /**
     * 关闭session
     */
    public void closeSession() {
        HibernateSessionFactory.closeSession();
    }

    /**
     * 提交事务并关闭相关资源
     */
    public void commit() {
        this.tx.commit();
        closeAll();
    }

    /**
     * 创建session开启事务
     */
    public void beginTransaction() {
        currentSession();
        tx = this.session.beginTransaction();
    }

    /**
     * 回滚事务
     */
    public void rollback() {
        tx.rollback();
    }

    /**
     * 密码加密
     */
    public String encrypt(String str) {
        return Base64.byteArrayToBase64(str.getBytes());
    }

    /**
     * 密码解密
     */
    public String decrypt(String s) {
        return new String(Base64.base64ToByteArray(s));
    }

    /**
     * 持久化一个对象
     * @param obj
     */
    public void save(Object obj) {
        session.save(obj);
    }

    /**
     * 更新一个对象
     * @param obj
     */
    public void update(Object obj) {
        session.update(obj);
    }

    /**
     * 关闭数据库操作所使用的相关资源
     */
    public void closeAll() {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (ps != null) {
            try {
                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (session != null) {
            session.close();
        }
    }
}
","// DaoFactory_1Test.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DaoFactory}.
* It contains ten unit test cases for the {@link DaoFactory#decrypt(String)} method.
*/
class DaoFactory_1Test {","// DaoFactory_1Test.java
package com.hf.sfm.util;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Session;
import org.hibernate.Transaction;
/**
 * 此类主要是提供一些常用的方法使用，已在DaoFactoryUtil.java中实例化，业务类只需要继承于DaoFactoryUtil即可调用
 */
import com.hf.sfm.crypt.Base64;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DaoFactory}.
* It contains ten unit test cases for the {@link DaoFactory#decrypt(String)} method.
*/
class DaoFactory_1Test {

	/**
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for method {@link DaoFactory#decrypt(String)}.
	* Test case 1 for"
cmpl-6ttON5XzVGPptBfZ18heB3XInkPje,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/DataSource_3Test.java,102.20001411437988,length,"// DataSource.java
package com.hf.sfm.util;

import javax.servlet.http.HttpSession;

public class DataSource {

    private Loader loader = new Loader();

    public String getPlanarArrData(BasePara basePara) {
        loader.run(basePara);
        return loader.getArrayResults();
    }

    public ListRange getGridData(BasePara basePara) {
        //		paging=true;
        //		System.out.println(""sqlpath:""+sqlpath+"",queryparams:""+queryparams.length+"",paging:""+paging+"",start:""+start+"",limit:""+limit);
        //		String[] commaArr = null;
        //		String[] colonArr = null;
        //		String queryParams = con.get(""queryparams"").toString().replace(""{"", """").replace(""}"", """");
        //		if(queryParams.indexOf("","")>0){
        //			commaArr = queryParams.split("","");
        //			colonArr = new String[commaArr.length*2];
        //			for(int i=0;i<commaArr.length;i++){
        //				String[] temp = new String[2];
        //				temp = commaArr[i].split("":"");
        //				for(int j=0;j<temp.length;j++){
        //					colonArr[2*i+j] = temp[j];
        //				}
        //			}
        //		}else{
        //			colonArr = queryParams.split("":"");
        //		}
        //		BasePara basePara = new BasePara();
        //		basePara.setSqlpath(con.get(""sqlpath"").toString());
        //		basePara.setPaging(Boolean.parseBoolean(con.get(""paging"").toString()));
        //		basePara.setStart(Integer.parseInt(con.get(""start"").toString()));
        //		basePara.setLimit(Integer.parseInt(con.get(""limit"").toString()));
        //		basePara.setQueryparams(colonArr);
        System.out.println(""sqlpath:"" + basePara.getSqlpath() + ""\n,paging:"" + basePara.isPaging() + ""\n,start:"" + basePara.getStart() + ""\n,limit:"" + basePara.getLimit() + "",\nsort:"" + basePara.getSort() + "",\ndir:"" + basePara.getDir() + "",\nquery:"" + basePara.getQueryValue() + "",\nquerySql:"" + basePara.getQuerySql());
        loader.run(basePara);
        loader.collectToMap();
        System.out.println(""********:"" + loader.getRange().getData() + ""\ntotalSize:"" + loader.getRange().getTotalSize());
        return loader.getRange();
    }

    public ListRange getComboData(BasePara basePara) {
        System.out.println(""sqlpath:"" + basePara.getSqlpath() + ""\n,paging:"" + basePara.isPaging() + ""\n,start:"" + basePara.getStart() + ""\n,limit:"" + basePara.getLimit() + "",\nsort:"" + basePara.getSort() + "",\ndir:"" + basePara.getDir() + "",\nqueryValue:"" + basePara.getQueryValue() + "",\nquerySql:"" + basePara.getQuerySql());
        //		basePara.setQuerySql("" g.idno = ? or g.mark=? "");
        loader.run(basePara);
        loader.collectToMap(""combo"");
        System.out.println(""********:"" + loader.getRange().getData() + ""\ntotalSize:"" + loader.getRange().getTotalSize());
        return loader.getRange();
    }

    /**
     * 获取session的属性值
     */
    public String getSession(HttpSession ss, String sessionName) {
        String s = ss.getAttribute(sessionName) + """";
        return s;
    }

    public static void main(String[] args) {
        DataSource data = new DataSource();
        BasePara base = new BasePara();
        Loader loader = new Loader();
        base.setSqlpath(""personInfo//sel_all_group"");
        base.setPaging(false);
        loader.run(base);
        loader.collectToMap(""combo"");
        ListRange rang = loader.getRange();
        System.out.println(""********:"" + loader.getRange().getData() + ""\ntotalSize:"" + loader.getRange().getTotalSize());
    }
}
","// DataSource_3Test.java
package com.hf.sfm.util;

import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DataSource}.
* It contains ten unit test cases for the {@link DataSource#getSession(HttpSession, String)} method.
*/
class DataSource_3Test {","// DataSource_3Test.java
package com.hf.sfm.util;

import javax.servlet.http.HttpSession;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DataSource}.
* It contains ten unit test cases for the {@link DataSource#getSession(HttpSession, String)} method.
*/
class DataSource_3Test {

		/**
		* Test case 1 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_1() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 2 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_2() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 3 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_3() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 4 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_4() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 5 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_5() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 6 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_6() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 7 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_7() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 8 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_8() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 9 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_9() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
		
		/**
		* Test case 10 for {@link DataSource#getSession(HttpSession, String)}
		*
		* @throws Exception
		*/
		@Test
		void testGetSession_10() throws Exception {
				// Arrange
				HttpSession ss = null;
				String sessionName = """";
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getSession(ss, sessionName);
				
				// Assert
				assertEquals(""null"", result);
		}
}

// DataSource_4Test.java
package com.hf.sfm.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DataSource}.
* It contains ten unit test cases for the {@link DataSource#getPlanarArrData(BasePara)} method.
*/
class DataSource_4Test {
		
		/**
		* Test case 1 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_1() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 2 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_2() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 3 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_3() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 4 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_4() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 5 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_5() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 6 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_6() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 7 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_7() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 8 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_8() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 9 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_9() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
		
		/**
		* Test case 10 for {@link DataSource#getPlanarArrData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetPlanarArrData_10() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				String result = dataSource.getPlanarArrData(basePara);
				
				// Assert
				assertEquals("""", result);
		}
}

// DataSource_5Test.java
package com.hf.sfm.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DataSource}.
* It contains ten unit test cases for the {@link DataSource#getGridData(BasePara)} method.
*/
class DataSource_5Test {
		
		/**
		* Test case 1 for {@link DataSource#getGridData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetGridData_1() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				ListRange result = dataSource.getGridData(basePara);
				
				// Assert
				assertEquals(null, result);
		}
		
		/**
		* Test case 2 for {@link DataSource#getGridData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetGridData_2() throws Exception {
				// Arrange
				BasePara basePara = null;
				DataSource dataSource = new DataSource();
				
				// Act
				ListRange result = dataSource.getGridData(basePara);
				
				// Assert
				assertEquals(null, result);
		}
		
		/**
		* Test case 3 for {@link DataSource#getGridData(BasePara)}
		*
		* @throws Exception
		*/
		@Test
		void testGetGridData_3() throws Exception {
				// Arrange
				BasePara basePara = null;
				Data"
cmpl-6ttQ14FZWePl3cVeNfnPbi4Dts1dc,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/Loader_0Test.java,108.68718600273132,length,"// Loader.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

public class Loader {

    private String sql;

    private String filepath;

    private int start;

    private int limit;

    private int totalCount;

    private String[] colNames;

    private String[][] pas;

    private String sort;

    private String dir;

    private final String XMLPATH = ""sqlfolder/"";

    private Session session = null;

    private Query query;

    private List rs;

    private boolean paging;

    private ListRange range;

    private String querySql;

    private String queryValue;

    public ListRange getRange() {
        return range;
    }

    public void setRange(ListRange range) {
        this.range = range;
    }

    public List getRs() {
        return rs;
    }

    public void setRs(List rs) {
        this.rs = rs;
    }

    public int getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }

    public String[] getColNames() {
        return colNames;
    }

    public void setColNames(String[] colNames) {
        this.colNames = colNames;
    }

    public void run(BasePara basePara) {
        filepath = basePara.getSqlpath();
        if (paging = basePara.isPaging()) {
            start = basePara.getStart();
            limit = basePara.getLimit();
        }
        sort = basePara.getSort();
        dir = basePara.getDir();
        pas = basePara.single2plannar();
        this.parseXML();
        querySql = querySql == null ? basePara.getQuerySql() : querySql;
        queryValue = basePara.getQueryValue();
        this.getCount();
        this.getColsName();
        this.loadDataWithSql();
    }

    /**
     * 从xml解析sql
     */
    public void parseXML() {
        String pa = this.getClass().getResource(""Loader.class"").toString();
        String rootpath = pa.substring(pa.indexOf("":"") + 2, pa.lastIndexOf(""classes"") + 8).replaceAll(""%20"", "" "");
        String[] path = this.filepath.split(""//"");
        String filepath = rootpath + XMLPATH + path[0] + "".xml"";
        File file = new File(filepath);
        SAXReader reader = new SAXReader();
        try {
            Document doc = reader.read(file);
            Element root = doc.getRootElement();
            for (Iterator it = root.elementIterator(); it.hasNext(); ) {
                Element el = (Element) it.next();
                if (el.getName().equals(path[1])) {
                    sql = el.elementText(""main_sql"");
                    querySql = el.elementText(""query_sql"");
                    break;
                }
            }
        } catch (DocumentException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * 获取总记录数
     */
    public void getCount() {
        String subsql = """";
        this.getQuerySql();
        if (this.sql.lastIndexOf(""group by"") != -1) {
            subsql = this.sql.substring(this.sql.lastIndexOf(""from""), this.sql.lastIndexOf(""group by""));
        } else {
            subsql = this.sql.substring(this.sql.lastIndexOf(""from""));
        }
        session = HibernateSessionFactory.currentSession();
        query = session.createSQLQuery(""select count(1) "" + subsql);
        if (pas != null) {
            query = this.getParams(query, pas);
        }
        totalCount = Integer.parseInt(query.uniqueResult() + """");
        HibernateSessionFactory.closeSession();
    }

    /**
     * 获取sql中的字段名集合
     */
    public void getColsName() {
        String colssql = this.sql.substring(this.sql.lastIndexOf(""select"") + 6, this.sql.lastIndexOf(""from""));
        String[] cols = colssql.split("","");
        colNames = new String[cols.length];
        for (int i = 0; i < cols.length; i++) {
            String[] subcols = new String[cols.length];
            if (cols[i].indexOf("" as "") > 0) {
                subcols = cols[i].split(""as"");
                colNames[i] = subcols[1].trim();
            } else {
                if (cols[i].indexOf(""."") > 0) {
                    colNames[i] = cols[i].substring(cols[i].indexOf(""."") + 1).trim();
                } else {
                    colNames[i] = cols[i].trim();
                }
            }
        }
    }

    /**
     * 查询数据
     */
    public List loadDataWithSql() {
        session = HibernateSessionFactory.currentSession();
        this.getQuerySql();
        if (sort != null && sort != """") {
            if (this.sql.indexOf(""order by"") > 0) {
                this.sql = this.sql.substring(0, this.sql.indexOf(""order by"")) + "" order by "" + sort + "" "" + dir;
            } else {
                this.sql = this.sql + "" order by "" + sort + "" "" + dir;
            }
        }
        query = session.createSQLQuery(this.sql);
        if (pas != null) {
            query = this.getParams(query, pas);
        }
        if (paging) {
            query.setFirstResult(start);
            query.setMaxResults(limit);
        }
        List rows = query.list();
        HibernateSessionFactory.closeSession();
        this.setRs(rows);
        return rows;
    }

    public void getQuerySql() {
        int wherenum, ordernum, groupnum;
        System.out.println(""querySql:"" + querySql + "",sql:"" + sql);
        if (querySql != null) {
            wherenum = this.sql.indexOf(""where"");
            ordernum = this.sql.indexOf(""order by"");
            groupnum = this.sql.indexOf(""group by"");
            querySql = querySql.replace(""?"", queryValue);
            System.out.println(""&&&&&&&&querySql:"" + querySql);
            if (wherenum > 0) {
                if (groupnum > 0) {
                    this.sql = this.sql.substring(0, groupnum) + "" and ("" + querySql + "")"" + this.sql.substring(groupnum);
                } else if (ordernum > 0) {
                    this.sql = this.sql.substring(0, ordernum) + "" and ("" + querySql + "")"" + this.sql.substring(ordernum);
                }
            } else {
                if (groupnum > 0) {
                    this.sql = this.sql.substring(0, groupnum) + "" where ("" + querySql + "")"" + this.sql.substring(groupnum);
                } else if (ordernum > 0) {
                    this.sql = this.sql.substring(0, ordernum) + "" where ("" + querySql + "")"" + this.sql.substring(ordernum);
                } else {
                    this.sql = this.sql + "" where ("" + querySql + "")"";
                }
            }
        }
    }

    /**
     * 接收参数
     */
    public Query getParams(Query query, String[][] params) {
        if (params != null) {
            // 参数值
            String[] pValue = params[0];
            // 参数值类型
            String[] pType = params[1];
            for (int i = 0; i < pValue.length; i++) {
                if (pType[i].equals(""String"")) {
                    query.setParameter(i, pValue[i]);
                } else if (pType[i].equals(""Long"")) {
                    query.setParameter(i, Long.parseLong(pValue[i]));
                } else if (pType[i].equals(""Integer"")) {
                    query.setParameter(i, Integer.parseInt(pValue[i]));
                } else if (pType[i].equals(""Double"")) {
                    query.setParameter(i, Double.parseDouble(pValue[i]));
                } else if (pType[i].equals(""Date"")) {
                    try {
                        query.setParameter(i, new SimpleDateFormat(""yyyy-MM-dd"").parse(pValue[i]));
                    } catch (HibernateException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
        }
        return query;
    }

    /**
     * 首页Tree数据
     */
    public String getArrayResults() {
        List rows = this.getRs();
        if (rows.size() == 0) {
            return """";
        }
        String jsonstr = """";
        for (Iterator<?> it = rows.iterator(); it.hasNext(); ) {
            Object[] obj = (Object[]) it.next();
            String constr = ""{"";
            for (int i = 0; i < obj.length; i++) {
                if (i == obj.length - 1) {
                    constr += '""' + colNames[i] + '""' + "":"" + '""' + obj[i] + '""';
                } else {
                    constr += '""' + colNames[i] + '""' + "":"" + '""' + obj[i] + '""' + "","";
                }
            }
            constr += ""}"";
            jsonstr += constr + "","";
        }
        jsonstr = ""["" + jsonstr.substring(0, jsonstr.lastIndexOf("","")) + ""]"";
        return jsonstr;
    }

    public void collectToMap(String flag) {
        ArrayList<Object> al = null;
        HashMap<String, Object> map = null;
        String[] colNameArray = this.getColNames();
        if (flag.equals(""combo"")) {
            colNameArray[0] = ""value"";
            colNameArray[1] = ""text"";
        }
        al = new ArrayList<Object>();
        List rs = this.getRs();
        if (rs.size() > 0) {
            al = new ArrayList<Object>();
            for (Iterator<?> it = rs.iterator(); it.hasNext(); ) {
                Object[] obj = null;
                if (colNameArray.length == 1) {
                    obj = new Object[] { it.next() };
                } else {
                    obj = (Object[]) it.next();
                }
                map = new HashMap<String, Object>();
                for (int i = 0; i < colNameArray.length; i++) {
                    String tag = colNameArray[i];
                    map.put(tag, obj[i]);
                }
                al.add(map);
            }
        }
        range = new ListRange();
        range.setData(al);
        range.setTotalSize(this.getTotalCount());
    }

    public void collectToMap() {
        this.collectToMap("""");
    }
}
","// Loader_0Test.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.
*/
class Loader_0Test {","// Loader_0Test.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.
*/
class Loader_0Test {

		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_0() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_1() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_2() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_3() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_4() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_5() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_6() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_7() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_8() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#loadDataWithSql()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testLoadDataWithSql_9() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.loadDataWithSql();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
}

// Loader_1Test.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#getCount()} method.
*/
class Loader_1Test {
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_0() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_1() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_2() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_3() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_4() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_5() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
		void testGetCount_6() {
				// Arrange:
				Loader loader = new Loader();
				loader.sql = ""select * from t_user where user_id=?"";
				loader.pas = new String[][] {{""1""},{""String""}};
				// Act:
				loader.getCount();
				// Assert result:
				assertEquals(""select * from t_user where user_id=?"", loader.sql);
		}
		
		/**
		* Test case for the {@link Loader#getCount()} method.
		* Test data: ""select * from t_user where user_id=?""
		* Expected output: ""select * from t_user where user_id=?""
		*/
		@Test
	"
cmpl-6ttRmrQTYn5OcH4KbPZOvNcvu72tX,/EvoSuiteBenchmark/7_sfmis/src/main/java/com/hf/sfm/util/Loader_1Test.java,101.09662866592407,length,"// Loader.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

public class Loader {

    private String sql;

    private String filepath;

    private int start;

    private int limit;

    private int totalCount;

    private String[] colNames;

    private String[][] pas;

    private String sort;

    private String dir;

    private final String XMLPATH = ""sqlfolder/"";

    private Session session = null;

    private Query query;

    private List rs;

    private boolean paging;

    private ListRange range;

    private String querySql;

    private String queryValue;

    public ListRange getRange() {
        return range;
    }

    public void setRange(ListRange range) {
        this.range = range;
    }

    public List getRs() {
        return rs;
    }

    public void setRs(List rs) {
        this.rs = rs;
    }

    public int getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }

    public String[] getColNames() {
        return colNames;
    }

    public void setColNames(String[] colNames) {
        this.colNames = colNames;
    }

    public void run(BasePara basePara) {
        filepath = basePara.getSqlpath();
        if (paging = basePara.isPaging()) {
            start = basePara.getStart();
            limit = basePara.getLimit();
        }
        sort = basePara.getSort();
        dir = basePara.getDir();
        pas = basePara.single2plannar();
        this.parseXML();
        querySql = querySql == null ? basePara.getQuerySql() : querySql;
        queryValue = basePara.getQueryValue();
        this.getCount();
        this.getColsName();
        this.loadDataWithSql();
    }

    /**
     * 从xml解析sql
     */
    public void parseXML() {
        String pa = this.getClass().getResource(""Loader.class"").toString();
        String rootpath = pa.substring(pa.indexOf("":"") + 2, pa.lastIndexOf(""classes"") + 8).replaceAll(""%20"", "" "");
        String[] path = this.filepath.split(""//"");
        String filepath = rootpath + XMLPATH + path[0] + "".xml"";
        File file = new File(filepath);
        SAXReader reader = new SAXReader();
        try {
            Document doc = reader.read(file);
            Element root = doc.getRootElement();
            for (Iterator it = root.elementIterator(); it.hasNext(); ) {
                Element el = (Element) it.next();
                if (el.getName().equals(path[1])) {
                    sql = el.elementText(""main_sql"");
                    querySql = el.elementText(""query_sql"");
                    break;
                }
            }
        } catch (DocumentException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * 获取总记录数
     */
    public void getCount() {
        String subsql = """";
        this.getQuerySql();
        if (this.sql.lastIndexOf(""group by"") != -1) {
            subsql = this.sql.substring(this.sql.lastIndexOf(""from""), this.sql.lastIndexOf(""group by""));
        } else {
            subsql = this.sql.substring(this.sql.lastIndexOf(""from""));
        }
        session = HibernateSessionFactory.currentSession();
        query = session.createSQLQuery(""select count(1) "" + subsql);
        if (pas != null) {
            query = this.getParams(query, pas);
        }
        totalCount = Integer.parseInt(query.uniqueResult() + """");
        HibernateSessionFactory.closeSession();
    }

    /**
     * 获取sql中的字段名集合
     */
    public void getColsName() {
        String colssql = this.sql.substring(this.sql.lastIndexOf(""select"") + 6, this.sql.lastIndexOf(""from""));
        String[] cols = colssql.split("","");
        colNames = new String[cols.length];
        for (int i = 0; i < cols.length; i++) {
            String[] subcols = new String[cols.length];
            if (cols[i].indexOf("" as "") > 0) {
                subcols = cols[i].split(""as"");
                colNames[i] = subcols[1].trim();
            } else {
                if (cols[i].indexOf(""."") > 0) {
                    colNames[i] = cols[i].substring(cols[i].indexOf(""."") + 1).trim();
                } else {
                    colNames[i] = cols[i].trim();
                }
            }
        }
    }

    /**
     * 查询数据
     */
    public List loadDataWithSql() {
        session = HibernateSessionFactory.currentSession();
        this.getQuerySql();
        if (sort != null && sort != """") {
            if (this.sql.indexOf(""order by"") > 0) {
                this.sql = this.sql.substring(0, this.sql.indexOf(""order by"")) + "" order by "" + sort + "" "" + dir;
            } else {
                this.sql = this.sql + "" order by "" + sort + "" "" + dir;
            }
        }
        query = session.createSQLQuery(this.sql);
        if (pas != null) {
            query = this.getParams(query, pas);
        }
        if (paging) {
            query.setFirstResult(start);
            query.setMaxResults(limit);
        }
        List rows = query.list();
        HibernateSessionFactory.closeSession();
        this.setRs(rows);
        return rows;
    }

    public void getQuerySql() {
        int wherenum, ordernum, groupnum;
        System.out.println(""querySql:"" + querySql + "",sql:"" + sql);
        if (querySql != null) {
            wherenum = this.sql.indexOf(""where"");
            ordernum = this.sql.indexOf(""order by"");
            groupnum = this.sql.indexOf(""group by"");
            querySql = querySql.replace(""?"", queryValue);
            System.out.println(""&&&&&&&&querySql:"" + querySql);
            if (wherenum > 0) {
                if (groupnum > 0) {
                    this.sql = this.sql.substring(0, groupnum) + "" and ("" + querySql + "")"" + this.sql.substring(groupnum);
                } else if (ordernum > 0) {
                    this.sql = this.sql.substring(0, ordernum) + "" and ("" + querySql + "")"" + this.sql.substring(ordernum);
                }
            } else {
                if (groupnum > 0) {
                    this.sql = this.sql.substring(0, groupnum) + "" where ("" + querySql + "")"" + this.sql.substring(groupnum);
                } else if (ordernum > 0) {
                    this.sql = this.sql.substring(0, ordernum) + "" where ("" + querySql + "")"" + this.sql.substring(ordernum);
                } else {
                    this.sql = this.sql + "" where ("" + querySql + "")"";
                }
            }
        }
    }

    /**
     * 接收参数
     */
    public Query getParams(Query query, String[][] params) {
        if (params != null) {
            // 参数值
            String[] pValue = params[0];
            // 参数值类型
            String[] pType = params[1];
            for (int i = 0; i < pValue.length; i++) {
                if (pType[i].equals(""String"")) {
                    query.setParameter(i, pValue[i]);
                } else if (pType[i].equals(""Long"")) {
                    query.setParameter(i, Long.parseLong(pValue[i]));
                } else if (pType[i].equals(""Integer"")) {
                    query.setParameter(i, Integer.parseInt(pValue[i]));
                } else if (pType[i].equals(""Double"")) {
                    query.setParameter(i, Double.parseDouble(pValue[i]));
                } else if (pType[i].equals(""Date"")) {
                    try {
                        query.setParameter(i, new SimpleDateFormat(""yyyy-MM-dd"").parse(pValue[i]));
                    } catch (HibernateException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    } catch (ParseException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
        }
        return query;
    }

    /**
     * 首页Tree数据
     */
    public String getArrayResults() {
        List rows = this.getRs();
        if (rows.size() == 0) {
            return """";
        }
        String jsonstr = """";
        for (Iterator<?> it = rows.iterator(); it.hasNext(); ) {
            Object[] obj = (Object[]) it.next();
            String constr = ""{"";
            for (int i = 0; i < obj.length; i++) {
                if (i == obj.length - 1) {
                    constr += '""' + colNames[i] + '""' + "":"" + '""' + obj[i] + '""';
                } else {
                    constr += '""' + colNames[i] + '""' + "":"" + '""' + obj[i] + '""' + "","";
                }
            }
            constr += ""}"";
            jsonstr += constr + "","";
        }
        jsonstr = ""["" + jsonstr.substring(0, jsonstr.lastIndexOf("","")) + ""]"";
        return jsonstr;
    }

    public void collectToMap(String flag) {
        ArrayList<Object> al = null;
        HashMap<String, Object> map = null;
        String[] colNameArray = this.getColNames();
        if (flag.equals(""combo"")) {
            colNameArray[0] = ""value"";
            colNameArray[1] = ""text"";
        }
        al = new ArrayList<Object>();
        List rs = this.getRs();
        if (rs.size() > 0) {
            al = new ArrayList<Object>();
            for (Iterator<?> it = rs.iterator(); it.hasNext(); ) {
                Object[] obj = null;
                if (colNameArray.length == 1) {
                    obj = new Object[] { it.next() };
                } else {
                    obj = (Object[]) it.next();
                }
                map = new HashMap<String, Object>();
                for (int i = 0; i < colNameArray.length; i++) {
                    String tag = colNameArray[i];
                    map.put(tag, obj[i]);
                }
                al.add(map);
            }
        }
        range = new ListRange();
        range.setData(al);
        range.setTotalSize(this.getTotalCount());
    }

    public void collectToMap() {
        this.collectToMap("""");
    }
}
","// Loader_1Test.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#getParams(Query, String[][])} method.
*/
class Loader_1Test {","// Loader_1Test.java
package com.hf.sfm.util;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Loader}.
* It contains ten unit test cases for the {@link Loader#getParams(Query, String[][])} method.
*/
class Loader_1Test {

		/**
		* Test case 1 for method getParams.
		*
		* @throws ParseException
		*/
		@Test
		public void testGetParams_1() throws ParseException {
				// Arrange
				Loader loader = new Loader();
				Query query = null;
				String[][] params = new String[][] { new String[] { ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19"", ""20"", ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", ""29"", ""30"", ""31"", ""32"", ""33"", ""34"", ""35"", ""36"", ""37"", ""38"", ""39"", ""40"", ""41"", ""42"", ""43"", ""44"", ""45"", ""46"", ""47"", ""48"", ""49"", ""50"", ""51"", ""52"", ""53"", ""54"", ""55"", ""56"", ""57"", ""58"", ""59"", ""60"", ""61"", ""62"", ""63"", ""64"", ""65"", ""66"", ""67"", ""68"", ""69"", ""70"", ""71"", ""72"", ""73"", ""74"", ""75"", ""76"", ""77"", ""78"", ""79"", ""80"", ""81"", ""82"", ""83"", ""84"", ""85"", ""86"", ""87"", ""88"", ""89"", ""90"", ""91"", ""92"", ""93"", ""94"", ""95"", ""96"", ""97"", ""98"", ""99"", ""100"", ""101"", ""102"", ""103"", ""104"", ""105"", ""106"", ""107"", ""108"", ""109"", ""110"", ""111"", ""112"", ""113"", ""114"", ""115"", ""116"", ""117"", ""118"", ""119"", ""120"", ""121"", ""122"", ""123"", ""124"", ""125"", ""126"", ""127"", ""128"", ""129"", ""130"", ""131"", ""132"", ""133"", ""134"", ""135"", ""136"", ""137"", ""138"", ""139"", ""140"", ""141"", ""142"", ""143"", ""144"", ""145"", ""146"", ""147"", ""148"", ""149"", ""150"", ""151"", ""152"", ""153"", ""154"", ""155"", ""156"", ""157"", ""158"", ""159"", ""160"", ""161"", ""162"", ""163"", ""164"", ""165"", ""166"", ""167"", ""168"", ""169"", ""170"", ""171"", ""172"", ""173"", ""174"", ""175"", ""176"", ""177"", ""178"", ""179"", ""180"", ""181"", ""182"", ""183"", ""184"", ""185"", ""186"", ""187"", ""188"", ""189"", ""190"", ""191"", ""192"", ""193"", ""194"", ""195"", ""196"", ""197"", ""198"", ""199"", ""200"", ""201"", ""202"", ""203"", ""204"", ""205"", ""206"", ""207"", ""208"", ""209"", ""210"", ""211"", ""212"", ""213"", ""214"", ""215"", ""216"", ""217"", ""218"", ""219"", ""220"", ""221"", ""222"", ""223"", ""224"", ""225"", ""226"", ""227"", ""228"", ""229"", ""230"", ""231"", ""232"", ""233"", ""234"", ""235"", ""236"", ""237"", ""238"", ""239"", ""240"", ""241"", ""242"", ""243"", ""244"", ""245"", ""246"", ""247"", ""248"", ""249"", ""250"", ""251"", ""252"", ""253"", ""254"", ""255"", ""256"", ""257"", ""258"", ""259"", ""260"", ""261"", ""262"", ""263"", ""264"", ""265"", ""266"", ""267"", ""268"", ""269"", ""270"", ""271"", ""272"", ""273"", ""274"", ""275"", ""276"", ""277"", ""278"", ""279"", ""280"", ""281"", ""282"", ""283"", ""284"", ""285"", ""286"", ""287"", ""288"", ""289"", ""290"", ""291"", ""292"", ""293"", ""294"", ""295"", ""296"", ""297"", ""298"", ""299"", ""300"", ""301"", ""302"", ""303"", ""304"", ""305"", ""306"", ""307"", ""308"", ""309"", ""310"", ""311"", ""312"", ""313"", ""314"", ""315"", ""316"", ""317"", ""318"", ""319"", ""320"", ""321"", ""322"", ""323"", ""324"", ""325"", ""326"", ""327"", ""328"", ""329"", ""330"", ""331"", ""332"", ""333"", ""334"", ""335"", ""336"", ""337"", ""338"", ""339"", ""340"", ""341"", ""342"", ""343"", ""344"", ""345"", ""346"", ""347"", ""348"", ""349"", ""350"", ""351"", ""352"", ""353"", ""354"", ""355"", ""356"", ""357"", ""358"", ""359"", ""360"", ""361"", ""362"", ""363"", ""364"", ""365"", ""366"", ""367"", ""368"", ""369"", ""370"", ""371"", ""372"", ""373"", ""374"", ""375"", ""376"", ""377"", ""378"", ""379"", ""380"", ""381"", ""382"", ""383"", ""384"", ""385"", ""386"", ""387"", ""388"", ""389"", ""390"", ""391"", ""392"", ""393"", ""394"", ""395"", ""396"", ""397"", ""398"", ""399"", ""400"", ""401"", ""402"", ""403"", ""404"", ""405"", ""406"", ""407"", ""408"", ""409"", ""410"", ""411"", ""412"", ""413"", ""414"", ""415"", ""416"", ""417"", ""418"", ""419"", ""420"", ""421"", ""422"", ""423"", ""424"", ""425"", ""426"", ""427"", ""428"", ""429"", ""430"", ""431"", ""432"", ""433"", ""434"", ""435"", ""436"", ""437"", ""438"", ""439"", ""440"", ""441"", ""442"", ""443"", ""444"", ""445"", ""446"", ""447"", ""448"", ""449"", ""450"", ""451"", ""452"", ""453"", ""454"", ""455"", ""456"", ""457"", ""458"", ""459"", ""460"", ""461"", ""462"", ""463"", ""464"", ""465"", ""466"", ""467"", ""468"", ""469"", ""470"", ""471"", ""472"", ""473"", ""474"", ""475"", ""476"", ""477"", ""478"", ""479"", ""480"", ""481"", ""482"", ""483"", ""484"", ""485"", ""486"", ""487"", ""488"", ""489"", ""490"", ""491"", ""492"", ""493"", ""494"", ""495"", ""496"", ""497"", ""498"", ""499"", ""500"", ""501"", ""502"", ""503"", ""504"", ""505"", ""506"", ""507"", ""508"", ""509"", ""510"", ""511"", ""512"", ""513"", ""514"", ""515"", ""516"", ""517"", ""518"", ""519"", ""520"", ""521"", ""522"", ""523"", ""524"", ""525"", ""526"", ""527"", ""528"", ""529"", ""530"", ""531"", ""532"", ""533"", ""534"", ""535"", ""536"", ""537"", ""538"", ""539"", ""540"", ""541"", ""542"", ""543"", ""544"", ""545"", ""546"", ""547"", ""548"", ""549"", ""550"", ""551"", ""552"", ""553"", ""554"", ""555"", ""556"", ""557"", ""558"", ""559"", ""560"", ""561"", ""562"", ""563"", ""564"", ""565"", ""566"", ""567"", ""568"", ""569"", ""570"", ""571"", ""572"", ""573"", ""574"", ""575"", ""576"", ""577"", ""578"", ""579"", ""580"", ""581"", ""582"", ""583"", ""584"", ""585"", ""586"", ""587"", ""588"", ""589"", ""590"", ""591"", ""592"", ""593"", ""594"", ""595"", ""596"", ""597"", ""598"", ""599"", ""600"", ""601"", ""602"", ""603"", ""604"", ""605"", ""606"", ""607"", ""608"", ""609"", ""610"", ""611"", ""612"", ""613"", ""614"", ""615"", ""616"", ""617"", ""618"", ""619"", ""620"", ""621"", ""622"", ""623"", ""624"", ""625"", ""626"", ""627"", ""628"", ""629"", ""630"", ""631"", ""632"", ""633"", ""634"", ""635"", ""636"", ""637"", ""638"", ""639"", ""640"", ""641"", ""642"", ""643"", ""644"", ""645"", ""646"", ""647"", ""648"", ""649"", ""650"", ""651"", ""652"", ""653"", ""654"", ""655"", ""656"", ""657"", ""658"", ""659"", ""660"", ""661"", ""662"", ""663"", ""664"", ""665"", ""666"", ""667"", ""668"", ""669"", ""670"", ""671"", ""672"", ""673"", ""674"", ""675"", ""676"", ""677"", ""678"", ""679"", ""680"", ""681"", ""682"", ""683"", ""684"", ""685"", ""686"", ""687"", ""688"", ""689"", ""690"", ""691"", ""692"", ""693"", ""694"", ""695"", ""696"", ""697"", ""698"", ""699"", ""700"", ""701"", ""702"", ""703"", ""704"", ""705"", ""706"", ""707"", ""708"", ""709"", ""710"", ""711"", ""712"", ""713"", ""714"", ""715"", ""716"", ""717"", ""718"", ""719"", ""720"", ""721"", ""722"", ""723"", ""724"", ""725"", ""726"", ""727"", ""728"", ""729"", ""730"", ""731"", ""732"", ""733"", ""734"", ""735"", ""736"", ""737"", ""738"", ""739"", ""740"", ""741"", ""742"", ""743"", ""744"", ""745"", ""746"", ""747"", ""748"", ""749"", ""750"", ""751"", ""752"", ""753"", ""754"", ""755"", ""756"", ""757"", ""758"", ""759"", ""760"", ""761"", ""762"", ""763"", ""764"", ""765"", ""766"", ""767"", ""768"", ""769"", ""770"", ""771"", ""772"", ""773"", ""774"", ""775"", ""776"", ""777"", ""778"", ""779"", ""780"", ""781"", ""782"", ""783"", ""784"", ""785"", ""786"", ""787"", ""788"", ""789"", ""790"", ""791"", ""792"", ""793"", ""794"", ""795"", ""796"", ""797"", ""798"", ""799"", ""800"", ""801"", ""802"", ""803"", ""804"", ""805"", ""806"", ""807"", ""808"", ""809"", ""810"", ""811"", ""812"", ""813"", ""814"", ""815"", ""816"", ""817"", ""818"", ""819"", ""820"", ""821"", ""822"", ""823"", ""824"", ""825"", ""826"", ""827"", ""828"", ""829"", ""830"", ""831"", ""832"", ""833"", ""834"", ""835"", ""836"", ""837"", ""838"", ""839"", ""840"", ""841"", ""842"", ""843"", ""844"", ""845"", ""846"", ""847"", ""848"", ""849"", ""850"", ""851"", ""852"", ""853"", ""854"", ""855"", ""856"", ""857"", ""858"", ""859"", ""860"", ""861"", ""862"", ""863"", ""864"", ""865"", ""866"", ""867"", ""868"", ""869"", ""870"", ""871"", ""872"", ""873"", ""874"", ""875"", ""876"", ""877"", ""878"", ""879"", ""880"", ""881"", ""882"", ""883"", ""884"", ""885"", ""886"", ""887"", ""888"", ""889"", ""890"", ""891"", ""892"", ""893"", ""894"", ""895"", ""896"", ""897"", ""898"", ""899"", ""900"", ""901"", ""902"", ""903"", ""904"", ""905"", ""906"", ""907"", ""908"", ""909"", ""910"", ""911"", ""912"", ""913"", ""914"", ""915"", ""916"", ""917"", ""918"", ""919"", ""920"", ""921"", ""922"", ""923"", ""924"", ""925"", ""926"", ""927"", ""928"", ""929"", ""930"", ""931"", ""932"", ""933"", ""934"", ""935"", ""936"", ""937"", ""938"", ""939"", ""940"", ""941"", ""942"", ""943"", ""944"", ""945"", ""946"", ""947"", ""948"", ""949"", ""950"", ""951"", ""952"", ""953"", ""954"", ""955"", ""956"", ""957"", ""958"", ""959"", ""960"", ""961"", ""962"", ""963"", ""964"", ""965"", ""966"", ""967"", ""968"", ""969"", ""970"", ""971"", ""972"", ""973"", ""974"", ""975"", ""976"", ""977"", ""978"", ""979"", ""980"", ""981"", ""982"", ""983"", ""984"", ""985"", ""986"", ""987"", ""988"", ""989"", ""990"", ""991"", ""992"", ""993"", ""994"", ""995"", ""996"", ""997"", ""998"", ""999"", ""1000"", ""1001"", ""1002"", ""1003"", ""1004"", ""1005"", ""1006"", ""1007"", ""1008"", ""1009"", ""1010"", ""1011"", ""1012"", ""1013"", ""1014"", ""1015"", ""1016"", ""1017"", ""1018"", ""1019"", ""1020"", ""1021"", ""1022"", ""1023"", ""1024"", ""1025"", ""1026"", ""1027"", ""1028"", ""1029"", ""1030"", ""1031"", ""1032"", ""1033"", ""1034"", ""1035"", ""1036"", ""1037"", ""1038"", ""1039"", ""1040"", ""1041"", ""1042"", ""1043"", ""1044"", ""1045"", ""1046"", ""1047"", ""1048"", ""1049"", ""1050"", ""1051"", ""1052"", ""1053"", ""1054"", ""1055"", ""1056"", ""1057"", ""1058"", ""1059"", ""1060"", ""1061"", ""1062"", ""1063"", ""1064"", ""1065"", ""1066"", ""1067"", ""1068"", ""1069"", ""1070"", ""1071"", ""1072"", ""1073"", ""1074"", ""1075"", ""1076"", ""1077"", ""1078"", ""1079"", ""1080"", ""1081"", ""1082"", ""1083"", ""1084"", ""1085"", ""1086"", ""1087"", ""1088"", ""1089"", ""1090"", ""1091"", ""1092"", ""1093"", ""1094"", ""1095"", ""1096"", ""1097"", ""1098"", ""1099"", ""1100"", ""1101"", ""1102"", ""1103"", ""1104"", ""1105"", ""1106"", ""1107"", ""1108"", ""1109"", ""1110"", ""1111"", ""1112"", ""1113"", ""1114"", ""1115"", ""1116"", ""1117"", ""1118"", ""1119"", ""1120"", ""1121"", ""1122"", ""1123"", ""1124"", ""1125"", ""1126"", ""1127"", ""1128"", ""1129"", ""1130"", ""1131"", ""1132"", ""1133"", ""1134"", ""1135"", ""1136"", ""1137"", ""1138"", ""1139"", ""1140"", ""1141"", ""1142"", ""1143"", ""1144"", ""1145"", ""1146"", ""1147"", ""1148"", ""1149"", ""1150"", ""1151"", ""1152"", ""1153"", ""1154"", ""1155"", ""1156"", ""1157"", ""1158"", ""1159"", ""1160"", ""1161"", ""1162"", ""1163"", ""1164"", ""1165"", ""1166"", ""1167"", ""1168"", ""1169"", ""1170"", ""1171"", ""1172"", ""1173"", ""1174"", ""1175"", ""1176"", ""1177"", ""1178"", ""1179"", ""1180"
