ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u9Zz0a1EwbkCMzllqqJoklpTSaq7,/EvoSuiteBenchmark/81_javathena/src/main/java/org/character/data/TXTCharacter.java,57.20601487159729,length,"// TXTCharacter.java
package org.character.data;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import org.character.data.config.CharConfig;
import org.javathena.core.data.Friend;
import org.javathena.core.data.Hotkey;
import org.javathena.core.data.IndexedFastMap;
import org.javathena.core.data.Item;
import org.javathena.core.data.PersistenteData;
import org.javathena.core.data.Point;
import org.javathena.core.data.ROCharacter;
import org.javathena.core.data.Skill;
import org.javathena.core.data.ROCharacter.JOB;
import org.javathena.core.utiles.Functions;

public class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {

    private final static String DEFAULT_ACCOUNT_FILE = ""save/athena.txt"";

    private final static int VERSION_LENGTH = 18;

    private final static String DEFAULT_FRIEND_FILE = ""save/friends.txt"";

    private final static String DEFAULT_HOTKEYS_FILE = ""save/hotkeys.txt"";

    private String fileDB = CharConfig.getCharConfig().getDbPath() != null ? CharConfig.getCharConfig().getDbPath() : DEFAULT_ACCOUNT_FILE;

    private String friendDB = DEFAULT_FRIEND_FILE;

    private String hotkeyDB = DEFAULT_HOTKEYS_FILE;

    @Override
    public void save(IndexedFastMap<Integer, ROCharacter> data) throws IOException {
        // TODO Auto-generated method stub
    }

    /**
     * Load character under the last format version only version 1500 (homun +
     * mapindex maps)
     *
     * @return indexedChar a fastmap containing loaded characters
     * @throws MalformedDataException
     */
    @Override
    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {
        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();
        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));
        String line = null;
        while ((line = in.readLine()) != null) {
            try {
                ROCharacter currChar = readCharactere(line);
                indexedChar.put(currChar.getChar_id(), currChar);
            } catch (MalformedDataException e) {
                Functions.showWarning(e.getMessage());
            }
        }
        in.close();
        readFriend(indexedChar);
        readHotkeys(indexedChar);
        return indexedChar;
    }

    private void readHotkeys(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(new File(hotkeyDB)));
        String line = null;
        String[] splitedHotkeys = null;
        while ((line = in.readLine()) != null) {
            if (!line.startsWith(""//"")) {
                for (int i = 0; i < splitedHotkeys.length && i < ROCharacter.MAX_HOTKEY; i++) {
                    splitedHotkeys = line.split("","");
                    indexedChar.getData().get(Integer.parseInt(splitedHotkeys[0])).addHotkey(new Hotkey(Integer.parseInt(splitedHotkeys[1]), Integer.parseInt(splitedHotkeys[2]), Integer.parseInt(splitedHotkeys[3])), i);
                }
            }
        }
    }

    private void readFriend(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(new File(friendDB)));
        String line = null;
        String[] splitedFriend = null;
        while ((line = in.readLine()) != null) {
            if (!line.startsWith(""//"")) {
                splitedFriend = line.split("","");
                for (int i = 0; i < splitedFriend.length && i < ROCharacter.MAX_FRIENDS; i++) {
                    indexedChar.getData().get(Integer.parseInt(splitedFriend[0])).addFriend(new Friend(Integer.parseInt(splitedFriend[1]), Integer.parseInt(splitedFriend[2]), splitedFriend[3]), i);
                }
            }
        }
        in.close();
    }

    private ROCharacter readCharactere(String line) throws MalformedDataException {
        String[] mainCharSL;
        ROCharacter currChar = new ROCharacter();
        if (!line.startsWith(""//"") && line.length() != 0) {
            if (line.contains(""//"")) {
                line = line.substring(0, line.indexOf(""//""));
            }
            ;
            mainCharSL = line.split(""\t"");
            if (mainCharSL.length == VERSION_LENGTH) {
                for (int i = 0; i < mainCharSL.length; i++) {
                    String[] tmpSplit = null;
                    Point tmpPoint = null;
                    currChar.setChar_id(Integer.parseInt(mainCharSL[0]));
                    tmpSplit = mainCharSL[1].split("","");
                    currChar.setAccount_id(Integer.parseInt(tmpSplit[0]));
                    currChar.setSlot(Integer.parseInt(tmpSplit[1]));
                    currChar.setName(mainCharSL[2]);
                    tmpSplit = mainCharSL[3].split("","");
                    currChar.setClass_(JOB.parseFromValue(Short.parseShort(tmpSplit[0])));
                    currChar.setBase_level(Integer.parseInt(tmpSplit[0]));
                    currChar.setJob_level(Integer.parseInt(tmpSplit[0]));
                    tmpSplit = mainCharSL[4].split("","");
                    currChar.setBase_exp(Integer.parseInt(tmpSplit[0]));
                    currChar.setJob_exp(Integer.parseInt(tmpSplit[1]));
                    currChar.setZeny(Integer.parseInt(tmpSplit[2]));
                    tmpSplit = mainCharSL[5].split("","");
                    currChar.setHp(Integer.parseInt(tmpSplit[0]));
                    currChar.setMax_hp(Integer.parseInt(tmpSplit[1]));
                    currChar.setSp(Integer.parseInt(tmpSplit[2]));
                    currChar.setMax_sp(Integer.parseInt(tmpSplit[3]));
                    tmpSplit = mainCharSL[6].split("","");
                    currChar.setStr(Short.parseShort(tmpSplit[0]));
                    currChar.setAgi(Short.parseShort(tmpSplit[1]));
                    currChar.setVit(Short.parseShort(tmpSplit[2]));
                    currChar.setInt(Short.parseShort(tmpSplit[3]));
                    currChar.setDex(Short.parseShort(tmpSplit[4]));
                    currChar.setLuk(Short.parseShort(tmpSplit[5]));
                    tmpSplit = mainCharSL[7].split("","");
                    currChar.setStatus_point(Integer.parseInt(tmpSplit[0]));
                    currChar.setSkill_point(Integer.parseInt(tmpSplit[1]));
                    tmpSplit = mainCharSL[8].split("","");
                    currChar.setOption(Integer.parseInt(tmpSplit[0]));
                    currChar.setKarma(Integer.parseInt(tmpSplit[1]));
                    currChar.setManner(Short.parseShort(tmpSplit[2]));
                    tmpSplit = mainCharSL[9].split("","");
                    currChar.setParty_id(Integer.parseInt(tmpSplit[0]));
                    currChar.setGuild_id(Integer.parseInt(tmpSplit[1]));
                    currChar.setPet_id(Integer.parseInt(tmpSplit[2]));
                    currChar.setHom_id(Integer.parseInt(tmpSplit[3]));
                    tmpSplit = mainCharSL[10].split("","");
                    currChar.setHair(Short.parseShort(tmpSplit[0]));
                    currChar.setHair_color(Short.parseShort(tmpSplit[1]));
                    currChar.setClothes_color(Short.parseShort(tmpSplit[2]));
                    tmpSplit = mainCharSL[11].split("","");
                    currChar.setWeapon(Short.parseShort(tmpSplit[0]));
                    currChar.setShield(Short.parseShort(tmpSplit[1]));
                    currChar.setHead_top(Short.parseShort(tmpSplit[2]));
                    currChar.setHead_mid(Short.parseShort(tmpSplit[3]));
                    currChar.setHead_bottom(Short.parseShort(tmpSplit[4]));
                    tmpSplit = mainCharSL[12].split("","");
                    tmpPoint = new Point(Integer.parseInt(tmpSplit[0]), Integer.parseInt(tmpSplit[1]), Integer.parseInt(tmpSplit[2]));
                    currChar.setLast_point(tmpPoint);
                    tmpSplit = mainCharSL[13].split("","");
                    tmpPoint = new Point(Integer.parseInt(tmpSplit[0]), Integer.parseInt(tmpSplit[1]), Integer.parseInt(tmpSplit[2]));
                    currChar.setSave_point(tmpPoint);
                    currChar.setPartner_id(Integer.parseInt(tmpSplit[3]));
                    currChar.setFather(Integer.parseInt(tmpSplit[4]));
                    currChar.setMother(Integer.parseInt(tmpSplit[5]));
                    currChar.setChild(Integer.parseInt(tmpSplit[6]));
                    tmpSplit = mainCharSL[14].split("" "");
                    if (!tmpSplit[0].equals("""")) {
                        String[] memoSplit = null;
                        for (int j = 0; j < tmpSplit.length; j++) {
                            memoSplit = tmpSplit[j].split("","");
                            currChar.addPoint(new Point(Integer.parseInt(memoSplit[0]), Integer.parseInt(memoSplit[1]), Integer.parseInt(memoSplit[2])));
                        }
                    }
                    tmpSplit = mainCharSL[15].split("" "");
                    if (!tmpSplit[0].equals("""")) {
                        String[] invSplit = null;
                        for (int j = 0; j < tmpSplit.length; j++) {
                            invSplit = tmpSplit[j].split("","");
                            Item nItem = new Item();
                            nItem.setId(Integer.parseInt(invSplit[0]));
                            nItem.setNameid(Short.parseShort(invSplit[1]));
                            nItem.setAmount(Short.parseShort(invSplit[2]));
                            nItem.setEquip(Short.parseShort(invSplit[3]));
                            nItem.setIdentify(Integer.parseInt(invSplit[4]));
                            nItem.setRefine(Integer.parseInt(invSplit[5]));
                            nItem.setAttribute(Integer.parseInt(invSplit[6]));
                            for (int k = 0; k < Item.MAX_SLOT + 7 && !invSplit[7 + k].equals(""0""); k++) {
                                nItem.setCard(k, Integer.parseInt(invSplit[7 + k]));
                            }
                            currChar.addInventoryItem(nItem);
                        }
                    }
                    tmpSplit = mainCharSL[16].split("" "");
                    if (!tmpSplit[0].equals("""")) {
                        String[] invSplit = null;
                        for (int j = 0; j < tmpSplit.length; j++) {
                            invSplit = tmpSplit[j].split("","");
                            Item nItem = new Item();
                            nItem.setId(Integer.parseInt(invSplit[0]));
                            nItem.setNameid(Short.parseShort(invSplit[1]));
                            nItem.setAmount(Short.parseShort(invSplit[2]));
                            nItem.setEquip(Short.parseShort(invSplit[3]));
                            nItem.setIdentify(Integer.parseInt(invSplit[4]));
                            nItem.setRefine(Integer.parseInt(invSplit[5]));
                            nItem.setAttribute(Integer.parseInt(invSplit[6]));
                            for (int k = 0; k < Item.MAX_SLOT + 7 && !invSplit[7 + k].equals(""0""); k++) {
                                nItem.setCard(k, Integer.parseInt(invSplit[7 + k]));
                            }
                            currChar.addCartItem(nItem);
                        }
                    }
                    tmpSplit = mainCharSL[17].split("" "");
                    if (!tmpSplit[0].equals("""")) {
                        String[] skillSplit = null;
                        for (int j = 0; j < tmpSplit.length; j++) {
                            skillSplit = tmpSplit[j].split("","");
                            currChar.addSkill(new Skill(Short.parseShort(skillSplit[0]), Short.parseShort(skillSplit[1])));
                        }
                    }
                    tmpSplit = mainCharSL[18].split("" "");
                    if (!tmpSplit[0].equals("""")) {
                        String[] regSplit = null;
                        for (int j = 0; j < tmpSplit.length; j++) {
                            regSplit = tmpSplit[j].split("","");
                            currChar.addGlobalReg(regSplit[0], regSplit[1]);
                        }
                    }
                }
            } else {
                Functions.showDebug(""Character info: %s\n"", line);
                throw new MalformedDataException(""Char-loading: Unrecognized character data version, info lost!\n"");
            }
        }
        return currChar;
    }
}

class MalformedDataException extends Exception {

    /**
     */
    private static final long serialVersionUID = 9211207786015208067L;

    public MalformedDataException(String message) {
        super(message);
    }
}
","// TXTCharacterTest.java
package org.character.data;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import org.character.data.config.CharConfig;
import org.javathena.core.data.Friend;
import org.javathena.core.data.Hotkey;
import org.javathena.core.data.IndexedFastMap;
import org.javathena.core.data.Item;
import org.javathena.core.data.PersistenteData;
import org.javathena.core.data.Point;
import org.javathena.core.data.ROCharacter;
import org.javathena.core.data.Skill;
import org.javathena.core.data.ROCharacter.JOB;
import org.javathena.core.utiles.Functions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TXTCharacter}.
* It contains ten unit test cases for the {@link TXTCharacter#load()} method.
*/
class TXTCharacterTest {","// TXTCharacterTest.java
package org.character.data;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import org.character.data.config.CharConfig;
import org.javathena.core.data.Friend;
import org.javathena.core.data.Hotkey;
import org.javathena.core.data.IndexedFastMap;
import org.javathena.core.data.Item;
import org.javathena.core.data.PersistenteData;
import org.javathena.core.data.Point;
import org.javathena.core.data.ROCharacter;
import org.javathena.core.data.Skill;
import org.javathena.core.data.ROCharacter.JOB;
import org.javathena.core.utiles.Functions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TXTCharacter}.
* It contains ten unit test cases for the {@link TXTCharacter#load()} method.
*/
class TXTCharacterTest {

		private final static String DEFAULT_ACCOUNT_FILE = ""save/athena.txt"";
		
		private final static int VERSION_LENGTH = 18;
		
		private final static String DEFAULT_FRIEND_FILE = ""save/friends.txt"";
		
		private final static String DEFAULT_HOTKEYS_FILE = ""save/hotkeys.txt"";
		
		private String fileDB = CharConfig.getCharConfig().getDbPath() != null ? CharConfig.getCharConfig().getDbPath() : DEFAULT_ACCOUNT_FILE;
		
		private String friendDB = DEFAULT_FRIEND_FILE;
		
		private String hotkeyDB = DEFAULT_HOTKEYS_FILE;
		
		@Test
		void testLoad() throws IOException {
				IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();
				BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));
				String line = null;
				while ((line = in.readLine()) != null) {
						try {
								ROCharacter currChar = readCharactere(line);
								indexedChar.put(currChar.getChar_id(), currChar);
						} catch (MalformedDataException e) {
								Functions.showWarning(e.getMessage());
						}
				}
				in.close();
				readFriend(indexedChar);
				readHotkeys(indexedChar);
				assertEquals(indexedChar.getData().size(), 1);
		}
		
		private void readHotkeys(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException {
				BufferedReader in = new BufferedReader(new FileReader(new File(hotkeyDB)));
				String line = null;
				String[] splitedHotkeys = null;
				while ((line = in.readLine()) != null) {
						if (!line.startsWith(""//"")) {
								for (int i = 0; i < splitedHotkeys.length && i < ROCharacter.MAX_HOTKEY; i++) {
										splitedHotkeys = line.split("","");
										indexedChar.getData().get(Integer.parseInt(splitedHotkeys[0])).addHotkey(new Hotkey(Integer.parseInt(splitedHotkeys[1]), Integer.parseInt(splitedHotkeys[2]), Integer.parseInt(splitedHotkeys[3])), i);
								}
						}
				}
		}
		
		private void readFriend(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException {
				BufferedReader in = new BufferedReader(new FileReader(new File(friendDB)));
				String line = null;
				String[] splitedFriend = null;
				while ((line = in.readLine()) != null) {
						if (!line.startsWith(""//"")) {
								splitedFriend = line.split("","");
								for (int i = 0; i < splitedFriend.length && i < ROCharacter.MAX_FRIENDS; i++) {
										indexedChar.getData().get(Integer.parseInt(splitedFriend[0])).addFriend(new Friend(Integer.parseInt(splitedFriend[1]), Integer.parseInt(splitedFriend[2]), splitedFriend[3]), i);
								}
						}
				}
				in.close();
		}
		
		private ROCharacter readCharactere(String line) throws MalformedDataException {
				String[] mainCharSL;
				ROCharacter currChar = new ROCharacter();
				if (!line.startsWith(""//"") && line.length() != 0) {
						if (line.contains(""//"")) {
								line = line.substring(0, line.indexOf(""//""));
						}
						;
						mainCharSL = line.split(""\t"");
						if (mainCharSL.length == VERSION_LENGTH) {
								for (int i = 0; i < mainCharSL.length; i++) {
										String[] tmpSplit = null;
										Point tmpPoint = null;
										currChar.setChar_id(Integer.parseInt(mainCharSL[0]));
										tmpSplit = mainCharSL[1].split("","");
										currChar.setAccount_id(Integer.parseInt(tmpSplit[0]));
										currChar.setSlot(Integer.parseInt(tmpSplit[1]));
										currChar.setName(mainCharSL[2]);
										tmpSplit = mainCharSL[3].split("","");
										currChar.setClass_(JOB.parseFromValue(Short.parseShort(tmpSplit[0])));
										currChar.setBase_level(Integer.parseInt(tmpSplit[0]));
										currChar.setJob_level(Integer.parseInt(tmpSplit[0]));
										tmpSplit = mainCharSL[4].split("","");
										currChar.setBase_exp(Integer.parseInt(tmpSplit[0]));
										currChar.setJob_exp(Integer.parseInt(tmpSplit[1]));
										currChar.setZeny(Integer.parseInt(tmpSplit[2]));
										tmpSplit = mainCharSL[5].split("","");
										currChar.setHp(Integer.parseInt(tmpSplit[0]));
										currChar.setMax_hp(Integer.parseInt(tmpSplit[1]));
										currChar.setSp(Integer.parseInt(tmpSplit[2]));
										currChar.setMax_sp(Integer.parseInt(tmpSplit[3]));
										tmpSplit = mainCharSL[6].split("","");
										currChar.setStr(Short.parseShort(tmpSplit[0]));
										currChar.setAgi(Short.parseShort(tmpSplit[1]));
										currChar.setVit(Short.parseShort(tmpSplit[2]));
										currChar.setInt(Short.parseShort(tmpSplit[3]));
										currChar.setDex(Short.parseShort(tmpSplit[4]));
										currChar.setLuk(Short.parseShort(tmpSplit[5]));
										tmpSplit = mainCharSL[7].split("","");
	"
cmpl-6u9b23kPrbBQCxxbfTdzdyxyTxLAE,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/core/utiles/Functions_25Test.java,55.3418972492218,length,"// Functions.java
/*
 * Fonctions.java
 *
 * Created on September 20, 2005, 3:56 PM
 *
 * Copyright (c) 2006, Francois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Francois Bradette
 */
package org.javathena.core.utiles;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.StringTokenizer;

/**
 * @author Francois
 */
public class Functions {

    // public static final int PASSWORD_ACCEPTER = 1;
    /**
     * Creates a new instance of Fonctions
     */
    private Functions() {
    }

    public static void copyfile(String srFile, String dtFile) {
        try {
            File f1 = new File(srFile);
            File f2 = new File(dtFile);
            InputStream in = new FileInputStream(f1);
            // For Overwrite the file.
            OutputStream out = new FileOutputStream(f2);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();
        } catch (FileNotFoundException ex) {
            System.out.println(ex.getMessage() + "" in the specified directory."");
            System.exit(0);
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    // Start DNS Blacklist check [Zido]
    public static int DNSBlacklistcheck(String ip) {
        String ipToCheck = ip + "".opm.blitzed.org"";
        try {
            if (new Socket(ipToCheck, 80).getInetAddress().getHostName() != null) {
                showInfo(MultilanguageManagement.getInfo_1(), ip);
                return 3;
            }
            ipToCheck = ip + "".sbl.deltaanime.net"";
            if (new Socket(ipToCheck, 80).getInetAddress().getHostName() != null) {
                showInfo(MultilanguageManagement.getInfo_1(), ip);
                return 3;
            }
            ipToCheck = ip + "".dnsbl.njabl.org"";
            if (new Socket(ipToCheck, 80).getInetAddress().getHostName() != null) {
                showInfo(MultilanguageManagement.getInfo_1(), ip);
                return 3;
            }
            ipToCheck = ip + "".sbl-xbl.spamhaus.org"";
            if (new Socket(ipToCheck, 80).getInetAddress().getHostName() != null) {
                showInfo(MultilanguageManagement.getInfo_1(), ip);
                return 3;
            }
        } catch (UnknownHostException ex) {
            return -1;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return -1;
    }

    public static String getMd5String() {
        int md5keylen = new java.security.SecureRandom().nextInt() % 4 + 12;
        String tmpMd5 = """";
        for (int i = 0; i < md5keylen; i++) {
            tmpMd5 += (char) new java.security.SecureRandom().nextInt() % 255 + 1;
        }
        return tmpMd5;
    }

    public static String getValueFromConfigString(String strConfig, String value) {
        value += "":"";
        if (strConfig.indexOf(value) != -1) {
            int start = strConfig.indexOf("":"", strConfig.indexOf(value)) + 1;
            int end = strConfig.indexOf(""\n"", start);
            return strConfig.substring(start, end).trim();
        }
        return null;
    }

    public static int charSexToInt(char s) {
        switch(s) {
            case 'S':
            case 's':
                return 2;
            case 'M':
            case 'm':
                return 1;
            case 'F':
            case 'f':
                return 0;
        }
        return -1;
    }

    public static void showWarning(String str) {
        System.out.print(Constants.CL_YELLOW + MultilanguageManagement.getWarning() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showWarning(String str, Object... param) {
        System.out.printf(Constants.CL_YELLOW + MultilanguageManagement.getWarning() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
    }

    public static void showError(String str) {
        System.out.print(Constants.CL_RED + MultilanguageManagement.getError() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showError(String str, Object... param) {
        System.out.printf(Constants.CL_RED + MultilanguageManagement.getError() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
    }

    public static void showNotice(String str) {
        System.out.print(MultilanguageManagement.getNotice() + "" "" + str + Constants.NEWLINE);
    }

    public static void showNotice(String str, Object... param) {
        System.out.printf(MultilanguageManagement.getNotice() + "" "" + str + Constants.NEWLINE, param);
    }

    public static void showInfo(String str) {
        System.out.printf(MultilanguageManagement.getInfo() + "" "" + str + Constants.NEWLINE);
    }

    public static void showInfo(String str, Object... param) {
        System.out.printf(MultilanguageManagement.getInfo() + "" "" + str + Constants.NEWLINE, param);
    }

    public static void showStatus(String str) {
        System.out.print(Constants.CL_GREEN + MultilanguageManagement.getStatus() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showStatus(String str, Object... param) {
        System.out.printf(Constants.CL_GREEN + MultilanguageManagement.getStatus() + "" "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
    }

    public static void showSQL(String str) {
        System.out.printf(Constants.CL_MAGENTA + ""[SQL]: "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showSQL(String str, Object... param) {
        System.out.printf(Constants.CL_MAGENTA + ""[SQL]: "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
    }

    public static void showDebug(String str) {
        System.out.printf(Constants.CL_CYAN + ""[Debug]: "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showDebug(String str, Object... param) {
        System.out.printf(Constants.CL_CYAN + ""[Debug]: "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
    }

    public static void showFatalError(String str) {
        System.out.printf(Constants.CL_CYAN + ""[Fatal Error]: "" + str + Constants.CL_RESET + Constants.NEWLINE);
    }

    public static void showFatalError(String str, Object... param) {
        System.out.printf(Constants.CL_CYAN + ""[Fatal Error]: "" + str + Constants.CL_RESET + Constants.NEWLINE, param);
        System.exit(0);
    }

    public static InetAddress stringToInet(String str) throws UnknownHostException {
        return InetAddress.getLocalHost();
    }

    public static void intToByteTab(int toParse, int length, byte[] byteTab) {
        intToByteTab(toParse, 0, length, byteTab);
    }

    public static void intToByteTab(int aInt, int startInd, int endInd, byte[] aByteTab) {
        for (int i = startInd; i < endInd && aInt != 0; i++) {
            aByteTab[i] = (byte) (aInt % 256);
            aInt /= 256;
        }
    }

    public static void intToIntTab(int aInt, int startInd, int endInd, int[] aIntTab) {
        for (int i = startInd; i < endInd && aInt != 0; i++) {
            aIntTab[i] = (aInt % 256);
            aInt /= 256;
        }
    }

    public static double byteTabToDouble(int start, int end, byte[] bytesTab) {
        double reponse = 0;
        for (int i = start, j = 1; i < end; i++, j *= 0x100) {
            reponse += unsignedByteToInt(bytesTab[i]) * j;
        }
        return reponse;
    }

    public static int byteTabToInt(int start, int end, byte[] bytesTab) {
        int reponse = 0;
        for (int i = start, j = 1; i < end; i++, j *= 0x100) {
            reponse += unsignedByteToInt(bytesTab[i]) * j;
        }
        return reponse;
    }

    public static String readConf(File ficher) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader(ficher));
        String contenu = """";
        String lu = null;
        lu = in.readLine();
        while (lu != null) {
            if (lu.indexOf(""//"") != -1)
                lu = lu.substring(0, lu.indexOf(""//""));
            contenu += lu + ""\n"";
            lu = in.readLine();
        }
        in.close();
        return contenu;
    }

    public static String calendarToString(Calendar tv) {
        if (tv == null)
            return ""0"";
        NumberFormat nf = NumberFormat.getInstance();
        nf.setMinimumIntegerDigits(2);
        nf.setMaximumIntegerDigits(2);
        return tv.get(Calendar.YEAR) + ""-"" + nf.format(tv.get(Calendar.MONTH)) + ""-"" + nf.format(tv.get(Calendar.DAY_OF_MONTH)) + "" "" + nf.format(tv.get(Calendar.HOUR_OF_DAY)) + "":"" + nf.format(tv.get(Calendar.MINUTE)) + "":"" + nf.format(tv.get(Calendar.SECOND)) + "":"" + nf.format(tv.get(Calendar.MILLISECOND));
    }

    /*
	 * public static String bytesToString() { return """"; }
	 */
    public static void stringToByteTable(String str, byte[] bTable, int start, int end) {
        for (int i = start, j = 0; i < end && j < str.length(); i++, j++) bTable[i] = (byte) str.charAt(j);
    }

    public static int unsignedByteToInt(byte bti) {
        if (bti < 0)
            return (bti + 256);
        return bti;
    }

    public static String unsignedBytesToString(byte[] bTable, int startIndex, int endIndex) {
        String result = """";
        for (int i = startIndex; i <= endIndex && bTable[i] != 0; i++) {
            result += (char) parseByteToInt(bTable[i]);
        }
        return result;
    }

    public static int parseByteToInt(byte value) {
        int val = value;
        if (value < 0) {
            val = (value + 256);
        }
        return val;
    }

    public static byte parseIntToByte(int value) throws Exception {
        byte val = 0;
        if (value > 127)
            value = (value - 256);
        if (value > Byte.MIN_VALUE && value < Byte.MAX_VALUE)
            val = (byte) value;
        else
            throw new Exception(""Value doit etre inferieur a 256 et superieur a -128"");
        return val;
    }

    public static void doubleToByteTab(long toParse, int start, int end, byte[] bytesTab) {
        for (int i = start, j = 0; i < end; i++, j++) {
            bytesTab[i] = ((byte) (toParse % 0x100));
            toParse -= (toParse % 0x100);
            toParse /= 0x100;
        }
    }

    public static void longToIntTab(long toParse, int start, int end, int[] bytesTab) {
        for (int i = start, j = 0; i < end; i++, j++) {
            bytesTab[i] = ((int) (toParse % 0x100));
            toParse -= (toParse % 0x100);
            toParse /= 0x100;
        }
    }

    public static boolean e_mail_check(String email) {
        if (email.length() < 3 || email.length() > 39)
            return false;
        if (email.indexOf(""@"") == -1 || email.indexOf(""."") == -1)
            return false;
        if (email.indexOf(""@."") != -1 || email.indexOf("".."") != -1 || email.indexOf(""@"") == 0 || email.indexOf("" "") != -1 || email.indexOf("";"") != -1)
            return false;
        // all correct
        return true;
    }

    public static void showMessage(String string) {
        System.out.print(string);
    }

    public static void showMessage(String string, Object... param) {
        System.out.printf(string, param);
    }

    public static String encryptePassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(Constants.ALGORITHM);
        switch(passwdenc) {
            // case 0:
            case 1:
                md.update((md5key + encryptedPassword).getBytes(""8859_1""));
                break;
            case 2:
                md.update((encryptedPassword + md5key).getBytes(""8859_1""));
                break;
            default:
                return null;
        }
        return new String(md.digest());
    }

    public static boolean checkEncryptedPassword(String md5key, String passwordAccount, String encryptedPassword, int passwdenc) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(Constants.ALGORITHM);
        switch(passwdenc) {
            // case 0:
            case 1:
                md.update((md5key + encryptedPassword).getBytes(""8859_1""));
                return md.digest().equals(passwordAccount.getBytes(""8859_1""));
            case 2:
                md.update((encryptedPassword + md5key).getBytes(""8859_1""));
                return md.digest().equals(passwordAccount.getBytes(""8859_1""));
            default:
                return false;
        }
    }

    public static byte[] ipStringToByteTab(String ipStr) {
        StringTokenizer ipStrT = new StringTokenizer(ipStr, ""."");
        byte[] ip = new byte[4];
        for (int i = 0; i < ip.length; i++) {
            ip[i] = Byte.parseByte(ipStrT.nextElement().toString());
        }
        return ip;
    }

    public static byte[] ipStringToByteTab(String ipStr, byte[] gTab, int start) {
        StringTokenizer ipStrT = new StringTokenizer(ipStr, ""."");
        for (int i = start; i < (start + 4); i++) {
            gTab[i] = Byte.parseByte(ipStrT.nextElement().toString());
        }
        return gTab;
    }

    public static byte[] subByteTab(byte[] tab, int start, int end) {
        byte[] tabTo = new byte[end - start];
        for (int i = start; i < end; i++) {
            tabTo[i] = tab[i];
        }
        return tabTo;
    }

    public static PrintWriter open_log(String filePath) {
        PrintWriter out = null;
        try {
            File log_fp = new File(filePath);
            if (!log_fp.exists()) {
                if (!log_fp.getParentFile().exists()) {
                    log_fp.getParentFile().mkdir();
                }
                log_fp.createNewFile();
            }
            // autoflush append
            out = new PrintWriter(new FileWriter(log_fp, true), true);
            out.println();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return out;
    }

    public static String byteTabToString(int start, int end, byte[] buf) {
        return byteTabToString(start, end, buf, false);
    }

    public static String byteTabToString(int start, int end, byte[] buf, boolean stopToZero) {
        String str = """";
        for (int i = start; i < end && (buf[i] != 0 || !stopToZero); i++) {
            if (buf[i] != 0)
                str += (char) buf[i];
        }
        return str;
    }

    public static short byteTabToShort(int start, int end, byte[] tab) {
        short reponse = 0;
        for (int i = start, j = 1; i < end; i++, j *= 0x100) {
            reponse += unsignedByteToInt(tab[i]) * j;
        }
        return reponse;
    }

    public static Calendar stringToCalendar(String timestamp) {
        Calendar resultDate = Calendar.getInstance();
        String[] dateTime = timestamp.split("" "");
        String[] date = dateTime[0].split(""-"");
        String[] time = dateTime[1].split("":"");
        resultDate.set(Integer.parseInt(date[0]), Integer.parseInt(date[1]), Integer.parseInt(date[2]), Integer.parseInt(time[0]), Integer.parseInt(time[1]), Integer.parseInt(time[2]));
        return resultDate;
    }

    public static void byteTableToByteTab(byte[] param, int start, int end, byte[] answer) {
        for (int j = 0, i = start; i < end; i++, j++) {
            answer[i] = param[j];
        }
    }

    public static char byteSexToChar(byte sex) {
        return (sex == 0 ? 'F' : (sex == 1 ? 'M' : 'S'));
    }

    /**
     * -------------------------------------------------
     * // Return numerical value of a switch configuration
     * // on/off, english, fran?ais, deutsch, espa?ol
     * //-----------------------------------------------
     */
    public static int config_switch(String str) {
        if (str.equals(""on"") || str.equals(""yes"") || str.equals(""oui"") || str.equals(""ja"") || str.equals(""si"") || str.equals(""1""))
            return 1;
        if (str.equals(""off"") || str.equals(""no"") || str.equals(""non"") || str.equals(""nein"") || str.equals(""0""))
            return 0;
        return -1;
    }
}
","// Functions_25Test.java
package org.javathena.core.utiles;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#config_switch(String)} method.
*/
class Functions_25Test {","// Functions_25Test.java
package org.javathena.core.utiles;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#config_switch(String)} method.
*/
class Functions_25Test {

		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""on"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_1() {
				int result = Functions.config_switch(""on"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""yes"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_2() {
				int result = Functions.config_switch(""yes"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""oui"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_3() {
				int result = Functions.config_switch(""oui"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""ja"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_4() {
				int result = Functions.config_switch(""ja"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""si"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_5() {
				int result = Functions.config_switch(""si"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""1"".
		* Expected result: 1.
		*/
		@Test
		void testConfig_switch_6() {
				int result = Functions.config_switch(""1"");
				assertEquals(1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""off"".
		* Expected result: 0.
		*/
		@Test
		void testConfig_switch_7() {
				int result = Functions.config_switch(""off"");
				assertEquals(0, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""no"".
		* Expected result: 0.
		*/
		@Test
		void testConfig_switch_8() {
				int result = Functions.config_switch(""no"");
				assertEquals(0, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""non"".
		* Expected result: 0.
		*/
		@Test
		void testConfig_switch_9() {
				int result = Functions.config_switch(""non"");
				assertEquals(0, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""nein"".
		* Expected result: 0.
		*/
		@Test
		void testConfig_switch_10() {
				int result = Functions.config_switch(""nein"");
				assertEquals(0, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""0"".
		* Expected result: 0.
		*/
		@Test
		void testConfig_switch_11() {
				int result = Functions.config_switch(""0"");
				assertEquals(0, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: """".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_12() {
				int result = Functions.config_switch("""");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "" "".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_13() {
				int result = Functions.config_switch("" "");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_14() {
				int result = Functions.config_switch("";"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: ""on;"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_15() {
				int result = Functions.config_switch(""on;"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";on"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_16() {
				int result = Functions.config_switch("";on"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";on;"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_17() {
				int result = Functions.config_switch("";on;"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";on;"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_18() {
				int result = Functions.config_switch("";on;"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";on;"".
		* Expected result: -1.
		*/
		@Test
		void testConfig_switch_19() {
				int result = Functions.config_switch("";on;"");
				assertEquals(-1, result);
		}
		
		/**
		* Test case for {@link Functions#config_switch(String)} method.
		* Test data: "";on;"".
		* Expected result: -1.
		*/
		@Test"
a062ab0c-7b8a-4efa-b035-1af591342cc6,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_10Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15058 tokens (13058 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_10Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#parse_console(String)} method.
*/
class Login_10Test {","// Login_10Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#parse_console(String)} method.
*/
class Login_10Test {
"
195e83be-e697-4264-a0e8-bde34c8493e8,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_11Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15062 tokens (13062 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_11Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#yesNoOnOffToBoolean(String)} method.
*/
class Login_11Test {","// Login_11Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#yesNoOnOffToBoolean(String)} method.
*/
class Login_11Test {
"
b7dbaec2-beec-417d-8887-682e7a7c245a,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15062 tokens (13062 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_1Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getMd5Data(Socket_data)} method.
*/
class Login_1Test {","// Login_1Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getMd5Data(Socket_data)} method.
*/
class Login_1Test {
"
b5e491cc-bea5-453e-bf0a-389155011e65,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15059 tokens (13059 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_2Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getPASSWORDENC()} method.
*/
class Login_2Test {","// Login_2Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#getPASSWORDENC()} method.
*/
class Login_2Test {
"
8bd03654-acb3-4cc6-82ed-df68aa616a7f,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_4Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15062 tokens (13062 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_4Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#mmo_auth_initTXT()} method.
*/
class Login_4Test {","// Login_4Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#mmo_auth_initTXT()} method.
*/
class Login_4Test {
"
bb90844c-ac94-4173-a6f3-3cdc0af822f1,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_5Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15059 tokens (13059 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_5Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_auth_sync()} method.
*/
class Login_5Test {","// Login_5Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_auth_sync()} method.
*/
class Login_5Test {
"
c0bf75ae-89d9-434a-80f8-c4cc069eb4e6,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_6Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15060 tokens (13060 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_6Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_ip(InetAddress)} method.
*/
class Login_6Test {","// Login_6Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_ip(InetAddress)} method.
*/
class Login_6Test {
"
5970f29e-53de-48ed-bbbb-5f2b893bb69a,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_7Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15061 tokens (13061 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_7Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_ipmask(int, String)} method.
*/
class Login_7Test {","// Login_7Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#check_ipmask(int, String)} method.
*/
class Login_7Test {
"
572c7ab8-8aab-47e1-8914-f7d40f46a133,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/Login_9Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15064 tokens (13064 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// Login.java
/*
 * CharacterManagement.java
 *
 * Created on 27 novembre 2006, 12:23
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Francois
 */
public class Login {

    class End extends Thread {

        public End() {
        }

        // traitement qui sera effectue suite d'une interruption du programme
        public void run() {
            do_final();
        }
    }

    class Timer_interval_check_auth_sync extends TimerTask {

        public Timer_interval_check_auth_sync() {
        }

        public void run() {
            check_auth_sync();
        }
    }

    /*
	 * enum ACF { DEF, ALLOW, DENY } //*auth_dat = NULL;
	 */
    public static final int MAX_SERVERS = 30;

    public static final String LAN_CONF_NAME = ""conf/subnet_athena.conf"";

    // public static final int PASSWORDENC = 3;
    public static final int START_ACCOUNT_NUM = 2000000;

    public static final int END_ACCOUNT_NUM = 100000000;

    public static final int AUTH_BEFORE_SAVE_FILE = 10;

    public static final int AUTH_SAVE_FILE_DIVIDER = 50;

    // System.getProperty(""PASSWORDENC"")
    public static final int DEFAULT_PASSWORDENC = 2;

    // != null;
    // System.getProperty(""PASSWORDENC"")
    private static int PASSWORDENC = DEFAULT_PASSWORDENC;

    // != null;
    private static File log_fp;

    protected static PrintWriter loginLogOut;

    protected static int auth_num = 0;

    // according to the save method
    private static IDBManagementLogin dbManagemtType;

    private Thread connectionListenerThread;

    private ConnectionListener connectionListener;

    public static IDBManagementLogin getDbManagemtType() {
        return dbManagemtType;
    }

    /**
     * @param session
     */
    public static void codingKey(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""'ladmin': Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     */
    public static void codingKeyAdministration(Socket_data session) {
        session.func_send(getMd5Data(session));
        dbManagemtType.login_log(session.getIpStr(), """", ""0"", String.format(""Sending request of the coding key (ip: %s)"", session.getIpStr()));
    }

    /**
     * @param session
     * @return byte[] Md5Data
     */
    public static byte[] getMd5Data(Socket_data session) {
        if (session.getMd5key() != null) {
            Functions.showWarning(""login: abnormal request of MD5 key (already opened session)."");
            session.setEof(1);
        }
        String tmpMd5 = Functions.getMd5String();
        session.setMd5key(tmpMd5);
        byte[] data = new byte[tmpMd5.length() + 4];
        Functions.intToByteTab(0x01dc, 0, 2, data);
        Functions.intToByteTab(data.length, 2, 4, data);
        Functions.stringToByteTable(tmpMd5, data, 4, data.length);
        return data;
    }

    /**
     * @return
     */
    /**
     * @return
     */
    public static int getPASSWORDENC() {
        return PASSWORDENC;
    }

    /**
     * @param message
     */
    /**
     * @param message
     */
    public static void login_log(String message) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.println(Functions.calendarToString(Calendar.getInstance()) + "": "" + message);
        }
    }

    /**
     * @param format
     * @param args
     */
    /**
     * @param format
     * @param args
     */
    private static void login_log(String format, Object... args) {
        if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
            loginLogOut.printf(Functions.calendarToString(Calendar.getInstance()) + "": "" + format, args);
            loginLogOut.println();
        }
    }

    /**
     * @param session
     */
    /**
     * @param session
     */
    public static void logUnknownPackets(Socket_data session) {
    }

    public static int mmo_auth_initXML() {
        File gmacc = new File(""save/account.xml"");
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            UserManagement.setAuth_dats((FastMap<Integer, Auth_data>) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    // public void (Socket_data session){}
    // database version reading (v2)
    // only
    /**
     * @return
     */
    public static int mmo_auth_initTXT() {
        File fp;
        int account_id;
        int server_count = 0;
        fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!fp.exists()) {
            Functions.showError(MultilanguageManagement.getError_1(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        }
        try {
            BufferedReader in = new BufferedReader(new FileReader(fp));
            String ligne = null;
            ligne = in.readLine();
            while (ligne != null) {
                Auth_data new_account = new Auth_data();
                if (ligne.indexOf(""//"") != -1) {
                    ligne = ligne.substring(0, ligne.indexOf(""//""));
                }
                String[] splitedLine = ligne.split(""\t"");
                if (splitedLine.length > 1) {
                    account_id = Integer.parseInt(splitedLine[0]);
                    // new acount
                    if (splitedLine.length == 2 && splitedLine[1].equals(""%newid%"")) {
                        if (account_id > UserManagement.getAccountIdCount())
                            UserManagement.setAccountIdCount(account_id);
                    }
                    if (splitedLine.length >= 12) {
                        new_account.setAccount_id(Integer.parseInt(splitedLine[0]));
                        new_account.setUserid(splitedLine[1].trim());
                        new_account.setPass(splitedLine[2].trim());
                        new_account.setSex(splitedLine[3].trim().charAt(0));
                        if (splitedLine[3].trim().charAt(0) == 'S') {
                            server_count++;
                        }
                        new_account.setEmail(splitedLine[4].trim());
                        new_account.setLevel(Integer.parseInt(splitedLine[5].trim()));
                        new_account.setState(Integer.parseInt(splitedLine[6].trim()));
                        if (splitedLine[7].trim().length() > 1) {
                            new_account.setBan_until_time(Long.parseLong(splitedLine[7].trim()));
                        }
                        if (splitedLine[8].trim().length() > 1) {
                            new_account.setConnect_until_time(Long.parseLong(splitedLine[8].trim()));
                        }
                        new_account.setLogincount(Integer.parseInt(splitedLine[9].trim()));
                        if (splitedLine[10].trim().length() > 1 && !splitedLine[10].trim().equals(""0000-00-00 00:00:00"")) {
                            new_account.setLastlogin(Functions.stringToCalendar(splitedLine[10].trim()));
                        }
                        new_account.setLast_ip(splitedLine[11].trim());
                        UserManagement.addUser(new_account);
                    }
                }
                ligne = in.readLine();
            }
            switch(UserManagement.getNBUser()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_2(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_3(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
                    dbManagemtType.login_log("""", """", """", String.format(MultilanguageManagement.getNotice_4(), UserManagement.getNBUser(), ConfigurationManagement.getLoginAthenaConf().getAccount_filename()));
            }
            // this.getGm_account_db ()
            switch(UserManagement.getNBGM()) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_5());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_5() + ConfigurationManagement.getLoginAthenaConf().getAccount_filename() + "".""));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_6());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_6()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_7(), UserManagement.getNBGM()));
            }
            switch(server_count) {
                case 0:
                    Functions.showNotice(MultilanguageManagement.getNotice_8());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_8()));
                    break;
                case 1:
                    Functions.showNotice(MultilanguageManagement.getNotice_9());
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_9()));
                    break;
                default:
                    Functions.showNotice(MultilanguageManagement.getNotice_10(), server_count);
                    dbManagemtType.login_log("""", """", ""0"", String.format(MultilanguageManagement.getNotice_10(), server_count));
            }
            in.close();
        } catch (IOException ex) {
            ex.printStackTrace();
            Functions.showError(ex.getMessage());
        }
        return 0;
    }

    /**
     * ------------------------------------------ // Writing of the accounts
     * database file // (accounts are sorted by id before save)
     * //------------------------------------------
     */
    public static void mmo_auth_syncTXT() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAcc = new PrintWriter(new FileWriter(account_fp));
            outAcc.println(""// Accounts file: here are saved all information about the accounts.\n"" + ""// Structure: account ID, username, password, sex, email, level, state, unban time, expiration time, # of logins, last login time, last (accepted) login ip, repeated(register key, register value)\n"" + ""// where:\n"" + ""//   sex             : M or F for normal accounts, S for server accounts\n"" + ""//   level           : this account's gm level\n"" + ""//   state           : 0: account is ok, 1 to 256: error code of packet 0x006a + 1\n"" + ""//   unban time      : 0: no ban, <other value>: banned until the date (unix timestamp)\n"" + ""//   expiration time : 0: unlimited account, <other value>: account expires on the date (unix timestamp)"");
            outAcc.flush();
            for (int i = 0; i < UserManagement.getNBUser(); i++) {
                if ((Integer) col.get(i) >= 0)
                    outAcc.println(UserManagement.getUserTxt((Integer) col.get(i)));
                outAcc.flush();
            }
            outAcc.println(UserManagement.getAccountIdCount() + ""\t%newid%"");
            ConfigurationManagement.setAuth_before_save_file(UserManagement.getNBUser() / AUTH_SAVE_FILE_DIVIDER);
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAcc.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void mmo_auth_syncXML() {
        File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        XStream xstream = new XStream(new DomDriver());
        FastTable col = UserManagement.getAccountIds();
        col.sort();
        try {
            PrintWriter outAccXML = new PrintWriter(new FileWriter(""save/account.xml""));
            outAccXML.println(xstream.toXML(UserManagement.getAuth_dats()));
            if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE)
                ConfigurationManagement.setAuth_before_save_file(Login.AUTH_BEFORE_SAVE_FILE);
            outAccXML.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param aPASSWORDENC
     */
    public static void setPASSWORDENC(int aPASSWORDENC) {
        PASSWORDENC = aPASSWORDENC;
    }

    /**
     * @param donnes
     */
    public static void showTab(byte[] donnes) {
        for (int i = 0; i < donnes.length; i++) {
            System.out.println(donnes[i] + "" "" + (char) donnes[i]);
        }
        System.out.println();
    }

    /**
     * @param session
     */
    public static void version(Socket_data session) {
        String ip = session.getClient_addr().getInetAddress().getHostAddress();
        dbManagemtType.login_log(ip, session.getName(), """", String.format(""Sending of the server version (ip: %s)"", ip));
        byte[] reponse = new byte[10];
        reponse[0] = 0x31;
        reponse[1] = 0x75;
        reponse[2] = Version.ATHENA_MAJOR_VERSION;
        reponse[3] = Version.ATHENA_MINOR_VERSION;
        reponse[4] = Version.ATHENA_REVISION;
        reponse[5] = Version.ATHENA_RELEASE_FLAG;
        reponse[6] = Version.ATHENA_OFFICIAL_FLAG;
        reponse[7] = Version.ATHENA_SERVER_LOGIN;
        Functions.intToByteTab(Version.ATHENA_MOD_VERSION, 8, 10, reponse);
        session.func_send(reponse);
    }

    /**
     */
    protected int auth_max = 0;

    /**
     */
    protected int[] server_fd;

    /**
     */
    private final ExecutorService pool;

    /**
     * Creates a new instance of Login int server_fd
     */
    /**
     */
    public Login() {
        Runtime.getRuntime().addShutdownHook(new End());
        String PASSWORDENCtmp = System.getProperty(""PASSWORDENC"");
        if (PASSWORDENCtmp != null && !PASSWORDENCtmp.equals("""")) {
            PASSWORDENC = Integer.parseInt(PASSWORDENCtmp);
        }
        ConfigurationManagement.setGMMax(4000);
        setServer_fd(new int[MAX_SERVERS]);
        UserManagement.setAccountIdCount(START_ACCOUNT_NUM);
        ConfigurationManagement.getLoginAthenaConf().setNew_account_flag(false);
        ConfigurationManagement.getLoginAthenaConf().setBind_ip_str(""127.0.0.1"");
        ConfigurationManagement.setLan_char_ip("""");
        ConfigurationManagement.setSubneti(new int[4]);
        ConfigurationManagement.setSubnetmaski(new int[4]);
        ConfigurationManagement.getLoginAthenaConf().setAccount_filename(""save/account.txt"");
        ConfigurationManagement.getLoginAthenaConf().setLogin_log_filename(""log/login.log"");
        ConfigurationManagement.getLoginAthenaConf().setLog_login(true);
        ConfigurationManagement.setNew_reg_tick(0);
        ConfigurationManagement.getLoginAthenaConf().setAllowed_regs(1);
        ConfigurationManagement.getLoginAthenaConf().setTime_allowed(10);
        ConfigurationManagement.setAccess_order(ACO.DENY_ALLOW);
        ConfigurationManagement.setAccess_allownum(0);
        ConfigurationManagement.setAccess_denynum(0);
        ConfigurationManagement.setAccess_allow(null);
        ConfigurationManagement.setAccess_deny(null);
        ConfigurationManagement.getLoginAthenaConf().setMin_level_to_connect(0);
        ConfigurationManagement.setStart_limited_time(-1);
        ConfigurationManagement.getLoginAthenaConf().setCheck_client_version(false);
        ConfigurationManagement.getLoginAthenaConf().setClient_version_to_connect(20);
        pool = Executors.newFixedThreadPool(MAX_SERVERS);
        // ResourceBundle lang =
        // java.util.ResourceBundle.getBundle(""javathena/lang/"" +
        // Fonctions.LANG);
    }

    /**
     * ----------------------------------------------------- // Check if we must
     * save accounts file or not // every minute, we check if we must save
     * because we // have do some authentifications without arrive to // the
     * minimum of authentifications for the save. // Note: all other
     * modification of accounts (deletion, // change of some informations
     * excepted lastip/ // lastlogintime, creation) are always save //
     * immediatly and set the minimum of // authentifications to its
     * initialization value.
     * //-----------------------------------------------------
     */
    /**
     * @return
     */
    public int check_auth_sync() {
        // we only save if necessary:
        // we have do some authentifications without do saving
        if (ConfigurationManagement.getAuth_before_save_file() < Login.AUTH_BEFORE_SAVE_FILE || ConfigurationManagement.getAuth_before_save_file() < (int) (UserManagement.getNBUser() / Login.AUTH_SAVE_FILE_DIVIDER)) {
            dbManagemtType.mmo_auth_sync();
        }
        return 0;
    }

    /*
	 * @param ip An InetAddress to check
	 * 
	 * @throws NullPointerException If the <tt>ip</tt> is <tt>null</tt>
	 */
    /**
     * @param ip
     * @return
     */
    public boolean check_ip(InetAddress ip) {
        try {
            return ip.isReachable(180);
        } catch (IOException ex) {
            Functions.showError(ex.getMessage());
            return false;
        }
    }

    // Not implemented yet
    /**
     * @param ip
     * @param str
     * @return
     */
    public int check_ipmask(int ip, String str) {
        return 0;
    }

    /**
     */
    public void do_final() {
        int i;
        if (dbManagemtType == null) {
            return;
        }
        dbManagemtType.mmo_auth_sync();
        Functions.showInfo(MultilanguageManagement.getNotice_13());
        for (i = 0; i < UserManagement.getNBSession(); i++) UserManagement.getSessionAt(i).setEof(-1);
        dbManagemtType.login_log("""", """", ""0"", ""----End of login-server (normal end with closing of all files)."");
        if (loginLogOut != null) {
            loginLogOut.flush();
            loginLogOut.close();
        }
        connectionListener.close();
        connectionListenerThread.interrupt();
        Functions.showStatus(""Finished."");
    }

    public void do_initTXT() {
        dbManagemtType = new TXTDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        // dbManagemtType.readGMAccount();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        dbManagemtType.mmo_auth_init();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public static void do_initSQL() {
        dbManagemtType = new MySQLDBManagement();
        dbManagemtType.login_config_read((System.getenv(""LOGIN_CONF_NAME"") != null && !System.getenv(""LOGIN_CONF_NAME"").equals("""")) ? System.getenv(""LOGIN_CONF_NAME"") : Constants.DEFAULT_LOGIN_CONF_NAME);
        Functions.showInfo(""Initializing md5key..."");
        MySQLConfig.setMd5key(Functions.getMd5String());
        Functions.showInfo(""md5key setup complete"");
        try {
            MySQLConfig.sql_config_read(MySQLConfig.SQL_CONF_NAME);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        // dbManagemtType.readGMAccount();
        // ban deleter timer - 1 minute term
        /*
		 * Functions.showStatus(""add interval tic (ip_ban_check)....\n"");
		 * add_timer_func_list(ip_ban_check,""ip_ban_check"");
		 * add_timer_interval(gettick()+10, ip_ban_check,0,0,60*1000);
		 */
    }

    public void do_initXML() {
        dbManagemtType = new XMLDBManagementLogin();
        dbManagemtType.login_config_read(""conf/login_athena.xml"");
        // dbManagemtType.readGMAccount();
        dbManagemtType.mmo_auth_init();
        UserManagement.getNBUser();
        // not before, because log file name can be
        save_config_in_log();
        // changed
        mmo_auth_initXML();
        Timer t = new Timer(""sauvegarde"");
        t.schedule(new Timer_interval_check_auth_sync(), 60000, 60000);
    }

    public int do_init() {
        MultilanguageManagement.init();
        display_title();
        // read login-server configuration
        try {
            switch(Constants.DB_MODE) {
                case Constants.DB_TXT:
                    do_initTXT();
                    break;
                case Constants.DB_MYSQL:
                    do_initSQL();
                    break;
                case Constants.DB_XML:
                    do_initXML();
                    break;
            }
            // not in
            ConfigurationManagement.display_conf_warnings();
            // login_config_read,
            // because we
            // can use
            // 'import'
            // option, and
            // display same
            // message twice
            // or more
            File account_fp = new File(ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
        ConfigurationManagement.login_lan_config_read((System.getenv(""LAN_CONF_NAME"") != null && !System.getenv(""LAN_CONF_NAME"").equals("""")) ? System.getenv(""LAN_CONF_NAME"") : LAN_CONF_NAME);
        /*
		 * if (console) { set_defaultconsoleparse(parse_console);
		 * start_console(); }
		 */
        dbManagemtType.login_log("""", """", ""0"", String.format(""The login-server is ready (Server is listening on the port %d)."", ConfigurationManagement.getLoginAthenaConf().getLogin_port()));
        Functions.showStatus(""The login-server is %sready%s (Server is listening on the port %d)."", Constants.CL_GREEN, Constants.CL_RESET, ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        /*
		 * ServerSocket ss = new ServerSocket(
		 * ConfigurationManagement.getLogin_port(), 500, new
		 * InetSocketAddress(ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLogin_port()).getAddress() );
		 * 
		 * ServerSocket ss = new ServerSocket(ConfigurationManagement
		 * .getLoginAthenaConf().getLogin_port(), 500,
		 * InetSocketAddress.createUnresolved(
		 * ConfigurationManagement.getLogin_ip_str(),
		 * ConfigurationManagement.getLoginAthenaConf()
		 * .getLogin_port()).getAddress()); while (true) { Socket_data session =
		 * new Socket_data(ss.accept(), new ToLogin());
		 * UserManagement.addSession(session); session.setName(""JavAthena""); }
		 */
        try {
            connectionListener = new ConnectionListener();
            connectionListenerThread = new Thread(connectionListener);
            connectionListenerThread.start();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return 0;
    }

    class ConnectionListener implements Runnable {

        private ServerSocket ss;

        private boolean open;

        public ConnectionListener() throws IOException {
            open = true;
            ss = new ServerSocket(ConfigurationManagement.getLoginAthenaConf().getLogin_port(), 500, InetSocketAddress.createUnresolved(ConfigurationManagement.getLogin_ip_str(), ConfigurationManagement.getLoginAthenaConf().getLogin_port()).getAddress());
        }

        @Override
        public void run() {
            Socket_data session;
            try {
                while (open) {
                    session = new Socket_data(ss.accept(), new FromClient());
                    UserManagement.addSession(session);
                    session.setName(""JavAthena"");
                }
            } catch (SocketException e) {
                //that's probably because we close th connection while
                //we was waiting for a connection
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        public void close() {
            try {
                ss.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            open = false;
        }
    }

    /**
     * @return
     */
    public int getAuth_max() {
        return auth_max;
    }

    /**
     * @return
     */
    public int getAuth_num() {
        return auth_num;
    }

    /**
     * @return
     */
    public File getLog_fp() {
        return log_fp;
    }

    /**
     * @return
     */
    public PrintWriter getOut() {
        return loginLogOut;
    }

    /**
     * @return
     */
    public int[] getServer_fd() {
        return server_fd;
    }

    /**
     * --------------------------------------- // Packet parsing for
     * administation login //---------------------------------------
     */
    /**
     * @param commande
     * @param session
     * @param hote
     * @return
     */
    public int parse_admin(int commande, Socket_data session, Login hote) {
        // InetAddress sin_addr = session.getClient_addr().getInetAddress();
        // String ip = sin_addr.getHostAddress();
        if (session.getEof() == 1) {
            Functions.showNotice(MultilanguageManagement.getNotice_11(), session.getAccount_id());
            return 0;
        }
        commande += session.func_recv();
        while (commande != -1) {
            commande += session.func_recv() * 256;
            switch(commande) {
                case -1:
                    return 0;
                case 0x7530:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7532:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7920:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7930:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7932:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7934:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7936:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7938:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x793e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7940:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7942:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7944:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7946:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7948:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794a:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794c:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x794e:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7950:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7952:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7954:
                    Functions.showWarning(commande + "" parse_admin : niy"");
                case 0x7955:
                    System.out.println(""L'administration a distance n'est pas implementer"");
            }
            commande = session.func_recv();
        }
        return 0;
    }

    /**
     * ----------------------- // Console Command Parser [Wizputer]
     * //-----------------------
     *
     * *
     */
    /**
     * @param command
     * @return
     */
    public int parse_console(String command) {
        dbManagemtType.login_log("""", """", """", String.format(""Console command : '%s'"", command));
        if (command.equals(""shutdown"") || command.equals(""exit"") || command.equals(""quit"") || command.equals(""end""))
            System.exit(0);
        else if (command.equals(""alive"") || command.equals(""status""))
            Functions.showNotice(MultilanguageManagement.getNotice_12());
        else if (command.equals(""help"")) {
            System.out.printf(""\033[32mHelp of commands:\033[0m"");
            System.out.printf(""  To shutdown the server:"");
            System.out.printf(""  'shutdown|exit|qui|end'"");
            System.out.printf(""  To know if server is alive:"");
            System.out.printf(""  'alive|status'"");
        }
        return 0;
    }

    // ----------------------------------
    // Reading Lan Support configuration
    // ----------------------------------
    /**
     */
    public void save_config_in_log() {
        int i;
        loginLogOut = Functions.open_log(ConfigurationManagement.getLoginAthenaConf().getLogin_log_filename());
        // a newline in the log...
        login_log("""");
        login_log(""The login-server starting..."");
        // save configuration in log file
        login_log(""The configuration of the server is set:"");
        if (!ConfigurationManagement.getLoginAthenaConf().getAdmin_state())
            login_log(""- with no remote administration."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass() == null)
            login_log(""- with a remote administration with a VOID password."");
        else if (ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().equals(""admin""))
            login_log(""- with a remote administration with the DEFAULT password."");
        else
            login_log(""- with a remote administration with the password of %d character(s)."", ConfigurationManagement.getLoginAthenaConf().getAdmin_pass().length());
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag())
            login_log(""- to ALLOW new users (with _F/_M)."");
        else
            login_log(""- to NOT ALLOW new users (with _F/_M)."");
        login_log(""- with port: %d."", ConfigurationManagement.getLoginAthenaConf().getLogin_port());
        login_log(""- with the accounts file name: '%s'."", ConfigurationManagement.getLoginAthenaConf().getAccount_filename());
        if (!ConfigurationManagement.getLoginAthenaConf().getUse_MD5_passwords())
            login_log(""- to save password in plain text."");
        else
            login_log(""- to save password with MD5 encrypting."");
        if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == // 0: all
        0)
            // players,
            // 1-99 at
            // least gm
            // level x
            login_log(""- with no minimum level for connection."");
        else if (ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect() == 99)
            login_log(""- to accept only GM with level 99."");
        else
            login_log(""- to accept only GM with level %d or more."", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect());
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0)
            login_log(""- to create new accounts with an unlimited time."");
        else if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() == 0)
            login_log(""- to create new accounts with a limited time: time of creation."");
        else
            login_log(""- to create new accounts with a limited time: time of creation %d second(s)."", ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        if (ConfigurationManagement.getAccess_order() == ACO.DENY_ALLOW) {
            if (ConfigurationManagement.getAccess_denynum() == 0) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse no IP."");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). You refuse ALL IP."");
            } else {
                login_log(""- with the IP security order: 'deny,allow' (allow if not deny). Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else if (ConfigurationManagement.getAccess_order() == ACO.ALLOW_DENY) {
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). You authorise ALL IP."");
            } else {
                login_log(""- with the IP security order: 'allow,deny' (deny if not allow). Authorised IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            login_log(""- with the IP security order: 'mutual-failture' (allow if in the allow list and not in the deny list)."");
            if (ConfigurationManagement.getAccess_allownum() == 0) {
                login_log(""  But, NO IP IS AUTHORISED!"");
            } else if (ConfigurationManagement.getAccess_denynum() == 1 && ConfigurationManagement.getAccess_deny() == null) {
                login_log(""  But, you refuse ALL IP!"");
            } else {
                if (ConfigurationManagement.getAccess_allownum() == 1 && ConfigurationManagement.getAccess_allow() == null) {
                    login_log(""  You authorise ALL IP."");
                } else {
                    for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
                }
                login_log(""  Refused IP are:"");
                for (i = 0; i < ConfigurationManagement.getAccess_denynum(); i++) login_log(ConfigurationManagement.getAccess_deny());
            }
            // dynamic password error ban
            if (ConfigurationManagement.getLoginAthenaConf().isDynamic_pass_failure_ban())
                login_log(""- with NO dynamic password error ban."");
            else {
                login_log(""- with a dynamic password error ban:"");
                login_log(""  IP is banned for %d minutes"", ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
            }
        }
    }

    /**
     * @param auth_max
     */
    public void setAuth_max(int auth_max) {
        this.auth_max = auth_max;
    }

    /**
     * @param out
     */
    public void setOut(PrintWriter out) {
        loginLogOut = out;
    }

    /**
     * @param server_fd
     */
    public void setServer_fd(int[] server_fd) {
        this.server_fd = server_fd;
    }

    /**
     * @param anw
     * @return
     */
    public boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_title() {
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""                        (c)2005-2010 Darksid_1 presents                      "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""       __                 ______  __    __                                   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""     / \\ \\               /\\  _  \\/\\ \\__/\\ \\                     v%2d.%02d.%02d    "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"", Version.ATHENA_MAJOR_VERSION, Version.ATHENA_MINOR_VERSION, Version.ATHENA_REVISION);
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""      \\ \\ \\  __    __   \\__\\ \\_\\ \\ \\ ,_\\ \\ \\___      __    ___      __       "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  __   \\ \\ \\/'__`\\/\\ \\  / / \\  __ \\ \\ \\/\\ \\  _ `\\  /'__`\\/' _ `\\  /'__`\\     "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" /\\ \\___\\/ /\\ \\_\\.\\_\\ \\/ / \\ \\ \\/\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __//\\ \\/\\ \\/\\ \\_\\.\\_   "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + "" \\ \\______/\\ \\__/.\\_\\\\__/   \\ \\_\\ \\_\\ \\__\\\\ \\_\\ \\_\\ \\____\\ \\_\\ \\_\\ \\__/.\\_\\  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:		Functions
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""  \\/_____/  \\/__/\\/_//_/     \\/_/\\/_/\\/__/ \\/_/\\/_/\\/____/\\/_/\\/_/\\/__/\\/_/  "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""          _   _   _   _       _   _   _   _   _   _                          "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         / \\ / \\ / \\ / \\     / \\ / \\ / \\ / \\ / \\ / \\                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""        ( j | a | v | a )   ( A | t | h | e | n | a )                        "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // 1: bold char, 0:
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""         \\_/ \\_/ \\_/ \\_/     \\_/ \\_/ \\_/ \\_/ \\_/ \\_/                         "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BOLD + ""                                                                             "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // yellow writing (33)
        Functions.showMessage(Constants.CL_XXBL + ""("" + Constants.CL_BT_YELLOW + ""              (c)2005-2006 The Translate From C To Java Project              "" + Constants.CL_XXBL + "")"" + Constants.CL_CLL + Constants.CL_NORMAL + ""\n"");
        // reset
        Functions.showMessage(Constants.CL_WTBL + ""(=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=)"" + Constants.CL_CLL + """" + Constants.CL_NORMAL + ""\n\n"");
    }
}
","// Login_9Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#parse_admin(int, Socket_data, Login)} method.
*/
class Login_9Test {","// Login_9Test.java
package org.javathena.login;

//Sun jdk
import java.io.*;
import java.sql.SQLException;
import java.net.*;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.core.utiles.Version;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.data.MySQLDBManagement;
import org.javathena.data.TXTDBManagement;
import org.javathena.data.XMLDBManagementLogin;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
//JavAthena
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Login}.
* It contains ten unit test cases for the {@link Login#parse_admin(int, Socket_data, Login)} method.
*/
class Login_9Test {
"
cbb63af4-c38e-4bf7-bc4d-f41c6c35c71e,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/login/UserManagement_8Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 19854 tokens (17854 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// UserManagement.java
/*
 * UserManagement.java
 *
 * Created on 3 avril 2006, 20:59
 *
 * Copyright (c) 2006, Fran?ois Bradette
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of their contributors may be used to endorse or
 *       promote products derived from this software without specific prior
 *       written permission.
 *
 * This software is provided by the regents and contributors ""as is"" and any
 * express or implied warranties, including, but not limited to, the implied
 * warranties of merchantability and fitness for a particular purpose are
 * disclaimed.  In no event shall the regents and contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential damages
 * (including, but not limited to, procurement of substitute goods or services;
 * loss of use, data, or profits; or business interruption) however caused and
 * on any theory of liability, whether in contract, strict liability, or tort
 * (including negligence or otherwise) arising in any way out of the use of this
 * software, even if advised of the possibility of such damage.
 *
 * Translate from eAthena(c) by Fran?ois Bradette
 */
package org.javathena.login;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.sql.data.Auth_data_SQL;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import javolution.util.FastMap;
import javolution.util.FastTable;

/**
 * @author Darksid_1
 */
public class UserManagement {

    /**
     * Don't creates a new instance of UserManagement
     */
    private UserManagement() {
    }

    // private static final String LOGIN_LOG =
    // ResourceBundle.getBundle(""javathena/login/Log_ ""+ (Constants.DB_MODE ==
    // Constants.DB_TXT?""txt"":""sql"")).getString(""loginlog"");
    // Account saved in save/account.txt
    // account_id,account
    private static FastMap<Integer, Auth_data> auth_dats;

    // Accounts connected
    // account_id,account
    private static FastMap<Integer, Auth_data> auth_dats_connecte;

    // userid,account
    private static FastMap<String, Integer> index_userid_accountid;

    // all accont_ids
    private static FastTable<Integer> account_ids;

    // Server connected
    // userid Socket data
    private static FastMap<Integer, Socket_data> servers_connecter;

    // GM accounts
    private static FastMap<Integer, Integer> gm_account_db;

    private static FastTable<Integer> online_db;

    private static int account_id_count;

    private static FastTable<Socket_data> sessions;

    // charserver connected
    private static FastTable<Socket_data> char_sessions;

    // users indexed by server id
    // charserver connected
    private static FastMap<Integer, FastTable<Integer>> charServerIndex;

    private static FastMap<String, Integer> dynamicFailBanCheck;

    static {
        sessions = new FastTable<Socket_data>();
        servers_connecter = new FastMap<Integer, Socket_data>();
        char_sessions = new FastTable<Socket_data>();
        auth_dats = new FastMap<Integer, Auth_data>();
        account_ids = new FastTable<Integer>();
        index_userid_accountid = new FastMap<String, Integer>();
        auth_dats_connecte = new FastMap<Integer, Auth_data>();
        online_db = new FastTable<Integer>();
        gm_account_db = new FastMap<Integer, Integer>();
        dynamicFailBanCheck = new FastMap<String, Integer>();
        charServerIndex = new FastMap<Integer, FastTable<Integer>>();
    }

    public static synchronized Auth_data addUser(Auth_data new_account) {
        if (index_userid_accountid.get(new_account.getAccount_id()) == null) {
            getAuth_dats().put(new_account.getAccount_id(), new_account);
            index_userid_accountid.put(new_account.getUserid(), new_account.getAccount_id());
            account_ids.add(new_account.getAccount_id());
            return new_account;
        }
        return null;
    }

    public static void addSession(Socket_data session) {
        sessions.add(session);
    }

    public static Socket_data getSessionAt(int ind) {
        return sessions.get(ind);
    }

    public static int getNBSession() {
        return sessions.size();
    }

    public static void numberOfUser(Socket_data session, byte[] packet) {
        byte[] alivePacket = { 0x18, 0x27 };
        session.func_send(alivePacket);
        session.setUsers(Functions.byteTabToInt(2, 4, packet));
        Functions.showStatus(""set users %s : %d\n"", session.getName(), session.getUsers());
        // showTab(donnes);
    }

    public static void emailCreation(Socket_data session) {
        byte[] donnes = new byte[44];
        String ip = session.getIpStr();
        session.func_recv(donnes);
        Integer accountid = Functions.byteTabToInt(0, 4, donnes);
        String email = Functions.unsignedBytesToString(donnes, 4, 44).trim();
        if (!Functions.e_mail_check(email))
            Login.getDbManagemtType().login_log(ip, session.getName(), """", String.format(MultilanguageManagement.getLogin_log_1(), session.getName(), accountid, ip));
        else {
            Auth_data tmpAcc = Login.getDbManagemtType().getUser(accountid);
            if (tmpAcc != null && (tmpAcc.getEmail().equals(Constants.DEFAULT_EMAIL) || tmpAcc.getEmail() == null)) {
                tmpAcc.setEmail(email);
                Login.getDbManagemtType().mmo_auth_sync();
            } else
                Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_2(), session.getName(), accountid, ip));
        }
    }

    public static void emailLimitedTime(Socket_data session) {
        byte[] donnes = new byte[4];
        byte[] answer = new byte[50];
        String ip = session.getIpStr();
        session.func_recv(donnes);
        Integer accountid = Functions.byteTabToInt(0, 4, donnes);
        Auth_data tmpAcc = Login.getDbManagemtType().getUser(accountid);
        if (tmpAcc != null) {
            Functions.intToByteTab(0x2717, 0, 2, answer);
            Functions.stringToByteTable(tmpAcc.getEmail(), answer, 6, 46);
            // Functions.doubleToByteTab( tmpAcc.getConnect_until_time(),46,50,
            // answer);
            session.func_send(answer);
        } else
            Login.getDbManagemtType().login_log(ip, session.getName(), """", String.format(MultilanguageManagement.getLogin_log_3(), session.getName(), accountid, ip));
    }

    public static void statusChange(Socket_data session, byte[] packet) {
        byte[] donnes = new byte[8];
        String ip = session.getIpStr();
        int accountid = Functions.byteTabToInt(2, 6, donnes);
        int statut = Functions.byteTabToInt(6, 10, donnes);
        Auth_data actualAccount = Login.getDbManagemtType().getUser(accountid);
        if (actualAccount != null) {
            if (actualAccount.getState() != statut) {
                Login.getDbManagemtType().login_log(ip, session.getName(), """" + statut, String.format(MultilanguageManagement.getLogin_log_4() + Constants.NEWLINE, session.getName(), accountid, statut, ip));
                if (statut != 0) {
                    int[] buff = new int[16];
                    Functions.intToIntTab(0x2731, 0, 2, buff);
                    Functions.intToIntTab(accountid, 2, 6, buff);
                    Functions.intToIntTab(statut, 7, 8, buff);
                    charif_sendallwos(-1, buff);
                }
                Login.getDbManagemtType().mmo_auth_sync();
            } else
                Login.getDbManagemtType().login_log(ip, session.getName(), ""0"" + statut, String.format(MultilanguageManagement.getLogin_log_5() + Constants.NEWLINE, session.getName(), accountid, statut, ip));
        } else
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"" + statut, String.format(MultilanguageManagement.getLogin_log_6(), session.getName(), accountid, statut, ip));
    }

    public static void banResquest(Socket_data session) {
        byte[] donnes = new byte[16];
        String ip = session.getIpStr();
        session.func_recv(donnes);
        int accountid = Functions.byteTabToInt(0, 4, donnes);
        Auth_data actualAccount = Login.getDbManagemtType().getUser(accountid);
        if (actualAccount != null) {
            Calendar timestamp = Calendar.getInstance();
            /*
			 * if(actualAccount.getBan_until_time().getTimeInMillis() == 0 ||
			 * actualAccount.getBan_until_time().getTimeInMillis() <
			 * timestamp.getTimeInMillis()) timestamp = Calendar.getInstance();
			 * else timestamp = actualAccount.getBan_until_time();
			 * timestamp.set(timestamp.get(Calendar.YEAR) +
			 * Functions.byteTabToInt(4,8,donnes), timestamp.get(Calendar.MONTH)
			 * + Functions.byteTabToInt(8,10,donnes),
			 * timestamp.get(Calendar.DAY_OF_MONTH) +
			 * Functions.byteTabToInt(10,12,donnes),
			 * timestamp.get(Calendar.HOUR_OF_DAY) +
			 * Functions.byteTabToInt(12,14,donnes),
			 * timestamp.get(Calendar.MINUTE) +
			 * Functions.byteTabToInt(14,16,donnes),
			 * timestamp.get(Calendar.SECOND) +
			 * Functions.byteTabToInt(16,18,donnes));
			 */
            if (timestamp != null) {
                if (timestamp.getTimeInMillis() <= Calendar.getInstance().getTimeInMillis())
                    timestamp = null;
                /*
				 * if(actualAccount.getBan_until_time().getTimeInMillis() !=
				 * timestamp.getTimeInMillis()) { if(timestamp != null) { int
				 * buff[] = new int[16]; String timeString =
				 * Functions.calendarToString(timestamp);
				 * Login.getDbManagemtType().login_log(ip,session.getName(),"""",
				 * String.format(MultilanguageManagement.getLogin_log_7() +
				 * Constants.NEWLINE, session.getAccount_id(), accountid,
				 * timestamp, (timestamp.getTimeInMillis() == 0 ?
				 * ""no banishment"" : timeString), ip));
				 * 
				 * Functions.intToIntTab(0x2731,0,2,buff);
				 * Functions.intToIntTab(accountid,2,6,buff); buff[6] = 1; // 0:
				 * change of statut, 1: ban
				 * Functions.longToIntTab(timestamp.getTimeInMillis(), 7,
				 * 16,buff);// status or final date of a banishment
				 * charif_sendallwos(-1, buff); KeySession tmpKey =
				 * getKeySession(accountid);
				 * tmpKey.setLogin1(tmpKey.getLogin1()+1);
				 * addKeySession(accountid,tmpKey);
				 * actualAccount.setBan_until_time(timestamp); } else {
				 * Login.getDbManagemtType().login_log(ip,session.getName(),"""",
				 * String.format(MultilanguageManagement.getLogin_log_8() +
				 * Constants.NEWLINE, session.getName(), accountid, ip)); }
				 * 
				 * Login.getDbManagemtType().mmo_auth_sync(); } else {
				 * Login.getDbManagemtType().login_log(ip,session.getName(),"""",
				 * String.format(MultilanguageManagement.getLogin_log_9() +
				 * Constants.NEWLINE, session.getName(), accountid, ip)); }
				 */
            } else {
                Login.getDbManagemtType().login_log(ip, session.getName(), """", String.format(MultilanguageManagement.getLogin_log_10() + Constants.NEWLINE, session.getName(), accountid, ip));
            }
        } else
            Login.getDbManagemtType().login_log(ip, session.getName(), """", String.format(MultilanguageManagement.getLogin_log_11() + Constants.NEWLINE, session.getName(), accountid, ip));
    }

    public static void changeSex(Socket_data session) {
        byte[] donnes = new byte[4];
        session.func_recv(donnes);
        String ip = session.getIpStr();
        int accountid = Functions.byteTabToInt(0, 4, donnes);
        Auth_data actualAccount = Login.getDbManagemtType().getUser(accountid);
        int sex;
        if (actualAccount != null) {
            if (actualAccount.getSex() != 2) {
                Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_12() + Constants.NEWLINE, session.getName(), accountid, actualAccount.getSex(), ip));
            } else {
                if (actualAccount.getSex() == 0) {
                    sex = 1;
                } else {
                    sex = 0;
                }
                Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_13() + Constants.NEWLINE, session.getName(), accountid, (sex == 2) ? 'S' : (sex == 1 ? 'M' : 'F'), ip));
                actualAccount.setLogin_id1(actualAccount.getLogin_id1() + 1);
                actualAccount.setSex((sex == 2) ? 'S' : (sex == 1 ? 'M' : 'F'));
                int[] buff = new int[16];
                Functions.intToIntTab(0x2723, 0, 2, buff);
                Functions.intToIntTab(accountid, 2, 6, buff);
                buff[7] = sex;
                charif_sendallwos(-1, buff);
                // Save
                Login.getDbManagemtType().mmo_auth_sync();
            }
        } else {
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_14() + Constants.NEWLINE, session.getName(), accountid, ip));
        }
    }

    public static void receiveAccountReg2(Socket_data session, byte[] donnes) {
        int accountid = Functions.byteTabToInt(4, 8, donnes);
        Auth_data actualAccount = Login.getDbManagemtType().getUser(accountid);
        String ip = session.getIpStr();
        int length = Functions.byteTabToInt(2, 4, donnes);
        FastMap<String, String> accountReg2 = new FastMap<String, String>();
        if (actualAccount != null) {
            session.func_recv(donnes);
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_15() + Constants.NEWLINE, session.getName(), accountid, ip));
            for (int j = 0, p = 13; j < Constants.ACCOUNT_REG2_NUM && p < length; j++) {
                String key = Functions.unsignedBytesToString(donnes, p + (j * 31), p + ((j + 31) * 31));
                p += 31;
                String value = Functions.unsignedBytesToString(donnes, p + (j * 255), p + ((j + 255) * 255));
                p += 255;
                accountReg2.put(key, value);
            }
            actualAccount.setAccount_reg2(accountReg2);
            //
            Functions.intToByteTab(0x2729, 0, 2, donnes);
            charif_sendallwos(session.getAccount_id(), donnes);
        } else {
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_16() + Constants.NEWLINE, session.getName(), accountid, session.getIpStr()));
        }
    }

    public static void toChangeAnEmail(Socket_data session) {
        Auth_data actualAccount;
        byte[] donnes = new byte[84];
        String ip = session.getIpStr();
        String actual_email, new_email;
        session.func_recv(donnes);
        int accountid = Functions.byteTabToInt(0, 4, donnes);
        actual_email = Functions.unsignedBytesToString(donnes, 4, 44).trim();
        new_email = Functions.unsignedBytesToString(donnes, 44, 84).trim();
        if (!Functions.e_mail_check(actual_email)) {
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_17() + Constants.NEWLINE, session.getName(), accountid, ip));
            Login.getDbManagemtType().getUser(accountid).setEmail(""a@a.com"");
        } else if (!Functions.e_mail_check(new_email))
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_18() + Constants.NEWLINE, session.getName(), accountid, ip));
        else if (new_email.equals(""a@a.com""))
            Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_19() + Constants.NEWLINE, session.getName(), accountid, ip));
        else {
            actualAccount = Login.getDbManagemtType().getUser(accountid);
            if (actualAccount != null) {
                if (actualAccount.getEmail().equals(actual_email)) {
                    actualAccount.setEmail(new_email);
                    Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_20() + Constants.NEWLINE, session.getName(), accountid, actualAccount.getUserid(), new_email, ip));
                    Login.getDbManagemtType().mmo_auth_sync();
                } else
                    Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_21() + Constants.NEWLINE, session.getName(), accountid, actualAccount.getUserid(), new_email, ip));
            } else
                Login.getDbManagemtType().login_log(ip, session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_22() + Constants.NEWLINE, session.getName(), accountid, ip));
        }
    }

    @Deprecated
    public static void toBecomeGM(Socket_data session) {
    }

    public static int tabHexToInt(byte[] tab) {
        int t = 0;
        for (int i = 0; i < tab.length; i++) {
            t = Functions.parseByteToInt(tab[i]) * ((int) Math.pow(0x100, i));
        }
        return t;
    }

    public static synchronized Auth_data removeUser(Auth_data new_account) {
        if (index_userid_accountid.get(new_account.getAccount_id()) != null) {
            online_db.remove(new_account.getAccount_id());
            index_userid_accountid.remove(new_account.getUserid());
            account_ids.remove(new Integer(new_account.getAccount_id()));
            getAuth_dats().remove(new_account.getAccount_id());
            return new_account;
        }
        return null;
    }

    // -----------------------------------------------------
    // Clear Online User Database
    // -----------------------------------------------------
    public static int online_db_final() {
        online_db.clear();
        return 0;
    }

    public static int add_online_user(Auth_data account) {
        if (!is_user_online(account.getAccount_id())) {
            auth_dats_connecte.put(new Integer(account.getAccount_id()), account);
            online_db.add(account.getAccount_id());
            account.setLastlogin(Calendar.getInstance());
            return 0;
        }
        return -1;
    }

    public static void connectionOfCharServer(Socket_data session, byte[] donnes) {
        byte[] donnesEnvoi;
        String userId = """";
        String pass = """";
        String server_name = """";
        int[] ip = new int[4];
        int port = 0;
        userId = Functions.unsignedBytesToString(donnes, 2, 26);
        pass = Functions.unsignedBytesToString(donnes, 26, 52);
        ip[0] = donnes[54];
        ip[1] = donnes[55];
        ip[2] = donnes[56];
        ip[3] = donnes[57];
        port = Functions.unsignedByteToInt(donnes[58]) * 0x100;
        port += Functions.unsignedByteToInt(donnes[59]);
        session.setListenPort(port);
        session.setName(Functions.byteTabToString(60, 81, donnes));
        String ipWithDot = ip[0] + ""."" + ip[1] + ""."" + ip[2] + ""."" + ip[3];
        Login.getDbManagemtType().login_log(session.getIpStr(), session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_27() + server_name + "" @ "" + ip[0] + ""."" + ip[1] + ""."" + ip[2] + ""."" + ip[3] + "":"" + port + "" (ip: "" + ipWithDot + "")""));
        Auth_data tmp;
        tmp = Login.getDbManagemtType().getUser(userId);
        if (tmp != null) {
            Integer id = tmp.getAccount_id();
            if (tmp.getSex() == 'S') {
                if (servers_connecter.get((tmp.getAccount_id() + """")) == null) {
                    if (!pass.equals(tmp.getPass())) {
                        Functions.showNotice(MultilanguageManagement.getNotice_14(), server_name, tmp.getAccount_id(), tmp.getUserid(), tmp.getPass(), ipWithDot);
                        Login.getDbManagemtType().login_log(session.getIpStr(), session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_28(), server_name, tmp.getAccount_id(), tmp.getUserid(), tmp.getPass(), ipWithDot));
                    } else {
                        // session.setIp(ip);
                        session.setMaintenance(Functions.byteTabToInt(82, 84, donnes));
                        session.setUsers(0);
                        session.setNew_(Functions.byteTabToInt(84, 86, donnes));
                        servers_connecter.put(id, session);
                        char_sessions.add(session);
                        auth_dats_connecte.put(id, tmp);
                        donnesEnvoi = new byte[3];
                        donnesEnvoi[0] = 0x11;
                        donnesEnvoi[1] = 0x27;
                        donnesEnvoi[2] = 0;
                        session.func_send(donnesEnvoi);
                        session.setFunc_parse(new FromChar());
                        session.setAccount_id(id);
                        tmp.setLastlogin();
                        // send_GM_accounts();
                        return;
                    }
                } else {
                    Functions.showNotice(MultilanguageManagement.getNotice_15(), server_name, tmp.getAccount_id(), tmp.getUserid(), tmp.getPass(), session.getIpStr());
                    Login.getDbManagemtType().login_log(session.getIpStr(), session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_29(), server_name, tmp.getAccount_id(), tmp.getUserid(), tmp.getPass(), session.getIpStr()));
                }
            }
        } else {
            Functions.showNotice(MultilanguageManagement.getNotice_16(), server_name, userId, pass, session.getIpStr());
            Login.getDbManagemtType().login_log(session.getIpStr(), session.getName(), ""0"", String.format(MultilanguageManagement.getLogin_log_30(), server_name, userId, pass, session.getIpStr()));
        }
        donnesEnvoi = new byte[3];
        donnesEnvoi[0] = 0x11;
        donnesEnvoi[1] = 0x27;
        donnesEnvoi[2] = 3;
        session.func_send(donnesEnvoi);
    }

    public static void charServerToAuthentify(Socket_data session, byte[] donnes) {
        int acc;
        byte[] response = new byte[25];
        acc = Functions.byteTabToInt(2, 6, donnes);
        Auth_data accountToConnect = Login.getDbManagemtType().getUser(acc);
        int login_id1 = Functions.byteTabToInt(6, 10, donnes);
        int login_id2 = Functions.byteTabToInt(10, 14, donnes);
        byte sex = donnes[14];
        int resquestid = Functions.byteTabToInt(19, 23, donnes);
        response[0] = 0x13;
        response[1] = 0x27;
        Functions.intToByteTab(acc, 2, 6, response);
        Functions.intToByteTab(login_id1, 6, 10, response);
        Functions.intToByteTab(login_id2, 10, 14, response);
        response[14] = sex;
        if (accountToConnect != null && accountToConnect.getAccount_id() == acc && accountToConnect.getLogin_id1() == login_id1 && accountToConnect.getLogin_id2() == login_id2 && accountToConnect.getSex() == Functions.byteSexToChar(sex)) {
            Functions.intToByteTab(resquestid, 16, 20, response);
            Functions.intToByteTab(accountToConnect.getVersion(), 20, 24, response);
            Functions.intToByteTab(accountToConnect.getClientType(), 24, 25, response);
            session.func_send(response);
            System.out.printf(""[%d"", response[0]);
            for (int i = 1; i < response.length; i++) {
                System.out.printf("",%d"", Functions.unsignedByteToInt(response[i]));
            }
            System.out.println(""]"" + response.length);
        } else {
            response[15] = 1;
            Functions.intToByteTab(resquestid, 16, 20, response);
            session.func_send(response);
        }
    }

    public static void account_idToOnline(Socket_data session, byte[] donnes) {
        Integer account_id = Functions.byteTabToInt(2, 6, donnes);
        Auth_data toConnect = Login.getDbManagemtType().getUser(account_id);
        add_online_user(toConnect);
    }

    public static void account_idToOffline(Socket_data session, byte[] packet) {
        Integer account_id = Functions.byteTabToInt(0, 4, packet);
        Auth_data toDisconnect = Login.getDbManagemtType().getUser(account_id);
        // Auth_data toDisconnect = auth_dats.get(account_id);
        if (toDisconnect != null) {
            auth_dats_connecte.remove(account_id);
            System.out.println(account_id);
            online_db.remove(account_id);
        }
    }

    public static void connectionOfClient(Socket_data session, byte[] packet, boolean encrypted) {
        int version;
        String username;
        String password;
        byte clientType;
        Auth_data userAccount;
        byte authenticationResult = -1;
        byte[] answer;
        String MD5;
        version = Functions.byteTabToInt(2, 6, packet);
        username = Functions.byteTabToString(6, 30, packet, true);
        if (encrypted) {
            MD5 = session.getMd5key();
            password = Functions.byteTabToString(30, 46, packet, true);
            clientType = packet[46];
        } else {
            password = Functions.byteTabToString(30, 54, packet, true);
            clientType = packet[54];
        }
        if (username.toUpperCase().endsWith(""_M"") || username.toUpperCase().endsWith(""_F"")) {
            if (!createAccount(username.substring(0, username.length() - 2), password, username.toUpperCase().charAt(username.length() - 1), session.getIpStr())) {
                Functions.showNotice(""Cannot create account (account: %s, received "" + ""pass: %s, ip: %s)\n"", username, password, session.getIpStr());
            } else {
                username = username.substring(0, username.length() - 2);
            }
        }
        userAccount = Login.getDbManagemtType().getUser(username);
        if (userAccount != null) {
            userAccount.setLast_ip(session.getIpStr());
            userAccount.setClientType(clientType);
            userAccount.setVersion(version);
            authenticationResult = authentication(userAccount, password);
        } else {
            Functions.showNotice(""Unknown account (account: %s, received "" + ""pass: %s, ip: %s)\n"", username, password, session.getIpStr());
            // 0 = Unregistered ID
            authenticationResult = 0;
        }
        if (authenticationResult == -1) {
            if (userAccount.getLevel() < ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect()) {
                Functions.showStatus(""Connection refused: the minimum GM level for connection is %d (account: %s, GM level: %d).\n"", ConfigurationManagement.getLoginAthenaConf().getMin_level_to_connect(), userAccount.getUserid(), userAccount.getLevel());
                answer = new byte[3];
                Functions.intToByteTab(0x81, 0, 2, answer);
                // 01 = Server closed
                answer[2] = 1;
                session.func_send(answer);
                session.close();
                return;
            }
            if (char_sessions.size() == 0) {
                Functions.showStatus(""Connection refused: there is no char-server online (account: %s).\n"", userAccount.getUserid());
                answer = new byte[3];
                Functions.intToByteTab(0x81, 2, answer);
                // 01 = Server closed
                answer[2] = 1;
                session.func_send(answer);
                session.close();
                return;
            } else {
                if (auth_dats_connecte.get(userAccount.getAccount_id()) != null) {
                    if (userAccount.getCharserver() != -1) {
                        Functions.showNotice(""User '%s' is already online - Rejected.\n"", userAccount.getUserid());
                        byte[] toAllCharServer = new byte[6];
                        Functions.intToByteTab(0x2734, 0, 2, toAllCharServer);
                        Functions.intToByteTab(userAccount.getAccount_id(), 2, 6, toAllCharServer);
                        charif_sendallwos(-1, toAllCharServer);
                        answer = new byte[3];
                        Functions.intToByteTab(0x81, 0, 2, answer);
                        answer[2] = 8;
                        session.func_send(answer);
                        session.close();
                    } else {
                        auth_dats_connecte.remove(userAccount.getAccount_id());
                    }
                }
                if (userAccount.getLevel() > 0) {
                    Functions.showStatus(""Connection of the GM (level:%d) account '%s' accepted.\n"", userAccount.getLevel(), userAccount.getUserid());
                } else {
                    Functions.showStatus(""Connection of the account '%s' accepted.\n"", userAccount.getUserid());
                }
                answer = new byte[47 + 32 * char_sessions.size()];
                Functions.intToByteTab(0x69, 0, 2, answer);
                Functions.intToByteTab(answer.length, 2, 4, answer);
                Functions.intToByteTab(userAccount.getLogin_id1(), 4, 8, answer);
                Functions.intToByteTab(userAccount.getAccount_id(), 8, 12, answer);
                Functions.intToByteTab(userAccount.getLogin_id2(), 12, 16, answer);
                Functions.intToByteTab(userAccount.getSex(), 46, 47, answer);
                int j = 0;
                for (Socket_data cs : char_sessions) {
                    byte[] ipTab = cs.getIpTab();
                    /*
					 * Functions.byteTableToByteTab(ipTab, 47 + 32 * j, 51 + 32
					 * * j, answer);
					 */
                    answer[47 + 32 * j] = 127;
                    answer[48 + 32 * j] = 0;
                    answer[49 + 32 * j] = 0;
                    answer[50 + 32 * j] = 1;
                    Functions.intToByteTab(cs.getListenPort(), 51 + 32 * j, 53 + 32 * j, answer);
                    Functions.stringToByteTable(cs.getName(), answer, 53 + 32 * j, 73 + 32 * j);
                    Functions.intToByteTab(cs.getUsers(), 73 + 32 * j, 75 + 32 * j, answer);
                    Functions.intToByteTab(cs.getMaintenance(), 75 + 32 * j, 77 + 32 * j, answer);
                    Functions.intToByteTab(cs.getNew_(), 77 + 32 * j, 79 + 32 * j, answer);
                    j++;
                }
                session.func_send(answer);
            }
        } else {
            if (ConfigurationManagement.getLoginAthenaConf().isLog_login()) {
                String error;
                switch(authenticationResult) {
                    case 0:
                        error = ""Unregistered ID."";
                        // 0 = Unregistered ID
                        break;
                    case 1:
                        error = ""Incorrect Password."";
                        // 1 = Incorrect Password
                        break;
                    case 2:
                        error = ""Account Expired."";
                        // 2 = This ID is expired
                        break;
                    case 3:
                        error = ""Rejected from server."";
                        // 3 = Rejected from Server
                        break;
                    case 4:
                        error = ""Blocked by GM."";
                        // 4 = You have been blocked by the GM Team
                        break;
                    case 5:
                        error = ""Not latest game EXE."";
                        // 5 = Your Game's EXE file is not the latest version
                        break;
                    case 6:
                        error = ""Banned."";
                        // 6 = Your are Prohibited to log in until %s
                        break;
                    case 7:
                        error = ""Server Over-population."";
                        // 7 = Server is jammed due to over populated
                        break;
                    case 8:
                        error = ""Account limit from company"";
                        // 8 = No more accounts may be connected from this
                        break;
                    // company
                    case 9:
                        error = ""Ban by DBA"";
                        // 9 = MSI_REFUSE_BAN_BY_DBA
                        break;
                    case 10:
                        error = ""Email not confirmed"";
                        // 10 = MSI_REFUSE_EMAIL_NOT_CONFIRMED
                        break;
                    case 11:
                        error = ""Ban by GM"";
                        // 11 = MSI_REFUSE_BAN_BY_GM
                        break;
                    case 12:
                        error = ""Working in DB"";
                        // 12 = MSI_REFUSE_TEMP_BAN_FOR_DBWORK
                        break;
                    case 13:
                        error = ""Self Lock"";
                        // 13 = MSI_REFUSE_SELF_LOCK
                        break;
                    case 14:
                    case 15:
                        error = ""Not Permitted Group"";
                        // 15 = MSI_REFUSE_NOT_PERMITTED_GROUP
                        break;
                    case 99:
                        error = ""Account gone."";
                        // 99 = This ID has been totally erased
                        break;
                    case 100:
                        error = ""Login info remains."";
                        // 100 = Login information remains at %s
                        break;
                    case 101:
                        error = ""Hacking investigation."";
                        // 101 = Account has been locked for a hacking
                        break;
                    // investigation. Please contact the GM Team for
                    // more information
                    case 102:
                        error = ""Bug investigation."";
                        // 102 = This account has been temporarily prohibited
                        break;
                    // from login due to a bug-related investigation
                    case 103:
                        error = ""Deleting char."";
                        // 103 = This character is being deleted. Login is
                        break;
                    // temporarily unavailable for the time being
                    case 104:
                        error = ""Deleting spouse char."";
                        // 104 = This character is being deleted. Login is
                        break;
                    // temporarily unavailable for the time being
                    default:
                        error = ""Unknown Error."";
                        break;
                }
                Functions.showError(error);
                // TODO log error message
                // login_log(ip, sd->userid, result, error);
            }
            answer = new byte[23];
            Functions.intToByteTab(0x6a, 0, 2, answer);
            answer[2] = authenticationResult;
            if (authenticationResult == 6) {
                // TODO add until date time
            }
            session.func_send(answer);
            session.close();
        }
        // session.close();
        /*
		 * connectionOfClient(session, userAccount, userid, password,
		 * validPassword, version);
		 */
    }

    private static boolean createAccount(String userid, String password, char sex, String ipStr) {
        int len = userid.length();
        Auth_data userAccount = Login.getDbManagemtType().getUser(userid);
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag() && UserManagement.getAccountIdCount() <= Login.END_ACCOUNT_NUM && len >= 4 && password.length() >= 4 && userAccount == null) {
            if (System.currentTimeMillis() <= ConfigurationManagement.getNew_reg_tick() && ConfigurationManagement.getNum_regs() >= ConfigurationManagement.getLoginAthenaConf().getAllowed_regs()) {
                Functions.showNotice(MultilanguageManagement.getNotice_17(), ipStr);
                ConfigurationManagement.addNum_regs();
                return false;
            } else {
                ConfigurationManagement.setNum_regs(0);
            }
            if (ConfigurationManagement.getNum_regs() == 0)
                ConfigurationManagement.setNum_regs(System.currentTimeMillis() + ConfigurationManagement.getLoginAthenaConf().getTime_allowed() * 1000);
            ConfigurationManagement.addNum_regs();
            userAccount = Login.getDbManagemtType().addUser(userid.substring(0, len), password, Constants.DEFAULT_EMAIL, sex);
            ConfigurationManagement.setAuth_before_save_file(0);
        }
        return true;
    }

    private static byte authentication(Auth_data userAccount, String password) {
        // TODO check if ban listed and network stuff
        // Client Version check
        if (ConfigurationManagement.getLoginAthenaConf().isCheck_client_version() && userAccount.getVersion() != ConfigurationManagement.getLoginAthenaConf().getClient_version_to_connect())
            return 5;
        if (!password.equals(userAccount.getPass())) {
            // check_password(sd->md5key, sd->passwdenc, sd->passwd, acc.pass)
            Functions.showNotice(""Invalid password (account: '%s', pass: '%s', received pass: '%s', ip: %s)\n"", userAccount.getUserid(), userAccount.getPass(), password, userAccount.getLast_ip());
            // 1 = Incorrect Password
            return 1;
        }
        if (userAccount.getConnect_until_time() != 0 && userAccount.getConnect_until_time() < System.currentTimeMillis()) {
            Functions.showNotice(""Connection refused (account: %s, pass: %s, expired ID, ip: %s)\n"", userAccount.getUserid(), password, userAccount.getLast_ip());
            // 2 = This ID is expired
            return 2;
        }
        if (userAccount.getBan_until_time() != 0 && userAccount.getBan_until_time() > System.currentTimeMillis()) {
            Functions.showNotice(""Connection refused (account: %s, pass: %s, banned until %s, ip: %s)\n"", userAccount.getUserid(), password, userAccount.getLast_ip());
            // 6 = Your are Prohibited to log in
            return 6;
        }
        if (userAccount.getState() != 0) {
            Functions.showNotice(""Connection refused (account: %s, pass: %s, state: %d, ip: %s)\n"", userAccount.getUserid(), password, userAccount.getState(), userAccount.getLast_ip());
            return (byte) (userAccount.getState() - 1);
        }
        int login_id = new java.security.SecureRandom().nextInt();
        while (login_id < 1) login_id = new java.security.SecureRandom().nextInt();
        userAccount.setLogin_id1(login_id);
        login_id = new java.security.SecureRandom().nextInt();
        while (login_id < 1) login_id = new java.security.SecureRandom().nextInt();
        userAccount.setLogin_id2(login_id);
        userAccount.setLastlogin();
        if (userAccount.getSex() != 2 && userAccount.getAccount_id() < Constants.START_ACCOUNT_NUM) {
            Functions.showWarning(""Account %s has account id %d! Account IDs must be over %d to work properly!\n"", userAccount.getUserid(), userAccount.getAccount_id(), Constants.START_ACCOUNT_NUM);
        }
        return -1;
    }

    private static int authenticationNewAccount(Auth_data userAccount) {
        if (ConfigurationManagement.getLoginAthenaConf().getNew_account_flag()) {
        }
        return -1;
    }

    public static int levelIsValid(int level, String GM_account_filename, int GM_num, int line_counter) {
        if (level <= 0) {
            Functions.showError(MultilanguageManagement.getError_16(), GM_account_filename, (GM_num + 1), line_counter, level);
            level = -1;
        } else {
            if (level > 99) {
                // , GM_account_filename, GM_num+1, level
                Functions.showNotice(MultilanguageManagement.getNotice_18(), GM_account_filename, (GM_num + 1), level);
                level = 99;
            }
        }
        return level;
    }

    // ----------------------------------------------------------------------
    // Adds a new GM using acc id and level
    // ----------------------------------------------------------------------
    /**
     * @param account_id
     * @param level
     */
    public static boolean addGM(int account_id, int level) {
        boolean do_add = false;
        if (Login.getDbManagemtType().getUser(account_id) != null) {
            do_add = true;
        }
        if (getGM(account_id) != null) {
            if (getGMLevel(account_id) == level) {
                Functions.showWarning(MultilanguageManagement.getWarning_43(), account_id, level);
                return false;
            } else {
                Functions.showWarning(MultilanguageManagement.getWarning_44(), account_id, getGMLevel(account_id), level);
                getGM(account_id).setLevel(level);
            }
            return true;
        }
        // if new account
        if (ConfigurationManagement.getGMMax() > UserManagement.getNBGM() && do_add) {
            Auth_data nGM = new Auth_data();
            nGM.setLevel(level);
            gm_account_db.put(account_id, nGM.getLevel());
            if (UserManagement.getNBGM() >= ConfigurationManagement.getGMMax()) {
                Functions.showWarning(MultilanguageManagement.getWarning_45(), ConfigurationManagement.getGMMax());
                Login.getDbManagemtType().login_log("""", """", ""0"", String.format(MultilanguageManagement.getLogin_log_46(), ConfigurationManagement.getGMMax()));
            }
            return true;
        }
        return false;
    }

    public static void remove_online_user(Integer account_id) {
        if (account_id == 99)
            online_db_final();
        else
            online_db.remove(account_id);
    }

    public static boolean is_user_online(Integer account_id) {
        return online_db.contains(account_id);
    }

    public static int getNBUser() {
        return getAuth_dats().size();
    }

    public static int getNBGM() {
        return gm_account_db.size();
    }

    public static int charif_sendallwos(int sfd, int[] buf) {
        Integer i, c = 0, fd;
        for (i = 0; i < char_sessions.size(); i++) {
            fd = char_sessions.get(i).getAccount_id();
            if (fd >= 0 && fd != sfd) {
                sessions.get(i).func_send(buf);
                c++;
            }
        }
        return c;
    }

    public static int charif_sendallwos(int sfd, byte[] buf) {
        Integer i, c = 0, fd;
        for (i = 0; i < char_sessions.size(); i++) {
            fd = char_sessions.get(i).getAccount_id();
            if (fd >= 0 && fd != sfd) {
                sessions.get(i).func_send(buf);
                c++;
            }
        }
        return c;
    }

    public static synchronized Auth_data addUserTXT(String userid, String password, String email, char sex) {
        Auth_data new_account = new Auth_data();
        int account_id = account_id_count++;
        new_account.setAccount_id(account_id);
        new_account.setUserid(userid);
        new_account.setSex(sex);
        new_account.setLogincount(0);
        new_account.setState(0);
        if (Functions.e_mail_check(email))
            new_account.setEmail(email);
        else
            new_account.setEmail(""-"");
        Calendar datetmp = Calendar.getInstance();
        datetmp.setTimeInMillis(0);
        // new_account.setBan_until_time(datetmp);
        if (ConfigurationManagement.getLoginAthenaConf().getStart_limited_time() < 0) {
            // unlimited
            datetmp.setTimeInMillis(0);
        } else {
            datetmp.setTimeInMillis(datetmp.getTimeInMillis() + ConfigurationManagement.getLoginAthenaConf().getStart_limited_time());
        }
        // new_account.setConnect_until_time(datetmp);
        new_account.setLast_ip(null);
        if (ConfigurationManagement.getLoginAthenaConf().isUse_md5_passwds()) {
            // TODO fixe creation of encryted password
            // new_account.setPass(Functions.encryptePassword(password));
        } else
            new_account.setPass(password);
        return addUser(new_account);
    }

    public static synchronized int isGM(long account_id) {
        Auth_data tmp = getAuth_dats().get(account_id);
        if (tmp != null) {
            return (Integer) gm_account_db.get(account_id);
        }
        tmp = null;
        return -1;
    }

    public static synchronized void setAccountIdCount(int aic) {
        account_id_count = aic;
    }

    public static synchronized int getAccountIdCount() {
        return account_id_count;
    }

    public static synchronized void addAccountIdCount() {
        account_id_count++;
    }

    public static synchronized void addAccountIdCount(int nb) {
        account_id_count += nb;
    }

    public static Auth_data getUserTxt(Integer account_id) {
        return auth_dats.get(account_id);
    }

    public static Auth_data getUserTxt(String user_id) {
        Integer accountID = index_userid_accountid.get(user_id);
        if (accountID != null)
            return getAuth_dats().get(accountID);
        else
            return null;
    }

    public static Auth_data getUserSQL(Integer account_id) {
        String sql = String.format(""SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'"", MySQLConfig.getLogin_db_account_id(), MySQLConfig.getLogin_db_userid(), MySQLConfig.getLogin_db_user_pass(), MySQLConfig.getLogin_db_level(), MySQLConfig.getLogin_db(), MySQLConfig.getLogin_db_account_id(), account_id);
        try {
            ResultSet result = MySQLConfig.executeQuery(sql);
            return getUserSQL(result);
        } catch (SQLException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public static Auth_data getUserSQL(ResultSet result) throws SQLException {
        Auth_data user = null;
        if (result.next()) {
            user = new Auth_data();
            user.setAccount_id(result.getInt(1));
            user.setUserid(result.getString(2));
            user.setPass(result.getString(3));
            Calendar lastlogin = Calendar.getInstance();
            try {
                String dateStr = result.getString(4);
                if (!dateStr.equals(""00-00-00 00:00:00""))
                    lastlogin.setTime(result.getDate(4));
                else
                    lastlogin.setTimeInMillis(0);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            user.setLastlogin(lastlogin);
            user.setLogincount(result.getInt(5));
            user.setSex(result.getString(6).charAt(0));
            Calendar cut = Calendar.getInstance();
            cut.setTimeInMillis(result.getInt(7));
            ;
            // user.setConnect_until_time(cut);
            user.setLast_ip(result.getString(8));
            Calendar but = Calendar.getInstance();
            but.setTimeInMillis(result.getInt(9));
            // user.setBan_until_time(but);
            user.setState(result.getInt(10));
            user.setLevel(result.getInt(11));
            user.setEmail(result.getString(12));
            return new Auth_data_SQL(user);
        }
        return null;
    }

    public static Auth_data getUserSQL(String user_id) {
        String sql = String.format(""SELECT `%s`,`%s`,`%s`,`lastlogin`,`logincount`,`sex`,`connect_until`,`last_ip`,`ban_until`,`state`,`%s`,`email` FROM `%s` WHERE BINARY `%s`='%s'"", MySQLConfig.getLogin_db_account_id(), MySQLConfig.getLogin_db_userid(), MySQLConfig.getLogin_db_user_pass(), MySQLConfig.getLogin_db_level(), MySQLConfig.getLogin_db(), MySQLConfig.getLogin_db_userid(), user_id);
        try {
            ResultSet result = MySQLConfig.executeQuery(sql);
            return getUserSQL(result);
        } catch (SQLException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public static Integer getAccountID(String user_id) {
        return index_userid_accountid.get(user_id);
    }

    public static void unLogServer(Socket_data socket_data) {
        sessions.remove(socket_data);
        char_sessions.remove(socket_data);
        online_db.remove(socket_data.getAccount_id());
    }

    public static FastMap<Integer, Auth_data> getAuth_dats() {
        return auth_dats;
    }

    public static FastTable<Integer> getAccountIds() {
        Object[] en = getAuth_dats().keySet().toArray();
        FastTable<Integer> col = new FastTable<Integer>();
        for (int i = 0; i < en.length; i++) col.add((Integer) en[i]);
        return col;
    }

    private static int getGMLevel(Integer id) {
        return gm_account_db.get(id);
    }

    private static Auth_data getGM(int account_id) {
        Integer level = gm_account_db.get(account_id);
        if (level != null && level > 0)
            return Login.getDbManagemtType().getUser(account_id);
        else
            return null;
    }

    public static void connectionOfClientEncrypted(Socket_data session) {
        Auth_data userAccount;
        byte[] data = new byte[45];
        session.func_recv(data);
        String userid = """";
        String password = """";
        int version = Functions.byteTabToInt(0, 4, data);
        userid = Functions.unsignedBytesToString(data, 4, 27).trim();
        password = Functions.unsignedBytesToString(data, 28, 16).trim();
        userAccount = Login.getDbManagemtType().getUser(userid);
        String MD5 = session.getMd5key();
        int length = userid.length();
        char lastChar = userid.toUpperCase().charAt(length - 1);
        if (userid.charAt(length - 2) == '_' && (lastChar == 'F' || lastChar == 'M')) {
            userAccount = Login.getDbManagemtType().getUser(userid.substring(0, length - 2));
            if (userAccount != null) {
                return;
            }
        } else {
            userAccount = Login.getDbManagemtType().getUser(userid);
        }
    }

    public static void changeSexChrif_changesex(Socket_data session) {
        byte[] data = new byte[2];
        session.func_recv(data);
        // TODO reengenier
        int length = Functions.byteTabToInt(0, 2, data);
        data = new byte[length - 4];
        int accountid = Functions.byteTabToInt(0, 2, data);
        int sex = Functions.byteTabToInt(2, 4, data);
        Auth_data userTempo = Login.getDbManagemtType().getUser(accountid);
        String ip = session.getIpStr();
        if (userTempo != null) {
            Login.getDbManagemtType().login_log(ip, userTempo.getUserid(), """", String.format(MultilanguageManagement.getLogin_log_47() + Constants.NEWLINE, session.getName(), accountid, (sex == 2) ? 'S' : (sex == 1 ? 'M' : 'F'), session.getIpStr()));
            userTempo.setSex((sex == 2) ? 'S' : (sex == 1 ? 'M' : 'F'));
            userTempo.setLogin_id1(userTempo.getLogin_id1() + 1);
            int[] buff = new int[16];
            Functions.intToIntTab(0x2723, 0, 2, buff);
            Functions.intToIntTab(accountid, 2, 4, buff);
            Functions.intToIntTab(sex, 2, 4, buff);
            charif_sendallwos(-1, buff);
        } else {
            Login.getDbManagemtType().login_log(ip, ""none"", """", String.format(MultilanguageManagement.getLogin_log_48() + Constants.NEWLINE, session.getName(), accountid, (sex == 2) ? 'S' : (sex == 1 ? 'M' : 'F'), session.getIpStr()));
        }
    }

    /**
     * login request by an admin
     *
     * @param Socket_data
     */
    public static void administationLogin(Socket_data session) {
        boolean encrypted = session.func_recv() != 0;
        byte[] donnes;
        if (encrypted)
            donnes = new byte[17];
        else
            donnes = new byte[25];
        session.func_recv(donnes);
    }

    public static Auth_data addUserSQL(String userid, String password, String email, int sex) {
        Auth_data_SQL new_accountSQL;
        try {
            new_accountSQL = new Auth_data_SQL(userid, password, email, sex);
            Auth_data new_account = addUser(new_accountSQL);
            return new_account;
        } catch (SQLException ex) {
            ex.printStackTrace();
            return null;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public static void dynamicFailBanCheckMySQL(String ipStr) {
        String sql = String.format(""SELECT count(*) FROM `%s` WHERE `ip` = '%s' AND `rcode` = '1' AND `time` > NOW() - INTERVAL %d MINUTE"", MySQLConfig.getLoginlog_db(), ipStr, 0);
        try {
            ResultSet anwser = MySQLConfig.executeQuery(sql);
            if (anwser.next()) {
                addIpToBanListMySQL(ipStr);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public static void addIpToBanListMySQL(String ipStr) throws SQLException {
        byte[] ipTab = Functions.ipStringToByteTab(ipStr);
        String sql = String.format(""INSERT INTO `ipbanlist`(`list`,`btime`,`rtime`,`reason`) VALUES ('%d.%d.%d.*', NOW() , NOW() +  INTERVAL %d MINUTE ,'Password error ban:')"", ipTab[0], ipTab[1], ipTab[2], ConfigurationManagement.getLoginAthenaConf().getDynamic_pass_failure_ban_duration());
        MySQLConfig.executeUpdate(sql);
    }

    public static void dynamicFailBanCheckTXT(String ip) {
        Integer nb = dynamicFailBanCheck.get(ip);
        if (nb == null)
            nb = 0;
        if (nb >= 10)
            ConfigurationManagement.getLoginAthenaConf().addToBanListTXT(ip);
        else
            dynamicFailBanCheck.put(ip, ++nb);
    }

    public static void sendUserList(Socket_data session) {
        byte[] data = new byte[8];
        int start = Functions.byteTabToInt(0, 4, data);
        int end = Functions.byteTabToInt(4, 8, data);
        byte[] dataToSend = new byte[(38 * account_ids.size()) + 4];
        int length = 4;
        account_ids.sort();
        for (int i = 0; account_ids.get(i) < account_ids.size() && account_ids.get(i) > start && account_ids.get(i) < end; i++) {
            Integer accountId = account_ids.get(i);
            Auth_data account = Login.getDbManagemtType().getUser(accountId);
            Functions.intToByteTab(accountId, length, length + 4, dataToSend);
            Functions.intToByteTab(isGM(accountId), length + 4, length + 5, dataToSend);
            Functions.stringToByteTable(account.getUserid(), dataToSend, length + 5, length + 29);
            length += 38;
        }
    }

    public static void unban(Socket_data session) {
        byte[] data = new byte[4];
        session.func_recv(data);
        int acc = Functions.byteTabToInt(0, 4, data);
        Auth_data account = Login.getDbManagemtType().getUser(acc);
        if (account != null) {
            /*
			 * if(account.getBan_until_time().getTimeInMillis() != 0) {
			 * Login.getDbManagemtType()
			 * .login_log(session.getIpStr(),"""",""0"",String.format
			 * (MultilanguageManagement.getWarning_46(), session.getName(), acc,
			 * session.getIpStr())); Calendar bantime = Calendar.getInstance();
			 * bantime.setTimeInMillis(0); account.setBan_until_time(bantime); }
			 * else { Login.getDbManagemtType().login_log(session.getIpStr(),
			 * """", ""0"",String.format(MultilanguageManagement.getWarning_10() ,
			 * session.getName(), acc, session.getIpStr())); }
			 */
        }
    }

    public static void debugXML() {
        XStream xstream = new XStream(new DomDriver());
        System.out.println(xstream.toXML(getAuth_dats()));
    }

    public static void setAuth_dats(FastMap<Integer, Auth_data> aAuth_dats) {
        auth_dats = aAuth_dats;
        hashIndexAuth();
    }

    private static void hashIndexAuth() {
        Iterator<Auth_data> it = auth_dats.values().iterator();
        while (it.hasNext()) {
            Auth_data tmp = it.next();
            index_userid_accountid.put(tmp.getUserid(), tmp.getAccount_id());
            // all accont_ids
            account_ids.add(tmp.getAccount_id());
        }
    }

    public static void receiveAllOnlinAccounts(Socket_data session, byte[] packet) {
        if (charServerIndex.get(session.getAccount_id()) != null) {
            // Set all chars from this char-server offline first
            for (Integer i : charServerIndex.get(session.getAccount_id())) {
                online_db.remove(i);
            }
        }
    }

    public static void requestAccountData(Socket_data session, byte[] packet) {
        Auth_data acc;
        int expiration_time = 0;
        String email = """";
        int gmlevel = 0;
        byte[] answer = new byte[51];
        int accountId = Functions.byteTabToInt(2, 6, packet);
        acc = Login.getDbManagemtType().getUser(accountId);
        if (acc == null) {
            Functions.showNotice(""Char-server '%s': account %d NOT found (ip: %s).\n"", session.getName(), accountId, session.getIpStr());
        } else {
            email = acc.getEmail();
            expiration_time = (int) acc.getConnect_until_time();
            gmlevel = acc.getLevel();
        }
        Functions.intToByteTab(0x2717, 0, 2, answer);
        Functions.intToByteTab(accountId, 2, 6, answer);
        Functions.stringToByteTable(email, answer, 6, 46);
        Functions.intToByteTab(expiration_time, 46, 50, answer);
        Functions.intToByteTab(gmlevel, 50, 52, answer);
        session.func_send(answer);
        System.out.printf(""[%d"", answer[0]);
        for (int i = 1; i < answer.length; i++) {
            System.out.printf("",%d"", Functions.unsignedByteToInt(answer[i]));
        }
        System.out.println(""]"" + answer.length);
    }

    public static void requestAccountReg2(Socket_data session, byte[] packet) {
        // = new byte[13 + key1.lenght + 1 + value1.lenght + 1 +
        byte[] answer;
        // key2.lenght + 1 + value2.lenght + 1 + keyN.lenght + 1
        // + valueN.lenght + 1]
        int accountId = Functions.byteTabToInt(2, 6, packet);
        int charId = Functions.byteTabToInt(6, 10, packet);
        Auth_data account = Login.getDbManagemtType().getUser(accountId);
        String regs2StrValue = """";
        if (account != null) {
            FastMap<String, String> regs2 = account.getAccount_reg2();
            Set<Map.Entry<String, String>> keys = regs2.entrySet();
            for (Map.Entry<String, String> me : keys) {
                regs2StrValue += me.getKey() + '\0' + me.getValue() + '\0';
            }
        }
        answer = new byte[13 + regs2StrValue.length()];
        Functions.intToByteTab(0x2729, 0, 2, answer);
        Functions.intToByteTab(answer.length, 2, 4, answer);
        Functions.intToByteTab(accountId, 4, 8, answer);
        Functions.intToByteTab(charId, 8, 12, answer);
        answer[12] = 1;
        Functions.stringToByteTable(regs2StrValue, answer, 13, answer.length);
        /*
		 * System.out.printf(""[%d"", answer[0]); for (int i = 1; i <
		 * answer.length; i++) { System.out.printf("", %d"", answer[i]); }
		 * System.out.println(""]"");
		 */
        session.func_send(answer);
        System.out.printf(""[%d"", answer[0]);
        for (int i = 1; i < answer.length; i++) {
            System.out.printf("",%d"", Functions.unsignedByteToInt(answer[i]));
        }
        System.out.println(""]"" + answer.length);
    }
}
","// UserManagement_8Test.java
package org.javathena.login;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.sql.data.Auth_data_SQL;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserManagement}.
* It contains ten unit test cases for the {@link UserManagement#addGM(int, int)} method.
*/
class UserManagement_8Test {","// UserManagement_8Test.java
package org.javathena.login;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.sql.data.Auth_data_SQL;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import javolution.util.FastMap;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserManagement}.
* It contains ten unit test cases for the {@link UserManagement#addGM(int, int)} method.
*/
class UserManagement_8Test {
"
db96a81f-1f5b-4f9e-8893-6be7f951292e,/EvoSuiteBenchmark/81_javathena/src/main/java/org/javathena/utiles/ConfigurationManagement_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8816 tokens (6816 in your prompt; 2000 for the completion). Please reduce your prompt; or completion length.","// ConfigurationManagement.java
/*
 * ConfigurationManagement.java
 *
 * Created on 5 avril 2006, 19:57
 *
 * Translate from Eathena(c) by darksid_1@htomail.com
 */
package org.javathena.utiles;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import org.javathena.conf.LoginAthena;
import org.javathena.core.data.SubNetConf;
import org.javathena.core.utiles.ACO;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import javolution.util.FastTable;

//import javathena.login.*;
/**
 * @author Darksid_1
 */
public class ConfigurationManagement {

    private static LoginAthena loginAthenaConf;

    private static int server_num;

    // [16];
    private static String lan_char_ip;

    // [4];
    private static int[] subneti;

    // [4];
    private static int[] subnetmaski;

    // Counter. First save when
    private static int auth_before_save_file = 0;

    // 1st char-server do
    // connection.
    private static long new_reg_tick;

    private static long num_regs;

    private static ACO access_order;

    private static int access_allownum;

    private static int access_denynum;

    private static String access_allow;

    private static String access_deny;

    private static long startLimitedTime;

    private static int GMMax;

    private static String timestamp_format;

    private static boolean console_silent;

    private static String wisp_server_name;

    private static boolean login_ip_set_;

    private static int email_creation;

    private static String char_txt;

    private static String scdata_txt;

    private static String backup_txt;

    private static String friends_txt;

    private static String backup_txt_flag;

    private static String max_connect_user;

    private static int gm_allow_level;

    private static int autosave_time;

    private static int autosave_interval;

    private static FastTable<SubNetConf> subNetConfs;

    private static int char_id_count;

    private static String lan_map_ip;

    static {
        loginAthenaConf = new LoginAthena();
        subNetConfs = new FastTable<SubNetConf>();
        getLoginAthenaConf().setLogin_port(Constants.DEFAULT_LOGIN_PORT);
        startLimitedTime = -1;
        GMMax = 30;
    }

    /**
     * Creates a new instance of ConfigurationManagement
     */
    private ConfigurationManagement() {
    }

    public static int login_lan_config_read(String lancfgName) {
        int j;
        File fp;
        // set default configuration
        lan_char_ip = ""127.0.0.1"";
        subneti[0] = 127;
        subneti[1] = 0;
        subneti[2] = 0;
        subneti[3] = 1;
        for (j = 0; j < 4; j++) subnetmaski[j] = 255;
        fp = new File(lancfgName);
        if (fp == null || !fp.exists()) {
            Functions.showWarning(MultilanguageManagement.getWarning_1(), lancfgName);
            return 1;
        }
        Functions.showInfo(MultilanguageManagement.getInfo_2(), lancfgName);
        String lu = null;
        try {
            lu = Functions.readConf(fp);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        StringTokenizer stLu = new StringTokenizer(lu, "":"");
        String param = stLu.nextElement().toString();
        if (param.equals(""subnet"")) {
            String subnet = stLu.nextElement().toString();
            StringTokenizer subip = new StringTokenizer(subnet, "":./"");
            for (j = 0; j < 4; j++) subneti[j] = Integer.parseInt(subip.nextElement().toString().trim());
            for (j = 0; j < 4; j++) subnetmaski[j] = Integer.parseInt(subip.nextElement().toString());
            lan_char_ip = stLu.nextElement().toString().trim();
            lan_map_ip = stLu.nextElement().toString().trim();
        }
        Functions.showInfo(MultilanguageManagement.getInfo_3(), lancfgName);
        return 0;
    }

    /**
     * -----------------------------------
     *  Reading general configuration file
     * ---------------------------------
     */
    public static int login_config_readTXT(String cfgName) {
        // setLoginAthenaConf(new LoginAthena());
        int j;
        File fp;
        // set default configuration
        lan_char_ip = ""127.0.0.1"";
        subneti[0] = 127;
        subneti[1] = 0;
        subneti[2] = 0;
        subneti[3] = 1;
        for (j = 0; j < 4; j++) subnetmaski[j] = 255;
        fp = new File(cfgName);
        if (fp == null || !fp.exists()) {
            Functions.showWarning(MultilanguageManagement.getWarning_2(), cfgName);
            return 1;
        }
        String lu = null;
        Functions.showInfo(MultilanguageManagement.getInfo_2(), cfgName);
        try {
            lu = Functions.readConf(fp);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        //String ladminallowip = """";
        int indArg = -1;
        if ((indArg = lu.lastIndexOf(""timestamp_format"")) != -1) {
            loginAthenaConf.setTimestamp_format(lu.substring(lu.indexOf(':', indArg) + 2, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""stdout_with_ansisequence"")) != -1) {
            loginAthenaConf.setStdout_with_ansisequence(Functions.config_switch((lu.substring(lu.indexOf(':', indArg) + 2, lu.indexOf('\n', indArg))).trim()) == 1);
        }
        if ((indArg = lu.lastIndexOf(""console_silent"")) != -1) {
            loginAthenaConf.setStdout_with_ansisequence(Functions.config_switch((lu.substring(lu.indexOf(':', indArg) + 2, lu.indexOf('\n', indArg))).trim()) == 1);
        }
        if ((indArg = lu.lastIndexOf(""console_silent"")) != -1) {
            Functions.showWarning(""Sorry niy"");
        }
        if ((indArg = lu.lastIndexOf(""login_port"")) != -1) {
            loginAthenaConf.setLogin_port(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 2, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""log_login"")) != -1) {
            loginAthenaConf.setLog_login(Functions.config_switch(lu.substring(lu.indexOf(':', indArg) + 2, lu.indexOf('\n', indArg)).trim()) == 1);
        }
        if ((indArg = lu.lastIndexOf(""new_account"")) != -1) {
            loginAthenaConf.setNew_account_flag(Functions.config_switch(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()) == 1);
        }
        if ((indArg = lu.lastIndexOf(""start_limited_time"")) != -1) {
            loginAthenaConf.setStart_limited_time(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""check_client_version"")) != -1) {
            loginAthenaConf.setCheck_client_version((Functions.config_switch(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()) == 1));
        }
        if ((indArg = lu.lastIndexOf(""client_version_to_connect"")) != -1) {
            loginAthenaConf.setClient_version_to_connect(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""use_MD5_passwords"")) != -1) {
            loginAthenaConf.setUse_MD5_passwords(Functions.config_switch((lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim())) == 1);
        }
        if ((indArg = lu.lastIndexOf(""min_level_to_connect"")) != -1) {
            loginAthenaConf.setMin_level_to_connect(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""date_format"")) != -1) {
            loginAthenaConf.setDate_format(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""console"")) != -1) {
            loginAthenaConf.setConsole((Functions.config_switch(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()) == 1));
        }
        if ((indArg = lu.lastIndexOf(""allowed_regs"")) != -1) {
            loginAthenaConf.setAllowed_regs(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""time_allowed"")) != -1) {
            loginAthenaConf.setTime_allowed(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""use_dnsbl"")) != -1) {
            loginAthenaConf.setUse_dnsbl((Functions.config_switch(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()) == 1));
        }
        if ((indArg = lu.lastIndexOf(""dnsbl_servers"")) != -1) {
            loginAthenaConf.setDnsbl_servs(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""ipban_cleanup_interval"")) != -1) {
            loginAthenaConf.setIpban_cleanup_interval(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""ip_sync_interval"")) != -1) {
            loginAthenaConf.setIp_sync_interval(Integer.parseInt(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim()));
        }
        if ((indArg = lu.lastIndexOf(""admin_state"")) != -1) {
            loginAthenaConf.setAdmin_state((Functions.config_switch((lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim())) == 1));
        }
        if ((indArg = lu.lastIndexOf(""admin_pass"")) != -1) {
            loginAthenaConf.setAdmin_pass(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""admin_allowed_host"")) != -1) {
            loginAthenaConf.setAdmin_allowed_host(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""import:"")) != -1) {
            login_config_readTXT(lu.substring(indArg + 1, lu.indexOf('\n', indArg)).trim());
        }
        if ((indArg = lu.lastIndexOf(""account.engine"")) != -1) {
            loginAthenaConf.setAccount_engine(lu.substring(lu.indexOf(':', indArg) + 1, lu.indexOf('\n', indArg)).trim());
        }
        /*

		if(!strcmpi(w1, ""account.engine""))
			safestrncpy(login_config.account_engine, w2, sizeof(login_config.account_engine));
		else
		{// try the account engines
			int i;
			for( i = 0; account_engines[i].constructor; ++i )
			{
				AccountDB* db = account_engines[i].db;
				if( db && db->set_property(db, w1, w2) )
					break;
			}
			// try others
			ipban_config_read(w1, w2);
			loginlog_config_read(w1, w2);
		}
	}*/
        Functions.showInfo(MultilanguageManagement.getInfo_3(), cfgName);
        return 0;
    }

    public static boolean yesNoOnOffToBoolean(String anw) {
        anw = anw.toUpperCase();
        if (anw.equals(""YES"") || anw.equals(""ON""))
            return true;
        if (anw.equals(""NO"") || anw.equals(""OFF""))
            return false;
        throw new IllegalArgumentException(""anw doit etre egale a yes/no/on/off"");
    }

    public static void display_conf_warnings() {
        if (getLoginAthenaConf().getAdmin_state()) {
            if (getLoginAthenaConf().getAdmin_pass() == null) {
                Functions.showWarning(MultilanguageManagement.getWarning_4());
            } else if (getLoginAthenaConf().getAdmin_pass().equals(""admin"")) {
                Functions.showWarning(MultilanguageManagement.getWarning_5());
                Functions.showWarning(MultilanguageManagement.getWarning_6());
            }
        }
        if (getLoginAthenaConf().getLogin_port() < 1024 || getLoginAthenaConf().getLogin_port() > 65535) {
            Functions.showWarning(MultilanguageManagement.getWarning_13());
            getLoginAthenaConf().setLogin_port(6900);
        }
        if (getLoginAthenaConf().getMin_level_to_connect() < 0) {
            // 0: all players, 1-99 at least gm level x
            Functions.showWarning(MultilanguageManagement.getWarning_18(), getLoginAthenaConf().getMin_level_to_connect());
            getLoginAthenaConf().setMin_level_to_connect(0);
        } else if (getLoginAthenaConf().getMin_level_to_connect() > 99) {
            // 0: all players, 1-99 at least gm level x
            Functions.showWarning(MultilanguageManagement.getWarning_19(), getLoginAthenaConf().getMin_level_to_connect());
            getLoginAthenaConf().setMin_level_to_connect(99);
        }
        if (getLoginAthenaConf().getStart_limited_time() < -1) {
            // -1: create unlimited account, 0 or more: additionnal sec from now
            // to create limited time
            Functions.showWarning(MultilanguageManagement.getWarning_22());
            Functions.showWarning(MultilanguageManagement.getWarning_23());
            getLoginAthenaConf().setStart_limited_time(-1);
        }
        if (access_order == ACO.DENY_ALLOW) {
            if (access_denynum == 1 && access_deny == null) {
                Functions.showWarning(MultilanguageManagement.getWarning_26());
            }
        } else if (access_order == ACO.ALLOW_DENY) {
            if (access_allownum == 0) {
                Functions.showWarning(MultilanguageManagement.getWarning_27());
            }
        } else {
            // ACO_MUTUAL_FAILTURE
            if (access_allownum == 0) {
                Functions.showWarning(MultilanguageManagement.getWarning_28());
                Functions.showWarning(MultilanguageManagement.getWarning_29());
                Functions.showWarning(MultilanguageManagement.getWarning_30());
            } else if (access_denynum == 1 && access_deny == null) {
                Functions.showWarning(MultilanguageManagement.getWarning_31());
                Functions.showWarning(MultilanguageManagement.getWarning_32());
                Functions.showWarning(MultilanguageManagement.getWarning_33());
            }
        }
        if (getLoginAthenaConf().isDynamic_pass_failure_ban()) {
        }
        return;
    }

    public static void setStart_limited_time(long aStart_limited_time) {
        startLimitedTime = aStart_limited_time;
    }

    public static int getGMMax() {
        return GMMax;
    }

    public static void setGMMax(int aGMMax) {
        GMMax = aGMMax;
    }

    public static void addGMMax(int aGMMax) {
        aGMMax += aGMMax;
    }

    public static void addGMMax() {
        GMMax++;
    }

    public static int getServer_num() {
        return server_num;
    }

    public static void setServer_num(int aServer_num) {
        server_num = aServer_num;
    }

    public static String getLan_char_ip() {
        return lan_char_ip;
    }

    public static void setLan_char_ip(String aLan_char_ip) {
        lan_char_ip = aLan_char_ip;
    }

    public static int[] getSubneti() {
        return subneti;
    }

    public static void setSubneti(int[] aSubneti) {
        subneti = aSubneti;
    }

    public static int[] getSubnetmaski() {
        return subnetmaski;
    }

    public static void setSubnetmaski(int[] aSubnetmaski) {
        subnetmaski = aSubnetmaski;
    }

    public static long getNew_reg_tick() {
        return new_reg_tick;
    }

    public static void setNew_reg_tick(long aNew_reg_tick) {
        new_reg_tick = aNew_reg_tick;
    }

    public static long getNum_regs() {
        return num_regs;
    }

    public static void setNum_regs(long aNum_regs) {
        num_regs = aNum_regs;
    }

    public static void addNum_regs(long aNum_regs) {
        num_regs += aNum_regs;
    }

    public static void addNum_regs() {
        num_regs++;
    }

    public static ACO getAccess_order() {
        return access_order;
    }

    public static void setAccess_order(ACO aAccess_order) {
        access_order = aAccess_order;
    }

    public static int getAccess_allownum() {
        return access_allownum;
    }

    public static void setAccess_allownum(int aAccess_allownum) {
        access_allownum = aAccess_allownum;
    }

    public static int getAccess_denynum() {
        return access_denynum;
    }

    public static void setAccess_denynum(int aAccess_denynum) {
        access_denynum = aAccess_denynum;
    }

    public static String getAccess_allow() {
        return access_allow;
    }

    public static void setAccess_allow(String aAccess_allow) {
        access_allow = aAccess_allow;
    }

    public static String getAccess_deny() {
        return access_deny;
    }

    public static void setAccess_deny(String aAccess_deny) {
        access_deny = aAccess_deny;
    }

    public static long getStartLimitedTime() {
        return startLimitedTime;
    }

    public static void setStartLimitedTime(long aStartLimitedTime) {
        startLimitedTime = aStartLimitedTime;
    }

    public static int lesslessAuth_before_save_file() {
        return --auth_before_save_file;
    }

    public static int getAuth_before_save_file() {
        return auth_before_save_file;
    }

    public static void setAuth_before_save_file(int aAuth_before_save_file) {
        auth_before_save_file = aAuth_before_save_file;
    }

    public static String getTimestamp_format() {
        return timestamp_format;
    }

    public static void setTimestamp_format(String aTimestamp_format) {
        timestamp_format = aTimestamp_format;
    }

    public static boolean isConsole_silent() {
        return console_silent;
    }

    public static void setConsole_silent(boolean aConsole_silent) {
        console_silent = aConsole_silent;
    }

    public static String getWisp_server_name() {
        return wisp_server_name;
    }

    public static String getLogin_ip_str() {
        return getLoginAthenaConf().getBind_ip_str();
    }

    public static boolean isLogin_ip_set_() {
        return login_ip_set_;
    }

    public static int getEmail_creation() {
        return email_creation;
    }

    public static String getChar_txt() {
        return char_txt;
    }

    public static String getScdata_txt() {
        return scdata_txt;
    }

    public static String getBackup_txt() {
        return backup_txt;
    }

    public static String getFriends_txt() {
        return friends_txt;
    }

    public static String getBackup_txt_flag() {
        return backup_txt_flag;
    }

    public static String getMax_connect_user() {
        return max_connect_user;
    }

    public static int getGm_allow_level() {
        return gm_allow_level;
    }

    public static int getAutosave_time() {
        return autosave_time;
    }

    public static int getAutosave_interval() {
        return autosave_interval;
    }

    public static void setLogin_ip_str(String aLogin_ip_str) {
        getLoginAthenaConf().setBind_ip_str(aLogin_ip_str);
    }

    public static int getChar_id_count() {
        return char_id_count;
    }

    public static void setChar_id_count(int aChar_id_count) {
        char_id_count = aChar_id_count;
    }

    public static void addChar_id_count(int aChar_id_count) {
        char_id_count += aChar_id_count;
    }

    public static void addChar_id_count() {
        char_id_count++;
    }

    public static int login_config_readXML(String cfgName) {
        File gmacc = new File(cfgName);
        if (!gmacc.exists() && gmacc.length() != 0) {
            Functions.showError(MultilanguageManagement.getError_1(), loginAthenaConf.getAccount_filename());
            return 1;
        }
        try {
            XStream xstream = new XStream(new DomDriver());
            setLoginAthenaConf((LoginAthena) xstream.fromXML(Functions.readConf(gmacc)));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return 0;
    }

    private static void setLoginAthenaConf(LoginAthena loginAthenaConfa) {
        loginAthenaConf = loginAthenaConfa;
    }

    public static LoginAthena getLoginAthenaConf() {
        return loginAthenaConf;
    }
}
","// ConfigurationManagement_1Test.java
package org.javathena.utiles;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import org.javathena.conf.LoginAthena;
import org.javathena.core.data.SubNetConf;
import org.javathena.core.utiles.ACO;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManagement}.
* It contains ten unit test cases for the {@link ConfigurationManagement#login_config_readTXT(String)} method.
*/
class ConfigurationManagement_1Test {","// ConfigurationManagement_1Test.java
package org.javathena.utiles;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.io.File;
import java.io.IOException;
import java.util.StringTokenizer;
import org.javathena.conf.LoginAthena;
import org.javathena.core.data.SubNetConf;
import org.javathena.core.utiles.ACO;
import org.javathena.core.utiles.Constants;
import org.javathena.core.utiles.Functions;
import org.javathena.core.utiles.MultilanguageManagement;
import javolution.util.FastTable;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConfigurationManagement}.
* It contains ten unit test cases for the {@link ConfigurationManagement#login_config_readTXT(String)} method.
*/
class ConfigurationManagement_1Test {
"
