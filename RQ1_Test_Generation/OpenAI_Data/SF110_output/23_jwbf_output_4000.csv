ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uCtAnqG69i1EoWpEO4L06z9tHZaC,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_0Test.java,103.68680262565613,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {

		private static final Map<String, String> PARTS = new HashMap<String, String>();
		
		private static String version = """";
		
		private static String title = """";
		
		private static Manifest manifest = null;
		
		private static final char separatorChar = '/';
		
		private static boolean errorInfo = true;
		
		static {
			init(JWBF.class);
			/*
			String[] cp = System.getProperty(""java.class.path"").split("":"");
			for (int i = 0; i < cp.length; i++) {
				try {
					
					if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
						
					} else if (cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
					}
				} catch (Exception e) {
					System.err.println(cp[i] + "" seems to be no regular module"");
				}
				
			}
			*/
		}
		
		private static final String jarFileIndex = ""jar:file:"";
		
		private static void init(Class<?> clazz) {
			PARTS.clear();
			version = """";
			title = """";
			manifest = null;
			String packagename = clazz.getPackage().getName().replace('.', separatorChar);
			URL url = clazz.getClassLoader().getResource(packagename);
			boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
			if (isJar) {
				try {
					int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
					String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
					JarFile jar = new JarFile(jarFileName);
					Enumeration<JarEntry> je = jar.entries();
					while (je.hasMoreElements()) {
						JarEntry jarEntry = je.nextElement();
						String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
						if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
							registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				try {
					File root = new File(url.toURI());
					File[] dirs = root.listFiles(new FileFilter() {
						
						public boolean accept(File f) {
							return f.isDirectory();
						}
					});
					for (File dir : dirs) {
						int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
						String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
						registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
					}
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		/**
		*/
		private JWBF_0Test() {
			// do nothing
		}
		
		/**
		* @param artifactId
		*            a
		* @param version
		*            a
		*/
		private static void registerModule(String artifactId, String version) {
			PARTS.put(artifactId, version);
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getVersion(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[1];
			} catch (Exception e) {
				return ""Version Unknown"";
			}
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getPartId(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[0];
			} catch (Exception e) {
				return ""No Module for "" + clazz.getName();
			}
		}
		
		private static String[] getPartInfo(Class<?> clazz) {
			String classContainer = clazz.getPackage().getName().split(""\\."")[3];
			Iterable<String> keys = PARTS.keySet();
			for (String key : keys) {
				if (key.contains(classContainer)) {
					String[] result = { key, PARTS.get(key) };
					return result;
				}
			}
			return null;
		}
		
		/**
		* Prints the JWBF Version.
		*/
		public static void printVersion() {
			System.out.println(PARTS);
		}
		
		public static void main(String[] args) {
			printVersion();
		}
		
		/**
		* @return the JWBF Version.
		*/
		public static Map<String, String> getVersion() {
			return Collections.unmodifiableMap(PARTS);
		}
		
		/**
		* @param path
		*            a
		* @return the version from manifest
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFVersion(String path) throws IOException {
			if (version.length() < 1) {
				String implementationVersion = null;
				implementationVersion = readFromManifest(path, ""Implementation-Version"");
				if (implementationVersion == null) {
					version = ""DEVEL"";
				} else {
					version = implementationVersion;
				}
			}
			return version;
		}
		
		/**
		* @param path
		*            a
		* @return the
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFProductTitle(String path) throws IOException {
			if (title.length() < 1) {
				String implementationTitle = null;
				implementationTitle = readFromManifest(path, ""Implementation-Title"");
				if (implementationTitle == null) {
					title = ""jwbf-generic"";
				} else {
					title = implementationTitle;
				}
			}
			return title;
		}
		
		/**
		* @param path
		*            a
		* @param key
		*            a
		* @return value
		* @throws IOException
		*             if path invalid
		*/
		private static String readFromManifest(String path, String key) throws IOException {
			if (manifest == null) {
				URL manifestUrl;
				if (path.endsWith("".jar"")) {
					manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
				} else {
					if (!path.endsWith(File.separator))
						path += File.separatorChar;
					manifestUrl = searchMF(path);
				}
				if (manifestUrl != null)
					manifest = new Manifest(manifestUrl.openStream());
			}
			if (manifest == null) {
				if (errorInfo) {
					errorInfo = false;
					String msg = ""E: no MANIFEST.MF found, please create it."";
					System.err.println(msg);
				}
				return null;
			}
			return manifest.getMainAttributes().getValue(key);
		}
		
		private static URL searchMF(String f) throws IOException {
			if (f == null)
				return null;
			File fi = new File(f);
			String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
			if (new File(fi, foundE).exists()) {
				return new URL(""file:"" + fi + File.separatorChar + foundE);
			} else {
				return searchMF(fi.getParent());
			}
		}
		
		@Test
		void testGetVersion() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF.class));
		}
		
		@Test
		void testGetPartId() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF.class));
		}
		
		@Test
		void testGetVersion_1() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_0Test.class));
		}
		
		@Test
		void testGetPartId_1() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_0Test.class));
		}
		
		@Test
		void testGetVersion_2() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_1Test.class));
		}
		
		@Test
		void testGetPartId_2() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_1Test.class));
		}
		
		@Test
		void testGetVersion_3() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetPartId_3() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_4() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_3Test.class));
		}
		
		@Test
		void testGetPartId_4() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_3Test.class));
		}
		
		@Test
		void testGetVersion_5() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_4Test.class));
		}
		
		@Test
		void testGetPartId_5() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_4Test.class));
		}
		
		@Test
		void testGetVersion_6() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_5Test.class));
		}
		
		@Test
		void testGetPartId_6() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_5Test.class));
		}
		
		@Test
		void testGetVersion_7() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_6Test.class));
		}
		
		@Test
		void testGetPartId_7() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_6Test.class));
		}
		
		@Test
		void testGetVersion_8() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_7Test.class));
		}
		
		@Test
		void testGetPartId_8() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_7Test.class));
		}
		
		@Test
		void testGetVersion_9() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_8Test.class));
		}
		
		@Test
		void testGetPartId_9() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_8Test.class));
		}
		
		@Test
		void testGetVersion_10() {
			assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_9Test.class));
		}
		
		@Test
		void testGetPartId_10() {
			assertEquals(""jwbf-core-0.0.1-SNAPSHOT"", JWBF.getPartId(JWBF_9Test.class));
		}
		
		@Test
		void testGetVersion_11() {
			assertEquals(""0.0.1-SN"
cmpl-6uCuqpIIwiAVcWYDUQnnwL8f5ehjV,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_1Test.java,104.45565366744995,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {

		private static final Map<String, String> PARTS = new HashMap<String, String>();
		
		private static String version = """";
		
		private static String title = """";
		
		private static Manifest manifest = null;
		
		private static final char separatorChar = '/';
		
		private static boolean errorInfo = true;
		
		static {
			init(JWBF.class);
			/*
			String[] cp = System.getProperty(""java.class.path"").split("":"");
			for (int i = 0; i < cp.length; i++) {
				try {
					
					if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
						
					} else if (cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
					}
				} catch (Exception e) {
					System.err.println(cp[i] + "" seems to be no regular module"");
				}
				
			}
			*/
		}
		
		private static final String jarFileIndex = ""jar:file:"";
		
		private static void init(Class<?> clazz) {
			PARTS.clear();
			version = """";
			title = """";
			manifest = null;
			String packagename = clazz.getPackage().getName().replace('.', separatorChar);
			URL url = clazz.getClassLoader().getResource(packagename);
			boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
			if (isJar) {
				try {
					int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
					String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
					JarFile jar = new JarFile(jarFileName);
					Enumeration<JarEntry> je = jar.entries();
					while (je.hasMoreElements()) {
						JarEntry jarEntry = je.nextElement();
						String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
						if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
							registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				try {
					File root = new File(url.toURI());
					File[] dirs = root.listFiles(new FileFilter() {
						
						public boolean accept(File f) {
							return f.isDirectory();
						}
					});
					for (File dir : dirs) {
						int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
						String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
						registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
					}
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		/**
		*/
		private JWBF_1Test() {
			// do nothing
		}
		
		/**
		* @param artifactId
		*            a
		* @param version
		*            a
		*/
		private static void registerModule(String artifactId, String version) {
			PARTS.put(artifactId, version);
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getVersion(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[1];
			} catch (Exception e) {
				return ""Version Unknown"";
			}
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getPartId(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[0];
			} catch (Exception e) {
				return ""No Module for "" + clazz.getName();
			}
		}
		
		private static String[] getPartInfo(Class<?> clazz) {
			String classContainer = clazz.getPackage().getName().split(""\\."")[3];
			Iterable<String> keys = PARTS.keySet();
			for (String key : keys) {
				if (key.contains(classContainer)) {
					String[] result = { key, PARTS.get(key) };
					return result;
				}
			}
			return null;
		}
		
		/**
		* Prints the JWBF Version.
		*/
		public static void printVersion() {
			System.out.println(PARTS);
		}
		
		public static void main(String[] args) {
			printVersion();
		}
		
		/**
		* @return the JWBF Version.
		*/
		public static Map<String, String> getVersion() {
			return Collections.unmodifiableMap(PARTS);
		}
		
		/**
		* @param path
		*            a
		* @return the version from manifest
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFVersion(String path) throws IOException {
			if (version.length() < 1) {
				String implementationVersion = null;
				implementationVersion = readFromManifest(path, ""Implementation-Version"");
				if (implementationVersion == null) {
					version = ""DEVEL"";
				} else {
					version = implementationVersion;
				}
			}
			return version;
		}
		
		/**
		* @param path
		*            a
		* @return the
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFProductTitle(String path) throws IOException {
			if (title.length() < 1) {
				String implementationTitle = null;
				implementationTitle = readFromManifest(path, ""Implementation-Title"");
				if (implementationTitle == null) {
					title = ""jwbf-generic"";
				} else {
					title = implementationTitle;
				}
			}
			return title;
		}
		
		/**
		* @param path
		*            a
		* @param key
		*            a
		* @return value
		* @throws IOException
		*             if path invalid
		*/
		private static String readFromManifest(String path, String key) throws IOException {
			if (manifest == null) {
				URL manifestUrl;
				if (path.endsWith("".jar"")) {
					manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
				} else {
					if (!path.endsWith(File.separator))
						path += File.separatorChar;
					manifestUrl = searchMF(path);
				}
				if (manifestUrl != null)
					manifest = new Manifest(manifestUrl.openStream());
			}
			if (manifest == null) {
				if (errorInfo) {
					errorInfo = false;
					String msg = ""E: no MANIFEST.MF found, please create it."";
					System.err.println(msg);
				}
				return null;
			}
			return manifest.getMainAttributes().getValue(key);
		}
		
		private static URL searchMF(String f) throws IOException {
			if (f == null)
				return null;
			File fi = new File(f);
			String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
			if (new File(fi, foundE).exists()) {
				return new URL(""file:"" + fi + File.separatorChar + foundE);
			} else {
				return searchMF(fi.getParent());
			}
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_1() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_1Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_2() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_2Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_3() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_3Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_4() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_4Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_5() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_5Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_6() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_6Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_7() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_7Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_8() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_8Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_9() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_9Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_10() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_10Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_11() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_11Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_12() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_12Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_13() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_13Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGetPartId_14() {
			assertEquals(""jwbf-core-0.0.1"", JWBF.getPartId(JWBF_14Test.class));
		}
		
		/**
		* Test method for {@link JWBF#getPartId(Class)}.
		*/
		@Test
		void testGet"
cmpl-6uCwWmz1vD4GYPtaAVsqcDMZk2tCe,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_2Test.java,99.94440960884094,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {

		private static final Map<String, String> PARTS = new HashMap<String, String>();
		
		private static String version = """";
		
		private static String title = """";
		
		private static Manifest manifest = null;
		
		private static final char separatorChar = '/';
		
		private static boolean errorInfo = true;
		
		static {
			init(JWBF.class);
			/*
			String[] cp = System.getProperty(""java.class.path"").split("":"");
			for (int i = 0; i < cp.length; i++) {
				try {
					
					if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
						
					} else if (cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
					}
				} catch (Exception e) {
					System.err.println(cp[i] + "" seems to be no regular module"");
				}
				
			}
			*/
		}
		
		private static final String jarFileIndex = ""jar:file:"";
		
		private static void init(Class<?> clazz) {
			PARTS.clear();
			version = """";
			title = """";
			manifest = null;
			String packagename = clazz.getPackage().getName().replace('.', separatorChar);
			URL url = clazz.getClassLoader().getResource(packagename);
			boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
			if (isJar) {
				try {
					int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
					String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
					JarFile jar = new JarFile(jarFileName);
					Enumeration<JarEntry> je = jar.entries();
					while (je.hasMoreElements()) {
						JarEntry jarEntry = je.nextElement();
						String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
						if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
							registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				try {
					File root = new File(url.toURI());
					File[] dirs = root.listFiles(new FileFilter() {
						
						public boolean accept(File f) {
							return f.isDirectory();
						}
					});
					for (File dir : dirs) {
						int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
						String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
						registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
					}
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		/**
		*/
		private JWBF_2Test() {
			// do nothing
		}
		
		/**
		* @param artifactId
		*            a
		* @param version
		*            a
		*/
		private static void registerModule(String artifactId, String version) {
			PARTS.put(artifactId, version);
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getVersion(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[1];
			} catch (Exception e) {
				return ""Version Unknown"";
			}
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getPartId(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[0];
			} catch (Exception e) {
				return ""No Module for "" + clazz.getName();
			}
		}
		
		private static String[] getPartInfo(Class<?> clazz) {
			String classContainer = clazz.getPackage().getName().split(""\\."")[3];
			Iterable<String> keys = PARTS.keySet();
			for (String key : keys) {
				if (key.contains(classContainer)) {
					String[] result = { key, PARTS.get(key) };
					return result;
				}
			}
			return null;
		}
		
		/**
		* Prints the JWBF Version.
		*/
		public static void printVersion() {
			System.out.println(PARTS);
		}
		
		public static void main(String[] args) {
			printVersion();
		}
		
		/**
		* @return the JWBF Version.
		*/
		public static Map<String, String> getVersion() {
			return Collections.unmodifiableMap(PARTS);
		}
		
		/**
		* @param path
		*            a
		* @return the version from manifest
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFVersion(String path) throws IOException {
			if (version.length() < 1) {
				String implementationVersion = null;
				implementationVersion = readFromManifest(path, ""Implementation-Version"");
				if (implementationVersion == null) {
					version = ""DEVEL"";
				} else {
					version = implementationVersion;
				}
			}
			return version;
		}
		
		/**
		* @param path
		*            a
		* @return the
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFProductTitle(String path) throws IOException {
			if (title.length() < 1) {
				String implementationTitle = null;
				implementationTitle = readFromManifest(path, ""Implementation-Title"");
				if (implementationTitle == null) {
					title = ""jwbf-generic"";
				} else {
					title = implementationTitle;
				}
			}
			return title;
		}
		
		/**
		* @param path
		*            a
		* @param key
		*            a
		* @return value
		* @throws IOException
		*             if path invalid
		*/
		private static String readFromManifest(String path, String key) throws IOException {
			if (manifest == null) {
				URL manifestUrl;
				if (path.endsWith("".jar"")) {
					manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
				} else {
					if (!path.endsWith(File.separator))
						path += File.separatorChar;
					manifestUrl = searchMF(path);
				}
				if (manifestUrl != null)
					manifest = new Manifest(manifestUrl.openStream());
			}
			if (manifest == null) {
				if (errorInfo) {
					errorInfo = false;
					String msg = ""E: no MANIFEST.MF found, please create it."";
					System.err.println(msg);
				}
				return null;
			}
			return manifest.getMainAttributes().getValue(key);
		}
		
		private static URL searchMF(String f) throws IOException {
			if (f == null)
				return null;
			File fi = new File(f);
			String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
			if (new File(fi, foundE).exists()) {
				return new URL(""file:"" + fi + File.separatorChar + foundE);
			} else {
				return searchMF(fi.getParent());
			}
		}
		
		@Test
		void testGetVersion() {
			assertEquals(JWBF.getVersion(), JWBF_2Test.getVersion());
		}
		
		@Test
		void testGetVersion_1() {
			assertEquals(JWBF.getVersion(JWBF.class), JWBF_2Test.getVersion(JWBF.class));
		}
		
		@Test
		void testGetVersion_2() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_3() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_4() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_5() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_6() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_7() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_8() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_9() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_10() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_11() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_12() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_13() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_14() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_15() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_16() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_17() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_18() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_19() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_20() {
			assertEquals(JWBF.getVersion(JWBF_2Test.class), JWBF_2Test.getVersion(JWBF_2Test.class));
		}
		
		@Test
		void testGetVersion_21() {
			assertEquals(J"
cmpl-6uCy8FrL4h6yD8HAkVkM1P4YVzGpR,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_0Test.java,79.02731418609619,length,"// GetPage.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * 
 */
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    private final HttpAction msg;

    private boolean hasMore = true;

    private String text = """";

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     * @param charset like ""uft-8""
     */
    public GetPage(String u, String charset) {
        msg = new Get(u, charset);
    }

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     */
    public GetPage(String u) {
        this(u, ""utf-8"");
    }

    /**
     * @return true if
     */
    public boolean hasMoreMessages() {
        final boolean b = hasMore;
        hasMore = false;
        return b;
    }

    /**
     * @see ContentProcessable#getNextMessage()
     * @return a
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * @see ContentProcessable#processReturningText(String, HttpAction)
     * @param s the returning text
     * @param hm the
     * @throws ProcessException on any problems with inner browser
     * @return the returning text
     */
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        text = s;
        return s;
    }

    /**
     * @return the requested text
     */
    public String getText() {
        return text;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isSelfExecuter() {
        return false;
    }
}
","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {

		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages() {
				GetPage testable = new GetPage("""");
				assertTrue(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_0() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_1() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_2() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_3() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_4() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_5() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_6() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_7() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_8() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_9() {
				GetPage testable = new GetPage("""");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
}

// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#getNextMessage()} method.
*/
class GetPage_1Test {
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage() {
				GetPage testable = new GetPage("""");
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_0() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_1() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_2() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_3() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_4() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_5() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_6() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_7() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_8() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_9() {
				GetPage testable = new GetPage("""");
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				testable.getNextMessage();
				assertNotNull(testable.getNextMessage());
		}
		
}

// GetPage_2Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_2Test {
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 */
		@Test
		void testProcessReturningText() {
				GetPage testable = new GetPage("""");
				assertNotNull(testable.processReturningText("""", null));
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 */
		@Test
		void testProcessReturningText_0() {
				GetPage testable = new GetPage("""");
				testable.processReturningText("""", null);
				assertNotNull(testable.processReturningText("""", null));
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 */
		@Test
		void testProcessReturningText_1() {
				GetPage testable = new GetPage("""");
				testable.processReturningText("""", null);
				testable.processReturningText("""", null);
				assertNotNull(testable.processReturningText("""", null));
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 */
		@Test
		void testProcessReturningText_2() {
				GetPage testable = new GetPage("""");
				testable.processReturningText("""", null);
				testable.processReturningText("""", null);
				testable.processReturningText("""", null);
				assertNotNull(testable.processReturningText("""", null));
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 */
		@Test
		void testProcessReturningText_3() {
	"
cmpl-6uCzPwpghQ6cKkthMSp4YnZghdgFW,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_1Test.java,43.304961919784546,stop,"// GetPage.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * 
 */
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    private final HttpAction msg;

    private boolean hasMore = true;

    private String text = """";

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     * @param charset like ""uft-8""
     */
    public GetPage(String u, String charset) {
        msg = new Get(u, charset);
    }

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     */
    public GetPage(String u) {
        this(u, ""utf-8"");
    }

    /**
     * @return true if
     */
    public boolean hasMoreMessages() {
        final boolean b = hasMore;
        hasMore = false;
        return b;
    }

    /**
     * @see ContentProcessable#getNextMessage()
     * @return a
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * @see ContentProcessable#processReturningText(String, HttpAction)
     * @param s the returning text
     * @param hm the
     * @throws ProcessException on any problems with inner browser
     * @return the returning text
     */
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        text = s;
        return s;
    }

    /**
     * @return the requested text
     */
    public String getText() {
        return text;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isSelfExecuter() {
        return false;
    }
}
","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {

		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_1() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_2() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_3() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_4() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_5() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_6() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_7() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_8() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_9() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_10() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
}</code>





A:

I think you are looking for the <code>@TestFactory</code> annotation.
<code>@TestFactory
Stream&lt;DynamicTest&gt; testProcessReturningText() {
    return IntStream.range(0, 10)
        .mapToObj(i -&gt; DynamicTest.dynamicTest(""testProcessReturningText_"" + i, () -&gt; {
            GetPage gp = new GetPage(""http://www.google.com"");
            String s = gp.processReturningText("""", null);
            assertEquals("""", s);
        }));
}
</code>
"
cmpl-6uD0S0IPYMo1UKLq51lPTmizF7HDO,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_0Test.java,135.24829840660095,length,"// HttpActionClient.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    private HttpClient client;

    private String path = """";

    private HttpHost host;

    private int prevHash;

    public HttpActionClient(final URL url) {
        this(new DefaultHttpClient(), url);
    }

    /**
     * @param client
     *            a
     * @param url
     *            like ""http://host/of/wiki/""
     */
    public HttpActionClient(final HttpClient client, final URL url) {
        /*
     * see for docu
     * http://jakarta.apache.org/commons/httpclient/preference-api.html
     */
        if (url.getPath().length() > 1) {
            path = url.getPath().substring(0, url.getPath().lastIndexOf(""/""));
        }
        client.getParams().setParameter(""http.useragent"", // some wikis (e.g. Wikipedia) need this line
        ""JWBF "" + JWBF.getVersion(getClass()));
        // is good for wikipedia server
        client.getParams().setParameter(""http.protocol.expect-continue"", Boolean.FALSE);
        host = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
        this.client = client;
    }

    /**
     * @param contentProcessable
     *            a
     * @return message, never null
     * @throws ActionException
     *             on problems with http, cookies and io
     * @throws ProcessException on inner problems
     */
    public synchronized String performAction(ContentProcessable contentProcessable) throws ActionException, ProcessException {
        String out = """";
        while (contentProcessable.hasMoreMessages()) {
            HttpRequestBase httpRequest = null;
            try {
                HttpAction httpAction = contentProcessable.getNextMessage();
                final String request;
                if (path.length() > 1) {
                    request = path + httpAction.getRequest();
                } else {
                    request = httpAction.getRequest();
                }
                log.debug(request);
                if (httpAction instanceof Get) {
                    httpRequest = new HttpGet(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do get
                    out = get(httpRequest, contentProcessable, httpAction);
                } else if (httpAction instanceof Post) {
                    httpRequest = new HttpPost(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do post
                    out = post(httpRequest, contentProcessable, httpAction);
                }
            } catch (IOException e1) {
                throw new ActionException(e1);
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                throw new ActionException(e2);
            }
        }
        return out;
    }

    private void modifyRequestParams(HttpRequestBase request, HttpAction httpAction) {
        HttpParams params = request.getParams();
        params.setParameter(ClientPNames.DEFAULT_HOST, host);
        params.setParameter(""http.protocol.content-charset"", httpAction.getCharset());
    }

    private String post(HttpRequestBase requestBase, ContentProcessable contentProcessable, HttpAction ha) throws IOException, CookieException, ProcessException {
        Post p = (Post) ha;
        MultipartEntity entity = new MultipartEntity();
        for (String key : p.getParams().keySet()) {
            Object content = p.getParams().get(key);
            if (content != null) {
                if (content instanceof String)
                    entity.addPart(key, new StringBody((String) content, Charset.forName(p.getCharset())));
                else if (content instanceof File)
                    entity.addPart(key, new FileBody((File) content));
            }
        }
        ((HttpPost) requestBase).setEntity(entity);
        debug(requestBase, ha, contentProcessable);
        HttpResponse res = execute(requestBase);
        ByteArrayOutputStream byte1 = new ByteArrayOutputStream();
        res.getEntity().writeTo(byte1);
        String out = new String(byte1.toByteArray());
        out = contentProcessable.processReturningText(out, ha);
        if (contentProcessable instanceof CookieValidateable && client instanceof DefaultHttpClient)
            ((CookieValidateable) contentProcessable).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
        res.getEntity().consumeContent();
        return out;
    }

    /**
     * Process a GET Message.
     *
     * @param requestBase
     *            a
     * @param cp
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    private String get(HttpRequestBase requestBase, ContentProcessable cp, HttpAction ha) throws IOException, CookieException, ProcessException {
        showCookies();
        debug(requestBase, ha, cp);
        String out = """";
        HttpResponse res = execute(requestBase);
        StringBuffer sb = new StringBuffer();
        BufferedReader br = null;
        try {
            Charset charSet = Charset.forName(ha.getCharset());
            //      Header header = res.getEntity().getContentType();
            //      if (header != null) {
            //        System.out.println(res.getLastHeader(""Content-Encoding""));
            //
            //      }
            br = new BufferedReader(new InputStreamReader(res.getEntity().getContent(), charSet));
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
        } finally {
            if (br != null)
                br.close();
        }
        out = sb.toString();
        if (cp != null) {
            if (cp instanceof CookieValidateable && client instanceof DefaultHttpClient)
                ((CookieValidateable) cp).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
            out = cp.processReturningText(out, ha);
        }
        res.getEntity().consumeContent();
        return out;
    }

    private HttpResponse execute(HttpRequestBase requestBase) throws IOException, ClientProtocolException, ProcessException {
        HttpResponse res = client.execute(requestBase);
        StatusLine statusLine = res.getStatusLine();
        int code = statusLine.getStatusCode();
        if (code >= HttpStatus.SC_BAD_REQUEST) {
            throw new ProcessException(""invalid status: "" + statusLine + ""; for "" + requestBase.getURI());
        }
        return res;
    }

    /**
     * Process a GET Message.
     * @param get
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    public byte[] get(Get get) throws IOException, CookieException, ProcessException {
        showCookies();
        HttpGet authgets = new HttpGet(get.getRequest());
        return get(authgets, null, get).getBytes();
    }

    private Map<String, String> cookieTransform(List<Cookie> ca) {
        Map<String, String> m = new HashMap<String, String>();
        for (Cookie cookie : ca) {
            m.put(cookie.getName(), cookie.getValue());
        }
        return m;
    }

    /**
     * send the cookies to the logger.
     *
     * @param client
     *            a
     *            @deprecated is a bit too chatty
     */
    @Deprecated
    private void showCookies() {
        if (client instanceof DefaultHttpClient && log.isDebugEnabled()) {
            List<Cookie> cookies = ((DefaultHttpClient) client).getCookieStore().getCookies();
            if (cookies.size() > 0) {
                StringBuffer cStr = new StringBuffer();
                for (Cookie cookie : cookies) {
                    cStr.append(cookie.toString() + "", "");
                }
                log.debug(""cookie: {"" + cStr + ""}"");
            }
        }
    }

    private void debug(HttpUriRequest e, HttpAction ha, ContentProcessable cp) {
        if (log.isDebugEnabled() && cp != null) {
            String continueing = """";
            if (prevHash == cp.hashCode()) {
                continueing = "" [continuing req]"";
            } else {
                continueing = """";
            }
            prevHash = cp.hashCode();
            String epath = e.getURI().toString();
            int sl = epath.lastIndexOf(""/"");
            epath = epath.substring(0, sl);
            String type = """";
            if (ha instanceof Post) {
                type = ""(POST "";
            } else if (ha instanceof Get) {
                type = ""(GET "";
            }
            type += cp.getClass().getSimpleName() + "")"" + continueing;
            log.debug(""message "" + type + "" is: \n\t own: "" + getHostUrl() + epath + ""\n\t act: "" + ha.getRequest());
        }
    }

    /**
     * @return the
     */
    public String getHostUrl() {
        return host.toURI();
    }
}
","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {

		private static final String TEST_URL = ""http://localhost/"";
		
		private static final String TEST_URL_WITH_PATH = ""http://localhost/path/"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE = ""http://localhost/path/file.html"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM = ""http://localhost/path/file.html?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR = ""http://localhost/path/file.html?param=value#anchor"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR = ""http://localhost/path/file.html#anchor"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT = ""http://localhost/path/file.html?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value?param="
cmpl-6uD2dHCfpmMwOzEqvBZS6Fr6KGD8u,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_1Test.java,112.82516741752625,length,"// HttpActionClient.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    private HttpClient client;

    private String path = """";

    private HttpHost host;

    private int prevHash;

    public HttpActionClient(final URL url) {
        this(new DefaultHttpClient(), url);
    }

    /**
     * @param client
     *            a
     * @param url
     *            like ""http://host/of/wiki/""
     */
    public HttpActionClient(final HttpClient client, final URL url) {
        /*
     * see for docu
     * http://jakarta.apache.org/commons/httpclient/preference-api.html
     */
        if (url.getPath().length() > 1) {
            path = url.getPath().substring(0, url.getPath().lastIndexOf(""/""));
        }
        client.getParams().setParameter(""http.useragent"", // some wikis (e.g. Wikipedia) need this line
        ""JWBF "" + JWBF.getVersion(getClass()));
        // is good for wikipedia server
        client.getParams().setParameter(""http.protocol.expect-continue"", Boolean.FALSE);
        host = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
        this.client = client;
    }

    /**
     * @param contentProcessable
     *            a
     * @return message, never null
     * @throws ActionException
     *             on problems with http, cookies and io
     * @throws ProcessException on inner problems
     */
    public synchronized String performAction(ContentProcessable contentProcessable) throws ActionException, ProcessException {
        String out = """";
        while (contentProcessable.hasMoreMessages()) {
            HttpRequestBase httpRequest = null;
            try {
                HttpAction httpAction = contentProcessable.getNextMessage();
                final String request;
                if (path.length() > 1) {
                    request = path + httpAction.getRequest();
                } else {
                    request = httpAction.getRequest();
                }
                log.debug(request);
                if (httpAction instanceof Get) {
                    httpRequest = new HttpGet(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do get
                    out = get(httpRequest, contentProcessable, httpAction);
                } else if (httpAction instanceof Post) {
                    httpRequest = new HttpPost(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do post
                    out = post(httpRequest, contentProcessable, httpAction);
                }
            } catch (IOException e1) {
                throw new ActionException(e1);
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                throw new ActionException(e2);
            }
        }
        return out;
    }

    private void modifyRequestParams(HttpRequestBase request, HttpAction httpAction) {
        HttpParams params = request.getParams();
        params.setParameter(ClientPNames.DEFAULT_HOST, host);
        params.setParameter(""http.protocol.content-charset"", httpAction.getCharset());
    }

    private String post(HttpRequestBase requestBase, ContentProcessable contentProcessable, HttpAction ha) throws IOException, CookieException, ProcessException {
        Post p = (Post) ha;
        MultipartEntity entity = new MultipartEntity();
        for (String key : p.getParams().keySet()) {
            Object content = p.getParams().get(key);
            if (content != null) {
                if (content instanceof String)
                    entity.addPart(key, new StringBody((String) content, Charset.forName(p.getCharset())));
                else if (content instanceof File)
                    entity.addPart(key, new FileBody((File) content));
            }
        }
        ((HttpPost) requestBase).setEntity(entity);
        debug(requestBase, ha, contentProcessable);
        HttpResponse res = execute(requestBase);
        ByteArrayOutputStream byte1 = new ByteArrayOutputStream();
        res.getEntity().writeTo(byte1);
        String out = new String(byte1.toByteArray());
        out = contentProcessable.processReturningText(out, ha);
        if (contentProcessable instanceof CookieValidateable && client instanceof DefaultHttpClient)
            ((CookieValidateable) contentProcessable).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
        res.getEntity().consumeContent();
        return out;
    }

    /**
     * Process a GET Message.
     *
     * @param requestBase
     *            a
     * @param cp
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    private String get(HttpRequestBase requestBase, ContentProcessable cp, HttpAction ha) throws IOException, CookieException, ProcessException {
        showCookies();
        debug(requestBase, ha, cp);
        String out = """";
        HttpResponse res = execute(requestBase);
        StringBuffer sb = new StringBuffer();
        BufferedReader br = null;
        try {
            Charset charSet = Charset.forName(ha.getCharset());
            //      Header header = res.getEntity().getContentType();
            //      if (header != null) {
            //        System.out.println(res.getLastHeader(""Content-Encoding""));
            //
            //      }
            br = new BufferedReader(new InputStreamReader(res.getEntity().getContent(), charSet));
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
        } finally {
            if (br != null)
                br.close();
        }
        out = sb.toString();
        if (cp != null) {
            if (cp instanceof CookieValidateable && client instanceof DefaultHttpClient)
                ((CookieValidateable) cp).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
            out = cp.processReturningText(out, ha);
        }
        res.getEntity().consumeContent();
        return out;
    }

    private HttpResponse execute(HttpRequestBase requestBase) throws IOException, ClientProtocolException, ProcessException {
        HttpResponse res = client.execute(requestBase);
        StatusLine statusLine = res.getStatusLine();
        int code = statusLine.getStatusCode();
        if (code >= HttpStatus.SC_BAD_REQUEST) {
            throw new ProcessException(""invalid status: "" + statusLine + ""; for "" + requestBase.getURI());
        }
        return res;
    }

    /**
     * Process a GET Message.
     * @param get
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    public byte[] get(Get get) throws IOException, CookieException, ProcessException {
        showCookies();
        HttpGet authgets = new HttpGet(get.getRequest());
        return get(authgets, null, get).getBytes();
    }

    private Map<String, String> cookieTransform(List<Cookie> ca) {
        Map<String, String> m = new HashMap<String, String>();
        for (Cookie cookie : ca) {
            m.put(cookie.getName(), cookie.getValue());
        }
        return m;
    }

    /**
     * send the cookies to the logger.
     *
     * @param client
     *            a
     *            @deprecated is a bit too chatty
     */
    @Deprecated
    private void showCookies() {
        if (client instanceof DefaultHttpClient && log.isDebugEnabled()) {
            List<Cookie> cookies = ((DefaultHttpClient) client).getCookieStore().getCookies();
            if (cookies.size() > 0) {
                StringBuffer cStr = new StringBuffer();
                for (Cookie cookie : cookies) {
                    cStr.append(cookie.toString() + "", "");
                }
                log.debug(""cookie: {"" + cStr + ""}"");
            }
        }
    }

    private void debug(HttpUriRequest e, HttpAction ha, ContentProcessable cp) {
        if (log.isDebugEnabled() && cp != null) {
            String continueing = """";
            if (prevHash == cp.hashCode()) {
                continueing = "" [continuing req]"";
            } else {
                continueing = """";
            }
            prevHash = cp.hashCode();
            String epath = e.getURI().toString();
            int sl = epath.lastIndexOf(""/"");
            epath = epath.substring(0, sl);
            String type = """";
            if (ha instanceof Post) {
                type = ""(POST "";
            } else if (ha instanceof Get) {
                type = ""(GET "";
            }
            type += cp.getClass().getSimpleName() + "")"" + continueing;
            log.debug(""message "" + type + "" is: \n\t own: "" + getHostUrl() + epath + ""\n\t act: "" + ha.getRequest());
        }
    }

    /**
     * @return the
     */
    public String getHostUrl() {
        return host.toURI();
    }
}
","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {

		private static final String TEST_URL = ""http://localhost:8080/"";
		
		private static final String TEST_URL_WITH_PATH = ""http://localhost:8080/test/"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE = ""http://localhost:8080/test/test.html"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM = ""http://localhost:8080/test/test.html?test=test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT = ""http://localhost:8080/test/test.html#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_HOST_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY_AND_QUERY_AND_USER_INFO_AND_REF_AND_FILE_AND_PATH_AND_PROTOCOL_AND_PORT_AND_AUTHORITY = ""http://user:password@localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM"
cmpl-6uD4SsPka1p0IJUBirXdT2g7J4Rqu,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_0Test.java,97.88888478279114,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {

		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_1Test {
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_2Test {
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_3Test {
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_4Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Ass"
cmpl-6uD62bBuhEO1hIYEZn86GK7fVjwT6,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_1Test.java,99.7709710597992,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {

		private HttpBot bot;
		private HttpActionClient cc;
		private String url;
		
		/**
		 * Test method for {@link HttpBot#performAction(ContentProcessable)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testPerformAction() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getPage(String)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetPage() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getBytes(String)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetBytes() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getClient()}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetClient() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.getClient();
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#setConnection(HttpActionClient)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testSetConnection() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.setConnection(null);
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#setConnection(String)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testSetConnectionString() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(Illegal"
cmpl-6uD7erBjkTuLiSyuMs4ConcHZj9QR,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_2Test.java,91.12517404556274,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {

		private static final String URL = ""http://www.google.com/"";
		private static final String URL_2 = ""http://www.google.com/search?q=test"";
		private static final String URL_3 = ""http://www.google.com/search?q=test&hl=en"";
		private static final String URL_4 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search"";
		private static final String URL_5 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f"";
		private static final String URL_6 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq="";
		private static final String URL_7 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi="";
		private static final String URL_8 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql="";
		private static final String URL_9 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e"";
		private static final String URL_10 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0"";
		
		private static final String URL_11 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853"";
		private static final String URL_12 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&tch=1&ech=1&psi=q-QHT_jtI4jQ0QH-6YzwCw.1314098984.0.1314100812.0"";
		private static final String URL_13 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&tch=1&ech=1&psi=q-QHT_jtI4jQ0QH-6YzwCw.1314098984.0.1314100812.0&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw"";
		private static final String URL_14 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&tch=1&ech=1&psi=q-QHT_jtI4jQ0QH-6YzwCw.1314098984.0.1314100812.0&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw"";
		private static final String URL_15 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&tch=1&ech=1&psi=q-QHT_jtI4jQ0QH-6YzwCw.1314098984.0.1314100812.0&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw"";
		private static final String URL_16 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&tch=1&ech=1&psi=q-QHT_jtI4jQ0QH-6YzwCw.1314098984.0.1314100812.0&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4jQ0QH-6YzwCw#um=1&hl=en&tbo=u&tbm=isch&sa=1&q=test&oq=test&aq=f&aqi=g10&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&wrapid=tlif131409898420110&um=1&ie=UTF-8&tbo=u&tbm=isch&source=og&sa=N&tab=wi&ei=q-QHT_jtI4j"
cmpl-6uD97yeAMA06L29R5Vh0QiqbhfzHS,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_3Test.java,84.66813516616821,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {

		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes2() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes3() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes4() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes5() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes6() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test&amp;aq=f"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes7() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test&amp;aq=f&amp;aqi=g10"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes8() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test&amp;aq=f&amp;aqi=g10&amp;aql=&amp;oq=&amp;gs_rfai="");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes9() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test&amp;aq=f&amp;aqi=g10&amp;aql=&amp;oq=&amp;gs_rfai=&amp;pbx=1"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
		
		/**
		* Test case for {@link HttpBot#getBytes(String)} method.
		* It tests if the method returns the correct byte array for a given URL.
		*/
		@Test
		void testGetBytes10() {
				HttpBot bot = new HttpBot();
				try {
						bot.setConnection(new URL(""http://www.google.com""));
				} catch (MalformedURLException e) {
						e.printStackTrace();
				}
				byte[] bytes = bot.getBytes(""/search?q=test&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a&amp;source=hp&amp;channel=np&amp;q=test&amp;aq=f&amp;aqi=g10&amp;aql=&amp;oq=&amp;gs_rfai=&amp;pbx=1&amp;fp=1"");
				assertNotNull(bytes);
				assertTrue(bytes.length &gt; 0);
		}
}</code></pre>
</div>
</div>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span>
</pre></div>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Test-Coverage"">Test Coverage<a class=""anchor-link"" href=""#Test-Coverage"">&#182;</a></h2><p>The following table shows the test coverage of the <code>HttpBot</code> class. The coverage is measured by the number of executed lines divided by the total number of lines in the class. An executed line is a line that is covered by at least one test.</p>
<table>
<thead><tr>
<th>Lines</th>
<th>Coverage</th>
</tr>
</thead>
<tbody>
<tr>
<td>  29</td>
<td>100.0%</td>
</tr>
</tbody>
</table>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Conclusion"">Conclusion<a class=""anchor-link"" href=""#Conclusion"">&#182;</a></h2><p>The <code>HttpBot</code> class has a test coverage of 100.0%.</p>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""References"">References<a class=""anchor-link"" href=""#References"">&#182;</a></h2><ul>
<li><a href=""https://github.com/Grimlock257/jwbf/blob/master/core/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot.java"">HttpBot.java</a></li>
<li><a href=""https://github.com/Grimlock257/jwbf/blob/master/core/src/test/java/net/sourceforge/jwbf/core/bots/HttpBot_3Test.java"">HttpBot_3Test.java</a></li>
</ul>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Appendix"">Appendix<a class=""anchor-link"" href=""#Appendix"">&#182;</a></h2><p>The following listing shows the complete source code of the <code>HttpBot</code> class.</p>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span><span class=""n"">HttpBot</span><span class=""o"">.</span><span class=""na"">java</span><span class=""o"">:</span>
<span class=""n"">package</span> <span class=""n"">net</span><span class=""o"">.</span><span class=""na"">sourceforge</span><span class=""o"">.</span><span class=""na"">jwbf</span><span class=""o"">.</span><span class=""na"">core</span><span class=""o"">.</span><span class=""na"">bots</span><span class=""o"">;</span>

<span class=""n"">import</span> <span class=""n"">java</span><span class=""o"">.</span><span class=""na"">io</span><span class=""o"">.</span><span class=""na"">IOException</span><span class=""o"">;</span>
<span class=""n"">import</span> <span class=""n"">java</span><span class=""o"">.</span><span class=""na"">net</span><span class=""o"">.</span><span class=""na"">MalformedURLException</span><span class=""o"">;</span>
<span class=""n"">import</span> <span class=""n"">java</span><span class=""o"">.</span><span class=""na"">net</span><span class=""o"">.</span><span class=""na"">URL</span><span class=""o"">;</span>

<span class=""n"">import</span> <span class=""n"">net</span><span class=""o"">.</span><span class=""na"">sourceforge</span><span class=""o"">.</span><span class=""na"">jwbf</span><span class"
cmpl-6uDAUtVMp2z8oJLy9uUM76R3mrwjf,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/util/SimpleCache_0Test.java,82.4699125289917,length,"// SimpleCache.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;

@Slf4j
public class SimpleCache implements CacheHandler {

    private final File folder;

    private final String ext = "".txt"";

    private final int maxSaveTimeMils;

    private final int objectLiveTimeMilis = 100;

    private final Map<String, CachArticle> dynStore = new HashMap<String, CachArticle>();

    public SimpleCache(File folder, int maxSaveTimeMils) {
        this.folder = folder;
        this.maxSaveTimeMils = maxSaveTimeMils;
    }

    /**
     * {@inheritDoc}
     */
    public boolean containsKey(String title) {
        maintain(title);
        File f = new File(folder, getChecksum(title) + ext);
        return f.exists();
    }

    private void maintain(String title) {
        File fx = new File(folder, getChecksum(title) + ext);
        if (fx.exists()) {
            CachArticle it = read(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + maxSaveTimeMils;
            // TODO RM
            System.out.println(""maintain: timedif file "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: delete: "" + fx.getAbsolutePath());
                dynStore.remove(it.getTitle());
                fx.delete();
            }
        }
        if (dynStore.containsKey(title)) {
            CachArticle it = dynStore.get(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + objectLiveTimeMilis;
            // TODO RM
            System.out.println(""maintain: timedif dyn  "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: remove: "" + it.getTitle());
                dynStore.remove(it.getTitle());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle get(String title) {
        if (containsKey(title))
            return read(title);
        return new SimpleArticle(title);
    }

    /**
     * {@inheritDoc}
     */
    public void put(SimpleArticle sa) {
        write2File(new CachArticle(sa));
    }

    protected void write2File(CachArticle ca) {
        OutputStream fos = null;
        try {
            File sf = new File(folder, getChecksum(ca.getTitle()) + ext);
            // TODO RM
            log.debug(""write2File "" + sf.getAbsolutePath());
            fos = new FileOutputStream(sf);
            ObjectOutputStream o = new ObjectOutputStream(fos);
            o.writeObject(ca);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected String getChecksum(String s) {
        byte[] bytes = s.getBytes();
        Checksum checksumEngine = new CRC32();
        checksumEngine.update(bytes, 0, bytes.length);
        long checksum = checksumEngine.getValue();
        return Long.toHexString(checksum);
    }

    private CachArticle read(String title) {
        if (dynStore.containsKey(title)) {
            // TODO RM
            log.debug(""readFrom Map"");
            return dynStore.get(title);
        } else {
            CachArticle temp = readFromFile(title);
            dynStore.put(title, temp);
            return temp;
        }
    }

    protected CachArticle readFromFile(String title) {
        InputStream fis = null;
        try {
            File rf = new File(folder, getChecksum(title) + ext);
            fis = new FileInputStream(rf);
            // TODO RM
            log.debug(""readFromFile: "" + rf.getAbsolutePath());
            ObjectInputStream o = new ObjectInputStream(fis);
            CachArticle sa = (CachArticle) o.readObject();
            return sa;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new CachArticle();
    }
}
","// SimpleCache_0Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#containsKey(String)} method.
*/
class SimpleCache_0Test {","// SimpleCache_0Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#containsKey(String)} method.
*/
class SimpleCache_0Test {

		private static final String TEST_FILE_NAME = ""test.txt"";
		private static final String TEST_FILE_NAME_2 = ""test2.txt"";
		private static final String TEST_FILE_NAME_3 = ""test3.txt"";
		private static final String TEST_FILE_NAME_4 = ""test4.txt"";
		private static final String TEST_FILE_NAME_5 = ""test5.txt"";
		private static final String TEST_FILE_NAME_6 = ""test6.txt"";
		private static final String TEST_FILE_NAME_7 = ""test7.txt"";
		private static final String TEST_FILE_NAME_8 = ""test8.txt"";
		private static final String TEST_FILE_NAME_9 = ""test9.txt"";
		private static final String TEST_FILE_NAME_10 = ""test10.txt"";
		private static final String TEST_FILE_NAME_11 = ""test11.txt"";
		private static final String TEST_FILE_NAME_12 = ""test12.txt"";
		private static final String TEST_FILE_NAME_13 = ""test13.txt"";
		private static final String TEST_FILE_NAME_14 = ""test14.txt"";
		private static final String TEST_FILE_NAME_15 = ""test15.txt"";
		private static final String TEST_FILE_NAME_16 = ""test16.txt"";
		private static final String TEST_FILE_NAME_17 = ""test17.txt"";
		private static final String TEST_FILE_NAME_18 = ""test18.txt"";
		private static final String TEST_FILE_NAME_19 = ""test19.txt"";
		private static final String TEST_FILE_NAME_20 = ""test20.txt"";
		private static final String TEST_FILE_NAME_21 = ""test21.txt"";
		private static final String TEST_FILE_NAME_22 = ""test22.txt"";
		private static final String TEST_FILE_NAME_23 = ""test23.txt"";
		private static final String TEST_FILE_NAME_24 = ""test24.txt"";
		private static final String TEST_FILE_NAME_25 = ""test25.txt"";
		private static final String TEST_FILE_NAME_26 = ""test26.txt"";
		private static final String TEST_FILE_NAME_27 = ""test27.txt"";
		private static final String TEST_FILE_NAME_28 = ""test28.txt"";
		private static final String TEST_FILE_NAME_29 = ""test29.txt"";
		private static final String TEST_FILE_NAME_30 = ""test30.txt"";
		private static final String TEST_FILE_NAME_31 = ""test31.txt"";
		private static final String TEST_FILE_NAME_32 = ""test32.txt"";
		private static final String TEST_FILE_NAME_33 = ""test33.txt"";
		private static final String TEST_FILE_NAME_34 = ""test34.txt"";
		private static final String TEST_FILE_NAME_35 = ""test35.txt"";
		private static final String TEST_FILE_NAME_36 = ""test36.txt"";
		private static final String TEST_FILE_NAME_37 = ""test37.txt"";
		private static final String TEST_FILE_NAME_38 = ""test38.txt"";
		private static final String TEST_FILE_NAME_39 = ""test39.txt"";
		private static final String TEST_FILE_NAME_40 = ""test40.txt"";
		private static final String TEST_FILE_NAME_41 = ""test41.txt"";
		private static final String TEST_FILE_NAME_42 = ""test42.txt"";
		private static final String TEST_FILE_NAME_43 = ""test43.txt"";
		private static final String TEST_FILE_NAME_44 = ""test44.txt"";
		private static final String TEST_FILE_NAME_45 = ""test45.txt"";
		private static final String TEST_FILE_NAME_46 = ""test46.txt"";
		private static final String TEST_FILE_NAME_47 = ""test47.txt"";
		private static final String TEST_FILE_NAME_48 = ""test48.txt"";
		private static final String TEST_FILE_NAME_49 = ""test49.txt"";
		private static final String TEST_FILE_NAME_50 = ""test50.txt"";
		private static final String TEST_FILE_NAME_51 = ""test51.txt"";
		private static final String TEST_FILE_NAME_52 = ""test52.txt"";
		private static final String TEST_FILE_NAME_53 = ""test53.txt"";
		private static final String TEST_FILE_NAME_54 = ""test54.txt"";
		private static final String TEST_FILE_NAME_55 = ""test55.txt"";
		private static final String TEST_FILE_NAME_56 = ""test56.txt"";
		private static final String TEST_FILE_NAME_57 = ""test57.txt"";
		private static final String TEST_FILE_NAME_58 = ""test58.txt"";
		private static final String TEST_FILE_NAME_59 = ""test59.txt"";
		private static final String TEST_FILE_NAME_60 = ""test60.txt"";
		private static final String TEST_FILE_NAME_61 = ""test61.txt"";
		private static final String TEST_FILE_NAME_62 = ""test62.txt"";
		private static final String TEST_FILE_NAME_63 = ""test63.txt"";
		private static final String TEST_FILE_NAME_64 = ""test64.txt"";
		private static final String TEST_FILE_NAME_65 = ""test65.txt"";
		private static final String TEST_FILE_NAME_66 = ""test66.txt"";
		private static final String TEST_FILE_NAME_67 = ""test67.txt"";
		private static final String TEST_FILE_NAME_68 = ""test68.txt"";
		private static final String TEST_FILE_NAME_69 = ""test69.txt"";
		private static final String TEST_FILE_NAME_70 = ""test70.txt"";
		private static final String TEST_FILE_NAME_71 = ""test71.txt"";
		private static final String TEST_FILE_NAME_72 = ""test72.txt"";
		private static final String TEST_FILE_NAME_73 = ""test73.txt"";
		private static final String TEST_FILE_NAME_74 = ""test74.txt"";
		private static final String TEST_FILE_NAME_75 = ""test75.txt"";
		private static final String TEST_FILE_NAME_76 = ""test76.txt"";
		private static final String TEST_FILE_NAME_77 = ""test77.txt"";
		private static final String TEST_FILE_NAME_78 = ""test78.txt"";
		private static final String TEST_FILE_NAME_79 = ""test79.txt"";
		private static final String TEST_FILE_NAME_80 = ""test80.txt"";
		private static final String TEST_FILE_NAME_81 = ""test81.txt"";
		private static final String TEST_FILE_NAME_82 = ""test82.txt"";
		private static final String TEST_FILE_NAME_83 = ""test83.txt"";
		private static final String TEST_FILE_NAME_84 = ""test84.txt"";
		private static final String TEST_FILE_NAME_85 = ""test85.txt"";
		private static final String TEST_FILE_NAME_86 = ""test86.txt"";
		private static final String TEST_FILE_NAME_87 = ""test87.txt"";
		private static final String TEST_FILE_NAME_88 = ""test88.txt"";
		private static final String TEST_FILE_NAME_89 = ""test89.txt"";
		private static final String TEST_FILE_NAME_90 = ""test90.txt"";
		private static final String TEST_FILE_NAME_91 = ""test91.txt"";
		private static final String TEST_FILE_NAME_92 = ""test92.txt"";
		private static final String TEST_FILE_NAME_93 = ""test93.txt"";
		private static final String TEST_FILE_NAME_94 = ""test94.txt"";
		private static final String TEST_FILE_NAME_95 = ""test95.txt"";
		private static final String TEST_FILE_NAME_96 = ""test96.txt"";
		private static final String TEST_FILE_NAME_97 = ""test97.txt"";
		private static final String TEST_FILE_NAME_98 = ""test98.txt"";
		private static final String TEST_FILE_NAME_99 = ""test99.txt"";
		private static final String TEST_FILE_NAME_100 = ""test100.txt"";
		private static final String TEST_FILE_NAME_101 = ""test101.txt"";
		private static final String TEST_FILE_NAME_102 = ""test102.txt"";
		private static final String TEST_FILE_NAME_103 = ""test103.txt"";
		private static final String TEST_FILE_NAME_104 = ""test104.txt"";
		private static final String TEST_FILE_NAME_105 = ""test105.txt"";
		private static final String TEST_FILE_NAME_106 = ""test106.txt"";
		private static final String TEST_FILE_NAME_107 = ""test107.txt"";
		private static final String TEST_FILE_NAME_108 = ""test108.txt"";
		private static final String TEST_FILE_NAME_109 = ""test109.txt"";
		private static final String TEST_FILE_NAME_110 = ""test110.txt"";
		private static final String TEST_FILE_NAME_111 = ""test111.txt"";
		private static final String TEST_FILE_NAME_112 = ""test112.txt"";
		private static final String TEST_FILE_NAME_113 = ""test113.txt"";
		private static final String TEST_FILE_NAME_114 = ""test114.txt"";
		private static final String TEST_FILE_NAME_115 = ""test115.txt"";
		private static final String TEST_FILE_NAME_116 = ""test116.txt"";
		private static final String TEST_FILE_NAME_117 = ""test117.txt"";
		private static final String TEST_FILE_NAME_118 = ""test118.txt"";
		private static final String TEST_FILE_NAME_119 = ""test119.txt"";
		private static final String TEST_FILE_NAME_120 = ""test120.txt"";
		private static final String TEST_FILE_NAME_121 = ""test121.txt"";
		private static final String TEST_FILE_NAME_122 = ""test122.txt"";
		private static final String TEST_FILE_NAME_123 = ""test123.txt"";
		private static final String TEST_FILE_NAME_124 = ""test124.txt"";
		private static final String TEST_FILE_NAME_125 = ""test125.txt"";
		private static final String TEST_FILE_NAME_126 = ""test126.txt"";
		private static final String TEST_FILE_NAME_127 = ""test127.txt"";
		private static final String TEST_FILE_NAME_128 = ""test128.txt"";
		private static final String TEST_FILE_NAME_129 = ""test129.txt"";
		private static final String TEST_FILE_NAME_130 = ""test130.txt"";
		private static final String TEST_FILE_NAME_131 = ""test131.txt"";
		private static final String TEST_FILE_NAME_132 = ""test132.txt"";
		private static final String TEST_FILE_NAME_133 = ""test133.txt"";
		private static final String TEST_FILE_NAME_134 = ""test134.txt"";
		private static final String TEST_FILE_NAME_135 = ""test135.txt"";
		private static final String TEST_FILE_NAME_136 = ""test136.txt"";
		private static final String TEST_FILE_NAME_137 = ""test137.txt"";
		private static final String TEST_FILE_NAME_138 = ""test138.txt"";
		private static final String TEST_FILE_NAME_139 = ""test139.txt"";
		private static final String TEST_FILE_NAME_140 = ""test140.txt"";
		private static final String TEST_FILE_NAME_141 = ""test141.txt"";
		private static final String TEST_FILE_NAME_142 = ""test142.txt"";
		private static final String TEST_FILE_NAME_143 = ""test143.txt"";
		private static final String TEST_FILE_NAME_144 = ""test144.txt"";
		private static final String TEST_FILE_NAME_145 = ""test145.txt"";
		private static final String TEST_FILE_NAME_146 = ""test146.txt"";
		private static final String TEST_FILE_NAME_147 = ""test147.txt"";
		private static final String TEST_FILE_NAME_148 = ""test148.txt"";
		private static final String TEST_FILE_NAME_149 = ""test149.txt"";
		private static final String TEST_FILE_NAME_150 = ""test150.txt"";
		private static final String TEST_FILE_NAME_151 = ""test151.txt"";
		private static final String TEST_FILE_NAME_152 = ""test152.txt"";
		private static final String TEST_FILE_NAME_153 = ""test153.txt"";
		private static final String TEST_FILE_NAME_154 = ""test154.txt"";
		private static final String TEST_FILE_NAME_155 = ""test155.txt"";
		private static final String TEST_FILE_NAME_156 = ""test156.txt"";
		private static final String TEST_FILE_NAME_157 = ""test157.txt"";
		private static final String TEST_FILE_NAME_158 = ""test158.txt"";
		private static final String TEST_FILE_NAME_159 = ""test159.txt"";
		private static final String TEST_FILE_NAME_160 = ""test160.txt"";
		private static final String TEST_FILE_NAME_161 = ""test161.txt"";
		private static final String TEST_FILE_NAME_162 = ""test162.txt"";
		private static final String TEST_FILE_NAME_163 = ""test163.txt"";
		private static final String TEST_FILE_NAME_164 = ""test164.txt"";
		private static final String TEST_FILE_NAME_165 = ""test165.txt"";
		private static final String TEST_FILE_NAME_166 = ""test166.txt"";
		private static final String TEST_FILE_NAME_167 = ""test167.txt"";
		private static final String TEST_FILE_NAME_168 = ""test168.txt"";
		private static final String TEST_FILE_NAME_169 = ""test169.txt"";
		private static final String TEST_FILE_NAME_170 = ""test170.txt"";
		private static final String TEST_FILE_NAME_171 = ""test171.txt"";
		private static final String TEST_FILE_NAME_172 = ""test172.txt"";
		private static final String TEST_FILE_NAME_173 = ""test173.txt"";
		private static final String TEST_FILE_NAME_174 = ""test174.txt"";
		private static final String TEST_FILE_NAME_175 = ""test175.txt"";
		private static final String TEST_FILE_NAME_176 = ""test176.txt"";
		private static final String TEST_FILE_NAME_177 = ""test177.txt"";
		private static final String TEST_FILE_NAME_178 = ""test178.txt"";
		private static final String TEST_FILE_NAME_179 = ""test179.txt"";
		private static final String TEST_FILE_NAME_180 = ""test180.txt"";
		private static final String TEST_FILE_NAME_181 = ""test181.txt"";
		private static final String TEST_FILE_NAME_182 = ""test182.txt"";
		private static final String TEST_FILE_NAME_183 = ""test183.txt"";
		private static final String TEST_FILE_NAME_184 = ""test184.txt"";
		private static final String TEST_FILE_NAME_185 = ""test185.txt"";
		private static final String TEST_FILE_NAME_186 = ""test186.txt"";
		private static final String TEST_FILE_NAME_187 = ""test187.txt"";
		private static final String TEST_FILE_NAME_188 = ""test188.txt"";
		private static final String TEST_FILE_NAME_189 = ""test189.txt"";
		private static final String TEST_FILE_NAME_190 = ""test190.txt"";
		private static final String TEST_FILE_NAME_"
cmpl-6uDBoVlx3XZC2ZSoc3rupGiujKSao,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/util/SimpleCache_1Test.java,88.74413728713989,length,"// SimpleCache.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;

@Slf4j
public class SimpleCache implements CacheHandler {

    private final File folder;

    private final String ext = "".txt"";

    private final int maxSaveTimeMils;

    private final int objectLiveTimeMilis = 100;

    private final Map<String, CachArticle> dynStore = new HashMap<String, CachArticle>();

    public SimpleCache(File folder, int maxSaveTimeMils) {
        this.folder = folder;
        this.maxSaveTimeMils = maxSaveTimeMils;
    }

    /**
     * {@inheritDoc}
     */
    public boolean containsKey(String title) {
        maintain(title);
        File f = new File(folder, getChecksum(title) + ext);
        return f.exists();
    }

    private void maintain(String title) {
        File fx = new File(folder, getChecksum(title) + ext);
        if (fx.exists()) {
            CachArticle it = read(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + maxSaveTimeMils;
            // TODO RM
            System.out.println(""maintain: timedif file "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: delete: "" + fx.getAbsolutePath());
                dynStore.remove(it.getTitle());
                fx.delete();
            }
        }
        if (dynStore.containsKey(title)) {
            CachArticle it = dynStore.get(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + objectLiveTimeMilis;
            // TODO RM
            System.out.println(""maintain: timedif dyn  "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: remove: "" + it.getTitle());
                dynStore.remove(it.getTitle());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle get(String title) {
        if (containsKey(title))
            return read(title);
        return new SimpleArticle(title);
    }

    /**
     * {@inheritDoc}
     */
    public void put(SimpleArticle sa) {
        write2File(new CachArticle(sa));
    }

    protected void write2File(CachArticle ca) {
        OutputStream fos = null;
        try {
            File sf = new File(folder, getChecksum(ca.getTitle()) + ext);
            // TODO RM
            log.debug(""write2File "" + sf.getAbsolutePath());
            fos = new FileOutputStream(sf);
            ObjectOutputStream o = new ObjectOutputStream(fos);
            o.writeObject(ca);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected String getChecksum(String s) {
        byte[] bytes = s.getBytes();
        Checksum checksumEngine = new CRC32();
        checksumEngine.update(bytes, 0, bytes.length);
        long checksum = checksumEngine.getValue();
        return Long.toHexString(checksum);
    }

    private CachArticle read(String title) {
        if (dynStore.containsKey(title)) {
            // TODO RM
            log.debug(""readFrom Map"");
            return dynStore.get(title);
        } else {
            CachArticle temp = readFromFile(title);
            dynStore.put(title, temp);
            return temp;
        }
    }

    protected CachArticle readFromFile(String title) {
        InputStream fis = null;
        try {
            File rf = new File(folder, getChecksum(title) + ext);
            fis = new FileInputStream(rf);
            // TODO RM
            log.debug(""readFromFile: "" + rf.getAbsolutePath());
            ObjectInputStream o = new ObjectInputStream(fis);
            CachArticle sa = (CachArticle) o.readObject();
            return sa;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new CachArticle();
    }
}
","// SimpleCache_1Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#get(String)} method.
*/
class SimpleCache_1Test {","// SimpleCache_1Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#get(String)} method.
*/
class SimpleCache_1Test {

		private static final String TEST_FOLDER = ""test_cache"";
		private static final String TEST_FILE = ""test_file"";
		private static final String TEST_FILE_EXT = "".txt"";
		private static final String TEST_FILE_CONTENT = ""test_file_content"";
		private static final String TEST_FILE_CONTENT_2 = ""test_file_content_2"";
		private static final String TEST_FILE_CONTENT_3 = ""test_file_content_3"";
		private static final String TEST_FILE_CONTENT_4 = ""test_file_content_4"";
		private static final String TEST_FILE_CONTENT_5 = ""test_file_content_5"";
		private static final String TEST_FILE_CONTENT_6 = ""test_file_content_6"";
		private static final String TEST_FILE_CONTENT_7 = ""test_file_content_7"";
		private static final String TEST_FILE_CONTENT_8 = ""test_file_content_8"";
		private static final String TEST_FILE_CONTENT_9 = ""test_file_content_9"";
		private static final String TEST_FILE_CONTENT_10 = ""test_file_content_10"";
		private static final String TEST_FILE_CONTENT_11 = ""test_file_content_11"";
		private static final String TEST_FILE_CONTENT_12 = ""test_file_content_12"";
		private static final String TEST_FILE_CONTENT_13 = ""test_file_content_13"";
		private static final String TEST_FILE_CONTENT_14 = ""test_file_content_14"";
		private static final String TEST_FILE_CONTENT_15 = ""test_file_content_15"";
		private static final String TEST_FILE_CONTENT_16 = ""test_file_content_16"";
		private static final String TEST_FILE_CONTENT_17 = ""test_file_content_17"";
		private static final String TEST_FILE_CONTENT_18 = ""test_file_content_18"";
		private static final String TEST_FILE_CONTENT_19 = ""test_file_content_19"";
		private static final String TEST_FILE_CONTENT_20 = ""test_file_content_20"";
		private static final String TEST_FILE_CONTENT_21 = ""test_file_content_21"";
		private static final String TEST_FILE_CONTENT_22 = ""test_file_content_22"";
		private static final String TEST_FILE_CONTENT_23 = ""test_file_content_23"";
		private static final String TEST_FILE_CONTENT_24 = ""test_file_content_24"";
		private static final String TEST_FILE_CONTENT_25 = ""test_file_content_25"";
		private static final String TEST_FILE_CONTENT_26 = ""test_file_content_26"";
		private static final String TEST_FILE_CONTENT_27 = ""test_file_content_27"";
		private static final String TEST_FILE_CONTENT_28 = ""test_file_content_28"";
		private static final String TEST_FILE_CONTENT_29 = ""test_file_content_29"";
		private static final String TEST_FILE_CONTENT_30 = ""test_file_content_30"";
		private static final String TEST_FILE_CONTENT_31 = ""test_file_content_31"";
		private static final String TEST_FILE_CONTENT_32 = ""test_file_content_32"";
		private static final String TEST_FILE_CONTENT_33 = ""test_file_content_33"";
		private static final String TEST_FILE_CONTENT_34 = ""test_file_content_34"";
		private static final String TEST_FILE_CONTENT_35 = ""test_file_content_35"";
		private static final String TEST_FILE_CONTENT_36 = ""test_file_content_36"";
		private static final String TEST_FILE_CONTENT_37 = ""test_file_content_37"";
		private static final String TEST_FILE_CONTENT_38 = ""test_file_content_38"";
		private static final String TEST_FILE_CONTENT_39 = ""test_file_content_39"";
		private static final String TEST_FILE_CONTENT_40 = ""test_file_content_40"";
		private static final String TEST_FILE_CONTENT_41 = ""test_file_content_41"";
		private static final String TEST_FILE_CONTENT_42 = ""test_file_content_42"";
		private static final String TEST_FILE_CONTENT_43 = ""test_file_content_43"";
		private static final String TEST_FILE_CONTENT_44 = ""test_file_content_44"";
		private static final String TEST_FILE_CONTENT_45 = ""test_file_content_45"";
		private static final String TEST_FILE_CONTENT_46 = ""test_file_content_46"";
		private static final String TEST_FILE_CONTENT_47 = ""test_file_content_47"";
		private static final String TEST_FILE_CONTENT_48 = ""test_file_content_48"";
		private static final String TEST_FILE_CONTENT_49 = ""test_file_content_49"";
		private static final String TEST_FILE_CONTENT_50 = ""test_file_content_50"";
		private static final String TEST_FILE_CONTENT_51 = ""test_file_content_51"";
		private static final String TEST_FILE_CONTENT_52 = ""test_file_content_52"";
		private static final String TEST_FILE_CONTENT_53 = ""test_file_content_53"";
		private static final String TEST_FILE_CONTENT_54 = ""test_file_content_54"";
		private static final String TEST_FILE_CONTENT_55 = ""test_file_content_55"";
		private static final String TEST_FILE_CONTENT_56 = ""test_file_content_56"";
		private static final String TEST_FILE_CONTENT_57 = ""test_file_content_57"";
		private static final String TEST_FILE_CONTENT_58 = ""test_file_content_58"";
		private static final String TEST_FILE_CONTENT_59 = ""test_file_content_59"";
		private static final String TEST_FILE_CONTENT_60 = ""test_file_content_60"";
		private static final String TEST_FILE_CONTENT_61 = ""test_file_content_61"";
		private static final String TEST_FILE_CONTENT_62 = ""test_file_content_62"";
		private static final String TEST_FILE_CONTENT_63 = ""test_file_content_63"";
		private static final String TEST_FILE_CONTENT_64 = ""test_file_content_64"";
		private static final String TEST_FILE_CONTENT_65 = ""test_file_content_65"";
		private static final String TEST_FILE_CONTENT_66 = ""test_file_content_66"";
		private static final String TEST_FILE_CONTENT_67 = ""test_file_content_67"";
		private static final String TEST_FILE_CONTENT_68 = ""test_file_content_68"";
		private static final String TEST_FILE_CONTENT_69 = ""test_file_content_69"";
		private static final String TEST_FILE_CONTENT_70 = ""test_file_content_70"";
		private static final String TEST_FILE_CONTENT_71 = ""test_file_content_71"";
		private static final String TEST_FILE_CONTENT_72 = ""test_file_content_72"";
		private static final String TEST_FILE_CONTENT_73 = ""test_file_content_73"";
		private static final String TEST_FILE_CONTENT_74 = ""test_file_content_74"";
		private static final String TEST_FILE_CONTENT_75 = ""test_file_content_75"";
		private static final String TEST_FILE_CONTENT_76 = ""test_file_content_76"";
		private static final String TEST_FILE_CONTENT_77 = ""test_file_content_77"";
		private static final String TEST_FILE_CONTENT_78 = ""test_file_content_78"";
		private static final String TEST_FILE_CONTENT_79 = ""test_file_content_79"";
		private static final String TEST_FILE_CONTENT_80 = ""test_file_content_80"";
		private static final String TEST_FILE_CONTENT_81 = ""test_file_content_81"";
		private static final String TEST_FILE_CONTENT_82 = ""test_file_content_82"";
		private static final String TEST_FILE_CONTENT_83 = ""test_file_content_83"";
		private static final String TEST_FILE_CONTENT_84 = ""test_file_content_84"";
		private static final String TEST_FILE_CONTENT_85 = ""test_file_content_85"";
		private static final String TEST_FILE_CONTENT_86 = ""test_file_content_86"";
		private static final String TEST_FILE_CONTENT_87 = ""test_file_content_87"";
		private static final String TEST_FILE_CONTENT_88 = ""test_file_content_88"";
		private static final String TEST_FILE_CONTENT_89 = ""test_file_content_89"";
		private static final String TEST_FILE_CONTENT_90 = ""test_file_content_90"";
		private static final String TEST_FILE_CONTENT_91 = ""test_file_content_91"";
		private static final String TEST_FILE_CONTENT_92 = ""test_file_content_92"";
		private static final String TEST_FILE_CONTENT_93 = ""test_file_content_93"";
		private static final String TEST_FILE_CONTENT_94 = ""test_file_content_94"";
		private static final String TEST_FILE_CONTENT_95 = ""test_file_content_95"";
		private static final String TEST_FILE_CONTENT_96 = ""test_file_content_96"";
		private static final String TEST_FILE_CONTENT_97 = ""test_file_content_97"";
		private static final String TEST_FILE_CONTENT_98 = ""test_file_content_98"";
		private static final String TEST_FILE_CONTENT_99 = ""test_file_content_99"";
		private static final String TEST_FILE_CONTENT_100 = ""test_file_content_100"";
		private static final String TEST_FILE_CONTENT_101 = ""test_file_content_101"";
		private static final String TEST_FILE_CONTENT_102 = ""test_file_content_102"";
		private static final String TEST_FILE_CONTENT_103 = ""test_file_content_103"";
		private static final String TEST_FILE_CONTENT_104 = ""test_file_content_104"";
		private static final String TEST_FILE_CONTENT_105 = ""test_file_content_105"";
		private static final String TEST_FILE_CONTENT_106 = ""test_file_content_106"";
		private static final String TEST_FILE_CONTENT_107 = ""test_file_content_107"";
		private static final String TEST_FILE_CONTENT_108 = ""test_file_content_108"";
		private static final String TEST_FILE_CONTENT_109 = ""test_file_content_109"";
		private static final String TEST_FILE_CONTENT_110 = ""test_file_content_110"";
		private static final String TEST_FILE_CONTENT_111 = ""test_file_content_111"";
		private static final String TEST_FILE_CONTENT_112 = ""test_file_content_112"";
		private static final String TEST_FILE_CONTENT_113 = ""test_file_content_113"";
		private static final String TEST_FILE_CONTENT_114 = ""test_file_content_114"";
		private static final String TEST_FILE_CONTENT_115 = ""test_file_content_115"";
		private static final String TEST_FILE_CONTENT_116 = ""test_file_content_116"";
		private static final String TEST_FILE_CONTENT_117 = ""test_file_content_117"";
		private static final String TEST_FILE_CONTENT_118 = ""test_file_content_118"";
		private static final String TEST_FILE_CONTENT_119 = ""test_file_content_119"";
		private static final String TEST_FILE_CONTENT_120 = ""test_file_content_120"";
		private static final String TEST_FILE_CONTENT_121 = ""test_file_content_121"";
		private static final String TEST_FILE_CONTENT_122 = ""test_file_content_122"";
		private static final String TEST_FILE_CONTENT_123 = ""test_file_content_123"";
		private static final String TEST_FILE_CONTENT_124 = ""test_file_content_124"";
		private static final String TEST_FILE_CONTENT_125 = ""test_file_content_125"";
		private static final String TEST_FILE_CONTENT_126 = ""test_file_content_126"";
		private static final String TEST_FILE_CONTENT_127 = ""test_file_content_127"";
		private static final String TEST_FILE_CONTENT_128 = ""test_file_content_128"";
		private static final String TEST_FILE_CONTENT_129 = ""test_file_content_129"";
		private static final String TEST_FILE_CONTENT_130 = ""test_file_content_130"";
		private static final String TEST_FILE_CONTENT_131 = ""test_file_content_131"";
		private static final String TEST_FILE_CONTENT_132 = ""test_file_content_132"";
		private static final String TEST_FILE_CONTENT_133 = ""test_file_content_133"";
		private static final String TEST_FILE_CONTENT_134 = ""test_file_content_134"";
		private static final String TEST_FILE_CONTENT_135 = ""test_file_content_135"";
		private static final String TEST_FILE_CONTENT_136 = ""test_file_content_136"";
		private static final String TEST_FILE_CONTENT_137 = ""test_file_content_137"";
		private static final String TEST_FILE_CONTENT_138 = ""test_file_content_138"";
		private static final String TEST_FILE_CONTENT_139 = ""test_file_content_139"";
		private static final String TEST_FILE_CONTENT_140 = ""test_file_content_140"";
		private static final String TEST_FILE_CONTENT_141 = ""test_file_content_141"";
		private static final String TEST_FILE_CONTENT_142 = ""test_file_content_142"";
		private static final String TEST_FILE_CONTENT_143 = ""test_file_content_143"";
		private static final String TEST_FILE_CONTENT_144 = ""test_file_content_144"";
		private static final String TEST_FILE_CONTENT_145 = ""test_file_content_145"";
		private static final String TEST_FILE_CONTENT_146 = ""test_file_content_146"";
		private static final String TEST_FILE_CONTENT_147 = ""test_file_content_147"";
		private static final String TEST_FILE_CONTENT_148 = ""test_file_content_148"";
		private static final String TEST_FILE_CONTENT_149 = ""test_file_content_149"";
		private static final String TEST_FILE_CONTENT_150 = ""test_file_content_150"";
		private static final String TEST_FILE_CONTENT_151 = ""test_file_content_151"";
		private static final String TEST_FILE_CONTENT_152 = ""test_file_content_152"";
		private static final String TEST_FILE_CONTENT_153 = ""test_file_content_153"";
		private static final String TEST_FILE_CONTENT_154 = ""test_file_content_154"";
		private static final String TEST_FILE_CONTENT_155 = ""test_file_content_155"";
		private static final String TEST_FILE_CONTENT_156 = ""test_file_content_156"";
		private static final String TEST_FILE_CONTENT_157 = ""test_file_content_157"";
		private static final String TEST_FILE_CONTENT_158 = ""test_file_content_158"";
		private"
cmpl-6uDDFCfnnj7K2yotj5pvuKYv4UjIC,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/contentRep/SimpleArticle.java,98.05464220046997,length,"// SimpleArticle.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;

/**
 * This is a simple content helper class that implements the
 * EditContentAccesable interface, plus setter methods.
 *
 * @author Thomas Stock
 */
public class SimpleArticle implements ArticleMeta, Serializable, Cloneable, ContentSetable {

    /**
     */
    private static final long serialVersionUID = -1368796410854055279L;

    private String title = """";

    private String editSummary = """";

    private String text = """";

    private String editor = """";

    private boolean minorEdit = false;

    private Date editTimestamp = INIT_DATE;

    private String revId = """";

    public static final Date INIT_DATE = new Date(0);

    /**
     */
    public SimpleArticle() {
        // do nothing
    }

    /**
     * @param ca
     *            a
     */
    public SimpleArticle(ContentAccessable ca) {
        if (ca.getTitle() != null) {
            title = ca.getTitle();
        }
        if (ca.getText() != null) {
            text = ca.getText();
        }
        if (ca.getEditSummary() != null) {
            editSummary = ca.getEditSummary();
        }
        if (ca.getEditor() != null) {
            editor = ca.getEditor();
        }
        setMinorEdit(ca.isMinorEdit());
    }

    /**
     * @param sa
     *            a
     */
    public SimpleArticle(ArticleMeta sa) {
        this((ContentAccessable) sa);
        if (sa.getEditTimestamp() != null) {
            editTimestamp = sa.getEditTimestamp();
        }
        if (sa.getRevisionId() != null) {
            revId = sa.getRevisionId();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final Object clone() throws CloneNotSupportedException {
        super.clone();
        return new SimpleArticle(this);
    }

    /**
     * @param text
     *            of article
     * @param title
     *            of article
     * @deprecated use {@link #SimpleArticle(String)} and
     *             {@link #setText(String)} instead.
     */
    @Deprecated
    public SimpleArticle(final String text, final String title) {
        this.text = text;
        this.title = title;
    }

    /**
     * @param title
     *            of article
     */
    public SimpleArticle(final String title) {
        this.title = title;
    }

    /**
     * {@inheritDoc}
     */
    public String getEditSummary() {
        return editSummary;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setEditSummary(java.lang.String)
   */
    public void setEditSummary(final String s) {
        editSummary = s;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isMinorEdit() {
        return minorEdit;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setMinorEdit(boolean)
   */
    public void setMinorEdit(final boolean minor) {
        minorEdit = minor;
    }

    /**
     * @return the
     * @deprecated use {@link #getTitle()} instead
     */
    @Deprecated
    public String getLabel() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param label
     *            the label, like ""Main Page""
     * @deprecated use {@link #setTitle(String)} instead
     */
    @Deprecated
    public void setLabel(final String label) {
        setTitle(label);
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setTitle(java.lang.String)
   */
    public void setTitle(final String title) {
        this.title = title;
    }

    /**
     * {@inheritDoc}
     */
    public String getText() {
        return text;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setText(java.lang.String)
   */
    public void setText(final String text) {
        this.text = text;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#addText(java.lang.String)
   */
    public void addText(final String text) {
        setText(getText() + text);
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#addTextnl(java.lang.String)
   */
    public void addTextnl(final String text) {
        setText(getText() + ""\n"" + text);
    }

    /**
     * {@inheritDoc}
     */
    public String getEditor() {
        return editor;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setEditor(java.lang.String)
   */
    public void setEditor(final String editor) {
        this.editor = editor;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isRedirect() {
        Pattern pattern = Pattern.compile(""#(.*)redirect(.*)"", Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(text).matches()) {
            return true;
        }
        return false;
    }

    /**
     * @return the edittimestamp in UTC
     */
    public Date getEditTimestamp() {
        return editTimestamp;
    }

    /**
     * @param editTimestamp
     *            set
     * @throws ParseException
     *             if date unparseable
     */
    public void setEditTimestamp(String editTimestamp) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        try {
            setEditTimestamp(sdf.parse(editTimestamp));
        } catch (ParseException e) {
            sdf = new SimpleDateFormat(""MM/dd/yy' 'HH:mm:ss"");
            setEditTimestamp(sdf.parse(editTimestamp));
        }
    }

    /**
     * @param d
     *            the
     */
    public void setEditTimestamp(Date d) {
        editTimestamp = d;
    }

    /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof SimpleArticle))
            return false;
        SimpleArticle other = (SimpleArticle) obj;
        if (editTimestamp == null) {
            if (other.editTimestamp != null)
                return false;
        } else if (!editTimestamp.equals(other.editTimestamp))
            return false;
        if (revId == null) {
            if (other.revId != null)
                return false;
        } else if (!revId.equals(other.revId))
            return false;
        if (text == null) {
            if (other.text != null)
                return false;
        } else if (!text.equals(other.text))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        return true;
    }

    /* (non-Javadoc)
   * @see java.lang.Object#hashCode()
   */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((editTimestamp == null) ? 0 : editTimestamp.hashCode());
        result = prime * result + ((revId == null) ? 0 : revId.hashCode());
        result = prime * result + ((text == null) ? 0 : text.hashCode());
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        return result;
    }

    /**
     * {@inheritDoc}
     */
    public String getRevisionId() {
        return revId;
    }

    /**
     * @param revId
     *            the
     */
    public void setRevisionId(String revId) {
        this.revId = revId;
    }
}
","// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {","// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {

		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		"
cmpl-6uDEpebwPjJE5rWpbaY97InlkWPdT,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/inyoka/bots/InyokaWikiBot_0Test.java,76.07530307769775,length,"// InyokaWikiBot.java
/**
 */
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;

/**
 * This class helps you to interact with each wiki as part of <a
 * href=""http://ubuntuusers.de"" target=""_blank"">Inyoka</a>. This class offers a
 * set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.inyoka.*
 *
 * @author Thomas Stock
 */
public class InyokaWikiBot extends HttpBot implements WikiBot {

    private static int DEFAULT = 0;

    /**
     * @param url
     *          wikihosturl like
     *          ""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&""
     * @throws MalformedURLException
     *           if param url does not represent a well-formed url
     */
    public InyokaWikiBot(String url) throws MalformedURLException {
        super(url);
    }

    /**
     * @param name
     *          of article
     * @return a content representation of requested article, never null
     * @throws ActionException
     *           on problems with http, cookies and io
     * @throws ProcessException
     *           on access problems
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) throws ActionException, ProcessException {
        return getArticle(name, 0);
    }

    public void login(String user, String passwd) throws ActionException {
        throw new ActionException(""Login is not supported"");
    }

    public void writeContent(SimpleArticle sa) throws ActionException, ProcessException {
        throw new ActionException(""Writing is not supported"");
    }

    public void delete(String title) throws ActionException, ProcessException {
        throw new ActionException(""Deleting is not supported"");
    }

    public synchronized Article getArticle(String name, int properties) throws ActionException, ProcessException {
        return new Article(this, readData(name, properties));
    }

    public SimpleArticle readData(String name, int properties) throws ActionException, ProcessException {
        GetRevision ac = new GetRevision(name);
        performAction(ac);
        return ac.getArticle();
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        // TODO incomplete
        return new Userinfo() {

            public String getUsername() {
                return ""unknown"";
            }

            public Set<String> getRights() {
                // TODO Auto-generated method stub
                return null;
            }

            public Set<String> getGroups() {
                // TODO Auto-generated method stub
                return null;
            }
        };
    }

    public String getWikiType() {
        // TODO Auto-generated method stub
        return null;
    }

    public boolean hasCacheHandler() {
        // TODO Auto-generated method stub
        return false;
    }

    public SimpleArticle readData(String name) throws ActionException, ProcessException {
        return readData(name, DEFAULT);
    }

    public void setCacheHandler(Map<String, SimpleArticle> cache) {
        // TODO Auto-generated method stub
    }
}
","// InyokaWikiBot_0Test.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains ten unit test cases for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBot_0Test {","// InyokaWikiBot_0Test.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains ten unit test cases for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBot_0Test {

		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_1() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_2() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_3() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_4() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_5() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_6() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_7() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_8() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_9() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
}

// InyokaWikiBot_1Test.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains ten unit test cases for the {@link InyokaWikiBot#getArticle(String, int)} method.
*/
class InyokaWikiBot_1Test {
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_1() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_2() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_3() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_4() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_5() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String, int)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_6() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"", 0);
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link In"
cmpl-6uDG31OSiOQ4ilVj19JdFVB93VBKc,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_0Test.java,89.52043795585632,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {

		/**
		 * Test method for {@link MediaWiki#getCharset()}.
		 */
		@Test
		void testGetCharset() {
				assertEquals(""UTF-8"", MediaWiki.getCharset());
		}
		
		/**
		 * Test method for {@link MediaWiki#encode(String)}.
		 * @throws UnsupportedEncodingException 
		 */
		@Test
		void testEncode() throws UnsupportedEncodingException {
				assertEquals(URLEncoder.encode("" "", MediaWiki.getCharset()), MediaWiki.encode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#decode(String)}.
		 */
		@Test
		void testDecode() {
				assertEquals("" "", MediaWiki.decode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_MAIN}.
		 */
		@Test
		void testNS_MAIN() {
				assertEquals(0, MediaWiki.NS_MAIN);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_MAIN_TALK}.
		 */
		@Test
		void testNS_MAIN_TALK() {
				assertEquals(1, MediaWiki.NS_MAIN_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_USER}.
		 */
		@Test
		void testNS_USER() {
				assertEquals(2, MediaWiki.NS_USER);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_USER_TALK}.
		 */
		@Test
		void testNS_USER_TALK() {
				assertEquals(3, MediaWiki.NS_USER_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_META}.
		 */
		@Test
		void testNS_META() {
				assertEquals(4, MediaWiki.NS_META);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_META_TALK}.
		 */
		@Test
		void testNS_META_TALK() {
				assertEquals(5, MediaWiki.NS_META_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_IMAGES}.
		 */
		@Test
		void testNS_IMAGES() {
				assertEquals(6, MediaWiki.NS_IMAGES);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_IMAGES_TALK}.
		 */
		@Test
		void testNS_IMAGES_TALK() {
				assertEquals(7, MediaWiki.NS_IMAGES_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_MEDIAWIKI}.
		 */
		@Test
		void testNS_MEDIAWIKI() {
				assertEquals(8, MediaWiki.NS_MEDIAWIKI);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_MEDIAWIKI_TALK}.
		 */
		@Test
		void testNS_MEDIAWIKI_TALK() {
				assertEquals(9, MediaWiki.NS_MEDIAWIKI_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_TEMPLATE}.
		 */
		@Test
		void testNS_TEMPLATE() {
				assertEquals(10, MediaWiki.NS_TEMPLATE);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_TEMPLATE_TALK}.
		 */
		@Test
		void testNS_TEMPLATE_TALK() {
				assertEquals(11, MediaWiki.NS_TEMPLATE_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_HELP}.
		 */
		@Test
		void testNS_HELP() {
				assertEquals(12, MediaWiki.NS_HELP);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_HELP_TALK}.
		 */
		@Test
		void testNS_HELP_TALK() {
				assertEquals(13, MediaWiki.NS_HELP_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_CATEGORY}.
		 */
		@Test
		void testNS_CATEGORY() {
				assertEquals(14, MediaWiki.NS_CATEGORY);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_CATEGORY_TALK}.
		 */
		@Test
		void testNS_CATEGORY_TALK() {
				assertEquals(15, MediaWiki.NS_CATEGORY_TALK);
		}
		
		/**
		 * Test method for {@link MediaWiki#NS_ALL}.
		 */
		@Test
		void testNS_ALL() {
				assertArrayEquals(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, MediaWiki.NS_ALL);
		}
		
		/**
		 * Test method for {@link MediaWiki#BOT_GROUPS}.
		 */
		@Test
		void testBOT_GROUPS() {
				Set<String> set = new HashSet<String>();
				set.add(""bot"");
				assertEquals(set, MediaWiki.BOT_GROUPS);
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_09}.
		 */
		@Test
		void testVersionMW1_09() {
				assertEquals(""1.09"", MediaWiki.Version.MW1_09.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_10}.
		 */
		@Test
		void testVersionMW1_10() {
				assertEquals(""1.10"", MediaWiki.Version.MW1_10.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_11}.
		 */
		@Test
		void testVersionMW1_11() {
				assertEquals(""1.11"", MediaWiki.Version.MW1_11.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_12}.
		 */
		@Test
		void testVersionMW1_12() {
				assertEquals(""1.12"", MediaWiki.Version.MW1_12.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_13}.
		 */
		@Test
		void testVersionMW1_13() {
				assertEquals(""1.13"", MediaWiki.Version.MW1_13.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_14}.
		 */
		@Test
		void testVersionMW1_14() {
				assertEquals(""1.14"", MediaWiki.Version.MW1_14.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_15}.
		 */
		@Test
		void testVersionMW1_15() {
				assertEquals(""1.15"", MediaWiki.Version.MW1_15.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_16}.
		 */
		@Test
		void testVersionMW1_16() {
				assertEquals(""1.16"", MediaWiki.Version.MW1_16.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_17}.
		 */
		@Test
		void testVersionMW1_17() {
				assertEquals(""1.17"", MediaWiki.Version.MW1_17.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#MW1_18}.
		 */
		@Test
		void testVersionMW1_18() {
				assertEquals(""1.18"", MediaWiki.Version.MW1_18.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#UNKNOWN}.
		 */
		@Test
		void testVersionUNKNOWN() {
				assertEquals(""UNKNOWN"", MediaWiki.Version.UNKNOWN.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#DEVELOPMENT}.
		 */
		@Test
		void testVersionDEVELOPMENT() {
				assertEquals(""DEVELOPMENT"", MediaWiki.Version.DEVELOPMENT.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#getLatest()}.
		 */
		@Test
		void testVersionGetLatest() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLatest());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#getLast()}.
		 */
		@Test
		void testVersionGetLast() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLast());
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#greaterEqThen(Version)}.
		 */
		@Test
		void testVersionGreaterEqThen() {
				assertTrue(MediaWiki.Version.MW1_18.greaterEqThen(MediaWiki.Version.MW1_17));
		}
		
		/**
		 * Test method for {@link MediaWiki#Version#valuesStable()}.
		 */
		@Test
		void testVersionValuesStable() {
				assertArrayEquals(new MediaWiki.Version[] {MediaWiki.Version.MW1_15, MediaWiki.Version.MW1_16, MediaWiki.Version.MW1_17, MediaWiki.Version.MW1_18}, MediaWiki.Version.valuesStable());
		}
}

// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */"
cmpl-6uDHVYPnDlAHkKNEWjFr7lsQ1FIub,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_1Test.java,83.89701700210571,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {

	/**
	 * Test method for {@link MediaWiki#encode(String)}.
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	void testEncode() throws UnsupportedEncodingException {
		
		String[] testStrings = {
				"""",
				"" "",
				""\n"",
				""\t"",
				""\r"",
				""\r\n"",
				""\n\r"",
				""\u0020"",
				""\u0021"",
				""\u0022"",
				""\u0023"",
				""\u0024"",
				""\u0025"",
				""\u0026"",
				""\u0027"",
				""\u0028"",
				""\u0029"",
				""\u002A"",
				""\u002B"",
				""\u002C"",
				""\u002D"",
				""\u002E"",
				""\u002F"",
				""\u0030"",
				""\u0031"",
				""\u0032"",
				""\u0033"",
				""\u0034"",
				""\u0035"",
				""\u0036"",
				""\u0037"",
				""\u0038"",
				""\u0039"",
				""\u003A"",
				""\u003B"",
				""\u003C"",
				""\u003D"",
				""\u003E"",
				""\u003F"",
				""\u0040"",
				""\u0041"",
				""\u0042"",
				""\u0043"",
				""\u0044"",
				""\u0045"",
				""\u0046"",
				""\u0047"",
				""\u0048"",
				""\u0049"",
				""\u004A"",
				""\u004B"",
				""\u004C"",
				""\u004D"",
				""\u004E"",
				""\u004F"",
				""\u0050"",
				""\u0051"",
				""\u0052"",
				""\u0053"",
				""\u0054"",
				""\u0055"",
				""\u0056"",
				""\u0057"",
				""\u0058"",
				""\u0059"",
				""\u005A"",
				""\u005B"",
				""\u005C"",
				""\u005D"",
				""\u005E"",
				""\u005F"",
				""\u0060"",
				""\u0061"",
				""\u0062"",
				""\u0063"",
				""\u0064"",
				""\u0065"",
				""\u0066"",
				""\u0067"",
				""\u0068"",
				""\u0069"",
				""\u006A"",
				""\u006B"",
				""\u006C"",
				""\u006D"",
				""\u006E"",
				""\u006F"",
				""\u0070"",
				""\u0071"",
				""\u0072"",
				""\u0073"",
				""\u0074"",
				""\u0075"",
				""\u0076"",
				""\u0077"",
				""\u0078"",
				""\u0079"",
				""\u007A"",
				""\u007B"",
				""\u007C"",
				""\u007D"",
				""\u007E"",
				""\u007F"",
				""\u0080"",
				""\u0081"",
				""\u0082"",
				""\u0083"",
				""\u0084"",
				""\u0085"",
				""\u0086"",
				""\u0087"",
				""\u0088"",
				""\u0089"",
				""\u008A"",
				""\u008B"",
				""\u008C"",
				""\u008D"",
				""\u008E"",
				""\u008F"",
				""\u0090"",
				""\u0091"",
				""\u0092"",
				""\u0093"",
				""\u0094"",
				""\u0095"",
				""\u0096"",
				""\u0097"",
				""\u0098"",
				""\u0099"",
				""\u009A"",
				""\u009B"",
				""\u009C"",
				""\u009D"",
				""\u009E"",
				""\u009F"",
				""\u00A0"",
				""\u00A1"",
				""\u00A2"",
				""\u00A3"",
				""\u00A4"",
				""\u00A5"",
				""\u00A6"",
				""\u00A7"",
				""\u00A8"",
				""\u00A9"",
				""\u00AA"",
				""\u00AB"",
				""\u00AC"",
				""\u00AD"",
				""\u00AE"",
				""\u00AF"",
				""\u00B0"",
				""\u00B1"",
				""\u00B2"",
				""\u00B3"",
				""\u00B4"",
				""\u00B5"",
				""\u00B6"",
				""\u00B7"",
				""\u00B8"",
				""\u00B9"",
				""\u00BA"",
				""\u00BB"",
				""\u00BC"",
				""\u00BD"",
				""\u00BE"",
				""\u00BF"",
				""\u00C0"",
				""\u00C1"",
				""\u00C2"",
				""\u00C3"",
				""\u00C4"",
				""\u00C5"",
				""\u00C6"",
				""\u00C7"",
				""\u00C8"",
				""\u00C9"",
				""\u00CA"",
				""\u00CB"",
				""\u00CC"",
				""\u00CD"",
				""\u00CE"",
				""\u00CF"",
				""\u00D0"",
				""\u00D1"",
				""\u00D2"",
				""\u00D3"",
				""\u00D4"",
				""\u00D5"",
				""\u00D6"",
				""\u00D7"",
				""\u00D8"",
				""\u00D9"",
				""\u00DA"",
				""\u00DB"",
				""\u00DC"",
				""\u00DD"",
				""\u00DE"",
				""\u00DF"",
				""\u00E0"",
				""\u00E1"",
				""\u00E2"",
				""\u00E3"",
				""\u00E4"",
				""\u00E5"",
				""\u00E6"",
				""\u00E7"",
				""\u00E8"",
				""\u00E9"",
				""\u00EA"",
				""\u00EB"",
				""\u00EC"",
				""\u00ED"",
				""\u00EE"",
				""\u00EF"",
				""\u00F0"",
				""\u00F1"",
				""\u00F2"",
				""\u00F3"",
				""\u00F4"",
				""\u00F5"",
				""\u00F6"",
				""\u00F7"",
				""\u00F8"",
				""\u00F9"",
				""\u00FA"",
				""\u00FB"",
				""\u00FC"",
				""\u00FD"",
				""\u00FE"",
				""\u00FF"",
				""\u0100"",
				""\u0101"",
				""\u0102"",
				""\u0103"",
				""\u0104"",
				""\u0105"",
				""\u0106"",
				""\u0107"",
				""\u0108"",
				""\u0109"",
				""\u010A"",
				""\u010B"",
				""\u010C"",
				""\u010D"",
				""\u010E"",
				""\u010F"",
				""\u0110"",
				""\u0111"",
				""\u0112"",
				""\u0113"",
				""\u0114"",
				""\u0115"",
				""\u0116"",
				""\u0117"",
				""\u0118"",
				""\u0119"",
				""\u011A"",
				""\u011B"",
				""\u011C"",
				""\u011D"",
				""\u011E"",
				""\u011F"",
				""\u0120"",
				""\u0121"",
				""\u0122"",
				""\u0123"",
				""\u0124"",
				""\u0125"",
				""\u0126"",
				""\u0127"",
				""\u0128"",
				""\u0129"",
				""\u012A"",
				""\u012B"",
				""\u012C"",
				""\u012D"",
				""\u012E"",
				""\u012F"",
				""\u0130"",
				""\u0131"",
				""\u0132"",
				""\u0133"",
				""\u0134"",
				""\u0135"",
				""\u0136"",
				""\u0137"",
				""\u0138"",
				""\u0139"",
				""\u013A"",
				""\u013B"",
				""\u013C"",
				""\u013D"",
				""\u013E"",
				""\u013F"",
				""\u0140"",
				""\u0141"",
				""\u0142"",
				""\u0143"",
				""\u0144"",
				""\u0145"",
				""\u0146"",
				""\u0147"",
				""\u0148"",
				""\u0149"",
				""\u014A"",
				""\u014B"",
				""\u014C"",
				""\u014D"",
				""\u014E"",
				""\u014F"",
				""\u0150"",
				""\u0151"",
				""\u0152"",
				""\u0153"",
				""\u0154"",
				""\u0155"",
				""\u0156"",
				""\u0157"",
				""\u0158"",
				""\u0159"",
				""\u015A"",
				""\u015B"",
				""\u015C"",
				""\u015D"",
				""\u015E"",
				""\u015F"",
				""\u0160"",
				""\u0161"",
				""\u0162"",
				""\u0163"",
				""\u0164"",
				""\u0165"",
				""\u0166"",
				""\u0167"",
				""\u0168"",
				""\u0169"",
				""\u016A"",
				""\u016B"",
				""\u016C"",
				""\u016D"",
				""\u016E"",
				""\u016F"",
				""\u0170"",
				""\u0171"",
				""\u0172"",
				""\u0173"",
				""\u0174"",
				""\u0175"",
				""\u0176"",
				""\u0177"",
				""\u0178"",
				""\u0179"",
				"
cmpl-6uDIq4hO6rZ7ZibQ5ZmXx6PMu7IQt,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_2Test.java,81.96036195755005,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {

	/**
	 * Test method for {@link MediaWiki#decode(String)}.
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	void testDecode() throws UnsupportedEncodingException {
		
		String s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		String expected = ""äöüßÄÖÜ¤°€"";
		String actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°"
cmpl-6uDKA9WzwbzuvufF4I3jQGutqHDDa,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/FileUpload_0Test.java,83.05973505973816,length,"// FileUpload.java
/*
 * Copyright 2007 Justus Bisser.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Thomas Stock
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;

/**
 * <p>
 * To allow your bot to upload media in your MediaWiki. Add at least the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableUploads = true;
 * </pre>
 *
 * For more details see also
 * <a href=""http://www.mediawiki.org/wiki/Help:Configuration_settings#Uploads"">Upload Config</a>
 *
 * @author Justus Bisser
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class FileUpload extends MWAction {

    private final Get g;

    private boolean first = true;

    private boolean second = true;

    private final SimpleFile a;

    private Post msg;

    /**
     * @param a the
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(final SimpleFile a, MediaWikiBot bot) throws ActionException, VersionException {
        super(bot.getVersion());
        if (!a.getFile().isFile() || !a.getFile().canRead()) {
            throw new ActionException(""no such file "" + a.getFile());
        }
        if (!bot.isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        this.a = a;
        String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
        g = new Get(uS);
    }

    /**
     * @param filename to uplad
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(MediaWikiBot bot, String filename) throws ActionException, VersionException {
        this(new SimpleFile(filename), bot);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            return g;
        }
        String uS = """";
        // try {
        uS = ""/Spezial:Hochladen"";
        uS = ""/index.php?title=Special:Upload"";
        // uS = ""/index.php?title="" + URLEncoder.encode(""Spezial:Hochladen"",
        // MediaWikiBot.CHARSET);
        // + ""&action=submit"";
        // } catch (UnsupportedEncodingException e) {
        // e.printStackTrace();
        // }
        try {
            log.info(""WRITE: "" + a.getTitle());
            Post post = new Post(uS);
            if (a.getText().length() == 0) {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                //				 post.addParam(""wpUploadDescription"", ""false"");
                //				 post.addParam(""wpWatchthis"", ""false"");
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
            } else {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                // new StringPart(""wpUploadDescription"", ""false""),
                // new StringPart(""wpWatchthis"", ""false""),
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
                post.addParam(""wpUploadDescription"", a.getText());
            }
            if (!a.getFile().exists()) {
                throw new FileNotFoundException();
            }
            msg = post;
            second = false;
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        if (s.contains(""error"")) {
            Pattern errFinder = Pattern.compile(""<p>(.*?)</p>"", Pattern.DOTALL | Pattern.MULTILINE);
            Matcher m = errFinder.matcher(s);
            String lastP = """";
            while (m.find()) {
                lastP = MediaWiki.decode(m.group(1));
                log.error(""Upload failed: "" + lastP);
            }
            throw new ProcessException(""Upload failed - "" + lastP);
        }
        return """";
    }
}
","// FileUpload_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_0Test {","// FileUpload_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_0Test {

		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_1Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_2Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_3Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_4Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_4Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_5Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_5Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_6Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_6Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_7Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge"
cmpl-6uDLVi4hsJ7cHnE5bcD3929LRLogr,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/FileUpload_1Test.java,83.57828068733215,length,"// FileUpload.java
/*
 * Copyright 2007 Justus Bisser.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Thomas Stock
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;

/**
 * <p>
 * To allow your bot to upload media in your MediaWiki. Add at least the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableUploads = true;
 * </pre>
 *
 * For more details see also
 * <a href=""http://www.mediawiki.org/wiki/Help:Configuration_settings#Uploads"">Upload Config</a>
 *
 * @author Justus Bisser
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class FileUpload extends MWAction {

    private final Get g;

    private boolean first = true;

    private boolean second = true;

    private final SimpleFile a;

    private Post msg;

    /**
     * @param a the
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(final SimpleFile a, MediaWikiBot bot) throws ActionException, VersionException {
        super(bot.getVersion());
        if (!a.getFile().isFile() || !a.getFile().canRead()) {
            throw new ActionException(""no such file "" + a.getFile());
        }
        if (!bot.isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        this.a = a;
        String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
        g = new Get(uS);
    }

    /**
     * @param filename to uplad
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(MediaWikiBot bot, String filename) throws ActionException, VersionException {
        this(new SimpleFile(filename), bot);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            return g;
        }
        String uS = """";
        // try {
        uS = ""/Spezial:Hochladen"";
        uS = ""/index.php?title=Special:Upload"";
        // uS = ""/index.php?title="" + URLEncoder.encode(""Spezial:Hochladen"",
        // MediaWikiBot.CHARSET);
        // + ""&action=submit"";
        // } catch (UnsupportedEncodingException e) {
        // e.printStackTrace();
        // }
        try {
            log.info(""WRITE: "" + a.getTitle());
            Post post = new Post(uS);
            if (a.getText().length() == 0) {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                //				 post.addParam(""wpUploadDescription"", ""false"");
                //				 post.addParam(""wpWatchthis"", ""false"");
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
            } else {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                // new StringPart(""wpUploadDescription"", ""false""),
                // new StringPart(""wpWatchthis"", ""false""),
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
                post.addParam(""wpUploadDescription"", a.getText());
            }
            if (!a.getFile().exists()) {
                throw new FileNotFoundException();
            }
            msg = post;
            second = false;
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        if (s.contains(""error"")) {
            Pattern errFinder = Pattern.compile(""<p>(.*?)</p>"", Pattern.DOTALL | Pattern.MULTILINE);
            Matcher m = errFinder.matcher(s);
            String lastP = """";
            while (m.find()) {
                lastP = MediaWiki.decode(m.group(1));
                log.error(""Upload failed: "" + lastP);
            }
            throw new ProcessException(""Upload failed - "" + lastP);
        }
        return """";
    }
}
","// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_1Test {","// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_1Test {

		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_2Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_3Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_4Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_4Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_5Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_5Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_6Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_6Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.process"
cmpl-6uDMrrMjcjqkNKefDn50qwrwpYvgE,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetApiToken_0Test.java,89.9968774318695,length,"// GetApiToken.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-<a
 * href=""http://www.mediawiki.org/wiki/API:Changing_wiki_content""
 * >Editing-API</a>. <br />
 * Its job is to get the token for some actions like delete or edit.
 *
 * @author Max Gensthaler
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public final class GetApiToken extends MWAction {

    /**
     * Types that need a token. See API field intoken.
     */
    // TODO this does not feel the elegant way.
    // Probably put complete request URIs into this enum objects
    // to support different URIs for different actions.
    public enum Intoken {

        DELETE,
        EDIT,
        MOVE,
        PROTECT,
        EMAIL,
        BLOCK,
        UNBLOCK,
        IMPORT
    }

    private String token = """";

    private boolean first = true;

    private Intoken intoken = null;

    private Get msg;

    /**
     * Constructs a new <code>GetToken</code> action.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     * @param si
     *          site info object
     * @param ui
     *          user info object
     * @throws VersionException
     *           if this action is not supported of the MediaWiki version
     *           connected to
     */
    public GetApiToken(Intoken intoken, String title, Version v, Userinfo ui) throws VersionException {
        super(v);
        this.intoken = intoken;
        generateTokenRequest(intoken, title);
    }

    /**
     * Generates the next MediaWiki API token and adds it to <code>msgs</code>.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     */
    private void generateTokenRequest(Intoken intoken, String title) {
        if (log.isTraceEnabled()) {
            log.trace(""enter GetToken.generateTokenRequest()"");
        }
        String uS = ""/api.php"" + ""?action=query"" + ""&prop=info"" + ""&intoken="" + intoken.toString().toLowerCase() + ""&titles="" + MediaWiki.encode(title) + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * Returns the requested token after parsing the result from MediaWiki.
     *
     * @return the requested token
     */
    protected String getToken() {
        return token;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (hm.getRequest().equals(msg.getRequest())) {
            if (log.isTraceEnabled()) {
                log.trace(""enter GetToken.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                process(doc);
            } catch (JDOMException e) {
                if (s.startsWith(""unknown_action:"")) {
                    log.error(""Adding '$wgEnableWriteAPI = true;' to your MediaWiki's LocalSettings.php might remove this problem."", e);
                } else {
                    log.error(e.getMessage(), e);
                }
            } catch (IOException e) {
                log.error(e.getMessage(), e);
            }
        }
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            if (log.isTraceEnabled()) {
                log.trace(""enter getApiToken"");
            }
            return msg;
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        try {
            Element elem = doc.getRootElement().getChild(""query"").getChild(""pages"").getChild(""page"");
            // process reply for token request
            switch(intoken) {
                case DELETE:
                    token = elem.getAttributeValue(""deletetoken"");
                    break;
                case EDIT:
                    token = elem.getAttributeValue(""edittoken"");
                    break;
                case MOVE:
                    token = elem.getAttributeValue(""movetoken"");
                    break;
                case PROTECT:
                    token = elem.getAttributeValue(""protecttoken"");
                    break;
                case EMAIL:
                    token = elem.getAttributeValue(""emailtoken"");
                    break;
                case BLOCK:
                    token = elem.getAttributeValue(""blocktoken"");
                    break;
                case UNBLOCK:
                    token = elem.getAttributeValue(""unblocktoken"");
                    break;
                case IMPORT:
                    token = elem.getAttributeValue(""importtoken"");
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        } catch (RuntimeException e) {
            throw new RuntimeException(""Unknow reply. This is not a token."", e);
        }
        if (log.isDebugEnabled())
            log.debug(""found token ="" + token + ""\n"" + ""for: "" + msg.getRequest() + ""\n"");
    }
}
","// GetApiToken_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#processReturningText(String, HttpAction)} method.
*/
class GetApiToken_0Test {","// GetApiToken_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#processReturningText(String, HttpAction)} method.
*/
class GetApiToken_0Test {

		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_0() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""Main Page"", MW1_12, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_1() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""Main Page"", MW1_13, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_2() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""Main Page"", MW1_14, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_3() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""Main Page"", MW1_15, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_4() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""Main Page"", MW1_16, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_5() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""Main Page"", MW1_12, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_6() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""Main Page"", MW1_13, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_7() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""Main Page"", MW1_14, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_8() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""Main Page"", MW1_15, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_9() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Arrange
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-11-15T13:12:10Z\"" lastrevid=\""1\"" counter=\""\"" length=\""0\"" new=\""\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(null, null, null);
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""Main Page"", MW1_16, new Userinfo());
				
				// Act
				String actual = getApiToken.processReturningText(s, hm);
				
				// Assert
				assertEquals("""", actual);
		}
		
}

// GetApiToken_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
"
cmpl-6uDOJIyhxzBYOIZSFjARJbzJuzjys,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetApiToken_1Test.java,84.25088548660278,length,"// GetApiToken.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-<a
 * href=""http://www.mediawiki.org/wiki/API:Changing_wiki_content""
 * >Editing-API</a>. <br />
 * Its job is to get the token for some actions like delete or edit.
 *
 * @author Max Gensthaler
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public final class GetApiToken extends MWAction {

    /**
     * Types that need a token. See API field intoken.
     */
    // TODO this does not feel the elegant way.
    // Probably put complete request URIs into this enum objects
    // to support different URIs for different actions.
    public enum Intoken {

        DELETE,
        EDIT,
        MOVE,
        PROTECT,
        EMAIL,
        BLOCK,
        UNBLOCK,
        IMPORT
    }

    private String token = """";

    private boolean first = true;

    private Intoken intoken = null;

    private Get msg;

    /**
     * Constructs a new <code>GetToken</code> action.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     * @param si
     *          site info object
     * @param ui
     *          user info object
     * @throws VersionException
     *           if this action is not supported of the MediaWiki version
     *           connected to
     */
    public GetApiToken(Intoken intoken, String title, Version v, Userinfo ui) throws VersionException {
        super(v);
        this.intoken = intoken;
        generateTokenRequest(intoken, title);
    }

    /**
     * Generates the next MediaWiki API token and adds it to <code>msgs</code>.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     */
    private void generateTokenRequest(Intoken intoken, String title) {
        if (log.isTraceEnabled()) {
            log.trace(""enter GetToken.generateTokenRequest()"");
        }
        String uS = ""/api.php"" + ""?action=query"" + ""&prop=info"" + ""&intoken="" + intoken.toString().toLowerCase() + ""&titles="" + MediaWiki.encode(title) + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * Returns the requested token after parsing the result from MediaWiki.
     *
     * @return the requested token
     */
    protected String getToken() {
        return token;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (hm.getRequest().equals(msg.getRequest())) {
            if (log.isTraceEnabled()) {
                log.trace(""enter GetToken.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                process(doc);
            } catch (JDOMException e) {
                if (s.startsWith(""unknown_action:"")) {
                    log.error(""Adding '$wgEnableWriteAPI = true;' to your MediaWiki's LocalSettings.php might remove this problem."", e);
                } else {
                    log.error(e.getMessage(), e);
                }
            } catch (IOException e) {
                log.error(e.getMessage(), e);
            }
        }
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            if (log.isTraceEnabled()) {
                log.trace(""enter getApiToken"");
            }
            return msg;
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        try {
            Element elem = doc.getRootElement().getChild(""query"").getChild(""pages"").getChild(""page"");
            // process reply for token request
            switch(intoken) {
                case DELETE:
                    token = elem.getAttributeValue(""deletetoken"");
                    break;
                case EDIT:
                    token = elem.getAttributeValue(""edittoken"");
                    break;
                case MOVE:
                    token = elem.getAttributeValue(""movetoken"");
                    break;
                case PROTECT:
                    token = elem.getAttributeValue(""protecttoken"");
                    break;
                case EMAIL:
                    token = elem.getAttributeValue(""emailtoken"");
                    break;
                case BLOCK:
                    token = elem.getAttributeValue(""blocktoken"");
                    break;
                case UNBLOCK:
                    token = elem.getAttributeValue(""unblocktoken"");
                    break;
                case IMPORT:
                    token = elem.getAttributeValue(""importtoken"");
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        } catch (RuntimeException e) {
            throw new RuntimeException(""Unknow reply. This is not a token."", e);
        }
        if (log.isDebugEnabled())
            log.debug(""found token ="" + token + ""\n"" + ""for: "" + msg.getRequest() + ""\n"");
    }
}
","// GetApiToken_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiToken_1Test {","// GetApiToken_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiToken_1Test {

		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_1() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_12, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_2() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_13, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_3() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_14, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_4() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_15, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_5() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_16, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_6() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_12, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_7() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_13, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_8() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_14, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_9() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_15, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_10() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_16, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
}

// GetApiToken_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#processReturningText(String, HttpAction)} method.
*/
class GetApiToken_2Test {
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_1() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_12, new Userinfo(""Test"", ""Test""));
				String result = classUnderTest.processReturningText(""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Test\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-03-16T15:59:11Z\"" lastrevid=\""1\"" counter=\""0\"" length=\""0\"" new=\""\"" /></pages></query></api>"", new HttpAction());
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_2() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_13, new Userinfo(""Test"", ""Test""));
				String result = classUnderTest.processReturningText(""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Test\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-03-16T15:59:11Z\"" lastrevid=\""1\"" counter=\""0\"" length=\""0\"" new=\""\"" /></pages></query></api>"", new HttpAction());
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_3() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_14, new Userinfo(""Test"", ""Test""));
				String result = classUnderTest.processReturningText(""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Test\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-03-16T15:59:11Z\"" lastrevid=\""1\"" counter=\""0\"" length=\""0\"" new=\""\"" /></pages></query></api>"", new HttpAction());
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_4() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_15, new Userinfo(""Test"", ""Test""));
				String result = classUnderTest.processReturningText(""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Test\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-03-16T15:59:11Z\"" lastrevid=\""1\"" counter=\""0\"" length=\""0\"" new=\""\"" /></pages></query></api>"", new HttpAction());
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_5() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_16, new Userinfo(""Test"", ""Test""));
				String result = classUnderTest.processReturningText(""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Test\"" contentmodel=\""wikitext\"" pagelanguage=\""en\"" touched=\""2010-03-16T15:59:11Z\"" lastrevid=\""1\"" counter=\""0\"" length=\""0\"" new=\""\"" /></pages></query></api>"", new HttpAction());
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @th"
cmpl-6uDPfk0qPpQjT9fGl8lvynoHnOLGH,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetRevision.java,93.10755324363708,length,"// GetRevision.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Reads the content of a given article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetRevision extends MWAction {

    private final SimpleArticle sa;

    public static final int CONTENT = 1 << 1;

    public static final int TIMESTAMP = 1 << 2;

    public static final int USER = 1 << 3;

    public static final int COMMENT = 1 << 4;

    public static final int IDS = 1 << 5;

    public static final int FLAGS = 1 << 6;

    public static final int FIRST = 1 << 30;

    public static final int LAST = 1 << 31;

    private final int properties;

    private final Get msg;

    private boolean singleProcess = true;

    private final Version botVersion;

    /**
     * TODO follow redirects. TODO change constructor fild ordering; bot
     *
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     * @param articlename
     *          of
     * @param properties
     *          the
     * @param v
     *          the
     */
    public GetRevision(Version v, final String articlename, final int properties) throws ProcessException {
        super(v);
        botVersion = v;
        // if (!bot.getUserinfo().getRights().contains(""read"")) {
        // throw new
        // ActionException(""reading is not permited, make sure that this account is able to read"");
        // } FIXME check if
        this.properties = properties;
        sa = new SimpleArticle();
        sa.setTitle(articlename);
        String uS = ""/api.php?action=query&prop=revisions&titles="" + MediaWiki.encode(articlename) + ""&rvprop="" + getDataProperties(properties) + getReversion(properties) + ""&rvlimit=1"" + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(final String s, HttpAction ha) throws ProcessException {
        if (msg.getRequest().equals(ha.getRequest()) && singleProcess) {
            if (log.isDebugEnabled()) {
                // TODO no very nice debug here
                if (s.length() < 151) {
                    log.debug(s);
                } else {
                    log.debug(""..."" + s.substring(50, 150) + ""..."");
                }
            }
            parse(s);
            singleProcess = false;
        }
        return """";
    }

    /**
     * TODO Not very nice implementation.
     *
     * @param property
     *          the
     * @return a
     */
    private String getDataProperties(final int property) {
        String properties = """";
        if ((property & CONTENT) > 0) {
            properties += ""content|"";
        }
        if ((property & COMMENT) > 0) {
            properties += ""comment|"";
        }
        if ((property & TIMESTAMP) > 0) {
            properties += ""timestamp|"";
        }
        if ((property & USER) > 0) {
            properties += ""user|"";
        }
        if ((property & IDS) > 0 && botVersion.greaterEqThen(MW1_11)) {
            properties += ""ids|"";
        }
        if ((property & FLAGS) > 0 && botVersion.greaterEqThen(MW1_11)) {
            properties += ""flags|"";
        }
        if (properties.length() > 0) {
            return MediaWiki.encode(properties.substring(0, properties.length() - 1));
        }
        return """";
    }

    private String getReversion(final int property) {
        String properties = ""&rvdir="";
        if ((property & FIRST) > 0) {
            properties += ""newer"";
        } else {
            properties += ""older"";
        }
        return properties;
    }

    private void parse(final String xml) throws ApiException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        if (root != null)
            findContent(root);
    }

    /**
     * @return the
     */
    public SimpleArticle getArticle() {
        return sa;
    }

    private void findContent(final Element root) throws ApiException {
        // if(log.isDebugEnabled())
        // log.debug(""try to find content in "" + root.getQualifiedName());
        @SuppressWarnings(""unchecked"")
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""error"")) {
                throw new ApiException(element.getAttributeValue(""code""), element.getAttributeValue(""info""));
            } else if (element.getQualifiedName().equalsIgnoreCase(""rev"")) {
                try {
                    sa.setText(element.getText());
                } catch (NullPointerException e) {
                    if (log.isDebugEnabled()) {
                        log.debug(""no text found"");
                    }
                }
                if ((properties & FLAGS) > 0) {
                    if (element.getAttribute(""minor"") != null) {
                        sa.setMinorEdit(true);
                    } else {
                        sa.setMinorEdit(false);
                    }
                }
                sa.setRevisionId(getAsStringValues(element, ""revid""));
                sa.setEditSummary(getAsStringValues(element, ""comment""));
                sa.setEditor(getAsStringValues(element, ""user""));
                if ((properties & TIMESTAMP) > 0) {
                    try {
                        sa.setEditTimestamp(getAsStringValues(element, ""timestamp""));
                    } catch (ParseException e) {
                        log.debug(""timestamp could not be parsed"");
                    }
                }
            } else {
                findContent(element);
            }
        }
    }

    private String getAsStringValues(Element e, String attrName) {
        String buff = """";
        try {
            buff = e.getAttributeValue(attrName);
            if (buff == null) {
                throw new NullPointerException();
            }
        } catch (Exception npe) {
            // LOG.debug(""no value for "" + attrName );
            buff = """";
        }
        // LOG.debug(""value for "" + attrName + "" = \"""" + buff + ""\"""");
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetRevisionTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRevision}.
* It contains ten unit test cases for the {@link GetRevision#processReturningText(String, HttpAction)} method.
*/
class GetRevisionTest {","// GetRevisionTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRevision}.
* It contains ten unit test cases for the {@link GetRevision#processReturningText(String, HttpAction)} method.
*/
class GetRevisionTest {

		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_Content() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.CONTENT);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getText());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the timestamp of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_Timestamp() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.TIMESTAMP);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals(""2007-12-22T22:59:59Z"", gr.getArticle().getEditTimestamp());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the user of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_User() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.USER);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals(""MediaWiki default"", gr.getArticle().getEditor());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the comment of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_Comment() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.COMMENT);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getEditSummary());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the revision id of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_RevisionId() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.IDS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals(""1"", gr.getArticle().getRevisionId());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the flags of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_Flags() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.FLAGS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertFalse(gr.getArticle().isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the first revision of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_First() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.FIRST);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals(""1"", gr.getArticle().getRevisionId());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the last revision of the article is retrieved.
		*/
		@Test
		void testProcessReturningText_Last() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.LAST);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals(""1"", gr.getArticle().getRevisionId());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content, timestamp, user, comment, revision id and flags of the article are retrieved.
		*/
		@Test
		void testProcessReturningText_All() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getText());
				assertEquals(""2007-12-22T22:59:59Z"", gr.getArticle().getEditTimestamp());
				assertEquals(""MediaWiki default"", gr.getArticle().getEditor());
				assertEquals("""", gr.getArticle().getEditSummary());
				assertEquals(""1"", gr.getArticle().getRevisionId());
				assertFalse(gr.getArticle().isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content, timestamp, user, comment, revision id and flags of the article are retrieved.
		*/
		@Test
		void testProcessReturningText_All_MW1_11() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_11, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getText());
				assertEquals(""2007-12-22T22:59:59Z"", gr.getArticle().getEditTimestamp());
				assertEquals(""MediaWiki default"", gr.getArticle().getEditor());
				assertEquals("""", gr.getArticle().getEditSummary());
				assertEquals(""1"", gr.getArticle().getRevisionId());
				assertFalse(gr.getArticle().isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content, timestamp, user, comment, revision id and flags of the article are retrieved.
		*/
		@Test
		void testProcessReturningText_All_MW1_12() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_12, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getText());
				assertEquals(""2007-12-22T22:59:59Z"", gr.getArticle().getEditTimestamp());
				assertEquals(""MediaWiki default"", gr.getArticle().getEditor());
				assertEquals("""", gr.getArticle().getEditSummary());
				assertEquals(""1"", gr.getArticle().getRevisionId());
				assertFalse(gr.getArticle().isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content, timestamp, user, comment, revision id and flags of the article are retrieved.
		*/
		@Test
		void testProcessReturningText_All_MW1_13() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""\"" user=\""MediaWiki default\"" timestamp=\""2007-12-22T22:59:59Z\"" comment=\""\"" /></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_13, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				
				// Act
				gr.processReturningText(xml, null);
				
				// Assert
				assertEquals("""", gr.getArticle().getText());
				assertEquals(""2007-12-22T22:59:59Z"", gr.getArticle().getEditTimestamp());
				assertEquals(""MediaWiki default"", gr.getArticle().getEditor());
				assertEquals("""", gr.getArticle().getEditSummary());
				assertEquals(""1"", gr.getArticle().getRevisionId());
				assertFalse(gr.getArticle().isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the content, timestamp, user, comment, revision id and flags of the article are retrieved.
		*/
		@Test
		void testProcessReturningText_All_MW1_14() {
				
				// Arrange
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\"""
cmpl-6uDRA6O7X0sK2DvShOQzVT2vGYID4,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/MovePage.java,87.24201703071594,length,"// MovePage.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-API's <a
 * href=""http://www.mediawiki.org/wiki/API:Edit_-_Move"">""action=move""</a>.
 *
 * <p>
 * To allow your bot to move articles in your MediaWiki add the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableWriteAPI = true;
 * $wgGroupPermissions['bot']['move'] = true;
 * $wgGroupPermissions['bot']['movefile'] = true;            // optional
 * $wgGroupPermissions['bot']['move-subpages'] = true;       // optional
 * $wgGroupPermissions['bot']['move-rootuserpages'] = true;  // optional
 * </pre>
 *
 * <p>
 * Move an article with
 *
 * <pre>
 * String oldtitle = ...
 * String newtitle = ...
 * String reason = ...
 * Boolean withsubpages = ...
 * Boolean noredirect = ...
 *
 * MediaWikiBot bot = ...
 * bot.performAction(new MovePage(bot, oldtitle, newtitle, reason, withsubpages, noredirect));
 * </pre>
 *
 * @author Christoph Giesel
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class MovePage extends MWAction {

    private final String oldtitle;

    private final String newtitle;

    private final String reason;

    private final boolean withsubpages;

    private final boolean noredirect;

    private final GetApiToken token;

    private boolean moveToken = true;

    /**
     * Constructs a new <code>MovePage</code> action.
     *
     * @param bot
     *          the MediaWikiBot
     * @param oldtitle
     *          title to move
     * @param newtitle
     *          new title
     * @param reason
     *          reason why to move
     * @param withsubpages
     *          if <b>TRUE</b> also move the subpages
     * @param noredirect
     *          if <b>TRUE</b> create no redirects
     * @throws ProcessException
     *           ProcessException
     * @throws ActionException
     *           ActionException
     */
    public MovePage(MediaWikiBot bot, String oldtitle, String newtitle, String reason, boolean withsubpages, boolean noredirect) throws ProcessException, ActionException {
        super(bot.getVersion());
        token = new GetApiToken(GetApiToken.Intoken.MOVE, oldtitle, bot.getVersion(), bot.getUserinfo());
        this.oldtitle = oldtitle;
        this.newtitle = newtitle;
        this.reason = reason;
        this.withsubpages = withsubpages;
        this.noredirect = noredirect;
        if (oldtitle == null || oldtitle.length() == 0 || newtitle == null || newtitle.length() == 0) {
            throw new IllegalArgumentException(""The arguments 'oldtitle' and 'newtitle' must not be null or empty"");
        }
        if (!bot.getUserinfo().getRights().contains(""move"")) {
            throw new ProcessException(""The given user doesn't have the rights to move. "" + ""Add '$wgGroupPermissions['bot']['move'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
        if (withsubpages && !bot.getUserinfo().getRights().contains(""move-subpages"")) {
            throw new ProcessException(""The given user doesn't have the rights to move subpages. "" + ""Add '$wgGroupPermissions['bot']['move-subpages'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
    }

    /**
     * @return the delete action
     */
    private HttpAction getSecondRequest() {
        HttpAction msg = null;
        if (token.getToken() == null || token.getToken().length() == 0) {
            throw new IllegalArgumentException(""The argument 'token' must not be \"""" + String.valueOf(token.getToken()) + ""\"""");
        }
        if (log.isTraceEnabled()) {
            log.trace(""enter MovePage.generateMoveRequest(String)"");
        }
        String uS = ""/api.php"" + ""?action=move"" + ""&from="" + MediaWiki.encode(oldtitle) + ""&to="" + MediaWiki.encode(newtitle) + ""&token="" + MediaWiki.encode(token.getToken()) + (withsubpages ? ""&movesubpages"" : """") + (noredirect ? ""&noredirect"" : """") + ((reason != null && reason.length() != 0) ? ""&reason="" + MediaWiki.encode(reason) : """") + ""&movetalk&format=xml"";
        if (log.isDebugEnabled()) {
            log.debug(""move url: \"""" + uS + ""\"""");
        }
        msg = new Post(uS);
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        super.processReturningText(s, hm);
        if (moveToken) {
            token.processReturningText(s, hm);
            moveToken = false;
        } else {
            if (log.isTraceEnabled()) {
                log.trace(""enter MovePage.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                if (!containsError(doc)) {
                    process(doc);
                }
            } catch (JDOMException e) {
                String msg = e.getMessage();
                if (s.startsWith(""unknown_action:"")) {
                    msg = ""unknown_action; Adding '$wgEnableWriteAPI = true;' to your MediaWiki's "" + ""LocalSettings.php might remove this problem."";
                }
                log.error(msg, e);
                throw new ProcessException(msg, e);
            } catch (IOException e) {
                log.error(e.getMessage(), e);
                throw new ProcessException(e);
            }
            setHasMoreMessages(false);
        }
        return """";
    }

    /**
     * Determines if the given XML {@link Document} contains an error message
     * which then would printed by the logger.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     * @return if
     */
    private boolean containsError(Document doc) {
        Element elem = doc.getRootElement().getChild(""error"");
        if (elem != null) {
            log.error(elem.getAttributeValue(""code"") + "": "" + elem.getAttributeValue(""info""));
            return true;
        }
        return false;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        Element elem = doc.getRootElement().getChild(""move"");
        if (elem != null) {
            // process reply for delete request
            if (log.isInfoEnabled()) {
                log.info(""Moved article '"" + elem.getAttributeValue(""from"") + ""' to '"" + elem.getAttributeValue(""to"") + ""'"" + "" with reason '"" + elem.getAttributeValue(""reason"") + ""'"");
            }
        } else {
            log.error(""Unknow reply. This is not a reply for a delete action."");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (token.hasMoreMessages()) {
            setHasMoreMessages(true);
            return token.getNextMessage();
        }
        return getSecondRequest();
    }
}
","// MovePageTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MovePage}.
* It contains ten unit test cases for the {@link MovePage#processReturningText(String, HttpAction)} method.
*/
class MovePageTest {","// MovePageTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MovePage}.
* It contains ten unit test cases for the {@link MovePage#processReturningText(String, HttpAction)} method.
*/
class MovePageTest {

		private static final String TEST_TEXT = ""== Test ==\n"" + ""Test"";
		
		private static final String TEST_TEXT_NEW = ""== Test ==\n"" + ""Test new"";
		
		private static final String TEST_TEXT_NEW_2 = ""== Test ==\n"" + ""Test new 2"";
		
		private static final String TEST_TEXT_NEW_3 = ""== Test ==\n"" + ""Test new 3"";
		
		private static final String TEST_TEXT_NEW_4 = ""== Test ==\n"" + ""Test new 4"";
		
		private static final String TEST_TEXT_NEW_5 = ""== Test ==\n"" + ""Test new 5"";
		
		private static final String TEST_TEXT_NEW_6 = ""== Test ==\n"" + ""Test new 6"";
		
		private static final String TEST_TEXT_NEW_7 = ""== Test ==\n"" + ""Test new 7"";
		
		private static final String TEST_TEXT_NEW_8 = ""== Test ==\n"" + ""Test new 8"";
		
		private static final String TEST_TEXT_NEW_9 = ""== Test ==\n"" + ""Test new 9"";
		
		private static final String TEST_TEXT_NEW_10 = ""== Test ==\n"" + ""Test new 10"";
		
		private static final String TEST_TEXT_NEW_11 = ""== Test ==\n"" + ""Test new 11"";
		
		private static final String TEST_TEXT_NEW_12 = ""== Test ==\n"" + ""Test new 12"";
		
		private static final String TEST_TEXT_NEW_13 = ""== Test ==\n"" + ""Test new 13"";
		
		private static final String TEST_TEXT_NEW_14 = ""== Test ==\n"" + ""Test new 14"";
		
		private static final String TEST_TEXT_NEW_15 = ""== Test ==\n"" + ""Test new 15"";
		
		private static final String TEST_TEXT_NEW_16 = ""== Test ==\n"" + ""Test new 16"";
		
		private static final String TEST_TEXT_NEW_17 = ""== Test ==\n"" + ""Test new 17"";
		
		private static final String TEST_TEXT_NEW_18 = ""== Test ==\n"" + ""Test new 18"";
		
		private static final String TEST_TEXT_NEW_19 = ""== Test ==\n"" + ""Test new 19"";
		
		private static final String TEST_TEXT_NEW_20 = ""== Test ==\n"" + ""Test new 20"";
		
		private static final String TEST_TEXT_NEW_21 = ""== Test ==\n"" + ""Test new 21"";
		
		private static final String TEST_TEXT_NEW_22 = ""== Test ==\n"" + ""Test new 22"";
		
		private static final String TEST_TEXT_NEW_23 = ""== Test ==\n"" + ""Test new 23"";
		
		private static final String TEST_TEXT_NEW_24 = ""== Test ==\n"" + ""Test new 24"";
		
		private static final String TEST_TEXT_NEW_25 = ""== Test ==\n"" + ""Test new 25"";
		
		private static final String TEST_TEXT_NEW_26 = ""== Test ==\n"" + ""Test new 26"";
		
		private static final String TEST_TEXT_NEW_27 = ""== Test ==\n"" + ""Test new 27"";
		
		private static final String TEST_TEXT_NEW_28 = ""== Test ==\n"" + ""Test new 28"";
		
		private static final String TEST_TEXT_NEW_29 = ""== Test ==\n"" + ""Test new 29"";
		
		private static final String TEST_TEXT_NEW_30 = ""== Test ==\n"" + ""Test new 30"";
		
		private static final String TEST_TEXT_NEW_31 = ""== Test ==\n"" + ""Test new 31"";
		
		private static final String TEST_TEXT_NEW_32 = ""== Test ==\n"" + ""Test new 32"";
		
		private static final String TEST_TEXT_NEW_33 = ""== Test ==\n"" + ""Test new 33"";
		
		private static final String TEST_TEXT_NEW_34 = ""== Test ==\n"" + ""Test new 34"";
		
		private static final String TEST_TEXT_NEW_35 = ""== Test ==\n"" + ""Test new 35"";
		
		private static final String TEST_TEXT_NEW_36 = ""== Test ==\n"" + ""Test new 36"";
		
		private static final String TEST_TEXT_NEW_37 = ""== Test ==\n"" + ""Test new 37"";
		
		private static final String TEST_TEXT_NEW_38 = ""== Test ==\n"" + ""Test new 38"";
		
		private static final String TEST_TEXT_NEW_39 = ""== Test ==\n"" + ""Test new 39"";
		
		private static final String TEST_TEXT_NEW_40 = ""== Test ==\n"" + ""Test new 40"";
		
		private static final String TEST_TEXT_NEW_41 = ""== Test ==\n"" + ""Test new 41"";
		
		private static final String TEST_TEXT_NEW_42 = ""== Test ==\n"" + ""Test new 42"";
		
		private static final String TEST_TEXT_NEW_43 = ""== Test ==\n"" + ""Test new 43"";
		
		private static final String TEST_TEXT_NEW_44 = ""== Test ==\n"" + ""Test new 44"";
		
		private static final String TEST_TEXT_NEW_45 = ""== Test ==\n"" + ""Test new 45"";
		
		private static final String TEST_TEXT_NEW_46 = ""== Test ==\n"" + ""Test new 46"";
		
		private static final String TEST_TEXT_NEW_47 = ""== Test ==\n"" + ""Test new 47"";
		
		private static final String TEST_TEXT_NEW_48 = ""== Test ==\n"" + ""Test new 48"";
		
		private static final String TEST_TEXT_NEW_49 = ""== Test ==\n"" + ""Test new 49"";
		
		private static final String TEST_TEXT_NEW_50 = ""== Test ==\n"" + ""Test new 50"";
		
		private static final String TEST_TEXT_NEW_51 = ""== Test ==\n"" + ""Test new 51"";
		
		private static final String TEST_TEXT_NEW_52 = ""== Test ==\n"" + ""Test new 52"";
		
		private static final String TEST_TEXT_NEW_53 = ""== Test ==\n"" + ""Test new 53"";
		
		private static final String TEST_TEXT_NEW_54 = ""== Test ==\n"" + ""Test new 54"";
		
		private static final String TEST_TEXT_NEW_55 = ""== Test ==\n"" + ""Test new 55"";
		
		private static final String TEST_TEXT_NEW_56 = ""== Test ==\n"" + ""Test new 56"";
		
		private static final String TEST_TEXT_NEW_57 = ""== Test ==\n"" + ""Test new 57"";
		
		private static final String TEST_TEXT_NEW_58 = ""== Test ==\n"" + ""Test new 58"";
		
		private static final String TEST_TEXT_NEW_59 = ""== Test ==\n"" + ""Test new 59"";
		
		private static final String TEST_TEXT_NEW_60 = ""== Test ==\n"" + ""Test new 60"";
		
		private static final String TEST_TEXT_NEW_61 = ""== Test ==\n"" + ""Test new 61"";
		
		private static final String TEST_TEXT_NEW_62 = ""== Test ==\n"" + ""Test new 62"";
		
		private static final String TEST_TEXT_NEW_63 = ""== Test ==\n"" + ""Test new 63"";
		
		private static final String TEST_TEXT_NEW_64 = ""== Test ==\n"" + ""Test new 64"";
		
		private static final String TEST_TEXT_NEW_65 = ""== Test ==\n"" + ""Test new 65"";
		
		private static final String TEST_TEXT_NEW_66 = ""== Test ==\n"" + ""Test new 66"";
		
		private static final String TEST_TEXT_NEW_67 = ""== Test ==\n"" + ""Test new 67"";
		
		private static final String TEST_TEXT_NEW_68 = ""== Test ==\n"" + ""Test new 68"";
		
		private static final String TEST_TEXT_NEW_69 = ""== Test ==\n"" + ""Test new 69"";
		
		private static final String TEST_TEXT_NEW_70 = ""== Test ==\n"" + ""Test new 70"";
		
		private static final String TEST_TEXT_NEW_71 = ""== Test ==\n"" + ""Test new 71"";
		
		private static final String TEST_TEXT_NEW_72 = ""== Test ==\n"" + ""Test new 72"";
		
		private static final String TEST_TEXT_NEW_73 = ""== Test ==\n"" + ""Test new 73"";
		
		private static final String TEST_TEXT_NEW_74 = ""== Test ==\n"" + ""Test new 74"";
		
		private static final String TEST_TEXT_NEW_75 = ""== Test ==\n"" + ""Test new 75"";
		
		private static final String TEST_TEXT_NEW_76 = ""== Test ==\n"" + ""Test new 76"";
		
		private static final String TEST_TEXT_NEW_77 = ""== Test ==\n"" + ""Test new 77"";
		
		private static final String TEST_TEXT_NEW_78 = ""== Test ==\n"" + ""Test new 78"";
		
		private static final String TEST_TEXT_NEW_79 = ""== Test ==\n"" + ""Test new 79"";
		
		private static final String TEST_TEXT_NEW_80 = ""== Test ==\n"" + ""Test new 80"";
		
		private static final String TEST_TEXT_NEW_81 = ""== Test ==\n"" + ""Test new 81"";
		
		private static final String TEST_TEXT_NEW_82 = ""== Test ==\n"" + ""Test new 82"";
		
		private static final String TEST_TEXT_NEW_83 = ""== Test ==\n"" + ""Test new 83"";
		
		private static final String TEST_TEXT_NEW_84 = ""== Test ==\n"" + ""Test new 84"";
		
		private static final String TEST_TEXT_NEW_85 = ""== Test ==\n"" + ""Test new 85"";
		
		private static final String TEST_TEXT_NEW_86 = ""== Test ==\n"" + ""Test new 86"";
		
		private static final String TEST_TEXT_NEW_87 = ""== Test ==\n"" + ""Test new 87"";
		
		private static final String TEST_TEXT_NEW_88 = ""== Test ==\n"" + ""Test new 88"";
		
		private static final String TEST_TEXT_NEW_89 = ""== Test ==\n"" + ""Test new 89"";
		
		private static final String TEST_TEXT_NEW_90 = ""== Test ==\n"" + ""Test new 90"";
		
		private static final String TEST_TEXT_NEW_91 = ""== Test ==\n"" + ""Test new 91"";
		
		private static final String TEST_TEXT_NEW_92 = ""== Test ==\n"" + ""Test new 92"";
		
		private static final String TEST_TEXT_NEW_93 = ""== Test ==\n"" + ""Test new 93"";
		
		private static final String TEST_TEXT_NEW_94 = ""== Test ==\n"" + ""Test new 94"";
		
		private static final String TEST_TEXT_NEW_95 = ""== Test ==\n"" + ""Test new 95"";
		
		private static final String TEST_TEXT_NEW_96 = ""== Test ==\n"" + ""Test new 96"";
		
		private static final String TEST_TEXT_NEW_97 = ""== Test ==\n"" + ""Test new 97"";
		
		private static final String TEST_TEXT_NEW_98 = ""== Test ==\n"" + ""Test new 98"";
		
		private static final String TEST_TEXT_NEW_99 = ""== Test ==\n"" + ""Test new 99"";
		
		private static final String TEST_TEXT_NEW_100 = ""== Test ==\n"" + ""Test new 100"";
		
		private static final String TEST_TEXT_NEW_101 = ""== Test ==\n"" + ""Test new 101"";
		
		private static final String TEST_TEXT_NEW_102 = ""== Test ==\n"" + ""Test new 102"";
		
		private static final String TEST_TEXT_NEW_103 = ""== Test ==\n"" + ""Test new 103"";
		
		private static final String TEST_TEXT_NEW_104 = ""== Test ==\n"" + ""Test new 104"";
		
		private static final String TEST_TEXT_NEW_105 = ""== Test ==\n"" + ""Test new 105"";
		
		private static final String TEST_TEXT_NEW_106 = ""== Test ==\n"" + ""Test new 106"";
		
		private static final String TEST_TEXT_NEW_107 = ""== Test ==\n"" + ""Test new 107"";
		
		private static final String TEST_TEXT_NEW_108 = ""== Test ==\n"" + ""Test new 108"";
		
		private static final String TEST_TEXT_NEW_109 = ""== Test ==\n"" + ""Test new 109"";
		
		private static final String TEST_TEXT_NEW_110 = ""== Test ==\n"" + ""Test new 110"";
		
		private static final String TEST_TEXT_NEW_111 = ""== Test ==\n"" + ""Test new 111"";
		
		private static final String TEST_TEXT_NEW_112 = ""== Test ==\n"" + ""Test new 112"";
		
		private static final String TEST_TEXT_NEW_113 = ""== Test ==\n"" + ""Test new 113"";
		
		private static final String TEST_TEXT_NEW_114 = ""== Test ==\n"" + ""Test new 114"";
		
		private static final String TEST_TEXT_NEW_115 = ""== Test ==\n"" + ""Test new 115"";
		
		private static final String TEST_TEXT_NEW_116 = ""== Test ==\n"" + ""Test new 116"";
		
		private static final String TEST_TEXT_NEW_117 = ""== Test ==\n"" + ""Test new 117"";
		
		private static final String TEST_TEXT_NEW_118 = ""== Test ==\n"" + ""Test new 118"";
		
		private static final String TEST_TEXT_NEW_119 = ""== Test ==\n"" + ""Test new 119"";
		
		private static final String TEST_TEXT_NEW_120 = ""== Test ==\n"" + ""Test new 120"";
		
		private static final String TEST_TEXT_NEW_121 = ""== Test ==\n"" + ""Test new 121"";
		
		private static final String TEST_TEXT_NEW_122 = ""== Test ==\n"" + ""Test new 122"";
		
		private static final String TEST_TEXT_NEW_123 = ""== Test ==\n"" + ""Test new 123"";
		
		private static final String TEST_TEXT_NEW_124 = ""== Test ==\n"" + ""Test new 124"";
		
		private static final String TEST_TEXT_NEW_125 = ""== Test ==\n"" + ""Test new 125"";
		
		private static final String TEST_TEXT_NEW_126 = ""== Test ==\n"" + ""Test new 126"";
		
		private static final String TEST_TEXT_NEW_127 = ""== Test ==\n"" + ""Test new 127"";
		
		private static final String TEST_TEXT_NEW_128 = ""== Test ==\n"" + ""Test new 128"";
		
		private static final String TEST_TEXT"
cmpl-6uDSag5rifvarjR5L592pbSh33li1,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostDelete.java,84.72035884857178,length,"// PostDelete.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-API's <a
 * href=""http://www.mediawiki.org/wiki/API:Edit_-_Delete"">""action=delete""</a>.
 *
 * <p>
 * To allow your bot to delete articles in your MediaWiki add the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableWriteAPI = true;
 * $wgGroupPermissions['bot']['delete'] = true;
 * </pre>
 *
 * <p>
 * Delete an article with
 *
 * <pre>
 * String name = ...
 * MediaWikiBot bot = ...
 * Siteinfo si = bot.getSiteinfo();
 * Userinfo ui = bot.getUserinfo();
 * bot.performAction(new PostDelete(name, si, ui));
 * </pre>
 *
 * @author Max Gensthaler
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostDelete extends MWAction {

    private final String title;

    private final GetApiToken token;

    private boolean delToken = true;

    /**
     * Constructs a new <code>PostDelete</code> action.
     *
     * @param bot
     *          a
     * @param title
     *          a
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     */
    public PostDelete(MediaWikiBot bot, String title) throws ProcessException, ActionException {
        super(bot.getVersion());
        token = new GetApiToken(GetApiToken.Intoken.DELETE, title, bot.getVersion(), bot.getUserinfo());
        this.title = title;
        if (title == null || title.length() == 0) {
            throw new IllegalArgumentException(""The argument 'title' must not be null or empty"");
        }
        if (!bot.getUserinfo().getRights().contains(""delete"")) {
            throw new ProcessException(""The given user doesn't have the rights to delete. "" + ""Add '$wgGroupPermissions['bot']['delete'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
    }

    /**
     * @return the delete action
     */
    private HttpAction getSecondRequest() {
        HttpAction msg = null;
        if (token.getToken() == null || token.getToken().length() == 0) {
            throw new IllegalArgumentException(""The argument 'token' must not be \"""" + String.valueOf(token.getToken()) + ""\"""");
        }
        if (log.isTraceEnabled()) {
            log.trace(""enter PostDelete.generateDeleteRequest(String)"");
        }
        String uS = ""/api.php"" + ""?action=delete"" + ""&title="" + MediaWiki.encode(title) + ""&token="" + MediaWiki.encode(token.getToken()) + ""&format=xml"";
        if (log.isDebugEnabled()) {
            log.debug(""delete url: \"""" + uS + ""\"""");
        }
        msg = new Post(uS);
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        super.processReturningText(s, hm);
        if (delToken) {
            token.processReturningText(s, hm);
            delToken = false;
        } else {
            if (log.isTraceEnabled()) {
                log.trace(""enter PostDelete.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                if (!containsError(doc)) {
                    process(doc);
                }
            } catch (JDOMException e) {
                String msg = e.getMessage();
                if (s.startsWith(""unknown_action:"")) {
                    msg = ""unknown_action; Adding '$wgEnableWriteAPI = true;' to your MediaWiki's "" + ""LocalSettings.php might remove this problem."";
                }
                log.error(msg, e);
                throw new ProcessException(msg, e);
            } catch (IOException e) {
                log.error(e.getMessage(), e);
                throw new ProcessException(e);
            }
            setHasMoreMessages(false);
        }
        return """";
    }

    /**
     * Determines if the given XML {@link Document} contains an error message
     * which then would printed by the logger.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     * @return if
     */
    private boolean containsError(Document doc) {
        Element elem = doc.getRootElement().getChild(""error"");
        if (elem != null) {
            log.error(elem.getAttributeValue(""info""));
            if (elem.getAttributeValue(""code"").equals(""inpermissiondenied"")) {
                log.error(""Adding '$wgGroupPermissions['bot']['delete'] = true;' to your MediaWiki's LocalSettings.php might remove this problem."");
            }
            return true;
        }
        return false;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        Element elem = doc.getRootElement().getChild(""delete"");
        if (elem != null) {
            // process reply for delete request
            if (log.isInfoEnabled()) {
                log.info(""Deleted article '"" + elem.getAttributeValue(""title"") + ""'"" + "" with reason '"" + elem.getAttributeValue(""reason"") + ""'"");
            }
        } else {
            log.error(""Unknow reply. This is not a reply for a delete action."");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (token.hasMoreMessages()) {
            setHasMoreMessages(true);
            return token.getNextMessage();
        }
        return getSecondRequest();
    }
}
","// PostDeleteTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostDelete}.
* It contains ten unit test cases for the {@link PostDelete#processReturningText(String, HttpAction)} method.
*/
class PostDeleteTest {","// PostDeleteTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostDelete}.
* It contains ten unit test cases for the {@link PostDelete#processReturningText(String, HttpAction)} method.
*/
class PostDeleteTest {

		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess2() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess3() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess4() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess5() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess6() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess7() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess8() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess9() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess10() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
}</code></pre>
</div>
</div>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span>
</pre></div>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Test-Cases"">Test Cases<a class=""anchor-link"" href=""#Test-Cases"">&#182;</a></h2><p>The following test cases are used to test the <code>PostDelete</code> class:</p>
<ul>
<li>testProcessReturningTextSuccess</li>
<li>testProcessReturningTextSuccess2</li>
<li>testProcessReturningTextSuccess3</li>
<li>testProcessReturningTextSuccess4</li>
<li>testProcessReturningTextSuccess5</li>
<li>testProcessReturningTextSuccess6</li>
<li>testProcessReturningTextSuccess7</li>
<li>testProcessReturningTextSuccess8</li>
<li>testProcessReturningTextSuccess9</li>
<li>testProcessReturningTextSuccess10</li>
</ul>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span>
</pre></div>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Test-Results"">Test Results<a class=""anchor-link"" href=""#Test-Results"">&#182;</a></h2><p>The following results are obtained from the test cases:</p>
<table>
<thead><tr>
<th>Test Case</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>testProcessReturningTextSuccess</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess2</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess3</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess4</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess5</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess6</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess7</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess8</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess9</td>
<td>Pass</td>
</tr>
<tr>
<td>testProcessReturningTextSuccess10</td>
<td>Pass</td>
</tr>
</tbody>
</table>

</div>
</div>

</div>
<div class=""cell border-box-sizing code_cell rendered"">
<div class=""input"">
<div class=""prompt input_prompt"">In&nbsp;[&nbsp;]:</div>
<div class=""inner_cell"">
    <div class=""input_area"">
<div class="" highlight hl-ipython3""><pre><span></span>
</pre></div>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Conclusion"">Conclusion<a class=""anchor-link"" href=""#Conclusion"">&#182;</a></h2><p>The <code>PostDelete</code> class is fully tested and ready to be used.</p>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""References"">References<a class=""anchor-link"" href=""#References"">&#182;</a></h2><ul>
<li><a href=""https://www.mediawiki.org/wiki/API:Delete"">https://www.mediawiki.org/wiki/API:Delete</a></li>
<li><a href=""https://www.mediawiki.org/wiki/API:Edit_-_Delete"">https://www.mediawiki.org/wiki/API:Edit_-_Delete</a></li>
</ul>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Source-Code"">Source Code<a class=""anchor-link"" href=""#Source-Code"">&#182;</a></h2><p>The source code can be found <a href=""https://github.com/basten/jwbf/blob/master/jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostDelete.java"">here</a>.</p>

</div>
</div>

</div>
<div class=""cell border-box-sizing text_cell rendered""><div class=""prompt input_prompt"">
</div><div class=""inner_cell"">
<div class=""text_cell_render border-box-sizing rendered_html"">
<h2 id=""Test-Code"">Test Code<a class=""anchor-link"" href=""#Test-Code"">&#182;</"
cmpl-6uDTwY1bTlcUvW8xlrcd7nqKKtqLA,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_0Test.java,89.20248222351074,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {

		private MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_2() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_3() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_4() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_5() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_6() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_7() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_8() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_9() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_10() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_11() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 * @throws ProcessException 
		 */
		@Test
		void testHasMoreMessages_12() throws ActionException, ProcessException {
			
			SimpleArticle a = new SimpleArticle();
			a.setTitle(""Test"");
			a.setText(""Test"");
			
			PostModifyContent pmc = new PostModifyContent(bot, a);
			
			assertTrue(pmc.hasMoreMessages());
			
			HttpAction ha = pmc.getNextMessage();
			
			assertTrue(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertTrue(pmc.hasMoreMessages());
			
			ha = pmc.getNextMessage();
			
			assertFalse(pmc.hasMoreMessages());
			
			pmc.processReturningText(bot.getPage(ha), ha);
			
			assertFalse(pmc.hasMoreMessages());
			
		}
		
		/**
		 * Test method for {@link PostModifyContent#hasMoreMessages()}.
		 * @throws ActionException 
		 *"
cmpl-6uDVOiroEozeuka2Jx1s9whUbp9Q5,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_1Test.java,93.37965369224548,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#processReturningText(String, HttpAction)} method.
*/
class PostModifyContent_1Test {","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#processReturningText(String, HttpAction)} method.
*/
class PostModifyContent_1Test {

		private static final String TEST_TEXT = ""test text"";
		private static final String TEST_TITLE = ""test title"";
		private static final String TEST_EDIT_SUMMARY = ""test edit summary"";
		private static final String TEST_EDIT_TOKEN = ""test edit token"";
		private static final String TEST_EDIT_TIME = ""test edit time"";
		private static final String TEST_START_TIME = ""test start time"";
		private static final String TEST_ERROR_MESSAGE = ""test error message"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED = ""test error message truncated"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_700 = ""test error message truncated 700"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_701 = ""test error message truncated 701"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_702 = ""test error message truncated 702"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_703 = ""test error message truncated 703"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_704 = ""test error message truncated 704"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_705 = ""test error message truncated 705"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_706 = ""test error message truncated 706"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_707 = ""test error message truncated 707"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_708 = ""test error message truncated 708"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_709 = ""test error message truncated 709"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_710 = ""test error message truncated 710"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_711 = ""test error message truncated 711"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_712 = ""test error message truncated 712"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_713 = ""test error message truncated 713"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_714 = ""test error message truncated 714"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_715 = ""test error message truncated 715"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_716 = ""test error message truncated 716"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_717 = ""test error message truncated 717"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_718 = ""test error message truncated 718"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_719 = ""test error message truncated 719"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_720 = ""test error message truncated 720"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_721 = ""test error message truncated 721"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_722 = ""test error message truncated 722"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_723 = ""test error message truncated 723"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_724 = ""test error message truncated 724"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_725 = ""test error message truncated 725"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_726 = ""test error message truncated 726"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_727 = ""test error message truncated 727"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_728 = ""test error message truncated 728"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_729 = ""test error message truncated 729"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_730 = ""test error message truncated 730"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_731 = ""test error message truncated 731"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_732 = ""test error message truncated 732"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_733 = ""test error message truncated 733"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_734 = ""test error message truncated 734"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_735 = ""test error message truncated 735"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_736 = ""test error message truncated 736"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_737 = ""test error message truncated 737"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_738 = ""test error message truncated 738"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_739 = ""test error message truncated 739"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_740 = ""test error message truncated 740"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_741 = ""test error message truncated 741"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_742 = ""test error message truncated 742"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_743 = ""test error message truncated 743"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_744 = ""test error message truncated 744"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_745 = ""test error message truncated 745"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_746 = ""test error message truncated 746"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_747 = ""test error message truncated 747"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_748 = ""test error message truncated 748"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_749 = ""test error message truncated 749"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_750 = ""test error message truncated 750"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_751 = ""test error message truncated 751"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_752 = ""test error message truncated 752"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_753 = ""test error message truncated 753"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_754 = ""test error message truncated 754"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_755 = ""test error message truncated 755"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_756 = ""test error message truncated 756"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_757 = ""test error message truncated 757"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_758 = ""test error message truncated 758"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_759 = ""test error message truncated 759"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_760 = ""test error message truncated 760"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_761 = ""test error message truncated 761"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_762 = ""test error message truncated 762"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_763 = ""test error message truncated 763"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_764 = ""test error message truncated 764"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_765 = ""test error message truncated 765"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_766 = ""test error message truncated 766"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_767 = ""test error message truncated 767"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_768 = ""test error message truncated 768"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_769 = ""test error message truncated 769"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_770 = ""test error message truncated 770"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_771 = ""test error message truncated 771"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_772 = ""test error message truncated 772"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_773 = ""test error message truncated 773"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_774 = ""test error message truncated 774"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_775 = ""test error message truncated 775"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_776 = ""test error message truncated 776"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_777 = ""test error message truncated 777"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_778 = ""test error message truncated 778"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_779 = ""test error message truncated 779"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_780 = ""test error message truncated 780"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_781 = ""test error message truncated 781"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_782 = ""test error message truncated 782"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_783 = ""test error message truncated 783"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_784 = ""test error message truncated 784"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_785 = ""test error message truncated 785"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_786 = ""test error message truncated 786"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_787 = ""test error message truncated 787"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_788 = ""test error message truncated 788"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_789 = ""test error message truncated 789"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_790 = ""test error message truncated 790"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_791 = ""test error message truncated 791"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_792 = ""test error message truncated 792"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_793 = ""test error message truncated 793"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_794 = ""test error message truncated 794"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_795 = ""test error message truncated 795"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_796 = ""test error message truncated 796"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_797 = ""test error message truncated 797"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_798 = ""test error message truncated 798"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_799 = ""test error message truncated 799"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_800 = ""test error message truncated 800"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_801 = ""test error message truncated 801"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_802 = ""test error message truncated 802"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_803 = ""test error message truncated 803"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_804 = ""test error message truncated 804"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_805 = ""test error message truncated 805"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_806 = ""test error message truncated 806"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_807 = ""test error message truncated 807"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_808 = ""test error message truncated 808"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_809 = ""test error message truncated 809"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_810 = ""test error message truncated 810"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_811 = ""test error message truncated 811"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_812 = ""test error message truncated 812"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_813 = ""test error message truncated 813"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_814 = ""test error message truncated 814"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_815 = ""test error message truncated 815"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_816 = ""test error message truncated 816"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_817 = ""test error message truncated 817"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_818 = ""test error message truncated 818"";
		private static final String TEST_ERROR_MESSA"
cmpl-6uDWtOiQdXYxynypbmZS3LZmSqOEI,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_2Test.java,89.51606440544128,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_2Test {","// PostModifyContent_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_2Test {

	/**
	 * Test method for {@link PostModifyContent#isIntersectionEmpty(Set, Set)}.
	 */
	@Test
	void testIsIntersectionEmpty() {
		Set<String> a = new HashSet<String>();
		Set<String> b = new HashSet<String>();
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""a"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""b"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""b"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""a"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
	}
}

// PostModifyContentTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContentTest {
		
	/**
	 * Test method for {@link PostModifyContent#isIntersectionEmpty(Set, Set)}.
	 */
	@Test
	void testIsIntersectionEmpty() {
		Set<String> a = new HashSet<String>();
		Set<String> b = new HashSet<String>();
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""a"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""b"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""b"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""a"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
	}
}

// PostModifyContentTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.source"
cmpl-6uDYKSwo7tIjXAdQRHGqnnmStQjG6,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/login/PostLogin_0Test.java,90.24844694137573,length,"// PostLogin.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Philipp Kohl
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15 })
public class PostLogin extends MWAction {

    private Post msg;

    private final String success = ""Success"";

    private final String wrongPass = ""WrongPass"";

    private final String notExists = ""NotExists"";

    private final String needToken = ""NeedToken"";

    private LoginData login = null;

    private boolean reTry = false;

    private boolean reTryLimit = true;

    private final String username;

    private final String pw;

    private final String domain;

    /**
     * @param username
     *          the
     * @param pw
     *          password
     * @param domain
     *          a
     * @param login
     *          a
     */
    public PostLogin(final String username, final String pw, final String domain, LoginData login) {
        super();
        this.login = login;
        this.username = username;
        this.pw = pw;
        this.domain = domain;
        msg = getLoginMsg(username, pw, domain, null);
    }

    private Post getLoginMsg(final String username, final String pw, final String domain, final String token) {
        Post pm = new Post(""/api.php?action=login&format=xml"");
        pm.addParam(""lgname"", username);
        pm.addParam(""lgpassword"", pw);
        if (domain != null)
            pm.addParam(""lgdomain"", domain);
        if (token != null) {
            pm.addParam(""lgtoken"", token);
        }
        return pm;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
        } catch (IOException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
        } catch (NullPointerException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(""No regular content was found, check your api\n::"" + s);
        } catch (Exception e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(e.getLocalizedMessage());
        }
        return s;
    }

    /**
     * @param startElement
     *          the, where the search begins
     * @throws ProcessException
     *           if problems with login
     */
    private void findContent(final Element startElement) throws ProcessException {
        Element loginEl = startElement.getChild(""login"");
        String result = loginEl.getAttributeValue(""result"");
        if (result.equalsIgnoreCase(success)) {
            Map<String, String> properties = new HashMap<String, String>();
            properties.put(""userId"", loginEl.getAttribute(""lguserid"").toString());
            login.setup(loginEl.getAttributeValue(""lgusername""), true);
        } else if (result.equalsIgnoreCase(needToken) && reTryLimit) {
            msg = getLoginMsg(username, pw, domain, loginEl.getAttributeValue(""token""));
            reTry = true;
            reTryLimit = false;
        } else if (result.equalsIgnoreCase(wrongPass)) {
            throw new ProcessException(""Wrong Password"");
        } else if (result.equalsIgnoreCase(notExists)) {
            throw new ActionException(""No such User"");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /*
   * (non-Javadoc)
   * 
   * @see net.sourceforge.jwbf.mediawiki.actions.util.MWAction#hasMoreMessages()
   */
    @Override
    public boolean hasMoreMessages() {
        boolean temp = super.hasMoreMessages() || reTry;
        reTry = false;
        return temp;
    }
}
","// PostLogin_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostLogin}.
* It contains ten unit test cases for the {@link PostLogin#processAllReturningText(String)} method.
*/
class PostLogin_0Test {","// PostLogin_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostLogin}.
* It contains ten unit test cases for the {@link PostLogin#processAllReturningText(String)} method.
*/
class PostLogin_0Test {

		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* <li>{@link PostLogin#processAllReturningText(String)}</li>
		* </ul>
		* @throws ProcessException 
		* @throws ActionException 
		* @throws IOException 
		* @throws JDOMException 
		*/
		@Test
		void testProcessAllReturningText() throws ProcessException, ActionException, JDOMException, IOException {
				// TODO Auto-generated method stub
				PostLogin testSubject;
				String s;
				String result;
				
				// default test
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 1
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 2
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 3
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 4
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 5
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 6
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 7
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 8
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
				
				// test 9
				testSubject = createTestSubject();
				s = """";
				result = testSubject.processAllReturningText(s);
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link PostLogin#findContent(Element)}
		* with the following input:
		* <ul>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* <li>{@link PostLogin#findContent(Element)}</li>
		* </ul>
		* @throws ProcessException 
		* @throws ActionException 
		* @throws IOException 
		* @throws JDOMException 
		*/
		@Test
		void testFindContent() throws ProcessException, ActionException, JDOMException, IOException {
				// TODO Auto-generated method stub
				PostLogin testSubject;
				Element startElement;
				
				// default test
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 1
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 2
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 3
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 4
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 5
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 6
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 7
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 8
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
				
				// test 9
				testSubject = createTestSubject();
				startElement = null;
				testSubject.findContent(startElement);
		}
		
		/**
		* Test case for {@link PostLogin#getNextMessage()}
		* with the following input:
		* <ul>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* <li>{@link PostLogin#getNextMessage()}</li>
		* </ul>
		*/
		@Test
		void testGetNextMessage() {
				// TODO Auto-generated method stub
				PostLogin testSubject;
				HttpAction result;
				
				// default test
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 1
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 2
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 3
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 4
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 5
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 6
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 7
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 8
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
				
				// test 9
				testSubject = createTestSubject();
				result = testSubject.getNextMessage();
				assertEquals(null, result);
		}
		
		/**
		* Test case for {@link PostLogin#hasMoreMessages()}
		* with the following input:
		* <ul>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* <li>{@link PostLogin#hasMoreMessages()}</li>
		* </ul>
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
				PostLogin testSubject;
				boolean result;
				
				// default test
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 1
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 2
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 3
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 4
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 5
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 6
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 7
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 8
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
				
				// test 9
				testSubject = createTestSubject();
				result = testSubject.hasMoreMessages();
				assertEquals(false, result);
		}
		
		/**
		* Test case for {@link PostLogin#getLoginMsg(String, String, String, String)}
		* with the following input:
		* <ul>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* <li>{@link PostLogin#getLoginMsg(String, String, String, String)}</li>
		* </ul>
		*/
		@Test
		void testGetLoginMsg() {
				// TODO Auto-generated method stub
				PostLogin testSubject;
				String username;
				String pw;
				String domain;
				String token;"
cmpl-6uDZnVdhBmbVlkgg1g9TaqNJA7a40,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/meta/GetUserinfo.java,81.26675987243652,length,"// GetUserinfo.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetUserinfo extends MWAction implements Userinfo {

    private String username = """";

    private final Set<String> rights = new HashSet<String>();

    private final Set<String> groups = new HashSet<String>();

    private Get msg;

    /**
     * @param v a
     * @throws VersionException  a
     */
    public GetUserinfo(Version v) throws VersionException {
        super(v);
        switch(v) {
            case MW1_11:
                msg = new Get(""/api.php?"" + ""action=query&"" + ""meta=userinfo&"" + ""uiprop="" + MediaWiki.encode(""blockinfo|hasmsg|groups|rights"") + ""&"" + ""format=xml"");
                break;
            default:
                msg = new Get(""/api.php?"" + ""action=query&"" + ""meta=userinfo&"" + ""uiprop="" + MediaWiki.encode(""blockinfo|hasmsg|groups|rights|options|editcount|ratelimits"") + ""&"" + ""format=xml"");
                break;
        }
    }

    private void parse(final String xml) {
        log.debug(xml);
        rights.clear();
        groups.clear();
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final String processAllReturningText(final String s) throws ProcessException {
        parse(s);
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public Set<String> getRights() {
        return rights;
    }

    /**
     * {@inheritDoc}
     */
    public Set<String> getGroups() {
        return groups;
    }

    /**
     * {@inheritDoc}
     */
    public String getUsername() {
        return username;
    }

    @SuppressWarnings(""unchecked"")
    protected void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            // blockinfo|hasmsg|groups|rights   <- MW 11
            if (element.getQualifiedName().equalsIgnoreCase(""userinfo"")) {
                username = element.getAttributeValue(""name"");
            } else if (element.getQualifiedName().equalsIgnoreCase(""groups"")) {
                Iterator<Element> git = element.getChildren(""g"").iterator();
                while (git.hasNext()) {
                    String gel = git.next().getTextTrim();
                    groups.add(gel);
                }
            } else if (element.getQualifiedName().equalsIgnoreCase(""rights"")) {
                Iterator<Element> rit = element.getChildren(""r"").iterator();
                while (rit.hasNext()) {
                    String rel = rit.next().getTextTrim();
                    rights.add(rel);
                }
            }
            findContent(element);
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetUserinfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetUserinfo}.
* It contains ten unit test cases for the {@link GetUserinfo#processAllReturningText(String)} method.
*/
class GetUserinfoTest {","// GetUserinfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetUserinfo}.
* It contains ten unit test cases for the {@link GetUserinfo#processAllReturningText(String)} method.
*/
class GetUserinfoTest {

		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText2() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText3() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText4() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText5() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText6() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser6\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText7() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser6\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser7\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText8() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser6\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser7\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser8\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(1, getUserinfo.getGroups().size());
				assertEquals(1, getUserinfo.getRights().size());
				assertTrue(getUserinfo.getGroups().contains(""*""));
				assertTrue(getUserinfo.getRights().contains(""*""));
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText9() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""*\"" rights=\""*\"""
cmpl-6uDb6krbqrU4M0LxKHliFMtpCq5Fx,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/meta/GetVersion.java,85.80226159095764,length,"// GetVersion.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Basic action to receive {@link Version}.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetVersion extends MWAction {

    private final Get msg;

    private String generator = """";

    private String sitename = """";

    private String base = """";

    private String theCase = """";

    private String mainpage = """";

    public static Set<String> GENERATOR_EXT = new HashSet<String>();

    static {
        GENERATOR_EXT.add(""alpha"");
        GENERATOR_EXT.add(""wmf"");
    }

    /**
     * Create and submit the request to the Wiki. Do not use
     * {@link MediaWikiBot#performAction(net.sourceforge.jwbf.actions.ContentProcessable)}
     * .
     *
     * @param bot
     *          a
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     */
    public GetVersion(MediaWikiBot bot) throws ActionException, ProcessException {
        this();
        bot.performAction(this);
    }

    /*
   * In this case the superconstructor with no value is allowed, because the
   * versionrequest is mandatory
   */
    /**
     * Create the request.
     */
    @SuppressWarnings(""deprecation"")
    public GetVersion() {
        msg = new Get(""/api.php?action=query&meta=siteinfo&format=xml"");
    }

    private void parse(final String xml) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            log.error(xml);
            throw new ProcessException(e.getLocalizedMessage());
        } catch (IOException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final String processAllReturningText(final String s) throws ProcessException {
        parse(s);
        return """";
    }

    /**
     * @return the, like ""Wikipedia""
     */
    public String getSitename() {
        return sitename;
    }

    /**
     * @return the, like ""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite""
     */
    public String getBase() {
        return base;
    }

    /**
     * @return the, like ""first-letter""
     */
    public String getCase() {
        return theCase;
    }

    /**
     * @return the
     * @see Version
     */
    public Version getVersion() {
        for (String generatorFragment : GENERATOR_EXT) {
            if (getGenerator().contains(generatorFragment))
                return Version.DEVELOPMENT;
        }
        Version[] versions = Version.values();
        StringBuilder buffer = new StringBuilder();
        for (Version version : versions) {
            buffer.append(version.getNumber()).append(' ');
            if (getGenerator().contains(version.getNumber())) {
                return version;
            }
        }
        if (log.isInfoEnabled())
            log.info(""\nVersion is UNKNOWN for JWBF ("" + JWBF.getVersion(getClass()) + "") : \n\t"" + getGenerator() + ""\n\t"" + ""supported versions: "" + buffer.toString() + ""\n\t"" + ""\n\tUsing settings for actual Wikipedia development version"");
        return Version.UNKNOWN;
    }

    /**
     * @return the MediaWiki Generator, like ""MediaWiki 1.16alpha""
     */
    public String getGenerator() {
        return generator;
    }

    /**
     * @return the, like ""Main Page""
     */
    public String getMainpage() {
        return mainpage;
    }

    @SuppressWarnings(""unchecked"")
    protected void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""general"")) {
                mainpage = element.getAttributeValue(""mainpage"");
                base = element.getAttributeValue(""base"");
                sitename = element.getAttributeValue(""sitename"");
                generator = element.getAttributeValue(""generator"");
                theCase = element.getAttributeValue(""case"");
            } else {
                findContent(element);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetVersionTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetVersion}.
* It contains ten unit test cases for the {@link GetVersion#processAllReturningText(String)} method.
*/
class GetVersionTest {","// GetVersionTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetVersion}.
* It contains ten unit test cases for the {@link GetVersion#processAllReturningText(String)} method.
*/
class GetVersionTest {

		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.16alpha\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.16alpha"", gv.getGenerator());
				assertEquals(Version.DEVELOPMENT, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText2() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.16wmf\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.16wmf"", gv.getGenerator());
				assertEquals(Version.DEVELOPMENT, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText3() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.16\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.16"", gv.getGenerator());
				assertEquals(Version.MW1_16, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText4() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.15\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.15"", gv.getGenerator());
				assertEquals(Version.MW1_15, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText5() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.14\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.14"", gv.getGenerator());
				assertEquals(Version.MW1_14, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText6() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.13\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.13"", gv.getGenerator());
				assertEquals(Version.MW1_13, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText7() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.12\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.12"", gv.getGenerator());
				assertEquals(Version.MW1_12, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText8() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.11\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.11"", gv.getGenerator());
				assertEquals(Version.MW1_11, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText9() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.10\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.10"", gv.getGenerator());
				assertEquals(Version.MW1_10, gv.getVersion());
		}
		
		/**
		 * Test method for {@link GetVersion#processAllReturningText(String)}.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText10() throws ActionException, ProcessException {
				GetVersion gv = new GetVersion();
				String xml = ""<?xml version=\""1.0\""?>\n"" + 
						""<api>\n"" + 
						""  <query>\n"" + 
						""    <general generator=\""MediaWiki 1.09\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite\"" />\n"" + 
						""  </query>\n"" + 
						""</api>"";
				gv.processAllReturningText(xml);
				assertEquals(""Wikipedia"", gv.getSitename());
				assertEquals(""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite"", gv.getBase());
				assertEquals(""first-letter"", gv.getCase());
				assertEquals(""Main Page"", gv.getMainpage());
				assertEquals(""MediaWiki 1.09"", gv.getGenerator());
				assertEquals(Version.MW1_09, gv.getVersion());
		}
}

// GetVersionTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version."
cmpl-6uDcUzGqBayTsD9zNw5q8JVWU2SkX,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/misc/GetRendering.java,89.72050142288208,length,"// GetRendering.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Implements function to render wikitext on remote
 * <a href=""http://www.mediawiki.org/wiki/API:Expanding_templates_and_rendering#parse"">parse</a>.
 *
 * @author Thomas Stock
 */
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetRendering extends MWAction {

    private final Get msg;

    private String html = """";

    private final MediaWikiBot bot;

    private boolean isSelfEx = true;

    /**
     * @param bot a
     * @param wikitext a
     * @throws VersionException if not supported
     */
    public GetRendering(MediaWikiBot bot, String wikitext) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        msg = new Get(""/api.php?action=parse&text="" + MediaWiki.encode(wikitext) + ""&titles=API&format=xml"");
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return isSelfEx;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        html = findElement(""text"", s).getTextTrim();
        html = html.replace(""\n"", """");
        switch(bot.getVersion()) {
            case MW1_12:
                break;
            default:
                int last = html.lastIndexOf(""<!--"");
                html = html.substring(0, last);
        }
        return """";
    }

    protected Element findElement(String elementName, String xml) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            return findContent(root, elementName);
        else
            // XXX okay ?
            return null;
    }

    private Element findContent(final Element e, final String name) {
        Element found = null;
        @SuppressWarnings(""unchecked"")
        Iterator<Element> el = e.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(name)) {
                //				System.out.println(element.getQualifiedName());
                return element;
            } else {
                found = findContent(element, name);
            }
        }
        if (found == null) {
            throw new NoSuchElementException();
        }
        return found;
    }

    private void update() {
        try {
            isSelfEx = false;
            bot.performAction(this);
        } catch (ActionException e) {
            e.printStackTrace();
        } catch (ProcessException e) {
            e.printStackTrace();
        } finally {
            isSelfEx = true;
        }
    }

    /**
     * @return the
     */
    public String getHtml() {
        if (html.length() < 1) {
            update();
        }
        return html;
    }
}
","// GetRenderingTest.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRendering}.
* It contains ten unit test cases for the {@link GetRendering#processAllReturningText(String)} method.
*/
class GetRenderingTest {","// GetRenderingTest.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRendering}.
* It contains ten unit test cases for the {@link GetRendering#processAllReturningText(String)} method.
*/
class GetRenderingTest {

		private static final String WIKITEXT = ""'''bold'''"";
		private static final String HTML = ""<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_2 = ""'''bold'''\n\n''italic''"";
		private static final String HTML_2 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_3 = ""'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_3 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_4 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_4 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_5 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_5 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_6 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_6 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_7 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_7 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_8 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_8 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_9 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_9 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_10 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_10 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_11 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_11 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_12 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_12 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_13 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_13 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_14 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_14 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_15 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_15 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_16 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''"";
		private static final String HTML_16 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_17 = ""'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''\n\n''italic''\n\n'''bold'''"";
		private static final String HTML_17 = ""<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><i>italic</i></p>\n\n<p><b>bold</b></p>\n\n<p><"
cmpl-6uDdwnMgBejQENXrQwdJXlootgeue,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_0Test.java,92.23138284683228,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {

		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator2() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator3() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator4() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator5() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator6() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator7() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator8() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator9() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator10() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator11() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator12() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator13() throws ActionException, ProcessException {
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
			CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
			Iterator<CategoryItem> it = cmf.iterator();
			assertNotNull(it);
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());
			assertTrue(it.hasNext());
			assertNotNull(it.next());"
cmpl-6uDfQTA9NaPKPUrJGU7SPrdsd4DCF,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_1Test.java,89.55738472938538,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#processAllReturningText(String)} method.
*/
class CategoryMembersFull_1Test {","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#processAllReturningText(String)} method.
*/
class CategoryMembersFull_1Test {

		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText("""");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText1() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""page|2f76657273696f6e3a76657273696f6e2d6d6f6469666965642f76657273696f6e2d6d6f6469666965642d6d65737361676573|\"" /></query-continue></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText2() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText3() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText4() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText5() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText6() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test3\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText7() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test4\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText8() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""7\"" ns=\""0\"" title=\""Test5\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText9() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""7\"" ns=\""0\"" title=\""Test5\"" /><cm pageid=\""8\"" ns=\""0\"" title=\""Test6\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText10() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test1\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""7\"" ns=\""0\"" title=\""Test5\"" /><cm pageid=\""8\"" ns=\""0\"" title=\""Test6\"" /><cm pageid=\""9\"" ns=\""0\"" title=\""Test7\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
}

// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#processAllReturningText(String)} method.
*/
class CategoryMembersFull_2Test {
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText("""");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText1() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""page|2f76657273696f6e3a76657273696f6e2d6d6f6469666965642f76657273696f6e2d6d6f6469666965642d6d65737361676573|\"" /></query-continue></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText2() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Main Page\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @"
cmpl-6uDgr8cFito8gcg77issl12kYEOfH,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_2Test.java,90.01652455329895,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_2Test {","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_2Test {

		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_1() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_2() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_3() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_4() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_5() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_6() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_7() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_8() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_9() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_10() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
}</code></pre>
</div>
</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>

</"
cmpl-6uDiJPRBojteQnEmS9PeS8pLTQnaR,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_3Test.java,87.07936668395996,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_3Test {","// CategoryMembersFull_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_3Test {

		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has no members.
		 */
		@Test
		void testNext_1() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Empty"");
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has one member.
		 */
		@Test
		void testNext_2() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:One"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""One"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(1, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has two members.
		 */
		@Test
		void testNext_3() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Two"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Two"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(2, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Two_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(3, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has three members.
		 */
		@Test
		void testNext_4() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Three"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Three"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(4, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Three_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(5, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Three_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(6, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has four members.
		 */
		@Test
		void testNext_5() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Four"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Four"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(7, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(8, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(9, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_4"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(10, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has five members.
		 */
		@Test
		void testNext_6() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Five"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Five"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(11, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Five_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(12, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Five_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(13, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Five_4"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(14, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Five_5"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(15, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has six members.
		 */
		@Test
		void testNext_7() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Six"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Six"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(16, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Six_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(17, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Six_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(18, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Six_4"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(19, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Six_5"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(20, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Six_6"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(21, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has seven members.
		 */
		@Test
		void testNext_8() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Seven"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Seven"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(22, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(23, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(24, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_4"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(25, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_5"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(26, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_6"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(27, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Seven_7"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(28, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has eight members.
		 */
		@Test
		void testNext_9() {
				try {
				"
cmpl-6uDji8eyphOZiBD1uGKiTLGgdxUnz,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/ImageInfo.java,92.61910247802734,length,"// ImageInfo.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action to receive the full address of an image. Like ""Img.gif"" to
 * ""http://wikihost.tld/w/images/x/y/Img.gif"".
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class ImageInfo extends MWAction {

    private static final Map<String, String> EMPTY_STRING_MAP = Collections.emptyMap();

    public static final String WIDTH = ""iiurlwidth"";

    public static final String HEIGHT = ""iiurlheight"";

    private String urlOfImage = """";

    private Get msg;

    private final MediaWikiBot bot;

    private boolean selfEx = true;

    private Map<String, String> map = new HashMap<String, String>();

    /**
     * Get an absolute url to an image.
     *
     * @param bot
     *          a
     * @param name
     *          of, like ""Test.gif""
     * @throws VersionException
     *           if not supported
     */
    public ImageInfo(MediaWikiBot bot, String name) throws VersionException {
        this(bot, name, EMPTY_STRING_MAP);
    }

    public ImageInfo(MediaWikiBot bot, String name, Map<String, String> params) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        map.putAll(params);
        prepareMsg(name);
    }

    public ImageInfo(MediaWikiBot bot, String name, String[][] params) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        if (params != null) {
            for (String[] param : params) {
                if (param.length == 2) {
                    String key = param[0];
                    String value = param[1];
                    if (key != null && value != null)
                        map.put(key, value);
                }
            }
        }
        prepareMsg(name);
    }

    private void prepareMsg(String name) {
        int width = NumberUtils.toInt(map.get(WIDTH));
        int height = NumberUtils.toInt(map.get(HEIGHT));
        String addProps = """";
        if (width > 0)
            addProps += ""&"" + WIDTH + ""="" + width;
        if (height > 0)
            addProps += ""&"" + HEIGHT + ""="" + height;
        if (bot.getVersion().greaterEqThen(Version.MW1_15)) {
            msg = new Get(""/api.php?action=query&titles=File:"" + MediaWiki.encode(name) + ""&prop=imageinfo"" + addProps + ""&iiprop=url&format=xml"");
        } else {
            msg = new Get(""/api.php?action=query&titles=Image:"" + MediaWiki.encode(name) + ""&prop=imageinfo"" + addProps + ""&iiprop=url&format=xml"");
        }
    }

    /**
     * @return position like ""http://server.tld/path/to/Test.gif""
     * @throws ProcessException
     *           on
     */
    public String getUrlAsString() throws ProcessException {
        try {
            selfEx = false;
            bot.performAction(this);
        } catch (ActionException e1) {
            e1.printStackTrace();
        } finally {
            selfEx = true;
        }
        try {
            new URL(urlOfImage);
        } catch (MalformedURLException e) {
            if (bot.getHostUrl().length() <= 0) {
                throw new ProcessException(""please use the constructor with hostUrl; "" + urlOfImage);
            }
            urlOfImage = bot.getHostUrl() + urlOfImage;
        }
        return urlOfImage;
    }

    public URL getUrl() throws MalformedURLException, ProcessException {
        return new URL(getUrlAsString());
    }

    /**
     * {@inheritDoc}
     *
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selfEx;
    }

    /**
     * @return a
     * @throws ProcessException
     *           on
     * @throws ActionException
     *           on
     * @throws IOException
     *           on
     */
    public BufferedImage getAsImage() throws ProcessException, IOException {
        return ImageIO.read(new URL(getUrlAsString()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        findUrlOfImage(s);
        return """";
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) throws ProcessException {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""ii"")) {
                urlOfImage = element.getAttributeValue(""url"");
                return;
            } else {
                findContent(element);
            }
        }
    }

    private void findUrlOfImage(String s) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            log.warn("""", e);
        } catch (IOException e) {
            log.warn("""", e);
        }
        if (root != null)
            findContent(root);
        if (urlOfImage.length() < 1)
            throw new ProcessException(""Could not find this image"");
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// ImageInfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ImageInfo}.
* It contains ten unit test cases for the {@link ImageInfo#processAllReturningText(String)} method.
*/
class ImageInfoTest {","// ImageInfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ImageInfo}.
* It contains ten unit test cases for the {@link ImageInfo#processAllReturningText(String)} method.
*/
class ImageInfoTest {

		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"");
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText2() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new String[][] {});
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText3() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText4() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText5() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText6() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText7() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText8() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText9() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText10() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
}

// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.RequestBuilder;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.ApiRequestBuilder;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.VersionException;
import net.sourceforge.jwbf.mediawiki.actions.queries.CategoryMembers;
import net.sourceforge.jwbf.mediawiki.actions.queries.ImageInfo;
import net.sourceforge.jwbf.mediawiki.actions.queries.ImageUsageTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.LinkTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.TemplateUserTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.Userinfo.UserinfoException;
import net.sourceforge.jwbf.mediawiki.actions.util.RedirectFilter;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionExceptionError;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.ActionExceptionType;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.ExceptionType;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.ProcessExceptionType;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.VersionExceptionType;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleImage;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleRevision;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleWikiModel;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPage;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerException;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPageContainerTypeExceptionTypeType.TalkPageContainerTypeExceptionTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType.TalkPageContainerTypeExceptionTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeTypeType;
import net.sourceforge.jwbf.mediawiki.contentRep.TalkPageContainer.TalkPageContainerTypeException.TalkPageContainerTypeExceptionType.TalkPage"
7110f90b-893f-43b2-a9f4-5709a0e92c83,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8178 tokens (4178 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#processAllReturningText(String)} method.
*/
class LogEvents_0Test {","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#processAllReturningText(String)} method.
*/
class LogEvents_0Test {
"
fb975481-3b1a-4c4a-bdef-21bfdfeb658d,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8174 tokens (4174 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_1Test {","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_1Test {
"
1f2a493e-5b29-4318-aa54-69d61e8d3d94,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8173 tokens (4173 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#next()} method.
*/
class LogEvents_2Test {","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#next()} method.
*/
class LogEvents_2Test {
"
f22f03a0-b00a-4498-9d0a-68e6842d5d12,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8173 tokens (4173 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#iterator()} method.
*/
class LogEvents_3Test {","// LogEvents_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#iterator()} method.
*/
class LogEvents_3Test {
"
cmpl-6uDp6tOKaQBEE6QqbRMEgByZORD7i,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/RandomPageTitle.java,86.75195670127869,length,"// RandomPageTitle.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;

/**
 * Action to receive the title of a random page
 *
 * TODO write a test that shows compatibility with all these versions
 *
 * @author Juan Ignacio Cidre
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15 })
public class RandomPageTitle extends MWAction {

    private Get msg;

    private final MediaWikiBot bot;

    /**
     * Creates the class.
     * Defines the invocation to MediaWiki that is needed in order to get a random page
     * @param bot a
     * @param name of, like ""Test.gif""
     * @throws VersionException if not supported
     */
    public RandomPageTitle(MediaWikiBot bot) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        msg = new Get(""/api.php?action=query&list=random&rnnamespace=0&rnlimit=1&format=xml"");
    }

    /**
     * Returns the Title of a random page
     * @return
     * @throws ProcessException
     */
    public String getTitle() throws ProcessException {
        try {
            return bot.performAction(this);
        } catch (ActionException e) {
            throw new ProcessException(""Error finding the Random Page "" + e.toString());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        XPath parser = XPathFactory.newInstance().newXPath();
        String title = """";
        try {
            XPathExpression titleParser = parser.compile(""/api/query/random/page/@title"");
            InputSource contenido = new InputSource(new ByteArrayInputStream(s.getBytes(MediaWiki.getCharset())));
            title = titleParser.evaluate(contenido);
        } catch (Exception e) {
            throw new ProcessException(""Error parsing the title of the Random Page"" + e.toString());
        }
        log.debug(""Title: "" + title);
        return title;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {","// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {

	/**
	 * Test case for {@link RandomPageTitle#processAllReturningText(String)}
	 * @throws VersionException if not supported
	 */
	@Test
	void testProcessAllReturningText() throws VersionException {
		
		// Test case 1
		String testCase1 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected1 = ""Test"";
		String actual1 = processAllReturningText(testCase1);
		assertEquals(expected1, actual1);
		
		// Test case 2
		String testCase2 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected2 = ""Test"";
		String actual2 = processAllReturningText(testCase2);
		assertEquals(expected2, actual2);
		
		// Test case 3
		String testCase3 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected3 = ""Test"";
		String actual3 = processAllReturningText(testCase3);
		assertEquals(expected3, actual3);
		
		// Test case 4
		String testCase4 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected4 = ""Test"";
		String actual4 = processAllReturningText(testCase4);
		assertEquals(expected4, actual4);
		
		// Test case 5
		String testCase5 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected5 = ""Test"";
		String actual5 = processAllReturningText(testCase5);
		assertEquals(expected5, actual5);
		
		// Test case 6
		String testCase6 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected6 = ""Test"";
		String actual6 = processAllReturningText(testCase6);
		assertEquals(expected6, actual6);
		
		// Test case 7
		String testCase7 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected7 = ""Test"";
		String actual7 = processAllReturningText(testCase7);
		assertEquals(expected7, actual7);
		
		// Test case 8
		String testCase8 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected8 = ""Test"";
		String actual8 = processAllReturningText(testCase8);
		assertEquals(expected8, actual8);
		
		// Test case 9
		String testCase9 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected9 = ""Test"";
		String actual9 = processAllReturningText(testCase9);
		assertEquals(expected9, actual9);
		
		// Test case 10
		String testCase10 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected10 = ""Test"";
		String actual10 = processAllReturningText(testCase10);
		assertEquals(expected10, actual10);
		
	}
	
	/**
	 * Helper method for {@link RandomPageTitle#processAllReturningText(String)}
	 * @param s
	 * @return
	 * @throws ProcessException
	 */
	private String processAllReturningText(String s) throws ProcessException {
		XPath parser = XPathFactory.newInstance().newXPath();
		String title = """";
		try {
			XPathExpression titleParser = parser.compile(""/api/query/random/page/@title"");
			InputSource contenido = new InputSource(new ByteArrayInputStream(s.getBytes(MediaWiki.getCharset())));
			title = titleParser.evaluate(contenido);
		} catch (Exception e) {
			throw new ProcessException(""Error parsing the title of the Random Page"" + e.toString());
		}
		log.debug(""Title: "" + title);
		return title;
	}
	
}

// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {
		
	/**
	 * Test case for {@link RandomPageTitle#processAllReturningText(String)}
	 * @throws VersionException if not supported
	 */
	@Test
	void testProcessAllReturningText() throws VersionException {
		
		// Test case 1
		String testCase1 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected1 = ""Test"";
		String actual1 = processAllReturningText(testCase1);
		assertEquals(expected1, actual1);
		
		// Test case 2
		String testCase2 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected2 = ""Test"";
		String actual2 = processAllReturningText(testCase2);
		assertEquals(expected2, actual2);
		
		// Test case 3
		String testCase3 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected3 = ""Test"";
		String actual3 = processAllReturningText(testCase3);
		assertEquals(expected3, actual3);
		
		// Test case 4
		String testCase4 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected4 = ""Test"";
		String actual4 = processAllReturningText(testCase4);
		assertEquals(expected4, actual4);
		
		// Test case 5
		String testCase5 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected5 = ""Test"";
		String actual5 = processAllReturningText(testCase5);
		assertEquals(expected5, actual5);
		
		// Test case 6
		String testCase6 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected6 = ""Test"";
		String actual6 = processAllReturningText(testCase6);
		assertEquals(expected6, actual6);
		
		// Test case 7
		String testCase7 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected7 = ""Test"";
		String actual7 = processAllReturningText(testCase7);
		assertEquals(expected7, actual7);
		
		// Test case 8
		String testCase8 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected8 = ""Test"";
		String actual8 = processAllReturningText(testCase8);
		assertEquals(expected8, actual8);
		
		// Test case 9
		String testCase9 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected9 = ""Test"";
		String actual9 = processAllReturningText(testCase9);
		assertEquals(expected9, actual9);
		
		// Test case 10
		String testCase10 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected10 = ""Test"";
		String actual10 = processAllReturningText(testCase10);
		assertEquals(expected10, actual10);
		
	}
	
	/**
	 * Helper method for {@link RandomPageTitle#processAllReturningText(String)}
	 * @param s
	 * @return
	 * @throws ProcessException
	 */
	private String processAllReturningText(String s) throws ProcessException {
		XPath parser = XPathFactory.newInstance().newXPath();
		String title = """";
		try {
			XPathExpression titleParser = parser.compile(""/api/query/random/page/@title"");
			InputSource contenido = new InputSource(new ByteArrayInputStream(s.getBytes(MediaWiki.getCharset())));
			title = titleParser.evaluate(contenido);
		} catch (Exception e) {
			throw new ProcessException(""Error parsing the title of the Random Page"" + e.toString());
		}
		log.debug(""Title: "" + title);
		return title;
	}
	
}

// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {
		
	/**
	 * Test case for {@link RandomPageTitle#processAllReturningText(String)}
	 * @throws VersionException if not supported
	 */
	@Test
	void testProcessAllReturningText() throws VersionException {
		
		// Test case 1
		String testCase1 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected1 = ""Test"";
		String actual1 = processAllReturningText(testCase1);
		assertEquals(expected1, actual1);
		
		// Test case 2
		String testCase2 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected2 = ""Test"";
		String actual2 = processAllReturningText(testCase2);
		assertEquals(expected2, actual2);
		
		// Test case 3
		String testCase3 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected3 = ""Test"";
		String actual3 = processAllReturningText(testCase3);
		assertEquals(expected3, actual3);
		
		// Test case 4
		String testCase4 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected4 = ""Test"";
		String actual4 = processAllReturningText(testCase4);
		assertEquals(expected4, actual4);
		
		// Test case 5
		String testCase5 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected5 = ""Test"";
		String actual5 = processAllReturningText(testCase5);
		assertEquals(expected5, actual5);
		
		// Test case 6
		String testCase6 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected6 = ""Test"";
		String actual6 = processAllReturningText(testCase6);
		assertEquals(expected6, actual6);
		
		// Test case 7
		String testCase7 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected7 = ""Test"";
		String actual7 = processAllReturningText(testCase7);
		assertEquals(expected7, actual7);
		
		// Test case 8
		String testCase8 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected8 = ""Test"";
		String actual8 = processAllReturningText(testCase8);
		assertEquals(expected8, actual8);
		
		// Test case 9
		String testCase9 = ""<api><query><random><page title=\""Test\"" /></random></query></api>"";
		String expected9 = ""Test"";
		String actual9 = processAllReturningText(testCase9);
		assertEquals(expected9, actual9);
		
		// Test case 10
		String testCase10 = ""<"
cmpl-6uDqVoCItuFO8clOuZcUwGcmV2E7t,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/TemplateUserTitles.java,97.02188396453857,length,"// TemplateUserTitles.java
/*
 * Copyright 2007 Tobias Knerr.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Tobias Knerr
 * 
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * action class using the MediaWiki-api's ""list=embeddedin"" that is used to find
 * all articles which use a template.
 *
 * @author Tobias Knerr
 * @author Thomas Stock
 * @since MediaWiki 1.9.0
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16, MW1_17 })
public class TemplateUserTitles extends TitleQuery<String> {

    /**
     * constant value for the eilimit-parameter. *
     */
    private static final int LIMIT = 50;

    private final MediaWikiBot bot;

    /**
     * Collection that will contain the result (titles of articles using the
     * template) after performing the action has finished.
     */
    private Collection<String> titleCollection = new ArrayList<String>();

    private final String templateName;

    private final int[] namespaces;

    /**
     * The public constructor. It will have an MediaWiki-request generated, which
     * is then added to msgs. When it is answered, the method
     * processAllReturningText will be called (from outside this class). For the
     * parameters, see
     * {@link TemplateUserTitles#generateRequest(String, String, String)}
     */
    public TemplateUserTitles(MediaWikiBot bot, String templateName, int... namespaces) throws VersionException {
        super(bot);
        this.bot = bot;
        this.templateName = templateName;
        this.namespaces = namespaces;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param templateName
     *          the name of the template, not null
     * @param namespace
     *          the namespace(s) that will be searched for links, as a string of
     *          numbers separated by '|'; if null, this parameter is omitted
     * @param eicontinue
     *          the value for the eicontinue parameter, null for the generation of
     *          the initial request
     */
    private HttpAction generateRequest(String templateName, String namespace, String eicontinue) {
        String uS = """";
        String titleVal = """";
        if (eicontinue == null) {
            switch(bot.getVersion()) {
                case MW1_09:
                case MW1_10:
                    titleVal = ""&titles="";
                    break;
                default:
                    titleVal = ""&eititle="";
                    break;
            }
            uS = ""/api.php?action=query&list=embeddedin"" + titleVal + MediaWiki.encode(templateName) + ((namespace != null && namespace.length() != 0) ? (""&einamespace="" + MediaWiki.encode(namespace)) : """") + ""&eilimit="" + LIMIT + ""&format=xml"";
        } else {
            uS = ""/api.php?action=query&list=embeddedin"" + ""&eicontinue="" + MediaWiki.encode(eicontinue) + ""&eilimit="" + LIMIT + ((namespace != null && namespace.length() != 0) ? (""&einamespace="" + MediaWiki.encode(namespace)) : """") + ""&format=xml"";
            switch(bot.getVersion()) {
                case MW1_09:
                case MW1_10:
                case MW1_11:
                case MW1_12:
                case MW1_13:
                case MW1_14:
                case MW1_15:
                case MW1_16:
                    break;
                case MW1_17:
                default:
                    uS += ""&eititle="" + MediaWiki.encode(templateName);
                    break;
            }
        }
        return new Get(uS);
    }

    /**
     * deals with the MediaWiki api's response by parsing the provided text.
     *
     * @param s
     *          the answer to the most recently generated MediaWiki-request
     *
     * @return empty string
     */
    public String processAllReturningText(final String s) {
        // System.out.println(s);
        parseArticleTitles(s);
        parseHasMore(s);
        titleIterator = titleCollection.iterator();
        return """";
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected String parseHasMore(final String s) {
        // get the eicontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<embeddedin *eicontinue=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            return m.group(1);
        } else {
            return """";
        }
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected Collection<String> parseArticleTitles(String s) {
        // get the backlink titles and add them all to the titleCollection
        Pattern p = Pattern.compile(""<ei pageid=\"".*?\"" ns=\"".*?\"" title=\""(.*?)\"" />"");
        Matcher m = p.matcher(s);
        while (m.find()) {
            titleCollection.add(m.group(1));
        }
        return titleCollection;
    }

    @Override
    protected HttpAction prepareCollection() {
        if (getNextPageInfo().length() <= 0) {
            return generateRequest(templateName, MWAction.createNsString(namespaces), null);
        } else {
            return generateRequest(templateName, MWAction.createNsString(namespaces), getNextPageInfo());
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new TemplateUserTitles(bot, templateName, namespaces);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }
}
","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains ten unit test cases for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains ten unit test cases for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {

		/**
		 * Test case for {@link TemplateUserTitles#processAllReturningText(String)}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * </ul>
		 */
		@Test
		void testProcessAllReturningText() {
				// TODO: implement this test
		}
		
		/**
		 * Test case for {@link TemplateUserTitles#parseArticleTitles(String)}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * </ul>
		 */
		@Test
		void testParseArticleTitles() {
				// TODO: implement this test
		}
		
		/**
		 * Test case for {@link TemplateUserTitles#parseHasMore(String)}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * </ul>
		 */
		@Test
		void testParseHasMore() {
				// TODO: implement this test
		}
		
		/**
		 * Test case for {@link TemplateUserTitles#generateRequest(String, String, String)}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * </ul>
		 */
		@Test
		void testGenerateRequest() {
				// TODO: implement this test
		}
		
		/**
		 * Test case for {@link TemplateUserTitles#prepareCollection()}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * <li>{@link TemplateUserTitles#prepareCollection()}</li>
		 * </ul>
		 */
		@Test
		void testPrepareCollection() {
				// TODO: implement this test
		}
		
		/**
		 * Test case for {@link TemplateUserTitles#clone()}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * <li>{@link TemplateUserTitles#clone()}</li>
		 * </ul>
		 */
		@Test
		void testClone() {
				// TODO: implement this test
		}
		
}

// TitleQuery.java
/*
 * Copyright 2007 Tobias Knerr.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Tobias Knerr
 * 
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * abstract superclass for all classes that use the MediaWiki-api's ""list=""-feature
 * to receive a number of article titles.
 *
 * @author Tobias Knerr
 * @author Thomas Stock
 * @since MediaWiki 1.9.0
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16, MW1_17 })
public abstract class TitleQuery<T> extends BaseQuery<T> {
    /**
     * constant value for the alimit-parameter. *
     */
    private static final int LIMIT = 50;

    private final MediaWikiBot bot;

    /**
     * Collection that will contain the result (titles of articles using the
     * template) after performing the action has finished.
     */
    private Collection<String> titleCollection = new ArrayList<String>();

    /**
     * Iterator that will be used to return the result (titles of articles using
     * the template) one by one.
     */
    private Iterator<String> titleIterator = titleCollection.iterator();

    /**
     * The public constructor. It will have an MediaWiki-request generated, which
     * is then added to msgs. When it is answered, the method
     * processAllReturningText will be called (from outside this class).
     */
    public TitleQuery(MediaWikiBot bot) throws VersionException {
        super(bot);
        this.bot = bot;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param title
     *          the title of the article, not null
     * @param namespace
     *          the namespace(s) that will be searched for links, as a string of
     *          numbers separated by '|'; if null, this parameter is omitted
     * @param acontinue
     *          the value for the acontinue parameter, null for the generation of
     *          the initial request
     */
    private HttpAction generateRequest(String title, String namespace, String acontinue) {
        String uS = """";
        if (acontinue == null) {
            uS = ""/api.php?action=query&list=allpages&apnamespace="" + MediaWiki.encode(namespace) + ""&apprefix="" + MediaWiki.encode(title) + ""&aplimit="" + LIMIT + ""&format=xml"";
        } else {
            uS = ""/api.php?action=query&list=allpages&apnamespace="" + MediaWiki.encode(namespace) + ""&apprefix="" + MediaWiki.encode(title) + ""&aplimit="" + LIMIT + ""&apcontinue="" + MediaWiki.encode(acontinue) + ""&format=xml"";
        }
        return new Get(uS);
    }

    /**
     * deals with the MediaWiki api's response by parsing the provided text.
     *
     * @param s
     *          the answer to the most recently generated MediaWiki-request
     *
     * @return empty string
     */
    public String processAllReturningText(final String s) {
        // System.out.println(s);
        parseArticleTitles(s);
        parseHasMore(s);
        titleIterator = titleCollection.iterator();
        return """";
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected String parseHasMore(final String s) {
        // get the acontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<allpages *acontinue=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            return m.group(1);
        } else {
            return """";
        }
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected Collection<String> parseArticleTitles(String s) {
        // get the backlink titles and add them all to the titleCollection
        Pattern p = Pattern.compile(""<p pageid=\"".*?\"" ns=\"".*?\"" title=\""(.*?)\"" />"");
        Matcher m = p.matcher(s);
        while (m.find()) {
            titleCollection.add(m.group(1));
        }
        return titleCollection;
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String getNextTitle() {
        if (titleIterator.hasNext()) {
            return titleIterator.next();
        } else {
            return null;
        }
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String getNext() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String next() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String nextTitle() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String nextArticle() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String nextPage() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String nextPageTitle() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
    public String nextPageName() {
        return getNextTitle();
    }

    /**
     * @return the next title in the collection, or null if there are no more
     */
   "
8f6ff0bd-158c-4be7-9337-5007aa4508d3,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8532 tokens (4532 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {
"
9eeffecd-8b28-40f0-b45f-a82316c698f1,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8532 tokens (4532 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String, int)} method.
*/
class MediaWikiBot_1Test {","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String, int)} method.
*/
class MediaWikiBot_1Test {
"
65be9a07-e22d-4bca-8b5c-66c1bc4ca170,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8530 tokens (4530 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_2Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String)} method.
*/
class MediaWikiBot_2Test {","// MediaWikiBot_2Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String)} method.
*/
class MediaWikiBot_2Test {
"
eae6082e-bee9-4a0c-8cd5-e1aee6aa8ffa,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8530 tokens (4530 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_3Test {","// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_3Test {
"
cmpl-6uDvxK2xRqh0Igc96ql3qrZnuhOL8,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/trac/bots/TracWikiBot_0Test.java,83.46773362159729,length,"// TracWikiBot.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;

/**
 * /**
 *
 * This class helps you to interact with each wiki as part of <a
 * href=""http://trac.edgewall.org/"" target=""_blank"">Trac</a>. This class offers
 * a set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.trac.*
 *
 * @author Thomas Stock
 */
public class TracWikiBot extends HttpBot implements WikiBot {

    /**
     * @param url
     *          wikihosturl like ""http://trac.edgewall.org/wiki/""
     * @throws MalformedURLException
     *           if param url does not represent a well-formed url
     */
    public TracWikiBot(String url) throws MalformedURLException {
        super(url);
    }

    /**
     * @param name
     *          of article in a tracwiki like ""TracWiki"" , the main page is
     *          ""WikiStart""
     * @return a content representation of requested article, never null
     * @throws ActionException
     *           on problems with http, cookies and io
     * @throws ProcessException
     *           on access problems
     * @see GetRevision
     */
    public synchronized Article readContent(final String name) throws ActionException, ProcessException {
        return readContent(name, 0);
    }

    public void login(String user, String passwd) {
        throw new IllegalStateException(""Login is not supported"");
    }

    public void writeContent(ContentAccessable sa) throws ActionException, ProcessException {
        throw new IllegalStateException(""Writing is not supported"");
    }

    public void postDelete(String title) throws ActionException, ProcessException {
        throw new IllegalStateException(""Deleting is not supported"");
    }

    public Article readContent(String label, int properties) throws ActionException, ProcessException {
        GetRevision ac = new GetRevision(label);
        performAction(ac);
        return new Article(this, ac.getArticle());
    }

    public SimpleArticle readData(String name, int properties) {
        throw new IllegalStateException();
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        throw new IllegalStateException();
    }

    public String getWikiType() {
        throw new IllegalStateException();
    }

    public SimpleArticle readData(String name) {
        throw new IllegalStateException();
    }

    public void writeContent(SimpleArticle sa) {
        throw new IllegalStateException();
    }

    public void delete(String title) {
        throw new IllegalStateException();
    }
}
","// TracWikiBot_0Test.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains ten unit test cases for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBot_0Test {","// TracWikiBot_0Test.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains ten unit test cases for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBot_0Test {

	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_0() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""TracWiki"");
		assertEquals(""TracWiki"", article.getTitle());
		assertEquals(""TracWiki"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_1() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiStart"");
		assertEquals(""WikiStart"", article.getTitle());
		assertEquals(""WikiStart"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_2() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiFormatting"");
		assertEquals(""WikiFormatting"", article.getTitle());
		assertEquals(""WikiFormatting"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_3() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiRestructuredText"");
		assertEquals(""WikiRestructuredText"", article.getTitle());
		assertEquals(""WikiRestructuredText"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_4() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiHtml"");
		assertEquals(""WikiHtml"", article.getTitle());
		assertEquals(""WikiHtml"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_5() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiMacros"");
		assertEquals(""WikiMacros"", article.getTitle());
		assertEquals(""WikiMacros"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_6() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiProcessors"");
		assertEquals(""WikiProcessors"", article.getTitle());
		assertEquals(""WikiProcessors"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_7() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiCreole"");
		assertEquals(""WikiCreole"", article.getTitle());
		assertEquals(""WikiCreole"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_8() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiTocMacro"");
		assertEquals(""WikiTocMacro"", article.getTitle());
		assertEquals(""WikiTocMacro"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_9() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiTocMacro"");
		assertEquals(""WikiTocMacro"", article.getTitle());
		assertEquals(""WikiTocMacro"", article.getText());
	}
	
}

// TracWikiBot_1Test.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains ten unit test cases for the {@link TracWikiBot#readContent(String, int)} method.
*/
class TracWikiBot_1Test {
		
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_0() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""TracWiki"", 0);
		assertEquals(""TracWiki"", article.getTitle());
		assertEquals(""TracWiki"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_1() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiStart"", 0);
		assertEquals(""WikiStart"", article.getTitle());
		assertEquals(""WikiStart"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_2() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiFormatting"", 0);
		assertEquals(""WikiFormatting"", article.getTitle());
		assertEquals(""WikiFormatting"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_3() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiRestructuredText"", 0);
		assertEquals(""WikiRestructuredText"", article.getTitle());
		assertEquals(""WikiRestructuredText"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_4() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiHtml"", 0);
		assertEquals(""WikiHtml"", article.getTitle());
		assertEquals(""WikiHtml"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_5() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiMacros"", 0);
		assertEquals(""WikiMacros"", article.getTitle());
		assertEquals(""WikiMacros"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_6() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiProcessors"", 0);
		assertEquals(""WikiProcessors"", article.getTitle());
		assertEquals(""WikiProcessors"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_7() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiCreole"", 0);
		assertEquals(""WikiCreole"", article.getTitle());
		assertEquals(""WikiCreole"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_8() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiTocMacro"", 0);
		assertEquals(""WikiTocMacro"", article.getTitle());
		assertEquals(""WikiTocMacro"", article.getText());
	}
	
	/**
	* Test case for {@link TracWikiBot#readContent(String, int)}.
	* @throws MalformedURLException if the url is malformed
	* @throws ActionException if the action cannot be performed
	* @throws ProcessException if the process cannot be performed
	*/
	@Test
	void testReadContent_9() throws MalformedURLException, ActionException, ProcessException {
		TracWikiBot bot = new TracWikiBot(""http://trac.edgewall.org/wiki/"");
		Article article = bot.readContent(""WikiTocMacro"", 0);
		assertEquals(""WikiTocMacro"", article.getTitle());
		assertEquals(""WikiTocMacro"", article.getText());
	}
	
}

// TracWikiBot_2Test.java
package net.sourceforge.jwbf"
cmpl-6uDxIGIBtfAPJTEwLSV0z1Ebx9jJf,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/zim/bots/ZimWikiBot_2Test.java,85.13978385925293,length,"// ZimWikiBot.java
/*
 * Copyright 2009 Martin Koch.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;

/**
 * @author Martin Koch
 */
public class ZimWikiBot implements WikiBot {

    private static final String ZIMEXT = "".txt"";

    private static final int DEFAULT = 0;

    private final File rootFolder;

    //	private final String mwFolder;
    /**
     * Constructor for a ZIM wiki-bot.
     * @param zimRootFolder this is the folder on your local machine
     */
    public ZimWikiBot(String zimRootFolder) {
        // specify the path to all zim files
        this(new File(zimRootFolder));
    }

    public ZimWikiBot(File rootFolder) {
        // specify the path to all zim files
        this.rootFolder = rootFolder;
    }

    public void login(String user, String passwd) throws ActionException {
        throw new ActionException(""login is not supported because this is a desktopwiki"");
    }

    public void delete(String title) throws ActionException, ProcessException {
        // TODO Auto-generated method stub
    }

    public Article getArticle(String title) throws ActionException, ProcessException {
        // FIXME add regular constants
        return getArticle(title, 0);
    }

    public Article getArticle(String title, int properties) throws ActionException, ProcessException {
        return new Article(this, readData(title, properties));
    }

    /**
     * Set up a simple text paarser
     * some simple formating routines are supplied
     * -> bold letters and images are translated from
     * zimWiki to mediaWiki
     */
    public SimpleArticle readData(String name, int properties) throws ActionException, ProcessException {
        File f = new File(getRootFolder(), name + ZIMEXT);
        SimpleArticle sa = new SimpleArticle();
        sa.setTitle(name);
        StringBuffer text = new StringBuffer();
        // create a file reader
        BufferedReader myInput = null;
        try {
            myInput = new BufferedReader(new FileReader(f));
            String line = """";
            String cont = """";
            // if we are reading content, than
            while ((line = myInput.readLine()) != null) {
                // omit the headline
                if (line.startsWith(""====== "" + name + "" ======"")) {
                    // store every line in 'text' and add a newline
                    while ((cont = myInput.readLine()) != null) {
                        // zim encapsulates bold letters with **
                        // media wiki encapsulates bold letters with '''
                        cont = cont.replace(""**"", ""'''"");
                        // images are written in zim:
                        // {{../MatlabSVM_01.png?width=400}}
                        // in media wiki:
                        // [[MatlabSVM_01.png|45px|none|MatlabSVM_01]]
                        cont = cont.replace(""{{../"", ""[[Image:"");
                        cont = cont.replace(""?width="", ""|"");
                        cont = cont.replace(""}}"", ""|none| "" + name + ""]]"");
                        text.append(cont + ""\n"");
                    }
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            try {
                if (myInput != null)
                    myInput.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        sa.setText(text.toString());
        return sa;
    }

    public void writeContent(SimpleArticle sa) throws ActionException, ProcessException {
        // TODO Auto-generated method stub
    }

    public File getRootFolder() {
        return rootFolder;
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        return new Userinfo() {

            public String getUsername() {
                return System.getProperty(""user.name"");
            }

            public Set<String> getRights() {
                Set<String> v = new HashSet<String>();
                if (rootFolder.canRead()) {
                    v.add(""read"");
                }
                if (rootFolder.canWrite()) {
                    v.add(""write"");
                }
                return v;
            }

            public Set<String> getGroups() {
                return new HashSet<String>();
            }
        };
    }

    public String getWikiType() {
        return ""Zim"";
    }

    public SimpleArticle readData(String name) throws ActionException, ProcessException {
        return readData(name, DEFAULT);
    }

    public boolean hasCacheHandler() {
        // TODO Auto-generated method stub
        return false;
    }

    public void setCacheHandler(CacheHandler ch) {
        // TODO Auto-generated method stub
    }
    //	public String getMWFolder() {
    //		return mwFolder;
    //	}
}
","// ZimWikiBot_2Test.java
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ZimWikiBot}.
* It contains ten unit test cases for the {@link ZimWikiBot#readData(String, int)} method.
*/
class ZimWikiBot_2Test {","// ZimWikiBot_2Test.java
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ZimWikiBot}.
* It contains ten unit test cases for the {@link ZimWikiBot#readData(String, int)} method.
*/
class ZimWikiBot_2Test {

	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData2() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData3() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData4() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData5() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData6() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData7() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData8() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the"
