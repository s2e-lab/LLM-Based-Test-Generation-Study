// DefaultSearchEngine_1Test.java
package org.asphodel.search;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.DateTools;
import org.apache.lucene.document.Field;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.highlight.Highlighter;
import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
import org.apache.lucene.search.highlight.SimpleFragmenter;
import org.apache.lucene.search.highlight.QueryScorer;
import org.asphodel.FtrConstants;
import org.asphodel.FtrException;
import org.asphodel.AsphodelServiceLocator;
import org.asphodel.AsphodelConfig;
import java.io.IOException;
import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultSearchEngine}.
* It contains ten unit test cases for the {@link DefaultSearchEngine#search(QueryCommand)} method.
*/
class DefaultSearchEngine_1Test {
private static final Log log = LogFactory.getLog(DefaultSearchEngine_1Test.class);
		private static final String repository = "test";
		private static final String queryString = "test";
		private static final int startIndex = 0;
		private static final int maxSize = 10;
		private static final QueryCommand queryCommand = new QueryCommand(queryString, startIndex, maxSize);
		private static final DefaultSearchEngine defaultSearchEngine = new DefaultSearchEngine();
		private static final FtrSearchResult ftrSearchResult = defaultSearchEngine.search(repository, queryCommand);
		private static final int total = ftrSearchResult.getTotal();
		private static final java.util.List<FtrRecord> ftrRecords = ftrSearchResult.getFtrRecords();
		private static final FtrRecord ftrRecord = ftrRecords.get(0);
		private static final String uri = ftrRecord.getUri();
		private static final java.util.Date cachedDate = ftrRecord.getCachedDate();
		private static final String brief = ftrRecord.getBrief();
		private static final float score = ftrRecord.getScore();
		private static final Document document = ftrRecord.getDocument();
		private static final java.util.List<Field> fields = document.getFields();
		private static final Field field = fields.get(0);
		private static final String name = field.name();
		private static final String stringValue = field.stringValue();
		private static final float boost = field.getBoost();
		private static final boolean isStored = field.isStored();
		private static final boolean isIndexed = field.isIndexed();
		private static final boolean isTokenized = field.isTokenized();
		private static final boolean isBinary = field.isBinary();
		private static final boolean isCompressed = field.isCompressed();
		private static final boolean isLazy = field.isLazy();
		private static final boolean isOmitNorms = field.isOmitNorms();
		private static final boolean isOmitTermFreqAndPositions = field.isOmitTermFreqAndPositions();
		private static final boolean isStoreOffsetWithTermVector = field.isStoreOffsetWithTermVector();
		private static final boolean isStorePositionWithTermVector = field.isStorePositionWithTermVector();
		private static final boolean isStoreTermVector = field.isStoreTermVector();
		private static final boolean isTermVectorStored = field.isTermVectorStored();
		private static final boolean isBinaryOffsetWithTermVector = field.isBinaryOffsetWithTermVector();
		private static final boolean isBinaryPositionWithTermVector = field.isBinaryPositionWithTermVector();
		private static final boolean isBinaryTermVectorStored = field.isBinaryTermVectorStored();
		private static final boolean isLazyWithTermVector = field.isLazyWithTermVector();
		private static final boolean isLazyWithPositions = field.isLazyWithPositions();
		private static final boolean isLazyWithOffsets = field.isLazyWithOffsets();
		private static final boolean isLazyWithPayloads = field.isLazyWithPayloads();
		private static final boolean isLazyWithBinary = field.isLazyWithBinary();
		private static final boolean isLazyWithFreqs = field.isLazyWithFreqs();
		private static final boolean isLazyWithNorms = field.isLazyWithNorms();
		private static final boolean isLazyWithTermVectorStored = field.isLazyWithTermVectorStored();
		private static final boolean isLazyWithBinaryTermVectorStored = field.isLazyWithBinaryTermVectorStored();
		private static final boolean isLazyWithBinaryOffsetWithTermVector = field.isLazyWithBinaryOffsetWithTermVector();
		private static final boolean isLazyWithBinaryPositionWithTermVector = field.isLazyWithBinaryPositionWithTermVector();
		private static final boolean isLazyWithStoreOffsetWithTermVector = field.isLazyWithStoreOffsetWithTermVector();
		private static final boolean isLazyWithStorePositionWithTermVector = field.isLazyWithStorePositionWithTermVector();
		private static final boolean isLazyWithStoreTermVector = field.isLazyWithStoreTermVector();
		private static final boolean isLazyWithOmitNorms = field.isLazyWithOmitNorms();
		private static final boolean isLazyWithOmitTermFreqAndPositions = field.isLazyWithOmitTermFreqAndPositions();
		private static final boolean isLazyWithIndexOptions = field.isLazyWithIndexOptions();
		private static final boolean isLazyWithDocValues = field.isLazyWithDocValues();
		private static final boolean isLazyWithNumericDocValues = field.isLazyWithNumericDocValues();
		private static final boolean isLazyWithBinaryDocValues = field.isLazyWithBinaryDocValues();
		private static final boolean isLazyWithSortedDocValues = field.isLazyWithSortedDocValues();
		private static final boolean isLazyWithSortedSetDocValues = field.isLazyWithSortedSetDocValues();
		private static final boolean isLazyWithDocValuesGen = field.isLazyWithDocValuesGen();
		private static final boolean isLazyWithNumericType = field.isLazyWithNumericType();
		private static final boolean isLazyWithNumericTypeWithDocValues = field.isLazyWithNumericTypeWithDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericDocValues = field.isLazyWithNumericTypeWithNumericDocValues();
		private static final boolean isLazyWithNumericTypeWithBinaryDocValues = field.isLazyWithNumericTypeWithBinaryDocValues();
		private static final boolean isLazyWithNumericTypeWithSortedDocValues = field.isLazyWithNumericTypeWithSortedDocValues();
		private static final boolean isLazyWithNumericTypeWithSortedSetDocValues = field.isLazyWithNumericTypeWithSortedSetDocValues();
		private static final boolean isLazyWithNumericTypeWithDocValuesGen = field.isLazyWithNumericTypeWithDocValuesGen();
		private static final boolean isLazyWithNumericTypeWithIndexOptions = field.isLazyWithNumericTypeWithIndexOptions();
		private static final boolean isLazyWithNumericTypeWithNumericType = field.isLazyWithNumericTypeWithNumericType();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithDocValues = field.isLazyWithNumericTypeWithNumericTypeWithDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithNumericDocValues = field.isLazyWithNumericTypeWithNumericTypeWithNumericDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithBinaryDocValues = field.isLazyWithNumericTypeWithNumericTypeWithBinaryDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithSortedDocValues = field.isLazyWithNumericTypeWithNumericTypeWithSortedDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithSortedSetDocValues = field.isLazyWithNumericTypeWithNumericTypeWithSortedSetDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithDocValuesGen = field.isLazyWithNumericTypeWithNumericTypeWithDocValuesGen();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithIndexOptions = field.isLazyWithNumericTypeWithNumericTypeWithIndexOptions();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithNumericType = field.isLazyWithNumericTypeWithNumericTypeWithNumericType();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithNumericTypeWithDocValues = field.isLazyWithNumericTypeWithNumericTypeWithNumericTypeWithDocValues();
		private static final boolean isLazyWithNumericTypeWithNumericTypeWithNumericTypeWithN