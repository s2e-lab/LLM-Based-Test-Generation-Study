ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6tylBXSAVR2O51F2oHpoVRcPHRq4P,/EvoSuiteBenchmark/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,84.6331217288971,length,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    /**
     */
    private static final long serialVersionUID = -8647088721012280920L;

    private GmFrame parent;

    private JTree tree;

    private JButton btnExec;

    private JSpinner spnMod;

    private MultiHeroTreeModel model;

    private JComboBox cmbUsers;

    private JRadioButton radAttack;

    private JRadioButton radDefense;

    private String frameName;

    /**
     * set up a new window
     * @param parent the parent component and action listener
     * @param heros the data to display in tree
     * @param name the name and caption of this frame
     */
    public InternalGmHeroFrame(GmFrame parent, Vector<Hero> heros, String name) {
        super(name, //resizable
        true, //closable
        true, //maximizable
        true, //iconifiable
        true);
        frameName = name;
        this.parent = parent;
        //...Create the GUI and put it in the window...
        //...Then set the window size or call pack...
        model = new MultiHeroTreeModel(name, heros);
        createGUI();
        //Set the window's location.
        Dimension drawSize = parent.getSize();
        setSize(400, drawSize.height - 55);
        setLocation(drawSize.width - 405, 0);
    }

    /**
     * create the components that can be viewed and used
     */
    private void createGUI() {
        setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        //the tree
        tree = new JTree(model);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.addTreeSelectionListener(this);
        JScrollPane scrTree = new JScrollPane(tree);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0;
        c.weighty = 0.8;
        c.insets = new Insets(0, 0, 5, 0);
        add(scrTree, c);
        //the rest is done in a panel
        JPanel pnlConfigure = new JPanel(new GridBagLayout());
        //enemies can execute attacks and defenses
        if (!frameName.equals(""Heros"")) {
            //button if attack or not.
            radAttack = new JRadioButton(""attack"");
            radAttack.setEnabled(false);
            c.gridx = 0;
            c.gridy = 0;
            c.fill = GridBagConstraints.NONE;
            c.weightx = 0.0;
            c.weighty = 0.0;
            c.insets = new Insets(5, 5, 5, 5);
            pnlConfigure.add(radAttack, c);
            radDefense = new JRadioButton(""defense"");
            radDefense.setEnabled(false);
            c.gridx++;
            c.fill = GridBagConstraints.NONE;
            c.weightx = 0.0;
            c.weighty = 0.0;
            c.insets = new Insets(5, 5, 5, 5);
            pnlConfigure.add(radDefense, c);
            ButtonGroup bg = new ButtonGroup();
            bg.add(radAttack);
            bg.add(radDefense);
            JLabel lblUser = new JLabel(""To user"");
            c.gridx = 0;
            c.gridy++;
            c.fill = GridBagConstraints.NONE;
            c.weightx = 0.0;
            c.weighty = 0.0;
            c.insets = new Insets(5, 5, 5, 5);
            pnlConfigure.add(lblUser, c);
            cmbUsers = new JComboBox();
            cmbUsers.addItem(""All"");
            c.gridx++;
            c.fill = GridBagConstraints.NONE;
            c.weightx = 0.0;
            c.weighty = 0.0;
            c.insets = new Insets(5, 5, 5, 5);
            pnlConfigure.add(cmbUsers, c);
        }
        //set a difficulty for the challenge
        JLabel lblMod = new JLabel(""Modification"");
        c.gridx = 0;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weightx = 0.0;
        c.weighty = 0.0;
        c.insets = new Insets(5, 5, 5, 5);
        pnlConfigure.add(lblMod, c);
        SpinnerModel model = new //initial value
        SpinnerNumberModel(//initial value
        0, //min
        -20, //max
        20, //step
        1);
        spnMod = new JSpinner(model);
        c.gridx++;
        c.fill = GridBagConstraints.NONE;
        c.weightx = 0.0;
        c.weighty = 0.0;
        c.insets = new Insets(5, 5, 5, 5);
        pnlConfigure.add(spnMod, c);
        //execute the challenge or challenge request
        btnExec = new JButton(""roll"");
        btnExec.setActionCommand(""challenge"");
        btnExec.addActionListener(parent);
        btnExec.setEnabled(true);
        c.gridx = 0;
        c.gridy++;
        c.fill = GridBagConstraints.NONE;
        c.weightx = 0.0;
        c.weighty = 0.0;
        c.insets = new Insets(5, 5, 5, 5);
        pnlConfigure.add(btnExec, c);
        c.gridx = 0;
        c.gridy = 1;
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 1.0;
        c.weighty = 0.2;
        c.insets = new Insets(5, 0, 0, 0);
        add(pnlConfigure, c);
        //TODO Button for initiative
        setVisible(true);
    }

    /**
     * get the selected path from the tree
     * @return the selected tree path
     */
    public TreePath getSelectedPath() {
        if (tree.getSelectionPath() != null) {
            return tree.getSelectionPath();
        }
        return null;
    }

    /**
     * get the name of the receiver for a challenge request or the
     * result of a challenge
     * @return the receiver
     */
    public String getReceiver() {
        return (String) cmbUsers.getSelectedItem();
    }

    /**
     * get the difficulty for the challenge
     * @return the difficulty
     */
    public int getMod() {
        return (Integer) spnMod.getValue();
    }

    /**
     * enable the execution button
     */
    public void enableButton() {
        btnExec.setEnabled(true);
    }

    /**
     * update the combobox for sending data to
     * when a user connects or disconnects
     * @param userlist
     */
    public void updateUsers(String[] userlist) {
        cmbUsers.removeAllItems();
        cmbUsers.addItem(""All"");
        for (int i = 0; i < userlist.length; i++) {
            cmbUsers.addItem(userlist[i]);
        }
    }

    /**
     * the game master should not use silent mode.
     * He has to know all results
     * @return false
     */
    public boolean silent() {
        return false;
    }

    public void valueChanged(TreeSelectionEvent e) {
        //do not select anything when the user doesn't select a leaf
        //GM can't execute fights for the clients
        if (!model.isLeaf(e.getPath().getLastPathComponent()) || (e.getPath().getLastPathComponent().getClass().equals(Weapon.class)) && frameName.equals(""Heros"")) {
            tree.getSelectionModel().clearSelection();
            btnExec.setEnabled(false);
        } else {
            //let the GM execute a challenge
            btnExec.setEnabled(true);
        }
        //enable attack of defense when the GM selected a weapon of an enemy
        if (!frameName.equals(""Heros"")) {
            try {
                if (tree.getSelectionPath().getLastPathComponent().getClass().equals(Weapon.class)) {
                    radDefense.setEnabled(true);
                    radAttack.setEnabled(true);
                } else {
                    radDefense.setEnabled(false);
                    radAttack.setEnabled(false);
                }
            } catch (Exception e1) {
                //not so bad
                radDefense.setEnabled(false);
                radAttack.setEnabled(false);
                return;
            }
        }
    }

    /**
     * Update the view of this tree
     * @param h the new data
     */
    public void updateHero(Vector<Hero> h) {
        model.fireTreeStructureChanged(h);
    }

    /**
     * get the frame name (Heros|Enemies)
     * @return the type of the loaded heros
     */
    public String getFrameName() {
        return frameName;
    }

    /**
     * return if this challenge is a attack or defense
     * @return true if it is an attack
     */
    public boolean isAttack() {
        return radAttack.isSelected();
    }

    /**
     * get the data of tree
     * @return the heros stored in the tree
     */
    public Vector<Hero> getData() {
        return model.heros;
    }
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {

		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
		/**
		 * Test case for {@link InternalGmHeroFrame#silent()}.
		 * The method should return false.
		 */
		@Test
		void testSilent() {
				InternalGmHeroFrame test = new InternalGmHeroFrame(null, null, null);
				assertFalse(test.silent());
		}
}

"
cmpl-6tymYCxHIdwb2Ua53yYLYV91j2UBx,/EvoSuiteBenchmark/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java,83.41301918029785,length,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 * @author bernshausen
 */
public class Challenge implements Serializable {

    //IDEA return lep,asp,aup loss
    private static final long serialVersionUID = 6777899032409172338L;

    private Talent t = null;

    private int attrib1;

    private int attrib2;

    private int attrib3;

    private int mod;

    private String to;

    private boolean silent;

    private String attrib = null;

    private int attrValue;

    private Weapon w = null;

    private boolean attack = false;

    private int dmgkk;

    /**
     * generate new challenge for spells and talents
     * @param tal the talents or spells name
     * @param modification difficulty
     * @param h the hero to get the parameters
     * @param silent response to sender?
     * @param response the receiver of the results
     */
    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {
        t = getTalent(tal, h);
        mod = modification;
        to = response;
        this.silent = silent;
        if (t != null) {
            getAttrib(h);
        }
    }

    /**
     * create new attribute challenge
     * @param attrShortcut the shortcut for the attribute
     * @param h the hero to get the value
     * @param modification the difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {
        this.silent = silent;
        mod = modification;
        to = response;
        attrib = attrShortcut;
        attrValue = h.getAttrValue(attrShortcut);
    }

    /**
     * create a new challenge for a fight
     * @param w the weapon
     * @param attack is attack? else defense
     * @param h the hero
     * @param modification difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {
        this.w = w;
        this.mod = modification;
        this.silent = silent;
        this.to = response;
        this.attack = attack;
        dmgkk = 0;
        if (h.getAttrValue(""KK"") > w.getKkMin()) {
            dmgkk = (h.getAttrValue(""KK"") - w.getKkMin()) / w.getKkStep();
        }
    }

    /**
     * get the named talent from hero
     * @param tal the name
     * @param h the hero
     * @return the talent (or spell)
     */
    private Talent getTalent(String tal, Hero h) {
        Vector<Talent> v = h.getTalents();
        for (int i = 0; i < v.size(); i++) {
            if (v.elementAt(i).getName().equalsIgnoreCase(tal)) {
                return v.elementAt(i);
            }
        }
        return null;
    }

    /**
     * Set the attributes for a talent (spell) challenge
     * @param h the hero to get the values from
     */
    private void getAttrib(Hero h) {
        String[] ch = t.getChallenge().split(""/"");
        if (ch.length != 3) {
            return;
        }
        attrib1 = getAttribFromHero(h, ch[0]);
        attrib2 = getAttribFromHero(h, ch[1]);
        attrib3 = getAttribFromHero(h, ch[2]);
    }

    /**
     * return the value of the attribute
     * @param h the hero
     * @param attr the shortcut of the attribute
     * @return the attributes value
     */
    private int getAttribFromHero(Hero h, String attr) {
        return h.getAttrValue(attr);
    }

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     * @return the result as string
     */
    public String roll() {
        if (t != null)
            return rollTalent();
        if (attrib != null)
            return rollAttr();
        if (w != null) {
            return rollFight();
        }
        return "" missing Talent, Spell, ..."";
    }

    /**
     * roll the attack or defense with the given weapon
     * @return the results as string
     */
    private String rollFight() {
        int dices = w.getDices();
        int sides = w.getSides();
        int dmgMod = w.getDmgMod();
        int at = w.getAt();
        int damage = 0;
        //set up possible responses
        String good = ""good "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\"": "" + ""Enemy's defense is cut in half. Would make "" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\"": You gain one action."");
        String bumbler = ""bumbler in "" + (attack ? ""attack "" : ""defense "") + "" (Mod: "" + mod + "") with \"""" + w.getName() + ""\"""";
        String success = ""successful "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\"". Would make "" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."");
        String fail = ""failed "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."");
        ;
        //calculate damage
        for (int i = 0; i < dices; i++) {
            damage += Challenge.dice(sides);
        }
        damage += dmgMod;
        //roll dices
        int roll = Challenge.dice(20);
        if (roll == 1) {
            roll = Challenge.dice(20);
            if (roll + mod <= at) {
                damage *= 2;
                damage += dmgkk;
                return good + (attack ? damage + "" damage."" : """");
            } else {
                damage += dmgkk;
                return success + (attack ? damage + "" damage."" : """");
            }
        }
        if (roll == 20) {
            roll = Challenge.dice(20);
            if (roll + mod > at) {
                //FIXME Patzertabelle
                int bumblerCode = Challenge.dice(6) + Challenge.dice(6);
                String bumblerTxt = """";
                switch(bumblerCode) {
                    case 2:
                        bumblerTxt = ""Code: "" + 2;
                        break;
                    case 3:
                        bumblerTxt = ""Code: "" + 3;
                        break;
                    case 4:
                        bumblerTxt = ""Code: "" + 4;
                        break;
                    case 5:
                        bumblerTxt = ""Code: "" + 5;
                        break;
                    case 6:
                        bumblerTxt = ""Code: "" + 6;
                        break;
                    case 7:
                        bumblerTxt = ""Code: "" + 7;
                        break;
                    case 8:
                        bumblerTxt = ""Code: "" + 8;
                        break;
                    case 9:
                        bumblerTxt = ""Code: "" + 9;
                        break;
                    case 10:
                        bumblerTxt = ""Code: "" + 10;
                        break;
                    case 11:
                        bumblerTxt = ""Code: "" + 11;
                        break;
                    case 12:
                        bumblerTxt = ""Code: "" + 12;
                        break;
                    default:
                }
                return bumbler + bumblerTxt;
            } else {
                return fail;
            }
        }
        if (roll + mod <= at) {
            damage += dmgkk;
            return success + (attack ? damage + "" damage."" : """");
        }
        if (roll + mod > at) {
            return fail;
        }
        return null;
    }

    /**
     * execute talent challenge
     * @return results as string
     */
    private String rollTalent() {
        //set leading result
        String ch = "" "" + t.getName() + "" ("" + t.getChallenge() + "") "" + ((mod != 0) ? ((mod > 0) ? ""+"" + mod : mod) : """") + "":\t"";
        //roll dices
        int f = Challenge.dice(20);
        int s = Challenge.dice(20);
        int tr = Challenge.dice(20);
        //tell what was rolled
        ch += ""rolled: "" + f + ""|"" + s + ""|"" + tr + "" "";
        //calculate result
        if (f == 1 && s == 1 && tr == 1) {
            ch += ""successed!!!!!(YEAH)"";
        } else if ((f == 1 && s == 1) || (f == 1 && tr == 1) || (s == 1 && tr == 1)) {
            //good roll
            ch += ""automatic success"";
        } else if (f == 20 && s == 20 && tr == 20) {
            //really bad
            ch += ""FAILED!!!"";
        } else if ((f == 20 && s == 20) || (f == 20 && tr == 20) || (s == 20 && tr == 20)) {
            //good roll
            ch += ""automatic fail"";
        } else {
            int over = 0;
            if (f > attrib1)
                over += f - attrib1;
            if (s > attrib2)
                over += s - attrib2;
            if (tr > attrib3)
                over += tr - attrib3;
            int talPoints = t.getValue() - mod;
            talPoints -= over;
            if (talPoints > 0)
                ch += ""successed (TaP* "" + talPoints + "")"";
            if (talPoints == 0) {
                ch += ""successed (TaP* 1)"";
            }
            if (talPoints < 0) {
                ch += ""failed"";
            }
        }
        return ch;
    }

    /**
     * execute attribute challenge
     * @return result as string
     */
    private String rollAttr() {
        //intro
        String ch = "" "" + attrib + ((mod != 0) ? ((mod > 0) ? ""+"" + mod : mod) : """") + "":\t"";
        //roll
        int f = Challenge.dice(20);
        ch += ""rolled: "" + f;
        //calculate
        if (f == 1) {
            //good roll
            ch += ""automatic success"";
        } else if (f == 20) {
            //bad roll
            ch += ""automatic fail"";
        } else {
            int over = attrValue - (f + mod);
            ch += (over < 0) ? ""  failed:  missing "" + Math.abs(over) + "" points"" : ""  success:  left over "" + over + "" points"";
        }
        return ch;
    }

    /**
     * represents this challenge
     */
    public String toString() {
        String ret = """";
        ret += t.toString() + ""\n"";
        ret += ""att: "" + attrib1 + "" "" + attrib2 + "" "" + attrib3 + ""\n"";
        ret += ""mod: "" + mod + ""\n"";
        ret += ""to: "" + to;
        return ret;
    }

    /**
     * roll a dice with variable sides
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides) {
        int ret = -1;
        ret = (int) Math.rint((Math.random() * sides)) % sides + 1;
        return ret;
    }

    /**
     * return the receiver of the results
     * @return the receiver
     */
    public String getTo() {
        return to;
    }

    /**
     * return the silent mode
     * @return the silent value
     */
    public boolean isSilent() {
        return silent;
    }
}
","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {","// Challenge_0Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#roll()} method.
*/
class Challenge_0Test {

	/**
	 * Test method for {@link Challenge#roll()}.
	 */
	@Test
	void testRoll() {
		Hero h = new Hero();
		h.setAttrValue(""MU"", 10);
		h.setAttrValue(""KL"", 10);
		h.setAttrValue(""IN"", 10);
		h.setAttrValue(""CH"", 10);
		h.setAttrValue(""FF"", 10);
		h.setAttrValue(""GE"", 10);
		h.setAttrValue(""KO"", 10);
		h.setAttrValue(""KK"", 10);
		h.setAttrValue(""SO"", 10);
		h.setAttrValue(""LP"", 10);
		h.setAttrValue(""AE"", 10);
		h.setAttrValue(""MR"", 10);
		h.setAttrValue(""LE"", 10);
		h.setAttrValue(""AU"", 10);
		h.setAttrValue(""AS"", 10);
		h.setAttrValue(""BE"", 10);
		h.setAttrValue(""RS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""WS"", 10);
		h.setAttrValue(""PS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""GS"
cmpl-6tyntLu4z8VioeN1u9fcl9KVMO740,/EvoSuiteBenchmark/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java,83.69902896881104,length,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 * @author bernshausen
 */
public class Challenge implements Serializable {

    //IDEA return lep,asp,aup loss
    private static final long serialVersionUID = 6777899032409172338L;

    private Talent t = null;

    private int attrib1;

    private int attrib2;

    private int attrib3;

    private int mod;

    private String to;

    private boolean silent;

    private String attrib = null;

    private int attrValue;

    private Weapon w = null;

    private boolean attack = false;

    private int dmgkk;

    /**
     * generate new challenge for spells and talents
     * @param tal the talents or spells name
     * @param modification difficulty
     * @param h the hero to get the parameters
     * @param silent response to sender?
     * @param response the receiver of the results
     */
    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {
        t = getTalent(tal, h);
        mod = modification;
        to = response;
        this.silent = silent;
        if (t != null) {
            getAttrib(h);
        }
    }

    /**
     * create new attribute challenge
     * @param attrShortcut the shortcut for the attribute
     * @param h the hero to get the value
     * @param modification the difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {
        this.silent = silent;
        mod = modification;
        to = response;
        attrib = attrShortcut;
        attrValue = h.getAttrValue(attrShortcut);
    }

    /**
     * create a new challenge for a fight
     * @param w the weapon
     * @param attack is attack? else defense
     * @param h the hero
     * @param modification difficulty
     * @param silent response to sender?
     * @param response the receiver
     */
    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {
        this.w = w;
        this.mod = modification;
        this.silent = silent;
        this.to = response;
        this.attack = attack;
        dmgkk = 0;
        if (h.getAttrValue(""KK"") > w.getKkMin()) {
            dmgkk = (h.getAttrValue(""KK"") - w.getKkMin()) / w.getKkStep();
        }
    }

    /**
     * get the named talent from hero
     * @param tal the name
     * @param h the hero
     * @return the talent (or spell)
     */
    private Talent getTalent(String tal, Hero h) {
        Vector<Talent> v = h.getTalents();
        for (int i = 0; i < v.size(); i++) {
            if (v.elementAt(i).getName().equalsIgnoreCase(tal)) {
                return v.elementAt(i);
            }
        }
        return null;
    }

    /**
     * Set the attributes for a talent (spell) challenge
     * @param h the hero to get the values from
     */
    private void getAttrib(Hero h) {
        String[] ch = t.getChallenge().split(""/"");
        if (ch.length != 3) {
            return;
        }
        attrib1 = getAttribFromHero(h, ch[0]);
        attrib2 = getAttribFromHero(h, ch[1]);
        attrib3 = getAttribFromHero(h, ch[2]);
    }

    /**
     * return the value of the attribute
     * @param h the hero
     * @param attr the shortcut of the attribute
     * @return the attributes value
     */
    private int getAttribFromHero(Hero h, String attr) {
        return h.getAttrValue(attr);
    }

    /**
     * execute this challenge
     * differ between talents, attributes or fight
     * @return the result as string
     */
    public String roll() {
        if (t != null)
            return rollTalent();
        if (attrib != null)
            return rollAttr();
        if (w != null) {
            return rollFight();
        }
        return "" missing Talent, Spell, ..."";
    }

    /**
     * roll the attack or defense with the given weapon
     * @return the results as string
     */
    private String rollFight() {
        int dices = w.getDices();
        int sides = w.getSides();
        int dmgMod = w.getDmgMod();
        int at = w.getAt();
        int damage = 0;
        //set up possible responses
        String good = ""good "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\"": "" + ""Enemy's defense is cut in half. Would make "" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\"": You gain one action."");
        String bumbler = ""bumbler in "" + (attack ? ""attack "" : ""defense "") + "" (Mod: "" + mod + "") with \"""" + w.getName() + ""\"""";
        String success = ""successful "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\"". Would make "" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."");
        String fail = ""failed "" + (attack ? ""attack (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."" : ""defense (Mod: "" + mod + "") with \"""" + w.getName() + ""\""."");
        ;
        //calculate damage
        for (int i = 0; i < dices; i++) {
            damage += Challenge.dice(sides);
        }
        damage += dmgMod;
        //roll dices
        int roll = Challenge.dice(20);
        if (roll == 1) {
            roll = Challenge.dice(20);
            if (roll + mod <= at) {
                damage *= 2;
                damage += dmgkk;
                return good + (attack ? damage + "" damage."" : """");
            } else {
                damage += dmgkk;
                return success + (attack ? damage + "" damage."" : """");
            }
        }
        if (roll == 20) {
            roll = Challenge.dice(20);
            if (roll + mod > at) {
                //FIXME Patzertabelle
                int bumblerCode = Challenge.dice(6) + Challenge.dice(6);
                String bumblerTxt = """";
                switch(bumblerCode) {
                    case 2:
                        bumblerTxt = ""Code: "" + 2;
                        break;
                    case 3:
                        bumblerTxt = ""Code: "" + 3;
                        break;
                    case 4:
                        bumblerTxt = ""Code: "" + 4;
                        break;
                    case 5:
                        bumblerTxt = ""Code: "" + 5;
                        break;
                    case 6:
                        bumblerTxt = ""Code: "" + 6;
                        break;
                    case 7:
                        bumblerTxt = ""Code: "" + 7;
                        break;
                    case 8:
                        bumblerTxt = ""Code: "" + 8;
                        break;
                    case 9:
                        bumblerTxt = ""Code: "" + 9;
                        break;
                    case 10:
                        bumblerTxt = ""Code: "" + 10;
                        break;
                    case 11:
                        bumblerTxt = ""Code: "" + 11;
                        break;
                    case 12:
                        bumblerTxt = ""Code: "" + 12;
                        break;
                    default:
                }
                return bumbler + bumblerTxt;
            } else {
                return fail;
            }
        }
        if (roll + mod <= at) {
            damage += dmgkk;
            return success + (attack ? damage + "" damage."" : """");
        }
        if (roll + mod > at) {
            return fail;
        }
        return null;
    }

    /**
     * execute talent challenge
     * @return results as string
     */
    private String rollTalent() {
        //set leading result
        String ch = "" "" + t.getName() + "" ("" + t.getChallenge() + "") "" + ((mod != 0) ? ((mod > 0) ? ""+"" + mod : mod) : """") + "":\t"";
        //roll dices
        int f = Challenge.dice(20);
        int s = Challenge.dice(20);
        int tr = Challenge.dice(20);
        //tell what was rolled
        ch += ""rolled: "" + f + ""|"" + s + ""|"" + tr + "" "";
        //calculate result
        if (f == 1 && s == 1 && tr == 1) {
            ch += ""successed!!!!!(YEAH)"";
        } else if ((f == 1 && s == 1) || (f == 1 && tr == 1) || (s == 1 && tr == 1)) {
            //good roll
            ch += ""automatic success"";
        } else if (f == 20 && s == 20 && tr == 20) {
            //really bad
            ch += ""FAILED!!!"";
        } else if ((f == 20 && s == 20) || (f == 20 && tr == 20) || (s == 20 && tr == 20)) {
            //good roll
            ch += ""automatic fail"";
        } else {
            int over = 0;
            if (f > attrib1)
                over += f - attrib1;
            if (s > attrib2)
                over += s - attrib2;
            if (tr > attrib3)
                over += tr - attrib3;
            int talPoints = t.getValue() - mod;
            talPoints -= over;
            if (talPoints > 0)
                ch += ""successed (TaP* "" + talPoints + "")"";
            if (talPoints == 0) {
                ch += ""successed (TaP* 1)"";
            }
            if (talPoints < 0) {
                ch += ""failed"";
            }
        }
        return ch;
    }

    /**
     * execute attribute challenge
     * @return result as string
     */
    private String rollAttr() {
        //intro
        String ch = "" "" + attrib + ((mod != 0) ? ((mod > 0) ? ""+"" + mod : mod) : """") + "":\t"";
        //roll
        int f = Challenge.dice(20);
        ch += ""rolled: "" + f;
        //calculate
        if (f == 1) {
            //good roll
            ch += ""automatic success"";
        } else if (f == 20) {
            //bad roll
            ch += ""automatic fail"";
        } else {
            int over = attrValue - (f + mod);
            ch += (over < 0) ? ""  failed:  missing "" + Math.abs(over) + "" points"" : ""  success:  left over "" + over + "" points"";
        }
        return ch;
    }

    /**
     * represents this challenge
     */
    public String toString() {
        String ret = """";
        ret += t.toString() + ""\n"";
        ret += ""att: "" + attrib1 + "" "" + attrib2 + "" "" + attrib3 + ""\n"";
        ret += ""mod: "" + mod + ""\n"";
        ret += ""to: "" + to;
        return ret;
    }

    /**
     * roll a dice with variable sides
     * @param sides the sides this dice should have
     * @return a random number n between 1<=n<=sides
     */
    public static int dice(int sides) {
        int ret = -1;
        ret = (int) Math.rint((Math.random() * sides)) % sides + 1;
        return ret;
    }

    /**
     * return the receiver of the results
     * @return the receiver
     */
    public String getTo() {
        return to;
    }

    /**
     * return the silent mode
     * @return the silent value
     */
    public boolean isSilent() {
        return silent;
    }
}
","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {","// Challenge_1Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#dice(int)} method.
*/
class Challenge_1Test {

	/**
	 * Test method for {@link Challenge#dice(int)}.
	 */
	@Test
	void testDice() {
		int sides = 20;
		int ret = -1;
		for (int i = 0; i < 10; i++) {
			ret = Challenge.dice(sides);
			assertTrue(ret >= 1 && ret <= sides);
		}
	}
}

// Challenge_2Test.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#roll()} method.
*/
class Challenge_2Test {
		
	/**
	 * Test method for {@link Challenge#roll()}.
	 */
	@Test
	void testRoll() {
		Hero h = new Hero();
		h.setAttrValue(""MU"", 10);
		h.setAttrValue(""KL"", 10);
		h.setAttrValue(""IN"", 10);
		h.setAttrValue(""CH"", 10);
		h.setAttrValue(""FF"", 10);
		h.setAttrValue(""GE"", 10);
		h.setAttrValue(""KO"", 10);
		h.setAttrValue(""KK"", 10);
		h.setAttrValue(""SO"", 10);
		h.setAttrValue(""LP"", 10);
		h.setAttrValue(""AE"", 10);
		h.setAttrValue(""MR"", 10);
		h.setAttrValue(""LE"", 10);
		h.setAttrValue(""AU"", 10);
		h.setAttrValue(""AS"", 10);
		h.setAttrValue(""BE"", 10);
		h.setAttrValue(""RS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""WS"", 10);
		h.setAttrValue(""GS"", 10);
		h.setAttrValue(""ZT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"", 10);
		h.setAttrValue(""AT"", 10);
		h.setAttrValue(""PA"", 10);
		h.setAttrValue(""FK"", 10);
		h.setAttrValue(""INI"","
cmpl-6typFEf6Jv4ncUEL1FOE7LJcvmnkZ,/EvoSuiteBenchmark/12_dsachat/src/main/java/dsachat/share/hero/Hero_4Test.java,86.87043404579163,length,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 * @author bernshausen
 */
public class Hero implements Serializable {

    /**
     */
    private static final long serialVersionUID = 4235381890809856112L;

    private Vector<Attribute> attributes;

    Vector<Talent> talents;

    Vector<FightValue> fightvalues;

    Vector<Special> specials;

    private String name;

    private int INI;

    private int currINI = 0;

    private int currLEP = 0;

    private int currAUP = 0;

    private int currASP = 0;

    private int currKAP = 0;

    private Weapon selectedWeapon = null;

    //	private Armor leftArm;
    //	private Armor rightArm;
    //	private Armor leftLeg;
    //	private Armor rightLeg;
    //	private Armor back;
    //	private Armor stomach;
    //	private Armor chest;
    //	private Armor head;
    private boolean priest = false;

    private boolean magican = false;

    /**
     * create a new hero from a xml file
     * @param xml the file this hero was stored by helden-software
     */
    public Hero(Document xml) {
        Element root = xml.getRootElement();
        talents = new Vector<Talent>();
        attributes = new Vector<Attribute>();
        fightvalues = new Vector<FightValue>();
        specials = new Vector<Special>();
        iter(root);
        currLEP = getAttrValue(""LEP"");
        currAUP = getAttrValue(""AUP"");
        currASP = getAttrValue(""ASP"");
        currKAP = getAttrValue(""KAP"");
    }

    /**
     * iteration over the document starting at root-element
     * get all necessary data from the file
     */
    @SuppressWarnings(""unchecked"")
    private void iter(Element e) {
        //IDEA armor
        //TODO select if this is a magican or priest
        for (Iterator i = e.elementIterator(); i.hasNext(); ) {
            Element next = (Element) i.next();
            if (next.getName().equals(""held"")) {
                name = next.attributeValue(""name"");
            }
            //set attributes
            if (next.getName().equals(""eigenschaft"")) {
                if (next.attributeValue(""name"").equals(""Mut"")) {
                    attributes.addElement(new Attribute(""Mut"", ""MU"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Klugheit"")) {
                    attributes.addElement(new Attribute(""Klugheit"", ""KL"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Intuition"")) {
                    attributes.addElement(new Attribute(""Intuition"", ""IN"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Charisma"")) {
                    attributes.addElement(new Attribute(""Charisma"", ""CH"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Fingerfertigkeit"")) {
                    attributes.addElement(new Attribute(""Fingerfertigkeit"", ""FF"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Gewandtheit"")) {
                    attributes.addElement(new Attribute(""Gewandtheit"", ""GE"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Konstitution"")) {
                    attributes.addElement(new Attribute(""Konstitution"", ""KO"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").endsWith(""perkraft"")) {
                    attributes.addElement(new Attribute(""K�rperkraft"", ""KK"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""Lebensenergie"")) {
                    attributes.addElement(new Attribute(""Lebensenergie"", ""LEP"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value"")) + (getAttrValue(""KO"") * 2 + getAttrValue(""KK"")) / 2));
                }
                if (next.attributeValue(""name"").equals(""Ausdauer"")) {
                    attributes.addElement(new Attribute(""Ausdauer"", ""AUP"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value"")) + (getAttrValue(""MU"") + getAttrValue(""GE"") + getAttrValue(""KO"")) / 2));
                }
                if (next.attributeValue(""name"").equals(""Astralenergie"")) {
                    attributes.addElement(new Attribute(""Astralenergie"", ""ASP"", Integer.parseInt(next.attributeValue(""grossemeditation"")) + Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value"")) + (getAttrValue(""MU"") + getAttrValue(""IN"") + getAttrValue(""CH"")) / 2));
                }
                if (next.attributeValue(""name"").equals(""Karmaenergie"")) {
                    //TODO check KAP
                    attributes.addElement(new Attribute(""Karmaenergie"", ""KAP"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                }
                if (next.attributeValue(""name"").equals(""ini"")) {
                    attributes.addElement(new Attribute(""ini"", ""INI"", Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""))));
                    INI = Integer.parseInt(next.attributeValue(""mod"")) + Integer.parseInt(next.attributeValue(""value""));
                }
            }
            if (next.getName().equals(""vorteil"")) {
                //TODO DisAdvatages
            }
            //specials
            if (next.getName().equals(""sonderfertigkeit"")) {
                String name = next.attributeValue(""name"");
                name = name.replace(' ', '_');
                try {
                    Special s = (Special) Special.class.getDeclaredField(name.toUpperCase()).get(Special.FINTE);
                    specials.addElement(s);
                } catch (Exception e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
            //set talents
            if (next.getName().equals(""talent"")) {
                String name = next.attributeValue(""name"");
                String chall = next.attributeValue(""probe"");
                int val = Integer.parseInt(next.attributeValue(""value""));
                Talent t = new Talent(name, val, chall);
                talents.addElement(t);
            }
            //spells
            if (next.getName().equals(""zauber"")) {
                String name = next.attributeValue(""name"");
                String chall = next.attributeValue(""probe"");
                int val = Integer.parseInt(next.attributeValue(""value""));
                Spell s = new Spell(name, val, chall);
                talents.addElement(s);
            }
            //fight values
            if (next.getName().equals(""kampfwerte"")) {
                String name = next.attributeValue(""name"");
                FightValue fv = new FightValue(name, 0, 0);
                if (name.matches(""(Raufen)|(Ringen)"")) {
                    //this is mostly without a weapon. but it can make damage with his hand
                    try {
                        Weapon w = (Weapon) Weapon.class.getDeclaredField((""Hand_"" + name).toUpperCase()).get(new Weapon());
                        w.setType(fv);
                        fv.getWeapons().addElement(w);
                    } catch (Exception e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                fightvalues.addElement(fv);
            }
            //set values for fight
            if (next.getName().equals(""attacke"")) {
                searchFV(next.getParent().attributeValue(""name"")).setAttack(Integer.parseInt(next.attributeValue(""value"")));
            }
            if (next.getName().equals(""parade"")) {
                searchFV(next.getParent().attributeValue(""name"")).setDefense(Integer.parseInt(next.attributeValue(""value"")));
            }
            //set the weapons
            if (next.getName().equals(""ausruestungneu"")) {
                if (!next.attributeValue(""name"").equals(""jagtwaffe"")) {
                    String name = next.attributeValue(""waffenname"");
                    //remove ( and ) from names
                    if (name.matches("".*[\\(\\)].*"")) {
                        String[] split = name.split(""[\\(\\)]"");
                        String tmpName = """";
                        for (String s : split) {
                            tmpName += s;
                        }
                        name = tmpName;
                    }
                    //replace dots and spaces with underscore
                    name = name.replace('.', '_');
                    name = name.replace(' ', '_');
                    name = name.replace(""�"", ""ss"");
                    Weapon w;
                    try {
                        //get a static weapon.
                        //the weapon in file doesn't have any parameters
                        w = (Weapon) Weapon.class.getDeclaredField(name.toUpperCase()).get(new Weapon());
                    } catch (Exception e1) {
                        w = new Weapon(name);
                    }
                    FightValue fv = searchFV(next.attributeValue(""talent""));
                    //TODO default fv with base at/pa
                    if (fv != null) {
                        //if null: weapon can' be used without talent
                        w.setType(fv);
                        fv.getWeapons().addElement(w);
                    }
                }
            }
            if (next.elements().size() != 0) {
                iter(next);
            }
        }
    }

    /**
     * search the fight value for a given name
     * @param parentName the name of the fight value
     * @return the object
     */
    private FightValue searchFV(String parentName) {
        for (FightValue fv : fightvalues) {
            if (fv.getName().equals(parentName)) {
                return fv;
            }
        }
        return null;
    }

    public String attack(String special, int mod) {
        //TODO attack
        return null;
    }

    public String defense(String special, int mod) {
        //TODO defense
        return null;
    }

    public String cast(String spell, int mod) {
        //TODO cast
        return null;
    }

    public String use(String talent, int mod) {
        //TODO talents
        return null;
    }

    /**
     * a hero is only described by his name
     */
    public String toString() {
        return name;
    }

    /**
     * return the name of this hero
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * get the initiative
     * @return
     */
    public int getINI() {
        return INI;
    }

    /**
     * get all talents of this hero
     * @return the talents
     */
    public Vector<Talent> getTalents() {
        return talents;
    }

    /**
     * return the value of the attribute described by the shortcut
     * @param shortcut the shortcut of the attribute
     * @return the value
     */
    public int getAttrValue(String shortcut) {
        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.elementAt(i).getShortcut().equals(shortcut)) {
                return attributes.elementAt(i).getValue();
            }
        }
        return -1;
    }

    /**
     * get all attributes of this hero
     * @return the attributes
     */
    public Vector<Attribute> getAttributes() {
        return attributes;
    }

    /**
     * get all fight values of this hero
     * @return the fight values
     */
    public Vector<FightValue> getFightvalues() {
        return fightvalues;
    }

    public Vector<Special> getSpecials() {
        return specials;
    }

    public int getCurrINI() {
        return currINI;
    }

    public int getCurrLEP() {
        return currLEP;
    }

    public int getCurrAUP() {
        return currAUP;
    }

    public int getCurrASP() {
        return currASP;
    }

    public int getCurrKAP() {
        return currKAP;
    }

    public Weapon getSelectedWeapon() {
        return selectedWeapon;
    }

    public void setSelectedWeapon(Weapon selectedWeapon) {
        this.selectedWeapon = selectedWeapon;
    }

    public void setCurrINI(int currINI) {
        this.currINI = currINI;
    }

    public boolean isPriest() {
        return priest;
    }

    public boolean isMagican() {
        return magican;
    }
}
","// Hero_4Test.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.
*/
class Hero_4Test {","// Hero_4Test.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.
*/
class Hero_4Test {

		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""MU"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_MU() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Mut"", ""MU"", 12));
				assertEquals(12, hero.getAttrValue(""MU""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""KL"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_KL() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Klugheit"", ""KL"", 12));
				assertEquals(12, hero.getAttrValue(""KL""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""IN"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_IN() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Intuition"", ""IN"", 12));
				assertEquals(12, hero.getAttrValue(""IN""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""CH"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_CH() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Charisma"", ""CH"", 12));
				assertEquals(12, hero.getAttrValue(""CH""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""FF"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_FF() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Fingerfertigkeit"", ""FF"", 12));
				assertEquals(12, hero.getAttrValue(""FF""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""GE"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_GE() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Gewandtheit"", ""GE"", 12));
				assertEquals(12, hero.getAttrValue(""GE""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""KO"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_KO() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Konstitution"", ""KO"", 12));
				assertEquals(12, hero.getAttrValue(""KO""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""KK"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_KK() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""K�rperkraft"", ""KK"", 12));
				assertEquals(12, hero.getAttrValue(""KK""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""LEP"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_LEP() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Lebensenergie"", ""LEP"", 12));
				assertEquals(12, hero.getAttrValue(""LEP""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""AUP"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_AUP() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Ausdauer"", ""AUP"", 12));
				assertEquals(12, hero.getAttrValue(""AUP""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""ASP"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_ASP() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Astralenergie"", ""ASP"", 12));
				assertEquals(12, hero.getAttrValue(""ASP""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""KAP"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_KAP() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Karmaenergie"", ""KAP"", 12));
				assertEquals(12, hero.getAttrValue(""KAP""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""INI"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_INI() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""ini"", ""INI"", 12));
				assertEquals(12, hero.getAttrValue(""INI""));
		}
		
}

// Hero_4Test.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.
*/
class Hero_4Test {
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""MU"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_MU() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Mut"", ""MU"", 12));
				assertEquals(12, hero.getAttrValue(""MU""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""KL"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_KL() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Klugheit"", ""KL"", 12));
				assertEquals(12, hero.getAttrValue(""KL""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""IN"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_IN() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Intuition"", ""IN"", 12));
				assertEquals(12, hero.getAttrValue(""IN""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""CH"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_CH() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Charisma"", ""CH"", 12));
				assertEquals(12, hero.getAttrValue(""CH""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""FF"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_FF() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Fingerfertigkeit"", ""FF"", 12));
				assertEquals(12, hero.getAttrValue(""FF""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 * <p>
		 * Test method for {@link Hero#getAttrValue(String)}.
		 * </p>
		 * <p>
		 * This test case tests the method with the attribute ""GE"".
		 * </p>
		 */
		@Test
		void testGetAttrValue_GE() {
				Hero hero = new Hero(new Document(new Element(""test"")));
				hero.attributes = new Vector<Attribute>();
				hero.attributes.addElement(new Attribute(""Gewandtheit"", ""GE"", 12));
				assertEquals(12, hero.getAttrValue(""GE""));
		}
		
		/**
		 * Test case for {@link Hero#getAttrValue(String)}
		 *"
