ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6uASDBlkJXD2FpVzalB0oCg4YChtn,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_0Test.java,44.42573642730713,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {","// ApplicationConfiguration_0Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_0Test {

	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_0() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#jTailMainModel()} method.
	*/
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
}

// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {
		
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_0() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	/**
	* Test case for the {@link ApplicationConfiguration#openFileModel()} method.
	*/
	@Test
	void test_openFileModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		"
cmpl-6uATFrQ3Y5zbyQHfTvs7ktusgaxx7,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_10Test.java,43.08306860923767,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {","// ApplicationConfiguration_10Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#quitAction()} method.
*/
class ApplicationConfiguration_10Test {

	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction = applicationConfiguration.quitAction();
		
		// Then
		assertNotNull(quitAction);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called_even_if_the_previous_instance_has_been_garbage_collected() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1 = null;
		System.gc();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called_even_if_the_previous_instance_has_been_garbage_collected_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1 = null;
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called_even_if_the_previous_instance_has_been_garbage_collected_several_times_and_the_method_has_been_called_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1 = null;
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		QuitAction quitAction3 = applicationConfiguration.quitAction();
		QuitAction quitAction4 = applicationConfiguration.quitAction();
		QuitAction quitAction5 = applicationConfiguration.quitAction();
		QuitAction quitAction6 = applicationConfiguration.quitAction();
		QuitAction quitAction7 = applicationConfiguration.quitAction();
		QuitAction quitAction8 = applicationConfiguration.quitAction();
		QuitAction quitAction9 = applicationConfiguration.quitAction();
		QuitAction quitAction10 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
		assertNotSame(quitAction1, quitAction3);
		assertNotSame(quitAction1, quitAction4);
		assertNotSame(quitAction1, quitAction5);
		assertNotSame(quitAction1, quitAction6);
		assertNotSame(quitAction1, quitAction7);
		assertNotSame(quitAction1, quitAction8);
		assertNotSame(quitAction1, quitAction9);
		assertNotSame(quitAction1, quitAction10);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called_even_if_the_previous_instance_has_been_garbage_collected_several_times_and_the_method_has_been_called_several_times_and_the_previous_instances_have_been_garbage_collected() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1 = null;
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		QuitAction quitAction3 = applicationConfiguration.quitAction();
		QuitAction quitAction4 = applicationConfiguration.quitAction();
		QuitAction quitAction5 = applicationConfiguration.quitAction();
		QuitAction quitAction6 = applicationConfiguration.quitAction();
		QuitAction quitAction7 = applicationConfiguration.quitAction();
		QuitAction quitAction8 = applicationConfiguration.quitAction();
		QuitAction quitAction9 = applicationConfiguration.quitAction();
		QuitAction quitAction10 = applicationConfiguration.quitAction();
		quitAction2 = null;
		quitAction3 = null;
		quitAction4 = null;
		quitAction5 = null;
		quitAction6 = null;
		quitAction7 = null;
		quitAction8 = null;
		quitAction9 = null;
		quitAction10 = null;
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		QuitAction quitAction11 = applicationConfiguration.quitAction();
		
		// Then
		assertNotSame(quitAction1, quitAction2);
		assertNotSame(quitAction1, quitAction3);
		assertNotSame(quitAction1, quitAction4);
		assertNotSame(quitAction1, quitAction5);
		assertNotSame(quitAction1, quitAction6);
		assertNotSame(quitAction1, quitAction7);
		assertNotSame(quitAction1, quitAction8);
		assertNotSame(quitAction1, quitAction9);
		assertNotSame(quitAction1, quitAction10);
		assertNotSame(quitAction1, quitAction11);
	}
	
	@Test
	void test_quitAction_should_return_a_new_instance_of_QuitAction_each_time_it_is_called_even_if_the_previous_instance_has_been_garbage_collected_several_times_and_the_method_has_been_called_several_times_and_the_previous_instances_have_been_garbage_collected_several_times() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		QuitAction quitAction1 = applicationConfiguration.quitAction();
		quitAction1 = null;
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		System.gc();
		QuitAction quitAction2 = applicationConfiguration.quitAction();
		QuitAction quitAction3 = applicationConfiguration.quitAction();
		QuitAction quitAction4 = applicationConfiguration.quitAction();
		QuitAction quitAction5 = applicationConfiguration.quitAction();
		QuitAction quitAction6 = applicationConfiguration.quitAction();
		QuitAction quitAction7 = applicationConfiguration.quitAction();
		QuitAction quitAction8 = applicationConfiguration.quitAction();
		QuitAction quitAction9 = applicationConfiguration.quitAction();
		QuitAction quitAction10 = applicationConfiguration.quitAction();
		quitAction2 = null"
cmpl-6uAUIYDOwZnajFKCyvnxAYiWN3SKH,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_11Test.java,37.223339319229126,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {","// ApplicationConfiguration_11Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_11Test {

	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = new JTailMainModel();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertEquals(jTailMainModel, highlightAction.getJTailMainModel());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
		assertNull(highlightAction.getOpenFileDialog());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog_and_a_null_SelectIndexTypeListener() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
		assertNull(highlightAction.getOpenFileDialog());
		assertNull(highlightAction.getSelectIndexTypeListener());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog_and_a_null_SelectIndexTypeListener_and_a_null_IndexFileAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
		assertNull(highlightAction.getOpenFileDialog());
		assertNull(highlightAction.getSelectIndexTypeListener());
		assertNull(highlightAction.getIndexFileAction());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog_and_a_null_SelectIndexTypeListener_and_a_null_IndexFileAction_and_a_null_OpenFileAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
		assertNull(highlightAction.getOpenFileDialog());
		assertNull(highlightAction.getSelectIndexTypeListener());
		assertNull(highlightAction.getIndexFileAction());
		assertNull(highlightAction.getOpenFileAction());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog_and_a_null_SelectIndexTypeListener_and_a_null_IndexFileAction_and_a_null_OpenFileAction_and_a_null_CloseAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction highlightAction = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(highlightAction);
		assertNull(highlightAction.getJTailMainModel());
		assertNull(highlightAction.getJTailMainFrame());
		assertNull(highlightAction.getOpenFileModel());
		assertNull(highlightAction.getOpenFileDialog());
		assertNull(highlightAction.getSelectIndexTypeListener());
		assertNull(highlightAction.getIndexFileAction());
		assertNull(highlightAction.getOpenFileAction());
		assertNull(highlightAction.getCloseAction());
	}
	
	@Test
	void test_highlightAction_should_return_a_new_HighlightAction_instance_with_a_null_JTailMainModel_and_a_null_JTailMainFrame_and_a_null_OpenFileModel_and_a_null_OpenFileDialog_and_a_null_SelectIndexTypeListener_and_a_null_IndexFileAction_and_a_null_OpenFileAction_and_a_null_CloseAction_and_a_null_CloseAllAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction"
cmpl-6uAVLE5kyhTAGRGr8nTgAH8RhLz0Q,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_12Test.java,44.902427434921265,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {","// ApplicationConfiguration_12Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainFrame()} method.
*/
class ApplicationConfiguration_12Test {

	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame);
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_model() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getModel());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_file_menu_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getFileMenuAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_open_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getOpenAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_close_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getCloseAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_close_all_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getCloseAllAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_quit_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getQuitAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_tools_menu_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getToolsMenuAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_highlight_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getHighlightAction());
	}
	
	@Test
	void test_jTailMainFrame_should_return_a_new_JTailMainFrame_instance_with_a_non_null_open_file_dialog() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainFrame jTailMainFrame = applicationConfiguration.jTailMainFrame();
		
		// Then
		assertNotNull(jTailMainFrame.getOpenFileDialog());
	}
	
}

// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {
		
	@Test
	void test_openFileDialog_should_return_a_new_OpenFileDialog_instance() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_OpenFileDialog_instance_with_a_non_null_model() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog.getModel());
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_OpenFileDialog_instance_with_a_non_null_choose_file_action() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog.getChooseFileAction());
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_OpenFileDialog_instance_with_a_non_null_select_index_type_listener() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog.getSelectIndexTypeListener());
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_OpenFileDialog_instance_with_a_non_null_index_file_action() {
		"
cmpl-6uAWPidLLP0Kq6gHta0YlsduvDaQs,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_13Test.java,41.774099826812744,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {","// ApplicationConfiguration_13Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileDialog()} method.
*/
class ApplicationConfiguration_13Test {

	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotNull(openFileDialog);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton_and_the_singleton_is_a_prototype() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton_and_the_singleton_is_a_prototype() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(openFileDialog1, openFileDialog2);
	}
	
	@Test
	void test_openFileDialog_should_return_a_new_instance_of_OpenFileDialog_each_time_it_is_called_even_if_the_method_is_called_from_different_instances_of_ApplicationConfiguration_and_the_instances_are_created_by_the_same_factory_and_the_factory_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton_and_the_singleton_is_a_prototype_and_the_prototype_is_a_singleton_and_the_singleton_is_a_prototype() {
		// Given
		ApplicationConfiguration applicationConfiguration1 = new ApplicationConfiguration();
		ApplicationConfiguration applicationConfiguration2 = new ApplicationConfiguration();
		
		// When
		OpenFileDialog openFileDialog1 = applicationConfiguration1.openFileDialog();
		OpenFileDialog openFileDialog2 = applicationConfiguration2.openFileDialog();
		
		// Then
		assertNotSame(open"
cmpl-6uAXShIW9Uu15vUSfoO40TmCyOSDG,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_1Test.java,37.19226098060608,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {","// ApplicationConfiguration_1Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openFileModel()} method.
*/
class ApplicationConfiguration_1Test {

	@Test
	void test_openFileModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
	
	@Test
	void test_openFileModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileModel openFileModel = applicationConfiguration.openFileModel();
		
		// Then
		assertNotNull(openFileModel);
	}
}

// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#jTailMainModel()} method.
*/
class ApplicationConfiguration_2Test {
		
	@Test
	void test_jTailMainModel_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// Then
		assertNotNull(jTailMainModel);
	}
	
	@Test
	void test_jTailMainModel_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		"
cmpl-6uAYV1QzfhjbJrn3qHZRHWiNKqEnp,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_2Test.java,40.72437238693237,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {","// ApplicationConfiguration_2Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#fileMenuAction()} method.
*/
class ApplicationConfiguration_2Test {

	@Test
	void test_fileMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_fileMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.fileMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {
		
	@Test
	void test_toolsMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org."
cmpl-6uAZYZX2sDzqUJkHfoSxQodrP0YYc,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_3Test.java,42.558290004730225,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {","// ApplicationConfiguration_3Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#toolsMenuAction()} method.
*/
class ApplicationConfiguration_3Test {

	@Test
	void test_toolsMenuAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_toolsMenuAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		MenuAction result = applicationConfiguration.toolsMenuAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#highlightAction()} method.
*/
class ApplicationConfiguration_4Test {
		
	@Test
	void test_highlightAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
	
	@Test
	void test_highlightAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		HighlightAction result = applicationConfiguration.highlightAction();
		
		// Then
		assertNotNull(result);
	}
}

// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory."
cmpl-6uAabpFxV2orHJ1tZq7p5sS4AIkH9,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_4Test.java,43.14861059188843,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {","// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {

	@Test
	void test_chooseFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
}

// ApplicationConfiguration_4Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#chooseFileAction()} method.
*/
class ApplicationConfiguration_4Test {
		
	@Test
	void test_chooseFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);
	}
	
	@Test
	void test_chooseFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		ChooseFileAction chooseFileAction = applicationConfiguration.chooseFileAction();
		
		// Then
		assertNotNull(chooseFileAction);"
cmpl-6uAbed8sKBr5kDwESoSwBR93D38fh,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_5Test.java,38.91057324409485,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {","// ApplicationConfiguration_5Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#selectIndexTypeListener()} method.
*/
class ApplicationConfiguration_5Test {

	@Test
	void test_selectIndexTypeListener_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
	
	@Test
	void test_selectIndexTypeListener_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		SelectIndexTypeListener selectIndexTypeListener = applicationConfiguration.selectIndexTypeListener();
		
		// Then
		assertNotNull(selectIndexTypeListener);
	}
}

// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {
		
	@Test
	void test_indexFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
}

// ApplicationConfiguration_"
cmpl-6uAchYlqCMC3zuA4dHNjXcbLEqfAf,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_6Test.java,41.8789963722229,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {","// ApplicationConfiguration_6Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#indexFileAction()} method.
*/
class ApplicationConfiguration_6Test {

	@Test
	void test_indexFileAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
	
	@Test
	void test_indexFileAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		IndexFileAction indexFileAction = applicationConfiguration.indexFileAction();
		
		// Then
		assertNotNull(indexFileAction);
	}
}

// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {
		
	@Test
	void test_openAction_1() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_2() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_3() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_4() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_5() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_6() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_7() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_8() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_9() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_10() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
}

// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
"
cmpl-6uAdkJ6CpuKOM9JYciCDGbENiHttW,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_7Test.java,36.335395097732544,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {","// ApplicationConfiguration_7Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#openAction()} method.
*/
class ApplicationConfiguration_7Test {

	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction);
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction1 = applicationConfiguration.openAction();
		OpenFileAction openAction2 = applicationConfiguration.openAction();
		
		// Then
		assertNotSame(openAction1, openAction2);
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_jTailMainModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction.getJTailMainModel());
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_openFileModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction.getOpenFileModel());
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_openFileDialog() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction = applicationConfiguration.openAction();
		
		// Then
		assertNotNull(openAction.getOpenFileDialog());
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_jTailMainModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction1 = applicationConfiguration.openAction();
		OpenFileAction openAction2 = applicationConfiguration.openAction();
		
		// Then
		assertNotSame(openAction1.getJTailMainModel(), openAction2.getJTailMainModel());
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_openFileModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction1 = applicationConfiguration.openAction();
		OpenFileAction openAction2 = applicationConfiguration.openAction();
		
		// Then
		assertNotSame(openAction1.getOpenFileModel(), openAction2.getOpenFileModel());
	}
	
	@Test
	void test_openAction_should_return_a_new_OpenFileAction_instance_with_a_non_null_openFileDialog_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		OpenFileAction openAction1 = applicationConfiguration.openAction();
		OpenFileAction openAction2 = applicationConfiguration.openAction();
		
		// Then
		assertNotSame(openAction1.getOpenFileDialog(), openAction2.getOpenFileDialog());
	}
	
}

// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {
		
	@Test
	void test_closeAction_should_return_a_new_CloseAction_instance() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void test_closeAction_should_return_a_new_CloseAction_instance_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void test_closeAction_should_return_a_new_CloseAction_instance_with_a_non_null_jTailMainModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction.getJTailMainModel());
	}
	
	@Test
	void test_closeAction_should_return_a_new_CloseAction_instance_with_a_non_null_jTailMainModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		
		// Then
		assertNotSame(closeAction1.getJTailMainModel(), closeAction2.getJTailMainModel());
	}
	
}

// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
"
cmpl-6uAenK82i9LGKTHmCwpE9poEAxCnI,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_8Test.java,42.00487542152405,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {","// ApplicationConfiguration_8Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAction()} method.
*/
class ApplicationConfiguration_8Test {

	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction = applicationConfiguration.closeAction();
		
		// Then
		assertNotNull(closeAction);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		closeAction1.actionPerformed(null);
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called_and_the_JTailMainModel_is_modified() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		closeAction1.actionPerformed(null);
		jTailMainModel.setFileName(""fileName"");
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called_and_the_JTailMainModel_is_modified_and_the_CloseAction_is_called_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		closeAction1.actionPerformed(null);
		jTailMainModel.setFileName(""fileName"");
		closeAction2.actionPerformed(null);
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called_and_the_JTailMainModel_is_modified_and_the_CloseAction_is_called_again_and_the_JTailMainModel_is_modified_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		closeAction1.actionPerformed(null);
		jTailMainModel.setFileName(""fileName"");
		closeAction2.actionPerformed(null);
		jTailMainModel.setFileName(""fileName2"");
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called_and_the_JTailMainModel_is_modified_and_the_CloseAction_is_called_again_and_the_JTailMainModel_is_modified_again_and_the_CloseAction_is_called_again() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		JTailMainModel jTailMainModel = applicationConfiguration.jTailMainModel();
		
		// When
		CloseAction closeAction1 = applicationConfiguration.closeAction();
		CloseAction closeAction2 = applicationConfiguration.closeAction();
		closeAction1.actionPerformed(null);
		jTailMainModel.setFileName(""fileName"");
		closeAction2.actionPerformed(null);
		jTailMainModel.setFileName(""fileName2"");
		closeAction1.actionPerformed(null);
		
		// Then
		assertNotSame(closeAction1, closeAction2);
	}
	
	@Test
	void closeAction_should_return_a_new_instance_of_CloseAction_each_time_it_is_called_even_if_the_underlying_JTailMainModel_is_the_same_and_the_same_instance_is_used_to_create_the_CloseAction_and_the_CloseAction_is_called_and_the_JTailMainModel_is_modified_and_the_CloseAction_is_called_again_and"
cmpl-6uAfq5ttZf1zbGD4qQoouSmn2AWio,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/configuration/ApplicationConfiguration_9Test.java,39.79443001747131,length,"// ApplicationConfiguration.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;

@Configuration
public class ApplicationConfiguration {

    protected static final ResourceBundle //NON-NLS
    bundle = ResourceBundle.getBundle(""fr.pingtimeout.jtail.gui.language"");

    /**
     * Create an application model.
     *
     * @return a new application model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainModel jTailMainModel() {
        return new JTailMainModel();
    }

    /**
     * Create an ""open file"" model.
     *
     * @return a new ""open file"" model
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileModel openFileModel() {
        return new OpenFileModel();
    }

    /**
     * Create the ""file"" menu action that will be used by menus and buttons.
     *
     * @return a new ""file"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction fileMenuAction() {
        return new MenuAction(bundle.getString(""action.file.label""), bundle.getString(""action.file.mnemonic""));
    }

    /**
     * Create the ""tools"" menu action that will be used by menus and buttons.
     *
     * @return a new ""tools"" menu action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public MenuAction toolsMenuAction() {
        return new MenuAction(bundle.getString(""action.tools.label""), bundle.getString(""action.tools.mnemonic""));
    }

    /**
     * Create the ""choose a file"" action that will be used by menus and buttons.
     *
     * @return a new ""choose a file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public ChooseFileAction chooseFileAction() {
        return new ChooseFileAction(openFileModel());
    }

    /**
     * Create the ""select index type"" action that will be used by menus and buttons.
     *
     * @return a new ""select index type"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public SelectIndexTypeListener selectIndexTypeListener() {
        return new SelectIndexTypeListener(openFileModel());
    }

    /**
     * Create the ""index file"" action that will be used by menus and buttons.
     *
     * @return a new ""index file"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public IndexFileAction indexFileAction() {
        return new IndexFileAction(jTailMainModel(), openFileModel());
    }

    /**
     * Create the ""open"" action that will be used by menus and buttons.
     *
     * @return a new ""open"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileAction openAction() {
        return new OpenFileAction(jTailMainModel(), openFileModel(), openFileDialog());
    }

    /**
     * Create the ""close"" action that will be used by menus and buttons.
     *
     * @return a new ""close"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAction closeAction() {
        return new CloseAction(jTailMainModel());
    }

    /**
     * Create the ""close all"" action that will be used by menus and buttons.
     *
     * @return a new ""close all"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public CloseAllAction closeAllAction() {
        return new CloseAllAction(jTailMainModel());
    }

    /**
     * Create the ""quit"" action that will be used by menus and buttons.
     *
     * @return a new ""quit"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public QuitAction quitAction() {
        return new QuitAction();
    }

    /**
     * Create the ""Highlight"" action that will be used by menus and buttons.
     *
     * @return a new ""Highlight"" action
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public HighlightAction highlightAction() {
        return new HighlightAction(jTailMainModel());
    }

    /**
     * Create the main frame of the application
     *
     * @return the main frame of the application
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public JTailMainFrame jTailMainFrame() {
        return new JTailMainFrame(jTailMainModel(), fileMenuAction(), openAction(), closeAction(), closeAllAction(), quitAction(), toolsMenuAction(), highlightAction());
    }

    /**
     * Create the ""open file"" dialog
     *
     * @return the ""open file"" dialog
     */
    @Bean
    @Scope(value = BeanDefinition.SCOPE_SINGLETON, proxyMode = ScopedProxyMode.NO)
    public OpenFileDialog openFileDialog() {
        return new OpenFileDialog(openFileModel(), chooseFileAction(), selectIndexTypeListener(), indexFileAction());
    }
    // @see http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html
}
","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {","// ApplicationConfiguration_9Test.java
package fr.pingtimeout.jtail.configuration;

import fr.pingtimeout.jtail.gui.action.*;
import fr.pingtimeout.jtail.gui.controller.SelectIndexTypeListener;
import fr.pingtimeout.jtail.gui.model.JTailMainModel;
import fr.pingtimeout.jtail.gui.model.OpenFileModel;
import fr.pingtimeout.jtail.gui.view.JTailMainFrame;
import fr.pingtimeout.jtail.gui.view.OpenFileDialog;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import java.util.ResourceBundle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ApplicationConfiguration}.
* It contains ten unit test cases for the {@link ApplicationConfiguration#closeAllAction()} method.
*/
class ApplicationConfiguration_9Test {

	@Test
	void closeAllAction_should_return_a_new_instance_of_CloseAllAction() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction);
	}
	
	@Test
	void closeAllAction_should_return_a_new_instance_of_CloseAllAction_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotSame(closeAllAction1, closeAllAction2);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_non_null_model() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction.getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_non_null_model_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotSame(closeAllAction1.getModel(), closeAllAction2.getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAllAction.getModel() instanceof JTailMainModel);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAllAction1.getModel() instanceof JTailMainModel);
		assertTrue(closeAllAction2.getModel() instanceof JTailMainModel);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_non_null_model() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction.getModel().getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_non_null_model_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotSame(closeAllAction1.getModel().getModel(), closeAllAction2.getModel().getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAllAction.getModel().getModel() instanceof JTailModel);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAllAction1.getModel().getModel() instanceof JTailModel);
		assertTrue(closeAllAction2.getModel().getModel() instanceof JTailModel);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel_with_a_non_null_model() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotNull(closeAllAction.getModel().getModel().getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel_with_a_non_null_model_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertNotSame(closeAllAction1.getModel().getModel().getModel(), closeAllAction2.getModel().getModel().getModel());
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel_with_a_model_that_is_a_JTailModel() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAllAction.getModel().getModel().getModel() instanceof JTailModel);
	}
	
	@Test
	void closeAllAction_should_return_a_CloseAllAction_with_a_model_that_is_a_JTailMainModel_with_a_model_that_is_a_JTailModel_with_a_model_that_is_a_JTailModel_each_time_it_is_called() {
		// Given
		ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration();
		
		// When
		CloseAllAction closeAllAction1 = applicationConfiguration.closeAllAction();
		CloseAllAction closeAllAction2 = applicationConfiguration.closeAllAction();
		
		// Then
		assertTrue(closeAll"
cmpl-6uAgtcItMI8Y9kpOKRRBl69ZY0K29,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_0Test.java,39.62102007865906,length,"// LineReader.java
/*
 * Copyright (c) 2010 Pierre Laporte.
 *
 * This file is part of JTailPlus.
 *
 * JTailPlus is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JTailPlus is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JTailPlus.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    /**
     * Constante pour la lecture uniquement.
     */
    //NON-NLS
    private static final String READONLY_MODE = ""r"";

    /**
     * L'index des lignes du fichier.
     */
    private final FileIndex index;

    /**
     * Le fichier à lire.
     */
    private final File file;

    /**
     * Flux utilisé pour lire le fichier.
     */
    private final RandomAccessFile randomAccess;

    /**
     * Constructeur d'un LineReader à partir d'un index des lignes du fichier.
     * L'index doit indiquer la position des caractères de début de chaque ligne du fichier.
     *
     * @param file  le fichier à lire
     * @param index l'index à utiliser
     * @throws java.io.FileNotFoundException si le fichier n'existe pas
     */
    public LineReader(File file, FileIndex index) throws FileNotFoundException {
        //NON-NLS
        JTailLogger.//NON-NLS
        debug(//NON-NLS
        ""Creating LineReader for file : {} with {} indexed lines"", file.toString(), index.getIndexSize());
        this.index = index;
        this.file = file;
        this.randomAccess = new RandomAccessFile(file, READONLY_MODE);
    }

    /**
     * Ferme le flux ouvert pour lire le fichier.
     *
     * @throws IOException si une erreur survient
     */
    public void close() throws IOException {
        //NON-NLS
        JTailLogger.//NON-NLS
        debug(//NON-NLS
        ""Closing stream for file : {}"", file.toString());
        this.randomAccess.close();
    }

    /**
     * Renvoie le nombre de lignes indexées.
     *
     * @return le nombre de lignes indexées
     */
    public int getIndexSize() {
        return this.index.getIndexSize();
    }

    /**
     * Lit la ligne dont le numéro est passé en paramètre.
     * Le numéro de la ligne doit être compris entre 0 et le nombre de lignes indexées.
     *
     * @param lineNumber le numéro de la ligne à lire. Doit être compris entre 0 et le nombre de lignes indexées.
     * @return la ligne correspondant au numéro passé en paramètre
     * @throws IOException si une erreur survient pendant la lecture
     */
    public String readLine(int lineNumber) throws IOException {
        this.randomAccess.seek(this.index.getOffsetOfLine(lineNumber));
        if (this.randomAccess.getFilePointer() == this.randomAccess.length()) {
            return """";
        } else {
            return this.randomAccess.readLine();
        }
    }

    /**
     * Lit les lignes comprise entre <code>fromLine</code> et <code>toLine</code> (exclus).
     *
     * @param fromLine Le numéro de la première ligne à lire
     * @param toLine   Le numéro de la dernière ligne à lire (exclus)
     * @return Les lignes du fichier dont le numéro est compris entre les deux paramètres
     * @throws IOException si une erreur survient pendant la lecture
     */
    public List<String> readBlock(int fromLine, int toLine) throws IOException {
        final int nbLines = toLine - fromLine;
        final List<String> result = new ArrayList<String>();
        final long fileLength = this.randomAccess.length();
        this.randomAccess.seek(this.index.getOffsetOfLine(fromLine));
        for (int i = 0; i < nbLines; i++) {
            final String line;
            if (this.randomAccess.getFilePointer() == fileLength) {
                line = """";
                result.add(line);
                break;
            } else {
                line = this.randomAccess.readLine();
                result.add(line);
            }
        }
        return result;
    }
}
","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {","// LineReader_0Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readLine(int)} method.
*/
class LineReader_0Test {

		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is negative.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_0() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
						lineReader.readLine(-1);
				});
				
				// Then
				assertEquals(""Line number must be positive"", exception.getMessage());
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is zero.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_1() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
						lineReader.readLine(0);
				});
				
				// Then
				assertEquals(""Line number must be positive"", exception.getMessage());
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is greater than the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_2() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
						lineReader.readLine(index.getIndexSize() + 1);
				});
				
				// Then
				assertEquals(""Line number must be less than the number of lines in the file"", exception.getMessage());
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file.
		* It expects an {@link IllegalArgumentException} to be thrown.
		*/
		@Test
		void testReadLine_3() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
						lineReader.readLine(index.getIndexSize());
				});
				
				// Then
				assertEquals(""Line number must be less than the number of lines in the file"", exception.getMessage());
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the number of lines in the file minus one.
		* It expects the last line of the file to be returned.
		*/
		@Test
		void testReadLine_4() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final String line = lineReader.readLine(index.getIndexSize() - 1);
				
				// Then
				assertEquals(""Line number 10"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to one.
		* It expects the first line of the file to be returned.
		*/
		@Test
		void testReadLine_5() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final String line = lineReader.readLine(1);
				
				// Then
				assertEquals(""Line number 1"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the middle of the file.
		* It expects the middle line of the file to be returned.
		*/
		@Test
		void testReadLine_6() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final String line = lineReader.readLine(index.getIndexSize() / 2);
				
				// Then
				assertEquals(""Line number 5"", line);
		}
		
		/**
		* Test case for {@link LineReader#readLine(int)} method.
		* It tests the case where the line number is equal to the middle of the file plus one.
		* It expects the middle line of the file to be returned.
		*/
		@Test
		void testReadLine_7() throws IOException {
				// Given
				final File file = new File(""src/test/resources/fr/pingtimeout/jtail/io/LineReader_0Test.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final String line = lineReader.readLine(index.getIndexSize() / 2 + 1);
				
				// Then
				assertEquals(""Line number 6"", line);
		}
		
		/**
		*"
cmpl-6uAhwZgKivQxB5Bohf4uWldIo9Yca,/EvoSuiteBenchmark/64_jtailgui/src/main/java/fr/pingtimeout/jtail/io/LineReader_1Test.java,38.11032176017761,length,"// LineReader.java
/*
 * Copyright (c) 2010 Pierre Laporte.
 *
 * This file is part of JTailPlus.
 *
 * JTailPlus is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JTailPlus is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JTailPlus.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO PLA : commenter.
 *
 * @author Pierre Laporte
 *         Date: 7 avr. 2010
 */
public class LineReader {

    /**
     * Constante pour la lecture uniquement.
     */
    //NON-NLS
    private static final String READONLY_MODE = ""r"";

    /**
     * L'index des lignes du fichier.
     */
    private final FileIndex index;

    /**
     * Le fichier à lire.
     */
    private final File file;

    /**
     * Flux utilisé pour lire le fichier.
     */
    private final RandomAccessFile randomAccess;

    /**
     * Constructeur d'un LineReader à partir d'un index des lignes du fichier.
     * L'index doit indiquer la position des caractères de début de chaque ligne du fichier.
     *
     * @param file  le fichier à lire
     * @param index l'index à utiliser
     * @throws java.io.FileNotFoundException si le fichier n'existe pas
     */
    public LineReader(File file, FileIndex index) throws FileNotFoundException {
        //NON-NLS
        JTailLogger.//NON-NLS
        debug(//NON-NLS
        ""Creating LineReader for file : {} with {} indexed lines"", file.toString(), index.getIndexSize());
        this.index = index;
        this.file = file;
        this.randomAccess = new RandomAccessFile(file, READONLY_MODE);
    }

    /**
     * Ferme le flux ouvert pour lire le fichier.
     *
     * @throws IOException si une erreur survient
     */
    public void close() throws IOException {
        //NON-NLS
        JTailLogger.//NON-NLS
        debug(//NON-NLS
        ""Closing stream for file : {}"", file.toString());
        this.randomAccess.close();
    }

    /**
     * Renvoie le nombre de lignes indexées.
     *
     * @return le nombre de lignes indexées
     */
    public int getIndexSize() {
        return this.index.getIndexSize();
    }

    /**
     * Lit la ligne dont le numéro est passé en paramètre.
     * Le numéro de la ligne doit être compris entre 0 et le nombre de lignes indexées.
     *
     * @param lineNumber le numéro de la ligne à lire. Doit être compris entre 0 et le nombre de lignes indexées.
     * @return la ligne correspondant au numéro passé en paramètre
     * @throws IOException si une erreur survient pendant la lecture
     */
    public String readLine(int lineNumber) throws IOException {
        this.randomAccess.seek(this.index.getOffsetOfLine(lineNumber));
        if (this.randomAccess.getFilePointer() == this.randomAccess.length()) {
            return """";
        } else {
            return this.randomAccess.readLine();
        }
    }

    /**
     * Lit les lignes comprise entre <code>fromLine</code> et <code>toLine</code> (exclus).
     *
     * @param fromLine Le numéro de la première ligne à lire
     * @param toLine   Le numéro de la dernière ligne à lire (exclus)
     * @return Les lignes du fichier dont le numéro est compris entre les deux paramètres
     * @throws IOException si une erreur survient pendant la lecture
     */
    public List<String> readBlock(int fromLine, int toLine) throws IOException {
        final int nbLines = toLine - fromLine;
        final List<String> result = new ArrayList<String>();
        final long fileLength = this.randomAccess.length();
        this.randomAccess.seek(this.index.getOffsetOfLine(fromLine));
        for (int i = 0; i < nbLines; i++) {
            final String line;
            if (this.randomAccess.getFilePointer() == fileLength) {
                line = """";
                result.add(line);
                break;
            } else {
                line = this.randomAccess.readLine();
                result.add(line);
            }
        }
        return result;
    }
}
","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {","// LineReader_1Test.java
package fr.pingtimeout.jtail.io;

import fr.pingtimeout.jtail.io.index.FileIndex;
import fr.pingtimeout.jtail.util.JTailLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LineReader}.
* It contains ten unit test cases for the {@link LineReader#readBlock(int, int)} method.
*/
class LineReader_1Test {

		/**
		* Test case 1.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with one line.
		* Expected result: the line is read.
		*/
		@Test
		void testReadBlock_1() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_1.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(0, 1);
				
				// Then
				assertEquals(1, result.size());
				assertEquals(""line 1"", result.get(0));
		}
		
		/**
		* Test case 2.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: the two lines are read.
		*/
		@Test
		void testReadBlock_2() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(0, 2);
				
				// Then
				assertEquals(2, result.size());
				assertEquals(""line 1"", result.get(0));
				assertEquals(""line 2"", result.get(1));
		}
		
		/**
		* Test case 3.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: the first line is read.
		*/
		@Test
		void testReadBlock_3() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(0, 1);
				
				// Then
				assertEquals(1, result.size());
				assertEquals(""line 1"", result.get(0));
		}
		
		/**
		* Test case 4.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: the second line is read.
		*/
		@Test
		void testReadBlock_4() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(1, 2);
				
				// Then
				assertEquals(1, result.size());
				assertEquals(""line 2"", result.get(0));
		}
		
		/**
		* Test case 5.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: an empty list is returned.
		*/
		@Test
		void testReadBlock_5() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(2, 3);
				
				// Then
				assertEquals(0, result.size());
		}
		
		/**
		* Test case 6.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: an empty list is returned.
		*/
		@Test
		void testReadBlock_6() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(3, 4);
				
				// Then
				assertEquals(0, result.size());
		}
		
		/**
		* Test case 7.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: an empty list is returned.
		*/
		@Test
		void testReadBlock_7() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(4, 5);
				
				// Then
				assertEquals(0, result.size());
		}
		
		/**
		* Test case 8.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: an empty list is returned.
		*/
		@Test
		void testReadBlock_8() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
				// When
				final List<String> result = lineReader.readBlock(5, 6);
				
				// Then
				assertEquals(0, result.size());
		}
		
		/**
		* Test case 9.
		* Test method: {@link LineReader#readBlock(int, int)}.
		* Test data: a file with two lines.
		* Expected result: an empty list is returned.
		*/
		@Test
		void testReadBlock_9() throws IOException {
				// Given
				final File file = new File(""src/test/resources/testReadBlock_2.txt"");
				final FileIndex index = new FileIndex(file);
				final LineReader lineReader = new LineReader(file, index);
				
		"
