ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u2QC4cAC9YXtmvi4tS8XB6x0idmN,/EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/commandline/Option.java,44.82811379432678,length,"// Option.java
/*
 * Option.java
 *
 * Created on 04.11.2007, 16:58:29
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.beiri22.commandline;

/**
 * Klasse, die eine Kommandozeilenoption darstellt.
 * \author Rico
 */
public class Option {

    ///<Optionsname
    private String mname;

    ///<Beschreibung der Option fuer eine Debugausgabe.
    private String mbeschriebung;

    ///<Trennzeichen zwischen Option und uebergebenem Wert.
    private String mdelim;

    ///<Gibt an, ob ein Wert zu dieser Option erwartet wird.
    private boolean mhasArg;

    ///<Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde.
    private String mdefaultv;

    ///<Uebergebener Wert, der nach Durchlauf des Checks abgerufen werden kann.
    private String mvalue;

    ///<Gibt an, ob diese Option bereits gesetzt ist.
    private boolean misSet;

    /**
     * erstellt eine neue Option.
     * \param name Optionsname
     * \param beschreibung Optionsbeschreibung
     * \param hasArg erwartet die Option einen Wert?
     * \param delim Trennzeichen zwischen Option und uebergebenem Wert
     * \param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde
     */
    public Option(String name, String beschreibung, boolean hasArg, String delim, String defaultv) {
        this.mname = name;
        this.mbeschriebung = beschreibung;
        this.mdelim = delim;
        this.mhasArg = hasArg;
        this.mdefaultv = defaultv;
        misSet = false;
    }

    /**
     * erstellt eine neue Option, die keine Parameter erwartet.
     * \param name Optionsname
     * \param beschreibung Optionsbeschreibung
     */
    public Option(String name, String beschreibung) {
        this(name, beschreibung, false, """", """");
    }

    /**
     * erstellt eine neue Option, die keine Parameter erwartet und keine Beschreibung
     * enthaelt.
     * \param name Optionsname
     */
    public Option(String name) {
        this(name, """", false, """", """");
    }

    /**
     * erstellt eine neue Option ohne Beschreibung.
     * \param name Optionsname
     * \param hasArg erwartet die Option einen Wert?
     * \param delim Trennzeichen zwischen Option und uebergebenem Wert
     * \param defaultv Defaultwert, der verwendet wird, wenn kein Wert uebergeben wurde
     */
    public Option(String name, boolean hasArg, String delim, String defaultv) {
        this(name, """", hasArg, delim, defaultv);
    }

    /**
     * gibt die Beschreibung zurück.
     * \return Beschreibung der Option
     */
    public String getBeschriebung() {
        return mbeschriebung;
    }

    /**
     * gibt das Trennzeichen zurück.
     * \return Trennezeichen zwischen Optionsname und Wert
     */
    public String getDelim() {
        return mdelim;
    }

    /**
     * gibt zurück, ob die Option einen Wert erwartet.
     * \return braucht Option?
     */
    public boolean isHasArg() {
        return mhasArg;
    }

    /**
     * gibt den Namen zurück.
     * \return Name der Option
     */
    public String getName() {
        return mname;
    }

    /**
     * gibt den Defaultwert zurück.
     * \return Defaultwert der Option
     */
    public String getDefaultv() {
        return mdefaultv;
    }

    /**
     * gibt zurück, ob die Option schon gesetzt ist.
     * \return schon gesetzt?
     */
    public boolean isIsSet() {
        return misSet;
    }

    /**
     * gibt den uebergebenen Wert zurück.
     * \return uebergebener Wert
     * \throws RuntimeException falls die Option nicht gesetzt wurde oder keinen
     * Wert besitzt.
     */
    public String getValue() {
        if (!mhasArg) {
            throw new RuntimeException(""Option has no argument."");
        }
        if (!misSet) {
            throw new RuntimeException(""Option is not set."");
        }
        return mvalue;
    }

    /**
     * prueft, ob der uebergebene String zu dieser Option passt(sie darstellt)
     * \param s zu pruefender String.
     * \return Ergebnis dieser Prüfung
     */
    public boolean is(String s) {
        return s.startsWith((mname.isEmpty() ? """" : ""-"") + mname + (mhasArg ? mdelim : """")) && !misSet;
    }

    /**
     * liest den Wert, falls erwartet, ein und setzt die Option.
     * \param s zu parsender String.
     */
    public void parse(String s) {
        misSet = true;
        if (mhasArg) {
            mvalue = s.substring(mname.length() + (mname.isEmpty() ? 0 : 1) + mdelim.length());
        } else {
            mvalue = mdefaultv;
        }
    }
}
","// OptionTest.java
package de.beiri22.commandline;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Option}.
* It contains ten unit test cases for the {@link Option#is(String)} method.
*/
class OptionTest {","// OptionTest.java
package de.beiri22.commandline;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Option}.
* It contains ten unit test cases for the {@link Option#is(String)} method.
*/
class OptionTest {

		/**
		* Test case for {@link Option#is(String)} with a short option.
		*/
		@Test
		void testIsShortOption() {
				Option option = new Option(""a"", """", true, ""="", """");
				assertTrue(option.is(""-a=test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option.
		*/
		@Test
		void testIsLongOption() {
				Option option = new Option(""abc"", """", true, ""="", """");
				assertTrue(option.is(""--abc=test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a space as delimiter.
		*/
		@Test
		void testIsShortOptionSpaceDelimiter() {
				Option option = new Option(""a"", """", true, "" "", """");
				assertTrue(option.is(""-a test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a space as delimiter.
		*/
		@Test
		void testIsLongOptionSpaceDelimiter() {
				Option option = new Option(""abc"", """", true, "" "", """");
				assertTrue(option.is(""--abc test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a colon as delimiter.
		*/
		@Test
		void testIsShortOptionColonDelimiter() {
				Option option = new Option(""a"", """", true, "":"", """");
				assertTrue(option.is(""-a:test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a colon as delimiter.
		*/
		@Test
		void testIsLongOptionColonDelimiter() {
				Option option = new Option(""abc"", """", true, "":"", """");
				assertTrue(option.is(""--abc:test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and no delimiter.
		*/
		@Test
		void testIsShortOptionNoDelimiter() {
				Option option = new Option(""a"", """", false, """", """");
				assertTrue(option.is(""-a""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and no delimiter.
		*/
		@Test
		void testIsLongOptionNoDelimiter() {
				Option option = new Option(""abc"", """", false, """", """");
				assertTrue(option.is(""--abc""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a space as delimiter, but no value.
		*/
		@Test
		void testIsShortOptionSpaceDelimiterNoValue() {
				Option option = new Option(""a"", """", true, "" "", """");
				assertFalse(option.is(""-a""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a space as delimiter, but no value.
		*/
		@Test
		void testIsLongOptionSpaceDelimiterNoValue() {
				Option option = new Option(""abc"", """", true, "" "", """");
				assertFalse(option.is(""--abc""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a colon as delimiter, but no value.
		*/
		@Test
		void testIsShortOptionColonDelimiterNoValue() {
				Option option = new Option(""a"", """", true, "":"", """");
				assertFalse(option.is(""-a""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a colon as delimiter, but no value.
		*/
		@Test
		void testIsLongOptionColonDelimiterNoValue() {
				Option option = new Option(""abc"", """", true, "":"", """");
				assertFalse(option.is(""--abc""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and no delimiter, but a value.
		*/
		@Test
		void testIsShortOptionNoDelimiterWithValue() {
				Option option = new Option(""a"", """", false, """", """");
				assertFalse(option.is(""-a test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and no delimiter, but a value.
		*/
		@Test
		void testIsLongOptionNoDelimiterWithValue() {
				Option option = new Option(""abc"", """", false, """", """");
				assertFalse(option.is(""--abc test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a space as delimiter, but a value with a colon.
		*/
		@Test
		void testIsShortOptionSpaceDelimiterWithValueColon() {
				Option option = new Option(""a"", """", true, "" "", """");
				assertFalse(option.is(""-a:test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a space as delimiter, but a value with a colon.
		*/
		@Test
		void testIsLongOptionSpaceDelimiterWithValueColon() {
				Option option = new Option(""abc"", """", true, "" "", """");
				assertFalse(option.is(""--abc:test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a colon as delimiter, but a value with a space.
		*/
		@Test
		void testIsShortOptionColonDelimiterWithValueSpace() {
				Option option = new Option(""a"", """", true, "":"", """");
				assertFalse(option.is(""-a test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a colon as delimiter, but a value with a space.
		*/
		@Test
		void testIsLongOptionColonDelimiterWithValueSpace() {
				Option option = new Option(""abc"", """", true, "":"", """");
				assertFalse(option.is(""--abc test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a short option and a space as delimiter, but a value with a space.
		*/
		@Test
		void testIsShortOptionSpaceDelimiterWithValueSpace() {
				Option option = new Option(""a"", """", true, "" "", """");
				assertFalse(option.is(""-a test""));
		}
		
		/**
		* Test case for {@link Option#is(String)} with a long option and a space as delimiter, but a value with a space.
		*/
		"
cmpl-6u2RFLHCbOfV7PHgN0ijAK6aYO5sJ,/EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray_0Test.java,40.08849096298218,length,"// ExtBoolArray.java
/*
 * ExtBoolArray.java
 *
 * Created on 31.10.2007, 14:34:55
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.beiri22.stringincrementor.helper;

/**
 * @author Rico
 */
public final class ExtBoolArray {

    /**
     * Enthaelt die Booleanwerte
     */
    private boolean[] werte;

    /**
     * erstellt ein neues ExtBoolArray mit allen Werten False.
     * @param len Anzahl der Booleanwerte
     */
    public ExtBoolArray(int len) {
        werte = new boolean[len];
    }

    /**
     * setzt den Bereich mit den Indexen a bis b auf True.
     * @param a Startindex
     * @param b Endindex
     */
    public void setTrue(int a, int b) {
        for (int i = a; i <= b; i++) {
            werte[i] = true;
        }
    }

    /**
     * prueft, ob der Bereich mit den Indexen a bis b ausschließlich False-Werte
     * enthaelt.
     * @param a Startindex
     * @param b Endindex
     * @return True - wenn alles False-Werte sind.
     */
    public boolean isFalse(int a, int b) {
        for (int i = a; i <= b; i++) {
            if (werte[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Zahl die uebriggebliebenen False-Werte.
     * @return Anzahl der False-Werte.
     */
    public int left() {
        int result = 0;
        for (int i = 0; i < werte.length; i++) {
            if (!werte[i]) {
                result++;
            }
        }
        return result;
    }
}
","// ExtBoolArray_0Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_0Test {","// ExtBoolArray_0Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_0Test {

	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns true if the array contains only false values.
	 */
	@Test
	void testIsFalse_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		assertTrue(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_1() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_2() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_3() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_4() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_5() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_6() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_7() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_8() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
	/**
	 * Test case for {@link ExtBoolArray#isFalse(int, int)}
	 * <p>
	 * Test if the method returns false if the array contains only true values.
	 */
	@Test
	void testIsFalse_9() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertFalse(extBoolArray.isFalse(0, 4));
	}
	
}

// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {
		
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_0() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		assertEquals(5, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_1() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_2() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_3() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_4() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBoolArray#left()}
	 * <p>
	 * Test if the method returns the correct number of false values.
	 */
	@Test
	void testLeft_5() {
		ExtBoolArray extBoolArray = new ExtBoolArray(5);
		extBoolArray.setTrue(0, 4);
		assertEquals(0, extBoolArray.left());
	}
	
	/**
	 * Test case for {@link ExtBool"
cmpl-6u2SIBIJn6jWJxSFyWhKcH8Cqu4lO,/EvoSuiteBenchmark/39_diffi/src/main/java/de/beiri22/stringincrementor/helper/ExtBoolArray_1Test.java,55.105548620224,length,"// ExtBoolArray.java
/*
 * ExtBoolArray.java
 *
 * Created on 31.10.2007, 14:34:55
 *
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.beiri22.stringincrementor.helper;

/**
 * @author Rico
 */
public final class ExtBoolArray {

    /**
     * Enthaelt die Booleanwerte
     */
    private boolean[] werte;

    /**
     * erstellt ein neues ExtBoolArray mit allen Werten False.
     * @param len Anzahl der Booleanwerte
     */
    public ExtBoolArray(int len) {
        werte = new boolean[len];
    }

    /**
     * setzt den Bereich mit den Indexen a bis b auf True.
     * @param a Startindex
     * @param b Endindex
     */
    public void setTrue(int a, int b) {
        for (int i = a; i <= b; i++) {
            werte[i] = true;
        }
    }

    /**
     * prueft, ob der Bereich mit den Indexen a bis b ausschließlich False-Werte
     * enthaelt.
     * @param a Startindex
     * @param b Endindex
     * @return True - wenn alles False-Werte sind.
     */
    public boolean isFalse(int a, int b) {
        for (int i = a; i <= b; i++) {
            if (werte[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Zahl die uebriggebliebenen False-Werte.
     * @return Anzahl der False-Werte.
     */
    public int left() {
        int result = 0;
        for (int i = 0; i < werte.length; i++) {
            if (!werte[i]) {
                result++;
            }
        }
        return result;
    }
}
","// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {","// ExtBoolArray_1Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#left()} method.
*/
class ExtBoolArray_1Test {

	/**
	* Test case for {@link ExtBoolArray#left()} method.
	* Test if the method returns the correct number of false values.
	*/
	@Test
	void testLeft() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertEquals(0, array.left());
		array.setTrue(0, 8);
		assertEquals(1, array.left());
		array.setTrue(0, 7);
		assertEquals(2, array.left());
		array.setTrue(0, 6);
		assertEquals(3, array.left());
		array.setTrue(0, 5);
		assertEquals(4, array.left());
		array.setTrue(0, 4);
		assertEquals(5, array.left());
		array.setTrue(0, 3);
		assertEquals(6, array.left());
		array.setTrue(0, 2);
		assertEquals(7, array.left());
		array.setTrue(0, 1);
		assertEquals(8, array.left());
		array.setTrue(0, 0);
		assertEquals(9, array.left());
	}
}

// ExtBoolArray_2Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#isFalse(int, int)} method.
*/
class ExtBoolArray_2Test {
		
	/**
	* Test case for {@link ExtBoolArray#isFalse(int, int)} method.
	* Test if the method returns the correct boolean value.
	*/
	@Test
	void testIsFalse() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertFalse(array.isFalse(0, 9));
		array.setTrue(0, 8);
		assertFalse(array.isFalse(0, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 7);
		assertFalse(array.isFalse(0, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 6);
		assertFalse(array.isFalse(0, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 5);
		assertFalse(array.isFalse(0, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 4);
		assertFalse(array.isFalse(0, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 3);
		assertFalse(array.isFalse(0, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 2);
		assertFalse(array.isFalse(0, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 1);
		assertFalse(array.isFalse(0, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 0);
		assertFalse(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
	}
}

// ExtBoolArray_3Test.java
package de.beiri22.stringincrementor.helper;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExtBoolArray}.
* It contains ten unit test cases for the {@link ExtBoolArray#setTrue(int, int)} method.
*/
class ExtBoolArray_3Test {
		
	/**
	* Test case for {@link ExtBoolArray#setTrue(int, int)} method.
	* Test if the method sets the correct boolean values.
	*/
	@Test
	void testSetTrue() {
		ExtBoolArray array = new ExtBoolArray(10);
		array.setTrue(0, 9);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertTrue(array.isFalse(9, 9));
		array.setTrue(0, 8);
		assertTrue(array.isFalse(0, 0));
		assertTrue(array.isFalse(1, 1));
		assertTrue(array.isFalse(2, 2));
		assertTrue(array.isFalse(3, 3));
		assertTrue(array.isFalse(4, 4));
		assertTrue(array.isFalse(5, 5));
		assertTrue(array.isFalse(6, 6));
		assertTrue(array.isFalse(7, 7));
		assertTrue(array.isFalse(8, 8));
		assertFalse(array.isFalse(9, 9));
		array.setTrue(0, 7);
		assertTrue(array.isFalse("
