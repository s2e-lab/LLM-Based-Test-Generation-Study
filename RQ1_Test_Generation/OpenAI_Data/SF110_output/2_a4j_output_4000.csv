ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6txnmmzIHTkP5VekrkRwf9xjAAQAq,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_0Test.java,88.33384799957275,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#getFullProductFromASIN(String, String, String)} method.
*/
class A4j_0Test {","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#getFullProductFromASIN(String, String, String)} method.
*/
class A4j_0Test {

		/**
		* Test case for the {@link A4j#getFullProductFromASIN(String, String, String)} method.
		*/
		@Test
		void testGetFullProductFromASIN_0() {
				A4j a4j = new A4j();
				FullProduct fullProduct = a4j.getFullProductFromASIN(""B00005JLZ5"", ""all"", ""1"");
				assertEquals(""B00005JLZ5"", fullProduct.getAsin());
				assertEquals(""The Lord of the Rings: The Fellowship of the Ring (Widescreen Edition)"", fullProduct.getProductName());
				assertEquals(""http://ec1.images-amazon.com/images/P/B00005JLZ5.01._PE30_SCMZZZZZZZ_.jpg"", fullProduct.getImageUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/ASIN/B00005JLZ5/kencochrane-20"", fullProduct.getDetailPageUrl());
				assertEquals(""DVD"", fullProduct.getProductGroup());
				assertEquals(""New Line Home Entertainment"", fullProduct.getManufacturer());
				assertEquals(""New Line Home Entertainment"", fullProduct.getLabel());
				assertEquals(""Peter Jackson"", fullProduct.getDirector());
				assertEquals(""Ian McKellen, Elijah Wood, Viggo Mortensen, Sean Astin, Liv Tyler, Cate Blanchett, John Rhys-Davies, Billy Boyd, Dominic Monaghan, Orlando Bloom, Christopher Lee, Hugo Weaving, Sean Bean, Ian Holm, Andy Serkis, Sala Baker, Marton Csokas, Craig Parker, Lawrence Makoare, Sarah McLeod, John Leigh, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson, Harry Sinclair, Jed Brophy, Nathaniel Lees, Stephen Ure, Peter Tait, David Weatherley, Peter McKenzie, Ian Mune, Martyn Sanderson, Alistair Browning, Paul Norell, Craig Hall, Sarah Peirse, John Bach, Norman Forsey, Stephen Ure, Bruce Hopkins, Mark Ferguson"
cmpl-6txpC0UMvfhAlTT7uRCtGXojaQDsz,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_10Test.java,84.94700050354004,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_10Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#WishListSearch(String)} method.
*/
class A4j_10Test {","// A4j_10Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#WishListSearch(String)} method.
*/
class A4j_10Test {

		@Test
		void testWishListSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.WishListSearch
cmpl-6txqZtdchL78B7FEn2TbWCZ15VaNA,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_11Test.java,84.91848492622375,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_11Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ThirdParty(String, String, String, String)} method.
*/
class A4j_11Test {","// A4j_11Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ThirdParty(String, String, String, String)} method.
*/
class A4j_11Test {

		/**
		* Test case for the {@link A4j#ThirdParty(String, String, String, String)} method.
		*/
		@Test
		void testThirdParty_1() {
				A4j a4j = new A4j();
				SellerSearch sellerSearch = a4j.ThirdParty(""A2OFEB6YLE4L1K"", ""lite"", ""1"", ""open"");
				assertNotNull(sellerSearch);
				assertEquals(""A2OFEB6YLE4L1K"", sellerSearch.getSellerId());
				assertEquals(""lite"", sellerSearch.getType());
				assertEquals(""1"", sellerSearch.getPage());
				assertEquals(""open"", sellerSearch.getStatus());
				assertEquals(""1"", sellerSearch.getTotalPages());
				assertEquals(""1"", sellerSearch.getTotalResults());
				assertEquals(""1"", sellerSearch.getResultsPerPage());
				assertEquals(""1"", sellerSearch.getCurrentPage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getAsin());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getProductName());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getCatalog());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getReleaseDate());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getManufacturer());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getImageUrlSmall());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getImageUrlMedium());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getImageUrlLarge());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getListPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getOurPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getUsedPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getCollectiblePrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getRefurbishedPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getUsedAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getUsedAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getCollectibleAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getCollectibleAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getRefurbishedAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getRefurbishedAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyNewPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyNewShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyNewAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyNewAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyUsedPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyUsedShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyUsedAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyUsedAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyCollectiblePrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyCollectibleShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyCollectibleAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyCollectibleAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyRefurbishedPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyRefurbishedShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyRefurbishedAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getThirdPartyRefurbishedAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getSuperSaverShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantId());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantName());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantInfo());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantSku());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantNote());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingGroup());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShipping());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingPrice());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingAvailability());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingAvailabilityType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestriction());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionType());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionReason());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMin());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMax());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrency());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMessage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinMessage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxMessage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyMessage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueMessage());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMinValueValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionMaxValueValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionCurrencyValueValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals(""1"", sellerSearch.getProducts().get(0).getMerchantShippingRestrictionValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue());
				assertEquals"
cmpl-6txrwYbHY7OPLulOjNVM5W3wepUVE,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_12Test.java,89.90105295181274,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_12Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_12Test {","// A4j_12Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_12Test {

		private A4j a4j = new A4j();
		
		@Test
		void testAddtoCart_1() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""1"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""1"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_2() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""2"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""2"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_3() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""3"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""3"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_4() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""4"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""4"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_5() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""5"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""5"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_6() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""6"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""6"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_7() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""7"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""7"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_8() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""8"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""8"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_9() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""9"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""9"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_10() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""10"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""10"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
}

// A4j_13Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#addToExistingCart(String, String, String, String)} method.
*/
class A4j_13Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testaddToExistingCart_1() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""1"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""1"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_2() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""2"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""2"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_3() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""3"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""3"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_4() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""4"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""4"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_5() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""5"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""5"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_6() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""6"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""6"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_7() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""7"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""7"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_8() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""8"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""8"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_9() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""9"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""9"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
		@Test
		void testaddToExistingCart_10() {
				ShoppingCart shoppingCart = a4j.addToExistingCart(""1234567890"", ""1234567890"", ""B00005JKJI"", ""10"");
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getASIN());
				assertEquals(""10"", shoppingCart.getCart().getCartItems().getCartItem().get(0).getQuantity());
		}
		
}

// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testclearCart_1() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_2() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_3() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_4() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_5() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_6() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_7() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_8() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_9() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
		@Test
		void testclearCart_10() {
				ShoppingCart shoppingCart = a4j.clearCart(""1234567890"", ""1234567890"");
				assertEquals(""0"", shoppingCart.getCart().getCartItems().getSubTotal().getAmount());
		}
		
}

// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api"
cmpl-6txtObWGv6sLT8W7mAyU5JnU6oLSa,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_13Test.java,84.58657145500183,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_13Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#addToExistingCart(String, String, String, String)} method.
*/
class A4j_13Test {","// A4j_13Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#addToExistingCart(String, String, String, String)} method.
*/
class A4j_13Test {

		private A4j a4j = new A4j();
		
		@Test
		void testAddToExistingCart_1() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testAddToExistingCart_2() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testAddToExistingCart_3() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testAddToExistingCart_4() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testAddToExistingCart_5() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
		
		@Test
		void testAddToExistingCart_6() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testAddToExistingCart_7() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testAddToExistingCart_8() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testAddToExistingCart_9() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testAddToExistingCart_10() {
				ShoppingCart shoppingCart = a4j.addToExistingCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
}

// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testClearCart_1() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testClearCart_2() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testClearCart_3() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testClearCart_4() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testClearCart_5() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
		
		@Test
		void testClearCart_6() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testClearCart_7() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testClearCart_8() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testClearCart_9() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testClearCart_10() {
				ShoppingCart shoppingCart = a4j.clearCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
}

// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_15Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testModifyCart_1() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testModifyCart_2() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testModifyCart_3() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testModifyCart_4() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testModifyCart_5() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
		
		@Test
		void testModifyCart_6() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testModifyCart_7() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testModifyCart_8() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testModifyCart_9() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testModifyCart_10() {
				ShoppingCart shoppingCart = a4j.modifyCart("""", """", """", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
}

// A4j_16Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_16Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testGetItemsFromCart_1() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testGetItemsFromCart_2() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testGetItemsFromCart_3() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testGetItemsFromCart_4() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testGetItemsFromCart_5() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), ""Sender"");
		}
		
		@Test
		void testGetItemsFromCart_6() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getMessage(), ""We did not find your Cart Id. Please create a new shopping cart."");
		}
		
		@Test
		void testGetItemsFromCart_7() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getCode(), ""AWS.MissingParameters"");
		}
		
		@Test
		void testGetItemsFromCart_8() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getIsValid(), ""False"");
		}
		
		@Test
		void testGetItemsFromCart_9() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getDetail(), ""CartId is missing."");
		}
		
		@Test
		void testGetItemsFromCart_10() {
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCart().getRequest().getErrors().getError().getType(), """
cmpl-6txukrQfkhnHbUcxvlROEsPw57qoT,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_14Test.java,79.73047494888306,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {","// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {

		private A4j a4j = new A4j();
		private Cart cart = new Cart();
		private Product product = new Product();
		private Search search = new Search();
		
		@Test
		void testClearCart_1() {
				ShoppingCart shoppingCart = cart.AddtoCart(""B00004T9VQ"", ""1"");
				assertNotNull(shoppingCart);
				assertNotNull(shoppingCart.getCartId());
				assertNotNull(shoppingCart.getHmac());
				assertNotNull(shoppingCart.getPurchaseUrl());
				assertNotNull(shoppingCart.getSubTotal());
				assertNotNull(shoppingCart.getCartItems());
				assertNotNull(shoppingCart.getCartItems().getCartItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0));
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getAsin());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getAsin());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getAsin());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getAsin());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getAsin());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getAmount());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getCurrencyCode());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull("
cmpl-6txw2mskTkGOiTwhkNQA4dejjZr6F,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_15Test.java,80.61966586112976,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_15Test {","// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_15Test {

		private A4j a4j = new A4j();
		private Cart cart = new Cart();
		private Product product = new Product();
		private Search search = new Search();
		
		@Test
		void testModifyCart_1() {
				ShoppingCart shoppingCart = cart.AddtoCart(""B00005JKJI"", ""1"");
				assertNotNull(shoppingCart);
				assertNotNull(shoppingCart.getCartId());
				assertNotNull(shoppingCart.getHmac());
				assertNotNull(shoppingCart.getRequest());
				assertNotNull(shoppingCart.getCartItems());
				assertNotNull(shoppingCart.getCartItems().getSubTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem());
				assertEquals(1, shoppingCart.getCartItems().getCartItem().size());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getQuantity());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getListPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getPrice().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getItemTotal().getFormattedPrice());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getCartItemId());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getASIN());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getTitle());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getSavedForLaterItem().getProductGroup());
				assertNotNull(shoppingCart.getCartItems().getCartItem().get(0).getSavedForLaterItem().getSavedForLaterItem"
cmpl-6txxLQnjArA2iOD4Xk2a9knJuyWGJ,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_16Test.java,82.84715008735657,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_16Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_16Test {","// A4j_16Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_16Test {

		@Test
		void testGetItemsFromCart_1() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.GetItemsFromCart("""", """");
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getRequest(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getCartItems().size(), 0);
				assertEquals(shoppingCart.getSubTotal(), """");
				assert"
cmpl-6txyf3BZZXmX6i0RAFuRcna3IXgfJ,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_17Test.java,83.14247632026672,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_17Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#RemoveFromCart(String, String, String)} method.
*/
class A4j_17Test {","// A4j_17Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#RemoveFromCart(String, String, String)} method.
*/
class A4j_17Test {

		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_0() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_1() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_2() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_3() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_4() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_5() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_6() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_7() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_8() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#RemoveFromCart(String, String, String)} method.
		*/
		@Test
		void testRemoveFromCart_9() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.RemoveFromCart(""hmac"", ""cartId"", ""itemId"");
				assertEquals(null, result);
		}
		
}

// A4j_18Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_18Test {
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_0() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_1() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_2() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_3() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_4() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_5() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_6() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_7() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_8() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#GetItemsFromCart(String, String)} method.
		*/
		@Test
		void testGetItemsFromCart_9() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.GetItemsFromCart(""hmac"", ""cartId"");
				assertEquals(null, result);
		}
		
}

// A4j_19Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_19Test {
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_0() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_1() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_2() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_3() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_4() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_5() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_6() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_7() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_8() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
		}
		
		/**
		* Test case for the {@link A4j#modifyCart(String, String, String, String)} method.
		*/
		@Test
		void testModifyCart_9() {
				A4j a4jObject = new A4j();
				ShoppingCart result = a4jObject.modifyCart(""hmac"", ""cartId"", ""itemId"", ""quantity"");
				assertEquals(null, result);
	"
cmpl-6ty012Ksk85q7Q2Sty2wYnaik4vtZ,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_1Test.java,83.56611847877502,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_1Test {","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_1Test {

		/**
		* Test case for the {@link A4j#BlendedSearch(String, String)} method.
		*/
		@Test
		void testBlendedSearch() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"");
				assertNotNull(blendedSearch);
				assertNotNull(blendedSearch.getRequest());
				assertNotNull(blendedSearch.getRequest().getIsValid());
				assertTrue(blendedSearch.getRequest().getIsValid());
				assertNotNull(blendedSearch.getRequest().getKeywords());
				assertEquals(""java"", blendedSearch.getRequest().getKeywords());
				assertNotNull(blendedSearch.getRequest().getPage());
				assertEquals(""1"", blendedSearch.getRequest().getPage());
				assertNotNull(blendedSearch.getRequest().getMode());
				assertEquals(""blended"", blendedSearch.getRequest().getMode());
				assertNotNull(blendedSearch.getRequest().getTag());
				assertEquals(""webservices-20"", blendedSearch.getRequest().getTag());
				assertNotNull(blendedSearch.getRequest().getType());
				assertEquals(""lite"", blendedSearch.getRequest().getType());
				assertNotNull(blendedSearch.getRequest().getDevtag());
				assertEquals(""A4J0R2W15KXBZ"", blendedSearch.getRequest().getDevtag());
				assertNotNull(blendedSearch.getRequest().getVersion());
				assertEquals(""1.0"", blendedSearch.getRequest().getVersion());
				assertNotNull(blendedSearch.getTotalResults());
				assertEquals(""1"", blendedSearch.getTotalResults());
				assertNotNull(blendedSearch.getTotalPages());
				assertEquals(""1"", blendedSearch.getTotalPages());
				assertNotNull(blendedSearch.getDetails());
				assertNotNull(blendedSearch.getDetails().getProductName());
				assertEquals(""Java"", blendedSearch.getDetails().getProductName());
				assertNotNull(blendedSearch.getDetails().getCatalog());
				assertEquals(""Books"", blendedSearch.getDetails().getCatalog());
				assertNotNull(blendedSearch.getDetails().getAuthors());
				assertEquals(""James Gosling"", blendedSearch.getDetails().getAuthors());
				assertNotNull(blendedSearch.getDetails().getManufacturer());
				assertEquals(""Prentice Hall"", blendedSearch.getDetails().getManufacturer());
				assertNotNull(blendedSearch.getDetails().getProductGroup());
				assertEquals(""Book"", blendedSearch.getDetails().getProductGroup());
				assertNotNull(blendedSearch.getDetails().getListPrice());
				assertEquals(""$49.99"", blendedSearch.getDetails().getListPrice());
				assertNotNull(blendedSearch.getDetails().getOurPrice());
				assertEquals(""$33.99"", blendedSearch.getDetails().getOurPrice());
				assertNotNull(blendedSearch.getDetails().getUsedPrice());
				assertEquals(""$1.99"", blendedSearch.getDetails().getUsedPrice());
				assertNotNull(blendedSearch.getDetails().getCollectiblePrice());
				assertEquals(""$3.99"", blendedSearch.getDetails().getCollectiblePrice());
				assertNotNull(blendedSearch.getDetails().getRefurbishedPrice());
				assertEquals(""$2.99"", blendedSearch.getDetails().getRefurbishedPrice());
				assertNotNull(blendedSearch.getDetails().getThirdPartyNewPrice());
				assertEquals(""$4.99"", blendedSearch.getDetails().getThirdPartyNewPrice());
				assertNotNull(blendedSearch.getDetails().getImageUrlSmall());
				assertEquals(""http://images.amazon.com/images/P/0130895725.01.THUMBZZZ.jpg"", blendedSearch.getDetails().getImageUrlSmall());
				assertNotNull(blendedSearch.getDetails().getImageUrlMedium());
				assertEquals(""http://images.amazon.com/images/P/0130895725.01.MZZZZZZZ.jpg"", blendedSearch.getDetails().getImageUrlMedium());
				assertNotNull(blendedSearch.getDetails().getImageUrlLarge());
				assertEquals(""http://images.amazon.com/images/P/0130895725.01.LZZZZZZZ.jpg"", blendedSearch.getDetails().getImageUrlLarge());
				assertNotNull(blendedSearch.getDetails().getAddToCartUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/ASIN/0130895725/webservices-20/"", blendedSearch.getDetails().getAddToCartUrl());
				assertNotNull(blendedSearch.getDetails().getSimilarProductsUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/tg/sim-explorer/explore-items/-/0130895725/"", blendedSearch.getDetails().getSimilarProductsUrl());
				assertNotNull(blendedSearch.getDetails().getCustomerReviewsUrl());
				assertEquals(""http://www.amazon.com/review/product/0130895725"", blendedSearch.getDetails().getCustomerReviewsUrl());
				assertNotNull(blendedSearch.getDetails().getEditorialReviewsUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/tg/browse/-/0130895725/"", blendedSearch.getDetails().getEditorialReviewsUrl());
				assertNotNull(blendedSearch.getDetails().getAsin());
				assertEquals(""0130895725"", blendedSearch.getDetails().getAsin());
				assertNotNull(blendedSearch.getDetails().getUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/ASIN/0130895725/webservices-20/"", blendedSearch.getDetails().getUrl());
				assertNotNull(blendedSearch.getDetails().getSalesRank());
				assertEquals(""1"", blendedSearch.getDetails().getSalesRank());
				assertNotNull(blendedSearch.getDetails().getAvailability());
				assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getAvailability());
				assertNotNull(blendedSearch.getDetails().getOffers());
				assertNotNull(blendedSearch.getDetails().getOffers().getTotalOffers());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getTotalOffers());
				assertNotNull(blendedSearch.getDetails().getOffers().getTotalOfferPages());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getTotalOfferPages());
				assertNotNull(blendedSearch.getDetails().getOffers().getMoreOffersUrl());
				assertEquals(""http://www.amazon.com/exec/obidos/tg/stores/offering/list/-/0130895725/all/"", blendedSearch.getDetails().getOffers().getMoreOffersUrl());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getName());
				assertEquals(""Amazon.com"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getName());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getGlancePage());
				assertEquals(""http://www.amazon.com/exec/obidos/tg/stores/seller-info/-/A1PA6795UKMFR9/"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getGlancePage());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getReviews());
				assertEquals(""http://www.amazon.com/review/product/0130895725"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getReviews());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getMerchantId());
				assertEquals(""A1PA6795UKMFR9"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getMerchantId());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getCondition());
				assertEquals(""new"", blendedSearch.getDetails().getOffers().getOffer().getCondition());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getOfferListingId());
				assertEquals(""0"", blendedSearch.getDetails().getOffers().getOffer().getOfferListingId());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getPrice());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getPrice().getAmount());
				assertEquals(""3399"", blendedSearch.getDetails().getOffers().getOffer().getPrice().getAmount());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getPrice().getCurrencyCode());
				assertEquals(""USD"", blendedSearch.getDetails().getOffers().getOffer().getPrice().getCurrencyCode());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getPrice().getFormattedPrice());
				assertEquals(""$33.99"", blendedSearch.getDetails().getOffers().getOffer().getPrice().getFormattedPrice());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getAvailability());
				assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getOffers().getOffer().getAvailability());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getAvailabilityType());
				assertEquals(""now"", blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getAvailabilityType());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getMinimumHours());
				assertEquals(""0"", blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getMinimumHours());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getMaximumHours());
				assertEquals(""0"", blendedSearch.getDetails().getOffers().getOffer().getAvailabilityAttributes().getMaximumHours());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getIsEligibleForSuperSaverShipping());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getIsEligibleForSuperSaverShipping());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getIsEligibleForPrime());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getIsEligibleForPrime());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getIsRedirectOnly());
				assertEquals(""0"", blendedSearch.getDetails().getOffers().getOffer().getIsRedirectOnly());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getIsBuyboxWinner());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getIsBuyboxWinner());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getIsFeaturedMerchant());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getIsFeaturedMerchant());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getSavedPrice());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getAmount());
				assertEquals(""1600"", blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getAmount());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getCurrencyCode());
				assertEquals(""USD"", blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getCurrencyCode());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getFormattedPrice());
				assertEquals(""$16.00"", blendedSearch.getDetails().getOffers().getOffer().getSavedPrice().getFormattedPrice());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getMerchantId());
				assertEquals(""A1PA6795UKMFR9"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getMerchantId());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getName());
				assertEquals(""Amazon.com"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getName());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getGlancePage());
				assertEquals(""http://www.amazon.com/exec/obidos/tg/stores/seller-info/-/A1PA6795UKMFR9/"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getGlancePage());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getReviews());
				assertEquals(""http://www.amazon.com/review/product/0130895725"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getReviews());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getAverageFeedbackRating());
				assertEquals(""5.0"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getAverageFeedbackRating());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getTotalFeedback());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getTotalFeedback());
				assertNotNull(blendedSearch.getDetails().getOffers().getOffer().getMerchant().getTotalFeedbackPages());
				assertEquals(""1"", blendedSearch.getDetails().getOffers().getOffer().getMerchant().getTotalFeedbackPages());
				assertNotNull(blended"
cmpl-6ty1MfZ6qJJ3Lv75yJbVl5juOzuJk,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_2Test.java,86.2297260761261,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_2Test {","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_2Test {

		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is null.
		*/
		@Test
		void testKeywordSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(null, ""books"", ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is empty.
		*/
		@Test
		void testKeywordSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch("""", ""books"", ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is invalid.
		*/
		@Test
		void testKeywordSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""invalid"", ""books"", ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid.
		*/
		@Test
		void testKeywordSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is null.
		*/
		@Test
		void testKeywordSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", null, ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is empty.
		*/
		@Test
		void testKeywordSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", """", ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is invalid.
		*/
		@Test
		void testKeywordSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""invalid"", ""lite"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid.
		*/
		@Test
		void testKeywordSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is null.
		*/
		@Test
		void testKeywordSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", null, ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is empty.
		*/
		@Test
		void testKeywordSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", """", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is invalid.
		*/
		@Test
		void testKeywordSearch_11() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""invalid"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is valid.
		*/
		@Test
		void testKeywordSearch_12() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is valid and the page is null.
		*/
		@Test
		void testKeywordSearch_13() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", null);
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is valid and the page is empty.
		*/
		@Test
		void testKeywordSearch_14() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", """");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is valid and the page is invalid.
		*/
		@Test
		void testKeywordSearch_15() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", ""invalid"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is valid and the product line is valid and the type is valid and the page is valid.
		*/
		@Test
		void testKeywordSearch_16() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		
}

// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_3Test {
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is null.
		*/
		@Test
		void testBlendedSearch_1() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(null, ""lite"");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is empty.
		*/
		@Test
		void testBlendedSearch_2() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch("""", ""lite"");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is invalid.
		*/
		@Test
		void testBlendedSearch_3() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""invalid"", ""lite"");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid.
		*/
		@Test
		void testBlendedSearch_4() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"");
				assertNotNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is null.
		*/
		@Test
		void testBlendedSearch_5() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", null);
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is empty.
		*/
		@Test
		void testBlendedSearch_6() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", """");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is invalid.
		*/
		@Test
		void testBlendedSearch_7() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""invalid"");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is valid.
		*/
		@Test
		void testBlendedSearch_8() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"");
				assertNotNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is valid and the page is null.
		*/
		@Test
		void testBlendedSearch_9() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"", null);
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is valid and the page is empty.
		*/
		@Test
		void testBlendedSearch_10() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"", """");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is valid and the page is invalid.
		*/
		@Test
		void testBlendedSearch_11() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"", ""invalid"");
				assertNull(blendedSearch);
		}
		
		/**
		* Test case for {@link A4j#BlendedSearch(String, String)} method.
		* It tests the case when the search term is valid and the type is valid and the page is valid.
		*/
		@Test
		void testBlendedSearch_12() {
				A4j a4j = new A4j();
				BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"", ""1"");
				assertNotNull(blendedSearch);
		}
		
}

// A4j_"
cmpl-6ty2kD1rJ6qQO8TiNMd5rnEjhdEiQ,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_3Test.java,86.6539261341095,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_3Test {","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_3Test {

		@Test
		void testActorSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ActorSearch(""Tom Hanks"", ""dvd"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""1"");
				assertEquals(productInfo.getTotalPages(), ""1"");
				assertEquals(productInfo.getMode(), ""dvd"");
				assertEquals(productInfo.getTag(), ""webservices-20"");
				assertEquals(productInfo.getType(), ""lite"");
				assertEquals(productInfo.getDevtag(), ""A4J9BJ3T9CMF5A"");
				assertEquals(productInfo.getItem().get(0).getAsin(), ""B00005JLZ1"");
				assertEquals(productInfo.getItem().get(0).getProductName(), ""The Green Mile"");
				assertEquals(productInfo.getItem().get(0).getCatalog(), ""DVD"");
				assertEquals(productInfo.getItem().get(0).getReleaseDate(), ""1999-11-23"");
				assertEquals(productInfo.getItem().get(0).getTheatricalReleaseDate(), ""1999-12-10"");
				assertEquals(productInfo.getItem().get(0).getRating(), ""R"");
				assertEquals(productInfo.getItem().get(0).getRunningTime(), ""189"");
				assertEquals(productInfo.getItem().get(0).getAspectRatio(), ""1.85:1"");
				assertEquals(productInfo.getItem().get(0).getNumberOfDiscs(), ""1"");
				assertEquals(productInfo.getItem().get(0).getFormat(), ""AC-3, Closed-captioned, Color, Dolby, Dubbed, DVD, Subtitled, Widescreen, NTSC"");
				assertEquals(productInfo.getItem().get(0).getUrl(), ""http://www.amazon.com/exec/obidos/ASIN/B00005JLZ1/webservices-20"");
				assertEquals(productInfo.getItem().get(0).getActor().get(0).getName(), ""Tom Hanks"");
				assertEquals(productInfo.getItem().get(0).getActor().get(0).getRole(), ""Paul Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(1).getName(), ""David Morse"");
				assertEquals(productInfo.getItem().get(0).getActor().get(1).getRole(), ""Brutus Howell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(2).getName(), ""Bonnie Hunt"");
				assertEquals(productInfo.getItem().get(0).getActor().get(2).getRole(), ""Jan Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(3).getName(), ""Michael Clarke Duncan"");
				assertEquals(productInfo.getItem().get(0).getActor().get(3).getRole(), ""John Coffey"");
				assertEquals(productInfo.getItem().get(0).getActor().get(4).getName(), ""James Cromwell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(4).getRole(), ""Warden Hal Moores"");
				assertEquals(productInfo.getItem().get(0).getActor().get(5).getName(), ""Michael Jeter"");
				assertEquals(productInfo.getItem().get(0).getActor().get(5).getRole(), ""Eduard Delacroix"");
				assertEquals(productInfo.getItem().get(0).getActor().get(6).getName(), ""Graham Greene"");
				assertEquals(productInfo.getItem().get(0).getActor().get(6).getRole(), ""Arlen Bitterbuck"");
				assertEquals(productInfo.getItem().get(0).getActor().get(7).getName(), ""Doug Hutchison"");
				assertEquals(productInfo.getItem().get(0).getActor().get(7).getRole(), ""Percy Wetmore"");
				assertEquals(productInfo.getItem().get(0).getActor().get(8).getName(), ""Sam Rockwell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(8).getRole(), ""Wild Bill Wharton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(9).getName(), ""Barry Pepper"");
				assertEquals(productInfo.getItem().get(0).getActor().get(9).getRole(), ""Dean Stanton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(10).getName(), ""Jeffrey DeMunn"");
				assertEquals(productInfo.getItem().get(0).getActor().get(10).getRole(), ""Harry Terwilliger"");
				assertEquals(productInfo.getItem().get(0).getActor().get(11).getName(), ""Patricia Clarkson"");
				assertEquals(productInfo.getItem().get(0).getActor().get(11).getRole(), ""Melinda Moores"");
				assertEquals(productInfo.getItem().get(0).getActor().get(12).getName(), ""Harry Dean Stanton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(12).getRole(), ""Toot-Toot"");
				assertEquals(productInfo.getItem().get(0).getActor().get(13).getName(), ""Dabbs Greer"");
				assertEquals(productInfo.getItem().get(0).getActor().get(13).getRole(), ""Old Paul Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(14).getName(), ""Eve Brent"");
				assertEquals(productInfo.getItem().get(0).getActor().get(14).getRole(), ""Elaine Connelly"");
				assertEquals(productInfo.getItem().get(0).getActor().get(15).getName(), ""Bill McKinney"");
				assertEquals(productInfo.getItem().get(0).getActor().get(15).getRole(), ""Heywood"");
				assertEquals(productInfo.getItem().get(0).getActor().get(16).getName(), ""William Sadler"");
				assertEquals(productInfo.getItem().get(0).getActor().get(16).getRole(), ""William Wharton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(17).getName(), ""Jossie Thacker"");
				assertEquals(productInfo.getItem().get(0).getActor().get(17).getRole(), ""Jan Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(18).getName(), ""Brent Briscoe"");
				assertEquals(productInfo.getItem().get(0).getActor().get(18).getRole(), ""Toot-Toot"");
				assertEquals(productInfo.getItem().get(0).getActor().get(19).getName(), ""Dale Dye"");
				assertEquals(productInfo.getItem().get(0).getActor().get(19).getRole(), ""Captain"");
				assertEquals(productInfo.getItem().get(0).getActor().get(20).getName(), ""Frank Darabont"");
				assertEquals(productInfo.getItem().get(0).getActor().get(20).getRole(), ""Guard"");
				assertEquals(productInfo.getItem().get(0).getActor().get(21).getName(), ""Gary Sinise"");
				assertEquals(productInfo.getItem().get(0).getActor().get(21).getRole(), ""Burt Hammersmith"");
				assertEquals(productInfo.getItem().get(0).getActor().get(22).getName(), ""Michael Jeter"");
				assertEquals(productInfo.getItem().get(0).getActor().get(22).getRole(), ""Eduard Delacroix"");
				assertEquals(productInfo.getItem().get(0).getActor().get(23).getName(), ""Graham Greene"");
				assertEquals(productInfo.getItem().get(0).getActor().get(23).getRole(), ""Arlen Bitterbuck"");
				assertEquals(productInfo.getItem().get(0).getActor().get(24).getName(), ""Doug Hutchison"");
				assertEquals(productInfo.getItem().get(0).getActor().get(24).getRole(), ""Percy Wetmore"");
				assertEquals(productInfo.getItem().get(0).getActor().get(25).getName(), ""Sam Rockwell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(25).getRole(), ""Wild Bill Wharton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(26).getName(), ""Barry Pepper"");
				assertEquals(productInfo.getItem().get(0).getActor().get(26).getRole(), ""Dean Stanton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(27).getName(), ""Jeffrey DeMunn"");
				assertEquals(productInfo.getItem().get(0).getActor().get(27).getRole(), ""Harry Terwilliger"");
				assertEquals(productInfo.getItem().get(0).getActor().get(28).getName(), ""Patricia Clarkson"");
				assertEquals(productInfo.getItem().get(0).getActor().get(28).getRole(), ""Melinda Moores"");
				assertEquals(productInfo.getItem().get(0).getActor().get(29).getName(), ""Harry Dean Stanton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(29).getRole(), ""Toot-Toot"");
				assertEquals(productInfo.getItem().get(0).getActor().get(30).getName(), ""Dabbs Greer"");
				assertEquals(productInfo.getItem().get(0).getActor().get(30).getRole(), ""Old Paul Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(31).getName(), ""Eve Brent"");
				assertEquals(productInfo.getItem().get(0).getActor().get(31).getRole(), ""Elaine Connelly"");
				assertEquals(productInfo.getItem().get(0).getActor().get(32).getName(), ""Bill McKinney"");
				assertEquals(productInfo.getItem().get(0).getActor().get(32).getRole(), ""Heywood"");
				assertEquals(productInfo.getItem().get(0).getActor().get(33).getName(), ""William Sadler"");
				assertEquals(productInfo.getItem().get(0).getActor().get(33).getRole(), ""William Wharton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(34).getName(), ""Jossie Thacker"");
				assertEquals(productInfo.getItem().get(0).getActor().get(34).getRole(), ""Jan Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(35).getName(), ""Brent Briscoe"");
				assertEquals(productInfo.getItem().get(0).getActor().get(35).getRole(), ""Toot-Toot"");
				assertEquals(productInfo.getItem().get(0).getActor().get(36).getName(), ""Dale Dye"");
				assertEquals(productInfo.getItem().get(0).getActor().get(36).getRole(), ""Captain"");
				assertEquals(productInfo.getItem().get(0).getActor().get(37).getName(), ""Frank Darabont"");
				assertEquals(productInfo.getItem().get(0).getActor().get(37).getRole(), ""Guard"");
				assertEquals(productInfo.getItem().get(0).getActor().get(38).getName(), ""Gary Sinise"");
				assertEquals(productInfo.getItem().get(0).getActor().get(38).getRole(), ""Burt Hammersmith"");
				assertEquals(productInfo.getItem().get(0).getActor().get(39).getName(), ""Tom Hanks"");
				assertEquals(productInfo.getItem().get(0).getActor().get(39).getRole(), ""Paul Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(40).getName(), ""David Morse"");
				assertEquals(productInfo.getItem().get(0).getActor().get(40).getRole(), ""Brutus Howell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(41).getName(), ""Bonnie Hunt"");
				assertEquals(productInfo.getItem().get(0).getActor().get(41).getRole(), ""Jan Edgecomb"");
				assertEquals(productInfo.getItem().get(0).getActor().get(42).getName(), ""Michael Clarke Duncan"");
				assertEquals(productInfo.getItem().get(0).getActor().get(42).getRole(), ""John Coffey"");
				assertEquals(productInfo.getItem().get(0).getActor().get(43).getName(), ""James Cromwell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(43).getRole(), ""Warden Hal Moores"");
				assertEquals(productInfo.getItem().get(0).getActor().get(44).getName(), ""Michael Jeter"");
				assertEquals(productInfo.getItem().get(0).getActor().get(44).getRole(), ""Eduard Delacroix"");
				assertEquals(productInfo.getItem().get(0).getActor().get(45).getName(), ""Graham Greene"");
				assertEquals(productInfo.getItem().get(0).getActor().get(45).getRole(), ""Arlen Bitterbuck"");
				assertEquals(productInfo.getItem().get(0).getActor().get(46).getName(), ""Doug Hutchison"");
				assertEquals(productInfo.getItem().get(0).getActor().get(46).getRole(), ""Percy Wetmore"");
				assertEquals(productInfo.getItem().get(0).getActor().get(47).getName(), ""Sam Rockwell"");
				assertEquals(productInfo.getItem().get(0).getActor().get(47).getRole(), ""Wild Bill Wharton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(48).getName(), ""Barry Pepper"");
				assertEquals(productInfo.getItem().get(0).getActor().get(48).getRole(), ""Dean Stanton"");
				assertEquals(productInfo.getItem().get(0).getActor().get(49).getName(), ""Jeffrey DeMunn"");
				assertEquals(productInfo."
cmpl-6ty49CYFxWp251T1jFf5SUyMkOKBB,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_4Test.java,93.11339330673218,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_4Test {","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_4Test {

		@Test
		void testArtistSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ArtistSearch(""The Beatles"", ""music"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""1"");
				assertEquals(productInfo.getTotalPages(), ""1"");
				assertEquals(productInfo.getMode(), ""music"");
				assertEquals(productInfo.getTag(), ""webservices-20"");
				assertEquals(productInfo.getType(), ""lite"");
				assertEquals(productInfo.getDevtag(), ""A4J4TEST"");
				assertEquals(productInfo.getItem().get(0).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getProductName(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getCatalog(), ""Music"");
				assertEquals(productInfo.getItem().get(0).getArtist(), ""The Beatles"");
				assertEquals(productInfo.getItem().get(0).getReleaseDate(), ""1993-03-22"");
				assertEquals(productInfo.getItem().get(0).getListPrice().getAmount(), ""13.98"");
				assertEquals(productInfo.getItem().get(0).getListPrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getListPrice().getFormattedPrice(), ""$13.98"");
				assertEquals(productInfo.getItem().get(0).getOurPrice().getAmount(), ""13.98"");
				assertEquals(productInfo.getItem().get(0).getOurPrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getOurPrice().getFormattedPrice(), ""$13.98"");
				assertEquals(productInfo.getItem().get(0).getUsedPrice().getAmount(), ""5.99"");
				assertEquals(productInfo.getItem().get(0).getUsedPrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getUsedPrice().getFormattedPrice(), ""$5.99"");
				assertEquals(productInfo.getItem().get(0).getCollectiblePrice().getAmount(), ""5.99"");
				assertEquals(productInfo.getItem().get(0).getCollectiblePrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getCollectiblePrice().getFormattedPrice(), ""$5.99"");
				assertEquals(productInfo.getItem().get(0).getRefurbishedPrice().getAmount(), ""5.99"");
				assertEquals(productInfo.getItem().get(0).getRefurbishedPrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getRefurbishedPrice().getFormattedPrice(), ""$5.99"");
				assertEquals(productInfo.getItem().get(0).getThirdPartyNewPrice().getAmount(), ""13.98"");
				assertEquals(productInfo.getItem().get(0).getThirdPartyNewPrice().getCurrencyCode(), ""USD"");
				assertEquals(productInfo.getItem().get(0).getThirdPartyNewPrice().getFormattedPrice(), ""$13.98"");
				assertEquals(productInfo.getItem().get(0).getImageUrlSmall(), ""http://ec1.images-amazon.com/images/P/B000002MNZ.01.THUMBZZZ.jpg"");
				assertEquals(productInfo.getItem().get(0).getImageUrlMedium(), ""http://ec1.images-amazon.com/images/P/B000002MNZ.01.MZZZZZZZ.jpg"");
				assertEquals(productInfo.getItem().get(0).getImageUrlLarge(), ""http://ec1.images-amazon.com/images/P/B000002MNZ.01.LZZZZZZZ.jpg"");
				assertEquals(productInfo.getItem().get(0).getCustomerId(), ""A2OFEB6YLE4L1K"");
				assertEquals(productInfo.getItem().get(0).getAvailability(), ""Usually ships in 24 hours"");
				assertEquals(productInfo.getItem().get(0).getAvailabilityAttributes().getAvailabilityType(), ""now"");
				assertEquals(productInfo.getItem().get(0).getAvailabilityAttributes().getMinimumHours(), ""0"");
				assertEquals(productInfo.getItem().get(0).getAvailabilityAttributes().getMaximumHours(), ""0"");
				assertEquals(productInfo.getItem().get(0).getIsEligibleForSuperSaverShipping(), ""1"");
				assertEquals(productInfo.getItem().get(0).getIsEligibleForPrime(), ""1"");
				assertEquals(productInfo.getItem().get(0).getIsRedirectASIN(), ""0"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(0).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(0).getTitle(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(1).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(1).getTitle(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(2).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(2).getTitle(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(3).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(3).getTitle(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(4).getAsin(), ""B000002MNZ"");
				assertEquals(productInfo.getItem().get(0).getSimilarProduct().get(4).getTitle(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(0).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(0).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(1).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(1).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(2).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(2).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(3).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(3).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(4).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(4).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(5).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(5).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(6).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(6).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(7).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(7).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(8).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(8).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(9).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(9).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(10).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(10).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(11).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(11).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(12).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(12).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(13).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(13).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(14).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(14).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(15).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(15).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(16).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(16).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(17).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(17).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(18).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(18).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(19).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(19).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(20).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(20).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(21).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(21).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(22).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(22).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(23).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(23).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(24).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(24).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(25).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(25).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(26).getSource(), ""Product Description"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get(26).getContent(), ""The Beatles 1962-1966 (The Red Album) (Remastered)"");
				assertEquals(productInfo.getItem().get(0).getEditorialReview().get"
cmpl-6ty5eXUhSKzEcSLVTjUgVse5fxKAN,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_5Test.java,90.65631079673767,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_5Test {","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_5Test {

		@Test
		void testAuthorSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.AuthorSearch(""Ken Cochrane"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_6Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#DirectorSearch(String, String, String)} method.
*/
class A4j_6Test {
		
		@Test
		void testDirectorSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Ken Cochrane"", ""dvd"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_7Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ManufactureSearch(String, String, String)} method.
*/
class A4j_7Test {
		
		@Test
		void testManufactureSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Ken Cochrane"", ""electronics"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_8Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#UpcSearch(String, String, String)} method.
*/
class A4j_8Test {
		
		@Test
		void testUpcSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""Ken Cochrane"", ""music"", ""1"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_9Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ListmaniaSearch(String)} method.
*/
class A4j_9Test {
		
		@Test
		void testListmaniaSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""Ken Cochrane"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_10Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#WishListSearch(String)} method.
*/
class A4j_10Test {
		
		@Test
		void testWishListSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.WishListSearch(""Ken Cochrane"");
				assertNotNull(productInfo);
				assertEquals(productInfo.getTotalResults(), ""0"");
				assertEquals(productInfo.getTotalPages(), ""0"");
				assertEquals(productInfo.getDetails().size(), 0);
		}
}

// A4j_11Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ThirdParty(String, String, String, String)} method.
*/
class A4j_11Test {
		
		@Test
		void testThirdParty() {
				A4j a4j = new A4j();
				SellerSearch sellerSearch = a4j.ThirdParty(""Ken Cochrane"", ""heavy"", ""1"", ""open"");
				assertNotNull(sellerSearch);
				assertEquals(sellerSearch.getTotalResults(), ""0"");
				assertEquals(sellerSearch.getTotalPages(), ""0"");
				assertEquals(sellerSearch.getDetails().size(), 0);
		}
}

// A4j_12Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_12Test {
		
		@Test
		void testAddtoCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.AddtoCart(""Ken Cochrane"", ""1"");
				assertNotNull(shoppingCart);
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getPurchaseUrl(), """");
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getDetails().size(), 0);
		}
}

// A4j_13Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#addToExistingCart(String, String, String, String)} method.
*/
class A4j_13Test {
		
		@Test
		void testAddToExistingCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.addToExistingCart(""Ken Cochrane"", ""Ken Cochrane"", ""Ken Cochrane"", ""1"");
				assertNotNull(shoppingCart);
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getPurchaseUrl(), """");
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getDetails().size(), 0);
		}
}

// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {
		
		@Test
		void testClearCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.clearCart(""Ken Cochrane"", ""Ken Cochrane"");
				assertNotNull(shoppingCart);
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getPurchaseUrl(), """");
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getDetails().size(), 0);
		}
}

// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_15Test {
		
		@Test
		void testModifyCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.modifyCart(""Ken Cochrane"", ""Ken Cochrane"", ""Ken Cochrane"", ""1"");
				assertNotNull(shoppingCart);
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getPurchaseUrl(), """");
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getDetails().size(), 0);
		}
}

// A4j_16Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_16Test {
		
		@Test
		void testGetItemsFromCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.GetItemsFromCart(""Ken Cochrane"", ""Ken Cochrane"");
				assertNotNull(shoppingCart);
				assertEquals(shoppingCart.getCartId(), """");
				assertEquals(shoppingCart.getHmac(), """");
				assertEquals(shoppingCart.getPurchaseUrl(), """");
				assertEquals(shoppingCart.getSubTotal(), """");
				assertEquals(shoppingCart.getDetails().size(), 0);
		}
}

// A4j_17Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten"
cmpl-6ty77G4SrYn4mRPMI2XLPD9O4IUgZ,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_6Test.java,89.86940336227417,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_6Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#DirectorSearch(String, String, String)} method.
*/
class A4j_6Test {","// A4j_6Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#DirectorSearch(String, String, String)} method.
*/
class A4j_6Test {

		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""dvd""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""dvd"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""vhs""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""vhs"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""video""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""video"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""dvd""</code></li>
		* <li><code>page</code>: <code>""2""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""dvd"", ""2"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""vhs""</code></li>
		* <li><code>page</code>: <code>""2""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""vhs"", ""2"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""video""</code></li>
		* <li><code>page</code>: <code>""2""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""video"", ""2"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""dvd""</code></li>
		* <li><code>page</code>: <code>""3""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""dvd"", ""3"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""vhs""</code></li>
		* <li><code>page</code>: <code>""3""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""vhs"", ""3"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""video""</code></li>
		* <li><code>page</code>: <code>""3""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""video"", ""3"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#DirectorSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>directorName</code>: <code>""Steven Spielberg""</code></li>
		* <li><code>mode</code>: <code>""dvd""</code></li>
		* <li><code>page</code>: <code>""4""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testDirectorSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.DirectorSearch(""Steven Spielberg"", ""dvd"", ""4"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
}

// A4j_7Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ManufactureSearch(String, String, String)} method.
*/
class A4j_7Test {
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""electronics""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""electronics"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""kitchen""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""kitchen"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""videogames""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""videogames"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""software""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""software"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""photo""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""photo"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the method for the following values of the parameters:
		* <ul>
		* <li><code>manufactureName</code>: <code>""Sony""</code></li>
		* <li><code>mode</code>: <code>""pc-hardware""</code></li>
		* <li><code>page</code>: <code>""1""</code></li>
		* </ul>
		* The expected result is <code>true</code>.
		*/
		@Test
		void testManufactureSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Sony"", ""pc-hardware"", ""1"");
				assertTrue(productInfo.getTotalResults() > 0);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String,"
cmpl-6ty8Zg8qjPT60pjnJi3IdFJ0vsm5S,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_7Test.java,104.82511138916016,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_7Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ManufactureSearch(String, String, String)} method.
*/
class A4j_7Test {","// A4j_7Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ManufactureSearch(String, String, String)} method.
*/
class A4j_7Test {

		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is <code>null</code>.
		*/
		@Test
		void testManufactureSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(null, ""electronics"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is empty.
		*/
		@Test
		void testManufactureSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch("""", ""electronics"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is invalid.
		*/
		@Test
		void testManufactureSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""invalid"", ""electronics"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ManufactureSearch(String, String, String)} method.
		* It tests the case when the <code>manufactureName</code> is valid.
		*/
		@Test
		void testManufactureSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ManufactureSearch(""Apple"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
}

// A4j_8Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#UpcSearch(String, String, String)} method.
*/
class A4j_8Test {
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is <code>null</code>.
		*/
		@Test
		void testUpcSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(null, ""music"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is empty.
		*/
		@Test
		void testUpcSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch("""", ""music"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is invalid.
		*/
		@Test
		void testUpcSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""invalid"", ""music"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the case when the <code>upc</code> is valid.
		*/
		@Test
		void testUpcSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074644898625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
}

// A4j_9Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ListmaniaSearch(String)} method.
*/
class A4j_9Test {
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is <code>null</code>.
		*/
		@Test
		void testListmaniaSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(null);
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is empty.
		*/
		@Test
		void testListmaniaSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch("""");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is invalid.
		*/
		@Test
		void testListmaniaSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""invalid"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is valid.
		*/
		@Test
		void testListmaniaSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""B0009XHJY2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is valid.
		*/
		@Test
		void testListmaniaSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""B0009XHJY2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is valid.
		*/
		@Test
		void testListmaniaSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""B0009XHJY2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the case when the <code>listId</code> is valid.
		*/
		@Test
		void testListmaniaSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""B"
cmpl-6tyAGXXZfHWpQaE8siJ8e5NSnmaJr,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_8Test.java,95.70995354652405,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_8Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#UpcSearch(String, String, String)} method.
*/
class A4j_8Test {","// A4j_8Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#UpcSearch(String, String, String)} method.
*/
class A4j_8Test {

		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""3"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""4"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""5"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""6"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""7"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""8"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""9"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#UpcSearch(String, String, String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>upc: ""074645011524""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""10""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.UpcSearch(""074645011524"", ""music"", ""10"");
				assertNotNull(productInfo);
		}
		
}

// A4j_9Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ListmaniaSearch(String)} method.
*/
class A4j_9Test {
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(""LSTMNM1ZQQQQQ"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#ListmaniaSearch(String)} method.
		* It tests the method for the following parameters:
		* <ul>
		* <li>listId: ""LSTMNM1ZQQQQQ""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testListmaniaSearch_9() {
				A4j a4j"
cmpl-6tyBnOnbmoQcatJ4fA70Q8YbjVwBf,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/A4j_9Test.java,88.43897485733032,length,"// A4j.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page) {
        Product product = new Product();
        return product.getProduct(asin, offer, page);
    }

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type) {
        Search search = new Search();
        return search.Blended(searchTerm, type);
    }

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page) {
        Search search = new Search();
        return search.Keyword(searchTerm, productLine, type, page);
    }

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        Search search = new Search();
        return search.ActorSearch(actorName, mode, page);
    }

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        Search search = new Search();
        return search.ArtistSearch(artistName, mode, page);
    }

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        Search search = new Search();
        return search.AuthorSearch(authorName, page);
    }

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        Search search = new Search();
        return search.DirectorSearch(directorName, mode, page);
    }

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        Search search = new Search();
        return search.ManufactureSearch(manufactureName, mode, page);
    }

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        Search search = new Search();
        return search.UpcSearch(upc, mode, page);
    }

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId) {
        Search search = new Search();
        return search.ListmaniaSearch(listId);
    }

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId) {
        Search search = new Search();
        return search.WishListSearch(wishListId);
    }

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        Search search = new Search();
        return search.ThirdParty(sellerId, type, page, status);
    }

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity) {
        Cart cart = new Cart();
        return cart.AddtoCart(asin, quantity);
    }

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity) {
        Cart cart = new Cart();
        return cart.addToExistingCart(cartId, hmac, asin, quantity);
    }

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.clearCart(hmac, cartId);
    }

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity) {
        Cart cart = new Cart();
        return cart.modifyCart(hmac, cartId, itemId, quantity);
    }

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId) {
        Cart cart = new Cart();
        return cart.GetItemsFromCart(hmac, cartId);
    }

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId) {
        Cart cart = new Cart();
        return cart.RemoveFromCart(hmac, cartId, itemId);
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// A4j_9Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ListmaniaSearch(String)} method.
*/
class A4j_9Test {","// A4j_9Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ListmaniaSearch(String)} method.
*/
class A4j_9Test {

		/**
		* Test case for {@link A4j#ListmaniaSearch(String)}.
		* It tests the method for the following values of parameter <code>listId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testListmaniaSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.ListmaniaSearch(null);
				assertNull(productInfo);
				productInfo = a4j.ListmaniaSearch("""");
				assertNull(productInfo);
				productInfo = a4j.ListmaniaSearch(""12345678901"");
				assertNull(productInfo);
				productInfo = a4j.ListmaniaSearch(""123456789"");
				assertNull(productInfo);
				productInfo = a4j.ListmaniaSearch(""1234567890"");
				assertNull(productInfo);
		}
}

// A4j_10Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#WishListSearch(String)} method.
*/
class A4j_10Test {
		
		/**
		* Test case for {@link A4j#WishListSearch(String)}.
		* It tests the method for the following values of parameter <code>wishListId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testWishListSearch() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.WishListSearch(null);
				assertNull(productInfo);
				productInfo = a4j.WishListSearch("""");
				assertNull(productInfo);
				productInfo = a4j.WishListSearch(""12345678901"");
				assertNull(productInfo);
				productInfo = a4j.WishListSearch(""123456789"");
				assertNull(productInfo);
				productInfo = a4j.WishListSearch(""1234567890"");
				assertNull(productInfo);
		}
}

// A4j_11Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ThirdParty(String, String, String, String)} method.
*/
class A4j_11Test {
		
		/**
		* Test case for {@link A4j#ThirdParty(String, String, String, String)}.
		* It tests the method for the following values of parameter <code>sellerId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testThirdParty() {
				A4j a4j = new A4j();
				SellerSearch sellerSearch = a4j.ThirdParty(null, null, null, null);
				assertNull(sellerSearch);
				sellerSearch = a4j.ThirdParty("""", null, null, null);
				assertNull(sellerSearch);
				sellerSearch = a4j.ThirdParty(""12345678901"", null, null, null);
				assertNull(sellerSearch);
				sellerSearch = a4j.ThirdParty(""123456789"", null, null, null);
				assertNull(sellerSearch);
				sellerSearch = a4j.ThirdParty(""1234567890"", null, null, null);
				assertNull(sellerSearch);
		}
}

// A4j_12Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_12Test {
		
		/**
		* Test case for {@link A4j#AddtoCart(String, String)}.
		* It tests the method for the following values of parameter <code>asin</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testAddtoCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.AddtoCart(null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.AddtoCart("""", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.AddtoCart(""12345678901"", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.AddtoCart(""123456789"", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.AddtoCart(""1234567890"", null);
				assertNull(shoppingCart);
		}
}

// A4j_13Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#addToExistingCart(String, String, String, String)} method.
*/
class A4j_13Test {
		
		/**
		* Test case for {@link A4j#addToExistingCart(String, String, String, String)}.
		* It tests the method for the following values of parameter <code>cartId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testAddToExistingCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.addToExistingCart(null, null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.addToExistingCart("""", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.addToExistingCart(""12345678901"", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.addToExistingCart(""123456789"", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.addToExistingCart(""1234567890"", null, null, null);
				assertNull(shoppingCart);
		}
}

// A4j_14Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#clearCart(String, String)} method.
*/
class A4j_14Test {
		
		/**
		* Test case for {@link A4j#clearCart(String, String)}.
		* It tests the method for the following values of parameter <code>cartId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testClearCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.clearCart(null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.clearCart("""", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.clearCart(""12345678901"", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.clearCart(""123456789"", null);
				assertNull(shoppingCart);
				shoppingCart = a4j.clearCart(""1234567890"", null);
				assertNull(shoppingCart);
		}
}

// A4j_15Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#modifyCart(String, String, String, String)} method.
*/
class A4j_15Test {
		
		/**
		* Test case for {@link A4j#modifyCart(String, String, String, String)}.
		* It tests the method for the following values of parameter <code>cartId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test
		void testModifyCart() {
				A4j a4j = new A4j();
				ShoppingCart shoppingCart = a4j.modifyCart(null, null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.modifyCart("""", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.modifyCart(""12345678901"", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.modifyCart(""123456789"", null, null, null);
				assertNull(shoppingCart);
				shoppingCart = a4j.modifyCart(""1234567890"", null, null, null);
				assertNull(shoppingCart);
		}
}

// A4j_16Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#GetItemsFromCart(String, String)} method.
*/
class A4j_16Test {
		
		/**
		* Test case for {@link A4j#GetItemsFromCart(String, String)}.
		* It tests the method for the following values of parameter <code>cartId</code>:
		* <ul>
		*  <li><code>null</code></li>
		*  <li>empty string</li>
		*  <li>string with length greater than 10</li>
		*  <li>string with length less than 10</li>
		*  <li>string with length equal to 10</li>
		* </ul>
		*/
		@Test"
cmpl-6tyDEW5a8wB2s3nxlVxH9tbMqasxx,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Product.java,22.28295373916626,stop,"// Product.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.*;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import java.util.ArrayList;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 24, 2003
 * Time: 6:21:00 PM
 */
public class Product {

    //  Logger log = Logger.getLogger(this.getClass());
    /**
     * @param asin
     * @param offer
     * @param page
     * @return
     */
    public FullProduct getProduct(String asin, String offer, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        FullProduct fullProduct = new FullProduct();
        ProductDetails productDetails = new ProductDetails();
        ProductDetails accessoryProductDetails = new ProductDetails();
        Accessories accessories = new Accessories();
        ArrayList accessoryArray = new ArrayList();
        ArrayList detailsArray = new ArrayList();
        MiniProduct miniProduct = new MiniProduct();
        Search search = new Search();
        try {
            //       log.debug(""Get product"");
            FileInputStream fileIn = fileUtil.fetchASINFile(asin, ""heavy"", offer, page);
            if (fileIn != null) {
                //          log.debug(""Get product fileIn not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                ProductInfo productInfoBean = (ProductInfo) joxIn.readObject(ProductInfo.class);
                joxIn.close();
                fileIn.close();
                if (productInfoBean != null && productInfoBean.getDetails().length > 0) {
                    //we are only searching for one item so it is always 0 in the array
                    productDetails = productInfoBean.getDetails()[0];
                    fullProduct.setDetails(productDetails);
                    //get accessories
                    //          log.debug(""Get Accessories"");
                    accessories = productDetails.getAccessories();
                    accessoryArray = accessories.getAccessoryArray();
                    if (accessoryArray != null && accessoryArray.size() > 0) {
                        //            log.debug(""Get Accessories not null"");
                        fileIn = fileUtil.fetchAccessories(asin, accessoryArray);
                        if (fileIn != null) {
                            //                log.debug(""Get Accessories - filein not null"");
                            joxIn = new JOXBeanInputStream(fileIn);
                            productInfoBean = (ProductInfo) joxIn.readObject(ProductInfo.class);
                            joxIn.close();
                            fileIn.close();
                            if (productInfoBean != null) {
                                if (productInfoBean.getProductsArrayList().size() > 0) {
                                    detailsArray = productInfoBean.getProductsArrayList();
                                    for (int x = 0; x < detailsArray.size(); x++) {
                                        accessoryProductDetails = (ProductDetails) detailsArray.get(x);
                                        if (accessoryProductDetails != null) {
                                            miniProduct = new MiniProduct();
                                            miniProduct.setAsin(accessoryProductDetails.getAsin());
                                            miniProduct.setImageURL(accessoryProductDetails.getImageUrlSmall());
                                            miniProduct.setManufacturer(accessoryProductDetails.getManufacturer());
                                            miniProduct.setName(accessoryProductDetails.getProductName());
                                            miniProduct.setPrice(accessoryProductDetails.getOurPrice());
                                            fullProduct.addAccessory(miniProduct);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //           log.debug(""get SimilarItems"");
                    productInfoBean = search.SimilaritesSearch(asin, ""1"");
                    if (productInfoBean != null) {
                        //               log.debug(""bean not null"");
                        if (productInfoBean.getProductsArrayList() != null && productInfoBean.getProductsArrayList().size() > 0) {
                            //                       log.debug(""ArrayList size is > 0"");
                            detailsArray = productInfoBean.getProductsArrayList();
                            for (int x = 0; x < detailsArray.size(); x++) {
                                accessoryProductDetails = (ProductDetails) detailsArray.get(x);
                                if (accessoryProductDetails != null) {
                                    miniProduct = new MiniProduct();
                                    miniProduct.setAsin(accessoryProductDetails.getAsin());
                                    miniProduct.setImageURL(accessoryProductDetails.getImageUrlSmall());
                                    miniProduct.setManufacturer(accessoryProductDetails.getManufacturer());
                                    miniProduct.setName(accessoryProductDetails.getProductName());
                                    miniProduct.setPrice(accessoryProductDetails.getOurPrice());
                                    fullProduct.addSimilarItem(miniProduct);
                                }
                            }
                        }
                    }
                }
            } else {
                //           log.debug(""Error no ASIN file from Input"");
                return null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return fullProduct;
    }
}
","// ProductTest.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.*;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Product}.
* It contains ten unit test cases for the {@link Product#getProduct(String, String, String)} method.
*/
class ProductTest {","// ProductTest.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.*;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Product}.
* It contains ten unit test cases for the {@link Product#getProduct(String, String, String)} method.
*/
class ProductTest {

		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is not found.
		*/
		@Test
		void testGetProductNotFound() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNull(fullProduct);
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found.
		*/
		@Test
		void testGetProductFound() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has no accessories.
		*/
		@Test
		void testGetProductFoundNoAccessories() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertEquals(0, fullProduct.getAccessories().size());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has accessories.
		*/
		@Test
		void testGetProductFoundAccessories() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertEquals(0, fullProduct.getAccessories().size());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has no similar items.
		*/
		@Test
		void testGetProductFoundNoSimilarItems() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertEquals(0, fullProduct.getSimilarItems().size());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has similar items.
		*/
		@Test
		void testGetProductFoundSimilarItems() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertEquals(0, fullProduct.getSimilarItems().size());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has no details.
		*/
		@Test
		void testGetProductFoundNoDetails() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertNull(fullProduct.getDetails());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has details.
		*/
		@Test
		void testGetProductFoundDetails() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertNull(fullProduct.getDetails());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has no details.
		*/
		@Test
		void testGetProductFoundNoDetails2() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertNull(fullProduct.getDetails());
		}
		
		/**
		* Test case for the {@link Product#getProduct(String, String, String)} method.
		* It tests the case where the product is found and has details.
		*/
		@Test
		void testGetProductFoundDetails2() {
				Product product = new Product();
				FullProduct fullProduct = product.getProduct(""B00005N5PF"", ""All"", ""1"");
				assertNotNull(fullProduct);
				assertNull(fullProduct.getDetails());
		}
		
}"
cmpl-6tyEHGcgMWnJx5lSwWLqXw7ykB6Py,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_0Test.java,89.64256739616394,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_0Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Blended(String, String)} method.
*/
class Search_0Test {","// Search_0Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Blended(String, String)} method.
*/
class Search_0Test {
/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_0() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""lite"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_1() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""heavy"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_2() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""lite"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_3() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""heavy"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_4() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""lite"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_5() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""heavy"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_6() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""lite"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_7() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""heavy"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_8() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""lite"");
				assertNotNull(blendedSearch);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*/
		@Test
		void testBlended_9() {
				Search search = new Search();
				BlendedSearch blendedSearch = search.Blended(""test"", ""heavy"");
				assertNotNull(blendedSearch);
		}
}

// Search_1Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Keyword(String, String, String, String)} method.
*/
class Search_1Test {
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_0() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_1() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_2() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_3() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_4() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_5() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_6() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_7() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_8() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Keyword(String, String, String, String)} method.
		*/
		@Test
		void testKeyword_9() {
				Search search = new Search();
				ProductInfo productInfo = search.Keyword(""test"", ""test"", ""lite"", ""1"");
				assertNotNull(productInfo);
		}
}

// Search_2Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Generic(String, String, String, String, String, String)} method.
*/
class Search_2Test {
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_0() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_1() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_2() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_3() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_4() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_5() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_6() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_7() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_8() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		*/
		@Test
		void testGeneric_9() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""test"", ""test"", ""test"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
}

// Search_3Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ThirdParty(String, String, String, String)} method.
*/
class Search_3Test {
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*/
		@Test
		void testThirdParty_0() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""test"", ""lite"", ""1"", ""open"");
				assertNotNull(sellerSearch);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*/
		@Test
		void testThirdParty_1() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""test"", ""lite"", ""1"", ""open"");
				assertNotNull(sellerSearch);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*/
		@Test
		void testThirdParty_2() {
				Search search = new Search();
				SellerSearch sellerSearch = search"
cmpl-6tyFizdQcUpMNDUTl8482WOpSuoUo,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_11Test.java,89.64062786102295,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_11Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ThirdParty(String, String, String, String)} method.
*/
class Search_11Test {","// Search_11Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ThirdParty(String, String, String, String)} method.
*/
class Search_11Test {
/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_1() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""1"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_2() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""1"", ""closed"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_3() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""2"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_4() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""2"", ""closed"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_5() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""3"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_6() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""3"", ""closed"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_7() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""4"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_8() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""4"", ""closed"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_9() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""5"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_10() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""5"", ""closed"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testThirdParty_11() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				SellerSearch sellerDetails = new SellerSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(""A1K9C2UWW5NVWG"", ""lite"", ""6"", ""open"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
						} else {
								sellerDetails = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(sellerDetails);
		}
}

// Search_12Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains twelve unit test cases for the {@link Search#Blended(String, String)} method.
*/
class Search_12Test {
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		*
		* @throws Exception
		*/
		@Test
		void testBlended_1() throws Exception {
				FileUtil fileUtil = new FileUtil();
				JOXBeanInputStream joxIn = null;
				BlendedSearch testBean = new BlendedSearch();
				try {
						FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(""harry potter"", ""books"");
						if (fileIn != null) {
								joxIn = new JOXBeanInputStream(fileIn);
								testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
						} else {
								testBean = null;
						}
				} catch (Exception exc) {
						exc.printStackTrace();
				}
				assertNotNull(testBean);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
"
cmpl-6tyHA93U2QbcWxK8ZMcGF8Mybsw5Z,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_1Test.java,99.09852933883667,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_1Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Keyword(String, String, String, String)} method.
*/
class Search_1Test {","// Search_1Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Keyword(String, String, String, String)} method.
*/
class Search_1Test {
/**
		 * Test of Keyword method, of class Search.
		 */
		@Test
		void testKeyword() {
				System.out.println(""Keyword"");
				String searchTerm = """";
				String productLine = """";
				String type = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.Keyword(searchTerm, productLine, type, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_2Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Blended(String, String)} method.
*/
class Search_2Test {
		/**
		 * Test of Blended method, of class Search.
		 */
		@Test
		void testBlended() {
				System.out.println(""Blended"");
				String searchTerm = """";
				String type = """";
				Search instance = new Search();
				BlendedSearch expResult = null;
				BlendedSearch result = instance.Blended(searchTerm, type);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_3Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Generic(String, String, String, String, String, String)} method.
*/
class Search_3Test {
		/**
		 * Test of Generic method, of class Search.
		 */
		@Test
		void testGeneric() {
				System.out.println(""Generic"");
				String searchType = """";
				String searchTerm = """";
				String mode = """";
				String type = """";
				String page = """";
				String offer = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.Generic(searchType, searchTerm, mode, type, page, offer);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_4Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ThirdParty(String, String, String, String)} method.
*/
class Search_4Test {
		/**
		 * Test of ThirdParty method, of class Search.
		 */
		@Test
		void testThirdParty() {
				System.out.println(""ThirdParty"");
				String sellerId = """";
				String type = """";
				String page = """";
				String status = """";
				Search instance = new Search();
				SellerSearch expResult = null;
				SellerSearch result = instance.ThirdParty(sellerId, type, page, status);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_5Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#SimilaritesSearch(String, String)} method.
*/
class Search_5Test {
		/**
		 * Test of SimilaritesSearch method, of class Search.
		 */
		@Test
		void testSimilaritesSearch() {
				System.out.println(""SimilaritesSearch"");
				String asin = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.SimilaritesSearch(asin, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_6Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ActorSearch(String, String, String)} method.
*/
class Search_6Test {
		/**
		 * Test of ActorSearch method, of class Search.
		 */
		@Test
		void testActorSearch() {
				System.out.println(""ActorSearch"");
				String actorName = """";
				String mode = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.ActorSearch(actorName, mode, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_7Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ArtistSearch(String, String, String)} method.
*/
class Search_7Test {
		/**
		 * Test of ArtistSearch method, of class Search.
		 */
		@Test
		void testArtistSearch() {
				System.out.println(""ArtistSearch"");
				String artistName = """";
				String mode = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.ArtistSearch(artistName, mode, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_8Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#AuthorSearch(String, String)} method.
*/
class Search_8Test {
		/**
		 * Test of AuthorSearch method, of class Search.
		 */
		@Test
		void testAuthorSearch() {
				System.out.println(""AuthorSearch"");
				String authorName = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.AuthorSearch(authorName, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_9Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#DirectorSearch(String, String, String)} method.
*/
class Search_9Test {
		/**
		 * Test of DirectorSearch method, of class Search.
		 */
		@Test
		void testDirectorSearch() {
				System.out.println(""DirectorSearch"");
				String directorName = """";
				String mode = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.DirectorSearch(directorName, mode, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_10Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ManufactureSearch(String, String, String)} method.
*/
class Search_10Test {
		/**
		 * Test of ManufactureSearch method, of class Search.
		 */
		@Test
		void testManufactureSearch() {
				System.out.println(""ManufactureSearch"");
				String manufactureName = """";
				String mode = """";
				String page = """";
				Search instance = new Search();
				ProductInfo expResult = null;
				ProductInfo result = instance.ManufactureSearch(manufactureName, mode, page);
				assertEquals(expResult, result);
				// TODO review the generated test code and remove the default call to fail.
				fail(""The test case is a prototype."");
		}
}

// Search_11Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_11Test {
		/**
		 * Test of UpcSearch method, of class Search.
		 */
		@Test
		void testUpcSearch() {
				System.out.println(""UpcSearch"");
				String upc = """
cmpl-6tyIlDsBzCK5UYACfTb1R0pUQIhgf,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_2Test.java,93.1952919960022,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_2Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Generic(String, String, String, String, String, String)} method.
*/
class Search_2Test {","// Search_2Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Generic(String, String, String, String, String, String)} method.
*/
class Search_2Test {
/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""ActorSearch""</li>
		* <li>searchTerm = ""Tom Hanks""</li>
		* <li>mode = ""dvd""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_1() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""ActorSearch"", ""Tom Hanks"", ""dvd"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""ArtistSearch""</li>
		* <li>searchTerm = ""The Beatles""</li>
		* <li>mode = ""music""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_2() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""ArtistSearch"", ""The Beatles"", ""music"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""AuthorSearch""</li>
		* <li>searchTerm = ""J.K. Rowling""</li>
		* <li>mode = ""books""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_3() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""AuthorSearch"", ""J.K. Rowling"", ""books"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""DirectorSearch""</li>
		* <li>searchTerm = ""Steven Spielberg""</li>
		* <li>mode = ""dvd""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_4() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""DirectorSearch"", ""Steven Spielberg"", ""dvd"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""ManufacturerSearch""</li>
		* <li>searchTerm = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_5() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""ManufacturerSearch"", ""Sony"", ""electronics"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""UpcSearch""</li>
		* <li>searchTerm = ""074644858429""</li>
		* <li>mode = ""music""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_6() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""UpcSearch"", ""074644858429"", ""music"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""ListManiaSearch""</li>
		* <li>searchTerm = ""1QQQQQQQQQQQQQQQQQQQ""</li>
		* <li>mode = ""mode""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_7() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""ListManiaSearch"", ""1QQQQQQQQQQQQQQQQQQQ"", ""mode"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""WishlistSearch""</li>
		* <li>searchTerm = ""1QQQQQQQQQQQQQQQQQQQ""</li>
		* <li>mode = ""mode""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_8() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""WishlistSearch"", ""1QQQQQQQQQQQQQQQQQQQ"", ""mode"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""WishlistSearch""</li>
		* <li>searchTerm = ""1QQQQQQQQQQQQQQQQQQQ""</li>
		* <li>mode = ""mode""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_9() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""WishlistSearch"", ""1QQQQQQQQQQQQQQQQQQQ"", ""mode"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}

		/**
		* Test case for the {@link Search#Generic(String, String, String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchType = ""WishlistSearch""</li>
		* <li>searchTerm = ""1QQQQQQQQQQQQQQQQQQQ""</li>
		* <li>mode = ""mode""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>offer = ""all""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testGeneric_10() {
				Search search = new Search();
				ProductInfo productInfo = search.Generic(""WishlistSearch"", ""1QQQQQQQQQQQQQQQQQQQ"", ""mode"", ""lite"", ""1"", ""all"");
				assertNotNull(productInfo);
		}
}

// Search_3Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ThirdParty(String, String, String, String)} method.
*/
class Search_3Test {
		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>sellerId = ""A1K9KZQ9H6XWCY""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>status = ""open""</li>
		* </ul>
		* The expected result is that the method returns a {@link SellerSearch} object.
		*/
		@Test
		void testThirdParty_1() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""A1K9KZQ9H6XWCY"", ""lite"", ""1"", ""open"");
				assertNotNull(sellerSearch);
		}

		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>sellerId = ""A1K9KZQ9H6XWCY""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>status = ""closed""</li>
		* </ul>
		* The expected result is that the method returns a {@link SellerSearch} object.
		*/
		@Test
		void testThirdParty_2() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""A1K9KZQ9H6XWCY"", ""lite"", ""1"", ""closed"");
				assertNotNull(sellerSearch);
		}

		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>sellerId = ""A1K9KZQ9H6XWCY""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>status = ""open""</li>
		* </ul>
		* The expected result is that the method returns a {@link SellerSearch} object.
		*/
		@Test
		void testThirdParty_3() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""A1K9KZQ9H6XWCY"", ""lite"", ""1"", ""open"");
				assertNotNull(sellerSearch);
		}

		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>sellerId = ""A1K9KZQ9H6XWCY""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>status = ""closed""</li>
		* </ul>
		* The expected result is that the method returns a {@link SellerSearch} object.
		*/
		@Test
		void testThirdParty_4() {
				Search search = new Search();
				SellerSearch sellerSearch = search.ThirdParty(""A1K9KZQ9H6XWCY"", ""lite"", ""1"", ""closed"");
				assertNotNull(sellerSearch);
		}

		/**
		* Test case for the {@link Search#ThirdParty(String, String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>sellerId = ""A1K9KZQ9H6XWCY""</li>
		* <li>type = ""lite""</li>
		* <li>page = ""1""</li>
		* <li>status = ""open""</li"
cmpl-6tyKGuLpZ21lk6vcsId97eZv7K1Sc,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_3Test.java,89.29709219932556,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_3Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ActorSearch(String, String, String)} method.
*/
class Search_3Test {","// Search_3Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ActorSearch(String, String, String)} method.
*/
class Search_3Test {

		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""dvd""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_1() {
				String actorName = ""Tom Hanks"";
				String mode = ""dvd"";
				String page = ""1"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""vhs""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_2() {
				String actorName = ""Tom Hanks"";
				String mode = ""vhs"";
				String page = ""1"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""video""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_3() {
				String actorName = ""Tom Hanks"";
				String mode = ""video"";
				String page = ""1"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""dvd""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_4() {
				String actorName = ""Tom Hanks"";
				String mode = ""dvd"";
				String page = ""2"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""vhs""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_5() {
				String actorName = ""Tom Hanks"";
				String mode = ""vhs"";
				String page = ""2"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""video""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_6() {
				String actorName = ""Tom Hanks"";
				String mode = ""video"";
				String page = ""2"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""dvd""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_7() {
				String actorName = ""Tom Hanks"";
				String mode = ""dvd"";
				String page = ""3"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""vhs""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_8() {
				String actorName = ""Tom Hanks"";
				String mode = ""vhs"";
				String page = ""3"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""video""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_9() {
				String actorName = ""Tom Hanks"";
				String mode = ""video"";
				String page = ""3"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ActorSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>actorName: ""Tom Hanks""</li>
		* <li>mode: ""dvd""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testActorSearch_10() {
				String actorName = ""Tom Hanks"";
				String mode = ""dvd"";
				String page = ""4"";
				ProductInfo result = new Search().ActorSearch(actorName, mode, page);
				assertNotNull(result);
		}
		
}

// Search_4Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ArtistSearch(String, String, String)} method.
*/
class Search_4Test {
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_1() {
				String artistName = ""Tom Hanks"";
				String mode = ""music"";
				String page = ""1"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""classical""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_2() {
				String artistName = ""Tom Hanks"";
				String mode = ""classical"";
				String page = ""1"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_3() {
				String artistName = ""Tom Hanks"";
				String mode = ""music"";
				String page = ""2"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""classical""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_4() {
				String artistName = ""Tom Hanks"";
				String mode = ""classical"";
				String page = ""2"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_5() {
				String artistName = ""Tom Hanks"";
				String mode = ""music"";
				String page = ""3"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""classical""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_6() {
				String artistName = ""Tom Hanks"";
				String mode = ""classical"";
				String page = ""3"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""Tom Hanks""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_7() {
				String artistName = ""Tom Hanks"";
				String mode = ""music"";
				String page = ""4"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)}"
cmpl-6tyLiZDOxQeOm3gQLfQvdPpY04Jrs,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_4Test.java,86.03725934028625,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_4Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ArtistSearch(String, String, String)} method.
*/
class Search_4Test {","// Search_4Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ArtistSearch(String, String, String)} method.
*/
class Search_4Test {

		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_1() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""1"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_2() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""2"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_3() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""3"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_4() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""4"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_5() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""5"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_6() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""6"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_7() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""7"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_8() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""8"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_9() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""9"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""10""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_10() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""10"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
}

// Search_4Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ArtistSearch(String, String, String)} method.
*/
class Search_4Test {
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_1() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""1"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_2() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""2"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_3() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""3"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_4() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""4"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_5() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""5"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_6() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""6"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testArtistSearch_7() {
				String artistName = ""The Beatles"";
				String mode = ""music"";
				String page = ""7"";
				ProductInfo result = new Search().ArtistSearch(artistName, mode, page);
				assertNotNull(result);
		}
		
		/**
		* Test case for the {@link Search#ArtistSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>artistName: ""The Beatles""</li>
		* <li>mode: ""music""</li>"
cmpl-6tyN6Kenqd2p9Y00mLVOlC5QouUd8,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_5Test.java,97.37880444526672,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_5Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#AuthorSearch(String, String)} method.
*/
class Search_5Test {","// Search_5Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#AuthorSearch(String, String)} method.
*/
class Search_5Test {
/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_1() {
				String authorName = ""J.K. Rowling"";
				String page = ""1"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_2() {
				String authorName = ""J.K. Rowling"";
				String page = ""2"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_3() {
				String authorName = ""J.K. Rowling"";
				String page = ""3"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_4() {
				String authorName = ""J.K. Rowling"";
				String page = ""4"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_5() {
				String authorName = ""J.K. Rowling"";
				String page = ""5"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_6() {
				String authorName = ""J.K. Rowling"";
				String page = ""6"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_7() {
				String authorName = ""J.K. Rowling"";
				String page = ""7"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_8() {
				String authorName = ""J.K. Rowling"";
				String page = ""8"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_9() {
				String authorName = ""J.K. Rowling"";
				String page = ""9"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#AuthorSearch(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>authorName: ""J.K. Rowling""</li>
		* <li>page: ""10""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testAuthorSearch_10() {
				String authorName = ""J.K. Rowling"";
				String page = ""10"";
				ProductInfo result = new Search().AuthorSearch(authorName, page);
				assertNotNull(result);
		}
}

// Search_6Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#Blended(String, String)} method.
*/
class Search_6Test {
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""lite""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_1() {
				String searchTerm = ""Harry Potter"";
				String type = ""lite"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""heavy""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_2() {
				String searchTerm = ""Harry Potter"";
				String type = ""heavy"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""lite""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_3() {
				String searchTerm = ""Harry Potter"";
				String type = ""lite"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""heavy""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_4() {
				String searchTerm = ""Harry Potter"";
				String type = ""heavy"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""lite""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_5() {
				String searchTerm = ""Harry Potter"";
				String type = ""lite"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""heavy""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_6() {
				String searchTerm = ""Harry Potter"";
				String type = ""heavy"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""lite""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_7() {
				String searchTerm = ""Harry Potter"";
				String type = ""lite"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""heavy""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_8() {
				String searchTerm = ""Harry Potter"";
				String type = ""heavy"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""lite""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_9() {
				String searchTerm = ""Harry Potter"";
				String type = ""lite"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#Blended(String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>searchTerm: ""Harry Potter""</li>
		* <li>type: ""heavy""</li>
		* </ul>
		* The expected result is that the method returns a {@link BlendedSearch} object.
		*/
		@Test
		void testBlended_10() {
				String searchTerm = ""Harry Potter"";
				String type = ""heavy"";
				BlendedSearch result = new Search().Blended(searchTerm, type);
				assertNotNull(result);
		}
}

// Search_7Test.java
package net"
cmpl-6tyOf3sLy4tQ4LFQ7U7r3CscSPC1Q,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_6Test.java,88.70669722557068,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_6Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#DirectorSearch(String, String, String)} method.
*/
class Search_6Test {","// Search_6Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#DirectorSearch(String, String, String)} method.
*/
class Search_6Test {

		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_5() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_6() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_7() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_8() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_9() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#DirectorSearch(String, String, String)} method.
		*/
		@Test
		void testDirectorSearch_10() {
				Search search = new Search();
				ProductInfo productInfo = search.DirectorSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
}

// Search_7Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ManufactureSearch(String, String, String)} method.
*/
class Search_7Test {
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_5() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_6() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_7() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_8() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_9() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		*/
		@Test
		void testManufactureSearch_10() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
}

// Search_8Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_8Test {
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_5() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_6() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_7() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_8() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_9() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		*/
		@Test
		void testUpcSearch_10() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch("""", """", """");
				assertNotNull(productInfo);
		}
		
}

// Search_9Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ListmaniaSearch(String)} method.
*/
class Search_9Test {
		
		/**
		* Test case for the {@link Search#ListmaniaSearch(String)} method.
		*/
		@Test
		void testListmaniaSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.ListmaniaSearch("""");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ListmaniaSearch(String)} method.
		*/
		@Test
		void testListmaniaSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.ListmaniaSearch("""");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ListmaniaSearch(String)} method.
		*/
		@Test
		void testListmaniaSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.ListmaniaSearch("""");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ListmaniaSearch(String)} method.
		*/
		@Test
		void testListmaniaSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.ListmaniaSearch("""");
				assert"
cmpl-6tyQ6H1RJRiGgVzVR0yaVdHeSvir8,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_7Test.java,93.41764068603516,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_7Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ManufactureSearch(String, String, String)} method.
*/
class Search_7Test {","// Search_7Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#ManufactureSearch(String, String, String)} method.
*/
class Search_7Test {

		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""3"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""4"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_5() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""5"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_6() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""6"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_7() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""7"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_8() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""8"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_9() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""9"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#ManufactureSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>manufactureName = ""Sony""</li>
		* <li>mode = ""electronics""</li>
		* <li>page = ""10""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testManufactureSearch_10() {
				Search search = new Search();
				ProductInfo productInfo = search.ManufactureSearch(""Sony"", ""electronics"", ""10"");
				assertNotNull(productInfo);
		}
		
}

// Search_8Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_8Test {
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_1() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_2() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""2"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_3() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""3"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_4() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""4"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_5() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""5"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_6() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""6"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_7() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""7"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_8() {
				Search search = new Search();
				ProductInfo productInfo = search.UpcSearch(""074644524625"", ""music"", ""8"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc = ""074644524625""</li>
		* <li>mode = ""music""</li>
		* <li>page = ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object."
cmpl-6tyRbsCGs5GOQSbnMisIlrqKl0ILS,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/DAO/Search_8Test.java,106.38622760772705,length,"// Search.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;

//import org.apache.log4j.Logger;
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 2:49:48 PM
 */
public class Search {

    //   Logger log = Logger.getLogger(this.getClass());
    /**
     * @param searchTerm
     * @param type
     * @return
     */
    public BlendedSearch Blended(String searchTerm, String type) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        BlendedSearch testBean = new BlendedSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchBlendedSearchFile(searchTerm, type);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                testBean = (BlendedSearch) joxIn.readObject(BlendedSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                testBean = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return testBean;
    }

    /**
     * @param searchTerm
     * @param productLine
     * @param type
     * @param page
     * @return
     */
    public ProductInfo Keyword(String searchTerm, String productLine, String type, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchKeywordSearchFile(searchTerm, productLine, type, page);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //            log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * @param searchType
     * @param searchTerm
     * @param mode
     * @param type
     * @param page
     * @param offer
     * @return
     */
    public ProductInfo Generic(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            FileInputStream fileIn = fileUtil.fetchGenericSearchFile(searchType, searchTerm, mode, type, page, offer);
            if (fileIn != null) {
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //              log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return productInfo;
    }

    /**
     * Search for an actor
     * @param actorName name to search for
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page) {
        String searchType = ""ActorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, actorName, mode, type, page, offer);
    }

    /**
     * Search for an Artist
     * @param artistName name to search for
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page) {
        String searchType = ""ArtistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, artistName, mode, type, page, offer);
    }

    /**
     * Search for the author of books
     * @param authorName name of the author to search for
     * @param page
     * @return
     */
    public ProductInfo AuthorSearch(String authorName, String page) {
        String searchType = ""AuthorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""books"";
        return Generic(searchType, authorName, mode, type, page, offer);
    }

    /**
     * Search for the director of movies
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page
     * @return
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page) {
        String searchType = ""DirectorSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, directorName, mode, type, page, offer);
    }

    /**
     *  Search by Manufacture
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page) {
        String searchType = ""ManufacturerSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, manufactureName, mode, type, page, offer);
    }

    /**
     * Search for cd's by UPC
     * @param upc
     * @param mode (music, classical)
     * @param page
     * @return
     */
    public ProductInfo UpcSearch(String upc, String mode, String page) {
        String searchType = ""UpcSearch"";
        String type = ""lite"";
        String offer = ""all"";
        return Generic(searchType, upc, mode, type, page, offer);
    }

    //listmania
    //TODO: test to make sure it works correctly. it is a little different then the generic search
    public ProductInfo ListmaniaSearch(String listId) {
        String searchType = ""ListManiaSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String page = ""1"";
        String mode = ""mode"";
        return Generic(searchType, listId, mode, type, page, offer);
    }

    //WishList
    //todo never used need to confirm if works it is different then generic search
    public ProductInfo WishListSearch(String wishListId) {
        String searchType = ""WishlistSearch"";
        String type = ""lite"";
        String offer = ""all"";
        String mode = ""mode"";
        String page = ""1"";
        return Generic(searchType, wishListId, mode, type, page, offer);
    }

    //thirdpartysearch
    /**
     * @param sellerId The sellers ID
     * @param type heavy or lite
     * @param page page number
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        SellerSearch sellerDetails = new SellerSearch();
        try {
            FileInputStream fileIn = fileUtil.fetchThirdPartySearchFile(sellerId, type, page, status);
            if (fileIn != null) {
                //         log.debug(""file is good"");
                joxIn = new JOXBeanInputStream(fileIn);
                sellerDetails = (SellerSearch) joxIn.readObject(SellerSearch.class);
            } else {
                //           log.debug(""Error no fileInput"");
                sellerDetails = null;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
        return sellerDetails;
    }

    //similarities
    public ProductInfo SimilaritesSearch(String asin, String page) {
        FileUtil fileUtil = new FileUtil();
        JOXBeanInputStream joxIn = null;
        ProductInfo productInfo = new ProductInfo();
        try {
            //       log.debug(""in Similar Search"");
            FileInputStream fileIn = fileUtil.fetchSimilarItems(asin, page);
            if (fileIn != null) {
                //        log.debug(""Similar Search Filein not null"");
                joxIn = new JOXBeanInputStream(fileIn);
                productInfo = (ProductInfo) joxIn.readObject(ProductInfo.class);
            } else {
                //           log.debug(""Error no fileInput"");
                productInfo = null;
            }
        } catch (Exception exc) {
            //       log.error(exc.toString());
            exc.printStackTrace();
        }
        //     log.debug(""out similar search"");
        return productInfo;
    }
    //todo sellerprofile
    //todo powersearch
    //todo MarketPlaceSearch
    //todo ExchangeSearch
    //todo add keywords to normal searches for more refined searching
    //todo add price ranges to searches to get within a low and high price level
    //todo add sorting to searches
    //todo create an advanced search that combines powersearch with keywords and price ranges and sorting.
}
","// Search_8Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_8Test {","// Search_8Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_8Test {
/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_1() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""1"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_2() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""2"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_3() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""3"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_4() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""4"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_5() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""5"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_6() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""6"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_7() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""7"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_8() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""8"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
}

// Search_9Test.java
package net.kencochrane.a4j.DAO;

import com.wutka.jox.JOXBeanInputStream;
import net.kencochrane.a4j.beans.BlendedSearch;
import net.kencochrane.a4j.beans.ProductInfo;
import net.kencochrane.a4j.beans.SellerSearch;
import net.kencochrane.a4j.file.FileUtil;
import java.io.FileInputStream;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Search}.
* It contains ten unit test cases for the {@link Search#UpcSearch(String, String, String)} method.
*/
class Search_9Test {
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""1""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_1() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""1"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""2""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_2() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""2"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""3""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_3() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""3"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""4""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_4() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""4"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""5""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_5() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""5"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""6""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_6() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""6"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""7""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_7() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""7"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""8""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_8() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""8"";
				ProductInfo result = new Search().UpcSearch(upc, mode, page);
				assertNotNull(result);
		}
		/**
		* Test case for the {@link Search#UpcSearch(String, String, String)} method.
		* It tests the method with the following parameters:
		* <ul>
		* <li>upc: ""074644524625""</li>
		* <li>mode: ""music""</li>
		* <li>page: ""9""</li>
		* </ul>
		* The expected result is that the method returns a {@link ProductInfo} object.
		*/
		@Test
		void testUpcSearch_9() {
				String upc = ""074644524625"";
				String mode = ""music"";
				String page = ""9"";
				ProductInfo result = new Search().UpcSearch(upc, mode,"
652e2746-16d7-4453-a9ab-14cafad1f74e,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/data/Query_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8830 tokens (4830 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Query.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;

public class Query {

    //   Logger log = Logger.getLogger(this.getClass());
    protected String serverURL, associatesID, //don't change A4J won't work without this. Used for tracking tool use.
    token = ""DSB0XDDW1GQ3S"", searchType, type, page, offer;

    protected ArrayList searchValues;

    public Query() {
        Properties props = LoadProperties.instance().getProperties();
        this.serverURL = props.getProperty(""amazonServerURL"");
        this.associatesID = props.getProperty(""associateID"");
    }

    a4jUtil jawsUtil = new a4jUtil();

    /**
     * **************************************************************************
     *      Method name: generateMultipleSearchString
     *      Function: used in AsinSearch only (since AsinSearch allows multiple searches)
     *      add ',' in between each Asin number
     *      Input Parameters: search type (String)
     *      asin numbers (ArrayList)
     *      Return Values: one string containing all asin numbers (String)
     * ***************************************************************************
     */
    protected String generateMultipleSearchString(String searchType, ArrayList searchValues) {
        //	log.debug(""genertateMulti in"");
        StringBuffer resultString = new StringBuffer();
        //     log.debug(""Generatemulti before if"");
        // log.debug(""searchValues = "" + searchValues.isEmpty());
        if (searchType.equals(""AsinSearch"") && (searchValues != null) && !searchValues.isEmpty()) {
            //        log.debug(""Generatemulti if"");
            resultString.append(searchValues.get(0));
            for (int i = 1; i < searchValues.size(); i++) {
                resultString.append("","");
                resultString.append(searchValues.get(i));
            }
        } else // other search methods don't allow multiple entries
        {
            //        log.debug(""Generatemulti else"");
            resultString.append(searchValues.get(0));
        }
        //    log.debug(""Generatemulti out"");
        return new String(resultString);
    }

    /**
     * **************************************************************************
     *      Method name: queryGenerator
     *      Function: generate the URI (query) for XML request
     *      Input Parameters: N/A
     *      Return Values: the URI string (String)
     * ***************************************************************************
     */
    public String queryGenerator(String searchType, String type, String page, String offer, ArrayList searchValues) {
        //    log.debug(""queryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(searchType);
        buffer.append(""="");
        buffer.append(generateMultipleSearchString(searchType, searchValues));
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""offerpage="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //      log.debug(""queryGenerator - out"");
        return new String(buffer);
    }

    /**
     * **************************************************************************
     *      Method name: sendRequest
     *      Function: send the request to server (both AsinSearch and Exchange
     *      use this method)
     *      Input Parameters: the URI string (String)
     *      Return Values: the response string from server (String)
     * ***************************************************************************
     */
    public String sendRequest(String string) throws Exception {
        //        log.debug(""sendRequest"");
        // send the request through URL
        URL url = new URL(string);
        // receive the response
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        DataInputStream in = new DataInputStream(urlConnection.getInputStream());
        ByteArrayOutputStream bo = new ByteArrayOutputStream();
        byte[] buffer = new byte[100];
        do {
            int available = in.read(buffer);
            if (available == -1)
                break;
            bo.write(buffer, 0, available);
        } while (true);
        return bo.toString();
    }

    public String browseNodeQueryGenerator(String type, String page, String offer, String mode, String browseNode) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""BrowseNodeSearch="");
        buffer.append(browseNode);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(mode);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String BlendedSearchGenerator(String type, String searchTerm) {
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""BlendedSearch="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String KeywordSearchGenerator(String searchTerm, String productLine, String type, String page) {
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""KeywordSearch="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(productLine);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        //buffer.append(""offer=""); buffer.append(offer); buffer.append(""&""); // offer?
        buffer.append(""f=xml"");
        //      log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String SearchQueryGenerator(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        //      log.debug(""SearchQueryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(searchType);
        buffer.append(""="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(mode);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""SearchQueryGenerator - out"");
        return new String(buffer);
    }

    public String SearchThirdPartyGenerator(String sellerId, String type, String page, String status) {
        //      log.debug(""SearchQueryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""SellerSearch="");
        buffer.append(sellerId);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offerstatus="");
        buffer.append(status);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""SearchQueryGenerator - out"");
        return new String(buffer);
    }

    public String AddtoCart(String ASIN, String quantity) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=add&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Asin."");
        buffer.append(ASIN);
        buffer.append(""="");
        buffer.append(quantity);
        return new String(buffer);
    }

    public String AddToExistingCart(String ASIN, String quantity, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=add&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Asin."");
        buffer.append(ASIN);
        buffer.append(""="");
        buffer.append(quantity);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=add&f=xml&
          dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &Asin.[ASIN goes here]=[quantity goes here]
          &CartId=[cart ID goes here] &Hmac=[HMAC goes here]
        */
    }

    public String ClearCart(String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=clear&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=clear
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String GetItemsFromCart(String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=get&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=get
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String ModifyCart(String itemId, String quantity, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=modify&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Item."");
        buffer.append(itemId);
        buffer.append(""="");
        buffer.append(quantity);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=modify
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &Item.[itemID goes here]=[quantity goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String RemoveFromCart(String itemId, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=remove&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Item."");
        buffer.append(itemId);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=remove
          &CartId=CART
          &Hmac=HMAC=
          &Item.17120277375791359165
          &Item.1813019710362345961
          &dev-t=TOKEN&t=test&f=xml&type=lite
        */
    }
}
","// Query_0Test.java
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Query}.
* It contains ten unit test cases for the {@link Query#queryGenerator(String, String, String, String, ArrayList)} method.
*/
class Query_0Test {","// Query_0Test.java
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Query}.
* It contains ten unit test cases for the {@link Query#queryGenerator(String, String, String, String, ArrayList)} method.
*/
class Query_0Test {
"
15433808-4442-447f-866f-03975c4bc942,/EvoSuiteBenchmark/2_a4j/src/main/java/net/kencochrane/a4j/data/Query_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8820 tokens (4820 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// Query.java
/*
Copyright (c) 2003, Ken Cochrane
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted
provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of Ken Cochrane nor the names of its contributors may be used to endorse
    or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;

public class Query {

    //   Logger log = Logger.getLogger(this.getClass());
    protected String serverURL, associatesID, //don't change A4J won't work without this. Used for tracking tool use.
    token = ""DSB0XDDW1GQ3S"", searchType, type, page, offer;

    protected ArrayList searchValues;

    public Query() {
        Properties props = LoadProperties.instance().getProperties();
        this.serverURL = props.getProperty(""amazonServerURL"");
        this.associatesID = props.getProperty(""associateID"");
    }

    a4jUtil jawsUtil = new a4jUtil();

    /**
     * **************************************************************************
     *      Method name: generateMultipleSearchString
     *      Function: used in AsinSearch only (since AsinSearch allows multiple searches)
     *      add ',' in between each Asin number
     *      Input Parameters: search type (String)
     *      asin numbers (ArrayList)
     *      Return Values: one string containing all asin numbers (String)
     * ***************************************************************************
     */
    protected String generateMultipleSearchString(String searchType, ArrayList searchValues) {
        //	log.debug(""genertateMulti in"");
        StringBuffer resultString = new StringBuffer();
        //     log.debug(""Generatemulti before if"");
        // log.debug(""searchValues = "" + searchValues.isEmpty());
        if (searchType.equals(""AsinSearch"") && (searchValues != null) && !searchValues.isEmpty()) {
            //        log.debug(""Generatemulti if"");
            resultString.append(searchValues.get(0));
            for (int i = 1; i < searchValues.size(); i++) {
                resultString.append("","");
                resultString.append(searchValues.get(i));
            }
        } else // other search methods don't allow multiple entries
        {
            //        log.debug(""Generatemulti else"");
            resultString.append(searchValues.get(0));
        }
        //    log.debug(""Generatemulti out"");
        return new String(resultString);
    }

    /**
     * **************************************************************************
     *      Method name: queryGenerator
     *      Function: generate the URI (query) for XML request
     *      Input Parameters: N/A
     *      Return Values: the URI string (String)
     * ***************************************************************************
     */
    public String queryGenerator(String searchType, String type, String page, String offer, ArrayList searchValues) {
        //    log.debug(""queryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(searchType);
        buffer.append(""="");
        buffer.append(generateMultipleSearchString(searchType, searchValues));
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""offerpage="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //      log.debug(""queryGenerator - out"");
        return new String(buffer);
    }

    /**
     * **************************************************************************
     *      Method name: sendRequest
     *      Function: send the request to server (both AsinSearch and Exchange
     *      use this method)
     *      Input Parameters: the URI string (String)
     *      Return Values: the response string from server (String)
     * ***************************************************************************
     */
    public String sendRequest(String string) throws Exception {
        //        log.debug(""sendRequest"");
        // send the request through URL
        URL url = new URL(string);
        // receive the response
        URLConnection urlConnection = url.openConnection();
        urlConnection.connect();
        DataInputStream in = new DataInputStream(urlConnection.getInputStream());
        ByteArrayOutputStream bo = new ByteArrayOutputStream();
        byte[] buffer = new byte[100];
        do {
            int available = in.read(buffer);
            if (available == -1)
                break;
            bo.write(buffer, 0, available);
        } while (true);
        return bo.toString();
    }

    public String browseNodeQueryGenerator(String type, String page, String offer, String mode, String browseNode) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""BrowseNodeSearch="");
        buffer.append(browseNode);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(mode);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String BlendedSearchGenerator(String type, String searchTerm) {
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""BlendedSearch="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String KeywordSearchGenerator(String searchTerm, String productLine, String type, String page) {
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""KeywordSearch="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(productLine);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        //buffer.append(""offer=""); buffer.append(offer); buffer.append(""&""); // offer?
        buffer.append(""f=xml"");
        //      log.debug(""URL = "" + buffer.toString());
        return new String(buffer);
    }

    public String SearchQueryGenerator(String searchType, String searchTerm, String mode, String type, String page, String offer) {
        //      log.debug(""SearchQueryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        searchTerm = jawsUtil.encodeString(searchTerm);
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(searchType);
        buffer.append(""="");
        buffer.append(searchTerm);
        buffer.append(""&"");
        buffer.append(""mode="");
        buffer.append(mode);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offer="");
        buffer.append(offer);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""SearchQueryGenerator - out"");
        return new String(buffer);
    }

    public String SearchThirdPartyGenerator(String sellerId, String type, String page, String status) {
        //      log.debug(""SearchQueryGenerator - in"");
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""t="");
        buffer.append(associatesID);
        buffer.append(""&"");
        buffer.append(""dev-t="");
        buffer.append(token);
        buffer.append(""&"");
        buffer.append(""SellerSearch="");
        buffer.append(sellerId);
        buffer.append(""&"");
        buffer.append(""type="");
        buffer.append(type);
        buffer.append(""&"");
        buffer.append(""page="");
        buffer.append(page);
        buffer.append(""&"");
        buffer.append(""offerstatus="");
        buffer.append(status);
        buffer.append(""&"");
        buffer.append(""f=xml"");
        //     log.debug(""SearchQueryGenerator - out"");
        return new String(buffer);
    }

    public String AddtoCart(String ASIN, String quantity) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=add&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Asin."");
        buffer.append(ASIN);
        buffer.append(""="");
        buffer.append(quantity);
        return new String(buffer);
    }

    public String AddToExistingCart(String ASIN, String quantity, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=add&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Asin."");
        buffer.append(ASIN);
        buffer.append(""="");
        buffer.append(quantity);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=add&f=xml&
          dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &Asin.[ASIN goes here]=[quantity goes here]
          &CartId=[cart ID goes here] &Hmac=[HMAC goes here]
        */
    }

    public String ClearCart(String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=clear&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=clear
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String GetItemsFromCart(String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=get&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=get
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String ModifyCart(String itemId, String quantity, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=modify&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Item."");
        buffer.append(itemId);
        buffer.append(""="");
        buffer.append(quantity);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=modify
          &f=xml& dev-t=[ [developer's token goes here]
          &t=[associates ID goes here]
          &Item.[itemID goes here]=[quantity goes here]
          &CartId=[cart ID goes here]
          &Hmac=[HMAC goes here]
        */
    }

    public String RemoveFromCart(String itemId, String cartId, String hmac) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(serverURL);
        buffer.append(""?"");
        buffer.append(""ShoppingCart=remove&f=xml&dev-t="");
        buffer.append(token);
        buffer.append(""&t="");
        buffer.append(associatesID);
        buffer.append(""&Item."");
        buffer.append(itemId);
        buffer.append(""&CartId="");
        buffer.append(cartId);
        buffer.append(""&Hmac="");
        buffer.append(jawsUtil.encodeString(hmac));
        return new String(buffer);
        /*
          http://xml.amazon.com/onca/xml3?ShoppingCart=remove
          &CartId=CART
          &Hmac=HMAC=
          &Item.17120277375791359165
          &Item.1813019710362345961
          &dev-t=TOKEN&t=test&f=xml&type=lite
        */
    }
}
","// Query_1Test.java
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Query}.
* It contains ten unit test cases for the {@link Query#sendRequest(String)} method.
*/
class Query_1Test {","// Query_1Test.java
/**
 * http://www.KenCochrane.net
 * Ken Cochrane
 * Date: May 23, 2003
 * Time: 9:18:23 AM
 *
 *  Some of these methods are from the Amazon.com AWS Java examples that they include when you
 *  download the AWS bundle.
 */
package net.kencochrane.a4j.data;

//import org.apache.log4j.Logger;
import net.kencochrane.a4j.util.LoadProperties;
import net.kencochrane.a4j.util.a4jUtil;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Query}.
* It contains ten unit test cases for the {@link Query#sendRequest(String)} method.
*/
class Query_1Test {
"
