ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u2yBLq8iEyCwgNU877BdmW24Qq9G,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/businessLayer/ConstantConverter_0Test.java,86.83285093307495,,"// ConstantConverter.java
package macaw.businessLayer;

import java.util.ArrayList;

/**
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ConstantConverter {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    private ConstantConverter() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * creates string lists from model objects.
     */
    static public String[] getCategoryChoices(ArrayList<Category> categories) {
        String[] results = new String[categories.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = categories.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getAvailabilityStatusChoices(ArrayList<AvailabilityState> availabilityStatusChoices) {
        String[] results = new String[availabilityStatusChoices.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = availabilityStatusChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getCleaningStatusChoices(ArrayList<CleaningState> cleaningStatusChoices) {
        String[] results = new String[cleaningStatusChoices.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = cleaningStatusChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getAliasFilePathChoices(ArrayList<AliasFilePath> aliasFilePathChoices) {
        String[] results = new String[aliasFilePathChoices.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = aliasFilePathChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getSupportingDocumentNames(ArrayList<SupportingDocument> supportingDocuments) {
        String[] results = new String[supportingDocuments.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = supportingDocuments.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getVariableNames(ArrayList<Variable> variables) {
        String[] results = new String[variables.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = variables.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getValueLabels(ArrayList<ValueLabel> valueLabels) {
        String[] results = new String[valueLabels.size()];
        for (int i = 0; i < results.length; i++) {
            results[i] = valueLabels.get(i).getDisplayName();
        }
        return results;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ConstantConverter_0Test.java
package macaw.businessLayer;

import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConstantConverter}.
* It contains ten unit test cases for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
*/
class ConstantConverter_0Test {","// ConstantConverter_0Test.java
package macaw.businessLayer;

import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ConstantConverter}.
* It contains ten unit test cases for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
*/
class ConstantConverter_0Test {

	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: empty list.
	* Expected result: empty array.
	*/
	@Test
	void testGetCategoryChoices_0() {
		ArrayList<Category> categories = new ArrayList<Category>();
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(0, result.length);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with one element.
	* Expected result: array with one element.
	*/
	@Test
	void testGetCategoryChoices_1() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(1, result.length);
		assertEquals(""category1"", result[0]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with two elements.
	* Expected result: array with two elements.
	*/
	@Test
	void testGetCategoryChoices_2() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(2, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with three elements.
	* Expected result: array with three elements.
	*/
	@Test
	void testGetCategoryChoices_3() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(3, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with four elements.
	* Expected result: array with four elements.
	*/
	@Test
	void testGetCategoryChoices_4() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(4, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with five elements.
	* Expected result: array with five elements.
	*/
	@Test
	void testGetCategoryChoices_5() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(5, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with six elements.
	* Expected result: array with six elements.
	*/
	@Test
	void testGetCategoryChoices_6() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		categories.add(new Category(""category6""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(6, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
		assertEquals(""category6"", result[5]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with seven elements.
	* Expected result: array with seven elements.
	*/
	@Test
	void testGetCategoryChoices_7() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		categories.add(new Category(""category6""));
		categories.add(new Category(""category7""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(7, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
		assertEquals(""category6"", result[5]);
		assertEquals(""category7"", result[6]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with eight elements.
	* Expected result: array with eight elements.
	*/
	@Test
	void testGetCategoryChoices_8() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		categories.add(new Category(""category6""));
		categories.add(new Category(""category7""));
		categories.add(new Category(""category8""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(8, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
		assertEquals(""category6"", result[5]);
		assertEquals(""category7"", result[6]);
		assertEquals(""category8"", result[7]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with nine elements.
	* Expected result: array with nine elements.
	*/
	@Test
	void testGetCategoryChoices_9() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		categories.add(new Category(""category6""));
		categories.add(new Category(""category7""));
		categories.add(new Category(""category8""));
		categories.add(new Category(""category9""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(9, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
		assertEquals(""category6"", result[5]);
		assertEquals(""category7"", result[6]);
		assertEquals(""category8"", result[7]);
		assertEquals(""category9"", result[8]);
	}
	
	/**
	* Test case for the {@link ConstantConverter#getCategoryChoices(ArrayList)} method.
	* Test data: list with ten elements.
	* Expected result: array with ten elements.
	*/
	@Test
	void testGetCategoryChoices_10() {
		ArrayList<Category> categories = new ArrayList<Category>();
		categories.add(new Category(""category1""));
		categories.add(new Category(""category2""));
		categories.add(new Category(""category3""));
		categories.add(new Category(""category4""));
		categories.add(new Category(""category5""));
		categories.add(new Category(""category6""));
		categories.add(new Category(""category7""));
		categories.add(new Category(""category8""));
		categories.add(new Category(""category9""));
		categories.add(new Category(""category10""));
		String[] result = ConstantConverter.getCategoryChoices(categories);
		assertEquals(10, result.length);
		assertEquals(""category1"", result[0]);
		assertEquals(""category2"", result[1]);
		assertEquals(""category3"", result[2]);
		assertEquals(""category4"", result[3]);
		assertEquals(""category5"", result[4]);
		assertEquals(""category6"", result[5]);
		assertEquals(""category7"", result[6]);
		assertEquals(""category8"", result[7]);
		assertEquals(""category9"", result[8]);
		assertEquals(""category10"", result[9]);
	}
}</code>





A:

I think you are looking for something like this:
<code>public class ConstantConverter {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    private ConstantConverter() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * creates string lists from model objects.
     */
    static public String[] getCategoryChoices(ArrayList&lt;Category&gt; categories) {
        String[] results = new String[categories.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = categories.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getAvailabilityStatusChoices(ArrayList&lt;AvailabilityState&gt; availabilityStatusChoices) {
        String[] results = new String[availabilityStatusChoices.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = availabilityStatusChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getCleaningStatusChoices(ArrayList&lt;CleaningState&gt; cleaningStatusChoices) {
        String[] results = new String[cleaningStatusChoices.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = cleaningStatusChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getAliasFilePathChoices(ArrayList&lt;AliasFilePath&gt; aliasFilePathChoices) {
        String[] results = new String[aliasFilePathChoices.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = aliasFilePathChoices.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getSupportingDocumentNames(ArrayList&lt;SupportingDocument&gt; supportingDocuments) {
        String[] results = new String[supportingDocuments.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = supportingDocuments.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getVariableNames(ArrayList&lt;Variable&gt; variables) {
        String[] results = new String[variables.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = variables.get(i).getDisplayName();
        }
        return results;
    }

    static public String[] getValueLabels(ArrayList&lt;ValueLabel&gt; valueLabels) {
        String[] results = new String[valueLabels.size()];
        for (int i = 0; i &lt; results.length; i++) {
            results[i] = valueLabels.get(i).getDisplayName();
        }
        return results;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
</code>
"
6c0a5e20-acf8-4f83-b037-d82c64f03671,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_0Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9130 tokens (5130 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_0Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addSupportingDocumentChange(User, SupportingDocument)} method.
*/
class ChangeEventGenerator_0Test {","// ChangeEventGenerator_0Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addSupportingDocumentChange(User, SupportingDocument)} method.
*/
class ChangeEventGenerator_0Test {
"
7b026d9d-f837-45f2-978f-b05ff42580f4,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_10Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9136 tokens (5136 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_10Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.
*/
class ChangeEventGenerator_10Test {","// ChangeEventGenerator_10Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.
*/
class ChangeEventGenerator_10Test {
"
5df1f0ff-a7c9-4342-9d9f-68d795e39eb7,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_11Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9133 tokens (5133 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_11Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSupportingDocumentChanges(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_11Test {","// ChangeEventGenerator_11Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSupportingDocumentChanges(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_11Test {
"
9e9c522d-7b3f-4a98-bf57-4c582553b055,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_12Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9134 tokens (5134 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_12Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSupportingDocumentsChanges(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_12Test {","// ChangeEventGenerator_12Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#disassociateSupportingDocumentsChanges(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_12Test {
"
ef2f6d24-83d1-40c4-b50d-21534d830a93,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_13Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9127 tokens (5127 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_13Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addUserChange(User, User)} method.
*/
class ChangeEventGenerator_13Test {","// ChangeEventGenerator_13Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addUserChange(User, User)} method.
*/
class ChangeEventGenerator_13Test {
"
6c78429a-c65f-45fe-9817-ca3c14f8c6f0,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_14Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9128 tokens (5128 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_14Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteUsersChanges(User, ArrayList)} method.
*/
class ChangeEventGenerator_14Test {","// ChangeEventGenerator_14Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteUsersChanges(User, ArrayList)} method.
*/
class ChangeEventGenerator_14Test {
"
3648081f-8de4-4999-be68-769fe8b0eb4a,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_1Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9130 tokens (5130 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_1Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteSupportingDocumentsChange(User, ArrayList)} method.
*/
class ChangeEventGenerator_1Test {","// ChangeEventGenerator_1Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteSupportingDocumentsChange(User, ArrayList)} method.
*/
class ChangeEventGenerator_1Test {
"
51809b1f-3b4b-46e3-aa92-9c3eacdc8f1b,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_2Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9132 tokens (5132 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_2Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addValueLabelsChange(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_2Test {","// ChangeEventGenerator_2Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addValueLabelsChange(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_2Test {
"
500fa660-1c23-4857-b53d-2355bb11a83e,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_3Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9132 tokens (5132 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_3Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteValueLabelsChange(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_3Test {","// ChangeEventGenerator_3Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteValueLabelsChange(User, Variable, ArrayList)} method.
*/
class ChangeEventGenerator_3Test {
"
03a52d7f-b375-4dbf-8698-3f6d272719ff,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_4Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9131 tokens (5131 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_4Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addOntologyTermChange(User, OntologyTerm)} method.
*/
class ChangeEventGenerator_4Test {","// ChangeEventGenerator_4Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addOntologyTermChange(User, OntologyTerm)} method.
*/
class ChangeEventGenerator_4Test {
"
192da534-07e9-4be6-967c-d69c6449fd7b,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_5Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9131 tokens (5131 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_5Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteOntologyTermsChange(User, ArrayList)} method.
*/
class ChangeEventGenerator_5Test {","// ChangeEventGenerator_5Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteOntologyTermsChange(User, ArrayList)} method.
*/
class ChangeEventGenerator_5Test {
"
fd3349fc-1a83-4815-ba56-85d08de2d9eb,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_6Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9127 tokens (5127 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_6Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteVariableChanges(User, Variable)} method.
*/
class ChangeEventGenerator_6Test {","// ChangeEventGenerator_6Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#deleteVariableChanges(User, Variable)} method.
*/
class ChangeEventGenerator_6Test {
"
173385f9-ec99-4951-b093-af51b2bd6a2e,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_8Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9127 tokens (5127 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_8Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addVariableChange(User, Variable)} method.
*/
class ChangeEventGenerator_8Test {","// ChangeEventGenerator_8Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#addVariableChange(User, Variable)} method.
*/
class ChangeEventGenerator_8Test {
"
82ef1db8-e5dd-45f0-a591-120eb1723162,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/ChangeEventGenerator_9Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 9135 tokens (5135 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ChangeEventGenerator.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;

/**
 * A convenience class that generates collections of change event descriptions
 * that are used by both the InMemory and SQL-based implementations of
 * {@link macaw.businessLayer.MacawCurationAPI}.  Early in development, implementations of the main API
 * began to share common blocks of code, particularly for processing change events associated
 * with ""add"", ""delete"", ""associate"" and ""dissociate"" operations.  To record changes
 * made in ""update"" operations, a different procedure was followed.  Old and revised
 * versions of a record were passed to the static method <code>detectFieldChanges(...)</code>
 * that is supported in most of the <code>macaw.model.*</code> classes.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ChangeEventGenerator {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    // ==========================================
    // Section Construction
    // ==========================================
    public ChangeEventGenerator() {
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * produce change events for operations which involve adding support documents
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addSupportingDocumentChange(User user, SupportingDocument supportingDocument) {
        String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.newRecord"", supportingDocument.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, user.getUserID());
        changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting support documents
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteSupportingDocumentsChange(User user, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""supportingDocument.saveChanges.deleteRecord"", supportingDocument.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.SUPPORTING_DOCUMENT, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding value labels
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.newRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, user.getUserID());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting value labels
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteValueLabelsChange(User user, Variable variable, ArrayList<ValueLabel> valueLabels) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (ValueLabel currentValueLabel : valueLabels) {
            String changeMessage = MacawMessages.getMessage(""valueLabel.saveChanges.deleteRecord"", currentValueLabel.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VALUE_LABEL, changeMessage, userID);
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvent.setChangedObjectIdentifier(currentValueLabel.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding ontology terms
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addOntologyTermChange(User user, OntologyTerm ontologyTerm) {
        String userID = user.getUserID();
        String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.newRecord"", ontologyTerm.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting ontology terms
     * from the database
     */
    static public ArrayList<MacawChangeEvent> deleteOntologyTermsChange(User user, ArrayList<OntologyTerm> ontologyTerms) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        for (OntologyTerm currentOntologyTerm : ontologyTerms) {
            String changeMessage = MacawMessages.getMessage(""ontologyTerm.saveChanges.deleteRecord"", currentOntologyTerm.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.ONTOLOGY_TERM, changeMessage, userID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve deleting raw or derived variables
     * from the database
     */
    static public MacawChangeEvent deleteVariableChanges(User user, Variable variable) {
        String userID = user.getUserID();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.deleteRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            return changeEvent;
        }
    }

    static public ArrayList<MacawChangeEvent> deleteRawVariablesChanges(User user, ArrayList<RawVariable> rawVariables) {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (RawVariable currentRawVariable : rawVariables) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.deleteRecord"", currentRawVariable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(currentRawVariable.getIdentifier());
            changeEvent.setVariableOwnerID(currentRawVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve adding raw or derived variables
     * to the database
     */
    static public ArrayList<MacawChangeEvent> addVariableChange(User user, Variable variable) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        if (variable instanceof RawVariable) {
            String changeMessage = MacawMessages.getMessage(""rawVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        } else {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.saveChanges.newRecord"", variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(variable.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToAdd : sourceVariablesToAdd) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.add"", sourceVariableToAdd.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating source variables
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSourceVariablesChanges(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        String userID = user.getUserID();
        String derivedVariableDisplayName = derivedVariable.getDisplayName();
        for (Variable sourceVariableToDelete : sourceVariablesToDelete) {
            String changeMessage = MacawMessages.getMessage(""derivedVariable.sourceVariables.saveChanges.delete"", sourceVariableToDelete.getDisplayName(), derivedVariableDisplayName);
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, userID);
            changeEvent.setChangedObjectIdentifier(derivedVariable.getIdentifier());
            changeEvent.setVariableOwnerID(derivedVariable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve associating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> associateSupportingDocumentChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToAdd) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToAdd) {
            if (variable.containsSupportingDocument(supportingDocument) == false) {
                variable.addSupportingDocument(supportingDocument);
                String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
                MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
                changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
                changeEvent.setVariableOwnerID(variable.getIdentifier());
                changeEvents.add(changeEvent);
            }
        }
        return changeEvents;
    }

    /**
     * produce change events for operations which involve disassociating supporting documents
     * with a derived variable
     */
    static public ArrayList<MacawChangeEvent> disassociateSupportingDocumentsChanges(User user, Variable variable, ArrayList<SupportingDocument> supportingDocumentsToDelete) {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (SupportingDocument supportingDocument : supportingDocumentsToDelete) {
            String changeMessage = MacawMessages.getMessage(""variable.saveChanges.associateDocument"", supportingDocument.getDisplayName(), variable.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.VARIABLE, changeMessage, user.getUserID());
            changeEvent.setChangedObjectIdentifier(supportingDocument.getIdentifier());
            changeEvent.setVariableOwnerID(variable.getIdentifier());
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }

    /**
     * creates change event when a new user is added
     * @param admin
     * @param user
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> addUserChange(User admin, User user) throws MacawException {
        String changeMessage = MacawMessages.getMessage(""user.saveChanges.newRecord"", admin.getDisplayName(), user.getDisplayName());
        MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, admin.getDisplayName());
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        return changeEvents;
    }

    /**
     * creates a collection of change events for users which are deleted
     * @param admin
     * @param usersToDelete
     * @throws MacawException
     */
    static public ArrayList<MacawChangeEvent> deleteUsersChanges(User admin, ArrayList<User> usersToDelete) throws MacawException {
        String adminID = admin.getUserID();
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        for (User userToDelete : usersToDelete) {
            String changeMessage = MacawMessages.getMessage(""user.saveChanges.deleteRecord"", admin.getDisplayName(), userToDelete.getDisplayName());
            MacawChangeEvent changeEvent = new MacawChangeEvent(ChangeEventType.USER, changeMessage, adminID);
            changeEvents.add(changeEvent);
        }
        return changeEvents;
    }
    /*
	static public MacawChangeEvent setAlternativeVariable(User user,
														  Variable targetVariable,
														  Variable oldAlternativeVariable,
														  Variable updatedAlternativeVariable) throws MacawException {

		String userID = user.getUserID();

		String blankFieldValue
			= MacawMessages.getMessage(""general.fieldValue.blank"");
		String fieldName
			= MacawMessages.getMessage(""variable.alternativeVariable.label"");
		String oldAlternativeVariableName = blankFieldValue;
		if (oldAlternativeVariable != null) {
			oldAlternativeVariableName = oldAlternativeVariable.getDisplayName();
		}
		
		String updatedAlternativeVariableName = blankFieldValue;
		if (updatedAlternativeVariable != null) {
			updatedAlternativeVariableName = updatedAlternativeVariable.getDisplayName();
		}
		
		String changeMessage
			= MacawMessages.getMessage(""variable.saveChanges.valueChanged"",
										fieldName,
										oldAlternativeVariableName,
										updatedAlternativeVariableName);
		
		MacawChangeEvent changeEvent
			= new MacawChangeEvent(ChangeEventType.VARIABLE,
								   changeMessage,
								   user.getUserID());
		
		int targetVariableID = targetVariable.getIdentifier();
		changeEvent.setVariableOwnerID(targetVariableID);
		changeEvent.setChangedObjectIdentifier(targetVariableID);
		
		return changeEvent;		
	}
	*/
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ChangeEventGenerator_9Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.
*/
class ChangeEventGenerator_9Test {","// ChangeEventGenerator_9Test.java
package macaw.persistenceLayer;

import macaw.businessLayer.*;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ChangeEventGenerator}.
* It contains ten unit test cases for the {@link ChangeEventGenerator#associateSourceVariablesChanges(User, DerivedVariable, ArrayList)} method.
*/
class ChangeEventGenerator_9Test {
"
8341fa58-4d43-4132-a9bb-ac1f1ca5e1bb,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationService_15Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 11002 tokens (7002 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// DemonstrationCurationService.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;

/**
 * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages
 * all of its data in-memory instead of in a database.  This class allows Macaw to run in
 * a demonstration mode off a pen drive without requiring the client machine to have MySQL
 * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes
 * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL
 * versions of Macaw services.  The difference in implementations make it easy to rapidly
 * isolate the causes of failed test cases.  In general, the in-memory implementation is
 * treated as the gold test standard.
 *
 * <p>
 * DemonstrationCurationService delegates implementations of the API methods to manager
 * classes for major concepts.  All of these manager classes have names that are prefixed
 * with ""InMemory"", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.
 *
 * <p>
 * The manager classes support persistence using the following policy
 * <ul>
 * <li>when an item is added to a collection, treat it as the stored copy </li>
 * <li>when calling classes request the item, return a cloned version that serves
 * as a working copy.</li>
 * </ul>
 * <p>
 * A more detailed description of how this works is given
 * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.
 *
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class DemonstrationCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    protected InMemoryListChoiceManager listChoiceManager;

    protected InMemorySupportingDocumentsManager supportingDocumentsManager;

    protected InMemoryChangeEventManager changeEventManager;

    protected InMemoryVariableManager variableManager;

    protected InMemoryValueLabelManager valueLabelManager;

    protected InMemoryOntologyTermManager ontologyTermManager;

    protected InMemoryUserManager userManager;

    protected InMemoryVariableFilter variableFilter;

    protected InMemorySupportingDocumentFilter supportingDocumentFilter;

    protected InMemoryOntologyTermFilter ontologyTermFilter;

    protected MacawSecurityAPI securityValidationService;

    protected User admin;

    protected Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public DemonstrationCurationService() {
        init(false);
    }

    public DemonstrationCurationService(boolean automatedTestingMode) {
        init(automatedTestingMode);
    }

    private void init(boolean automatedTestingMode) {
        admin = new User(""admin"", ""admin"");
        log = new Log();
        changeEventManager = new InMemoryChangeEventManager();
        userManager = new InMemoryUserManager(changeEventManager, log, admin);
        securityValidationService = userManager;
        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);
        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);
        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);
        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);
        variableFilter = new InMemoryVariableFilter();
        supportingDocumentFilter = new InMemorySupportingDocumentFilter();
        ontologyTermFilter = new InMemoryOntologyTermFilter();
        try {
            User jsmith = new User(""jsmith"", ""cool"");
            if (automatedTestingMode == false) {
                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);
                dummyDataProvider.populateDatabase(jsmith);
            }
        } catch (MacawException exception) {
            exception.printErrors();
            Log log = new Log();
            log.logException(exception);
        }
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    //Interface: MacawDatabase
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addRawVariable(user, rawVariable);
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteRawVariables(user, rawVariables);
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateRawVariable(user, rawVariable);
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addDerivedVariable(user, derivedVariable);
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteDerivedVariables(user, derivedVariables);
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateDerivedVariable(user, derivedVariable);
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getRawVariableIdentifier(user, rawVariable);
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        return variableManager.getVariable(user, variableName);
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getSourceVariables(user, derivedVariable);
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        return valueLabelManager.getValueLabels(user, originalVariable);
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {
        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getStudyYears(user);
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getSummaryDataForAllVariables(user);
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        return variableManager.getCompleteVariableData(user, variableSummary);
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getOriginalVariable(variable);
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        return allSupportingDocuments;
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);
        return results;
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);
    }

    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategories(user);
    }

    /**
     * methods for managing categories
     */
    public void addCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCategory(user, dataLibrary);
    }

    public void updateCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCategory(user, dataLibrary, variables);
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCategories(user, categories, variables);
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategoryIdentifier(category, variable);
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStates(user);
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCleaningState(user, cleaningState);
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCleaningState(user, cleaningState, variables);
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStates(user);
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAvailabilityState(user, availabilityState);
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePaths(user);
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAliasFilePath(user, aliasFilePath);
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        inMemoryVariableFilter.setVariables(variables);
        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);
        return results;
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getFilePathFromAlias(currentAlias);
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);
        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {
        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();
        checkValidUser(user);
        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);
        ontologyTermFilter.setOntologyTerms(allOntologyTerms);
        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getAllOntologyTerms(user);
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getAssociatedOntologyTerms(user, variable);
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.addOntologyTerm(user, ontologyTerm);
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);
        variableManager.updateOntologyTermReferences(ontologyTerm);
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);
        variableManager.deleteOntologyTermReferences(ontologyTerms);
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.associateOntologyTerms(user, variable, ontologyTerms);
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForVariable(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForValueLabels(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForListChoices();
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryByUser(user);
    }

    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        changeEventManager.registerChangeEvents(changeEvents);
    }

    //admin features for management of users.
    public ArrayList<User> getUsers(User admin) throws MacawException {
        return userManager.getUsers(admin);
    }

    public void addUser(User admin, User user) throws MacawException {
        userManager.addUser(admin, user);
    }

    public void updateUser(User admin, User user) throws MacawException {
        userManager.updateUser(admin, user);
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        userManager.deleteUsers(admin, usersToDelete);
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        return userManager.getUserIdentifier(user);
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    private void checkVariableExists(Variable variable) throws MacawException {
        variableManager.checkVariableExists(variable);
    }

    public void checkValidAdministrator(User administrator) throws MacawException {
        securityValidationService.validateAdministrator(administrator);
    }

    public void clear(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        listChoiceManager.clear();
        supportingDocumentsManager.clear();
        changeEventManager.clear();
        variableManager.clear();
        valueLabelManager.clear();
        ontologyTermManager.clear();
        userManager.clear();
    }

    public void clearAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        changeEventManager.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        return changeEventManager.getAllChanges();
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        return variableManager.getAlternativeVariable(targetVariable);
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// DemonstrationCurationService_15Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getCleaningStates(User)} method.
*/
class DemonstrationCurationService_15Test {","// DemonstrationCurationService_15Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getCleaningStates(User)} method.
*/
class DemonstrationCurationService_15Test {
"
9764ea84-9d11-425d-af9e-bc5920203cfc,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationService_17Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 11001 tokens (7001 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// DemonstrationCurationService.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;

/**
 * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages
 * all of its data in-memory instead of in a database.  This class allows Macaw to run in
 * a demonstration mode off a pen drive without requiring the client machine to have MySQL
 * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes
 * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL
 * versions of Macaw services.  The difference in implementations make it easy to rapidly
 * isolate the causes of failed test cases.  In general, the in-memory implementation is
 * treated as the gold test standard.
 *
 * <p>
 * DemonstrationCurationService delegates implementations of the API methods to manager
 * classes for major concepts.  All of these manager classes have names that are prefixed
 * with ""InMemory"", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.
 *
 * <p>
 * The manager classes support persistence using the following policy
 * <ul>
 * <li>when an item is added to a collection, treat it as the stored copy </li>
 * <li>when calling classes request the item, return a cloned version that serves
 * as a working copy.</li>
 * </ul>
 * <p>
 * A more detailed description of how this works is given
 * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.
 *
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class DemonstrationCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    protected InMemoryListChoiceManager listChoiceManager;

    protected InMemorySupportingDocumentsManager supportingDocumentsManager;

    protected InMemoryChangeEventManager changeEventManager;

    protected InMemoryVariableManager variableManager;

    protected InMemoryValueLabelManager valueLabelManager;

    protected InMemoryOntologyTermManager ontologyTermManager;

    protected InMemoryUserManager userManager;

    protected InMemoryVariableFilter variableFilter;

    protected InMemorySupportingDocumentFilter supportingDocumentFilter;

    protected InMemoryOntologyTermFilter ontologyTermFilter;

    protected MacawSecurityAPI securityValidationService;

    protected User admin;

    protected Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public DemonstrationCurationService() {
        init(false);
    }

    public DemonstrationCurationService(boolean automatedTestingMode) {
        init(automatedTestingMode);
    }

    private void init(boolean automatedTestingMode) {
        admin = new User(""admin"", ""admin"");
        log = new Log();
        changeEventManager = new InMemoryChangeEventManager();
        userManager = new InMemoryUserManager(changeEventManager, log, admin);
        securityValidationService = userManager;
        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);
        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);
        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);
        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);
        variableFilter = new InMemoryVariableFilter();
        supportingDocumentFilter = new InMemorySupportingDocumentFilter();
        ontologyTermFilter = new InMemoryOntologyTermFilter();
        try {
            User jsmith = new User(""jsmith"", ""cool"");
            if (automatedTestingMode == false) {
                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);
                dummyDataProvider.populateDatabase(jsmith);
            }
        } catch (MacawException exception) {
            exception.printErrors();
            Log log = new Log();
            log.logException(exception);
        }
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    //Interface: MacawDatabase
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addRawVariable(user, rawVariable);
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteRawVariables(user, rawVariables);
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateRawVariable(user, rawVariable);
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addDerivedVariable(user, derivedVariable);
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteDerivedVariables(user, derivedVariables);
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateDerivedVariable(user, derivedVariable);
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getRawVariableIdentifier(user, rawVariable);
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        return variableManager.getVariable(user, variableName);
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getSourceVariables(user, derivedVariable);
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        return valueLabelManager.getValueLabels(user, originalVariable);
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {
        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getStudyYears(user);
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getSummaryDataForAllVariables(user);
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        return variableManager.getCompleteVariableData(user, variableSummary);
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getOriginalVariable(variable);
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        return allSupportingDocuments;
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);
        return results;
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);
    }

    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategories(user);
    }

    /**
     * methods for managing categories
     */
    public void addCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCategory(user, dataLibrary);
    }

    public void updateCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCategory(user, dataLibrary, variables);
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCategories(user, categories, variables);
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategoryIdentifier(category, variable);
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStates(user);
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCleaningState(user, cleaningState);
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCleaningState(user, cleaningState, variables);
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStates(user);
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAvailabilityState(user, availabilityState);
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePaths(user);
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAliasFilePath(user, aliasFilePath);
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        inMemoryVariableFilter.setVariables(variables);
        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);
        return results;
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getFilePathFromAlias(currentAlias);
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);
        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {
        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();
        checkValidUser(user);
        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);
        ontologyTermFilter.setOntologyTerms(allOntologyTerms);
        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getAllOntologyTerms(user);
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getAssociatedOntologyTerms(user, variable);
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.addOntologyTerm(user, ontologyTerm);
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);
        variableManager.updateOntologyTermReferences(ontologyTerm);
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);
        variableManager.deleteOntologyTermReferences(ontologyTerms);
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.associateOntologyTerms(user, variable, ontologyTerms);
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForVariable(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForValueLabels(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForListChoices();
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryByUser(user);
    }

    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        changeEventManager.registerChangeEvents(changeEvents);
    }

    //admin features for management of users.
    public ArrayList<User> getUsers(User admin) throws MacawException {
        return userManager.getUsers(admin);
    }

    public void addUser(User admin, User user) throws MacawException {
        userManager.addUser(admin, user);
    }

    public void updateUser(User admin, User user) throws MacawException {
        userManager.updateUser(admin, user);
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        userManager.deleteUsers(admin, usersToDelete);
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        return userManager.getUserIdentifier(user);
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    private void checkVariableExists(Variable variable) throws MacawException {
        variableManager.checkVariableExists(variable);
    }

    public void checkValidAdministrator(User administrator) throws MacawException {
        securityValidationService.validateAdministrator(administrator);
    }

    public void clear(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        listChoiceManager.clear();
        supportingDocumentsManager.clear();
        changeEventManager.clear();
        variableManager.clear();
        valueLabelManager.clear();
        ontologyTermManager.clear();
        userManager.clear();
    }

    public void clearAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        changeEventManager.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        return changeEventManager.getAllChanges();
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        return variableManager.getAlternativeVariable(targetVariable);
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// DemonstrationCurationService_17Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getAvailabilityStates(User)} method.
*/
class DemonstrationCurationService_17Test {","// DemonstrationCurationService_17Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getAvailabilityStates(User)} method.
*/
class DemonstrationCurationService_17Test {
"
87821082-e058-4b53-843f-4d4b4a3ebda0,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/DemonstrationCurationService_19Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 11003 tokens (7003 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// DemonstrationCurationService.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;

/**
 * Implements the {@link macaw.businessLayer.MacawCurationAPI} interface as a service which manages
 * all of its data in-memory instead of in a database.  This class allows Macaw to run in
 * a demonstration mode off a pen drive without requiring the client machine to have MySQL
 * installed.  DemonstrationCurationService is useful in testing as well.  All of the classes
 * in the <code> macaw.test</code> sub-packages can be applied to either in-memory or SQL
 * versions of Macaw services.  The difference in implementations make it easy to rapidly
 * isolate the causes of failed test cases.  In general, the in-memory implementation is
 * treated as the gold test standard.
 *
 * <p>
 * DemonstrationCurationService delegates implementations of the API methods to manager
 * classes for major concepts.  All of these manager classes have names that are prefixed
 * with ""InMemory"", eg: {@link macaw.persistenceLayer.demo.InMemoryVariableManager}.
 *
 * <p>
 * The manager classes support persistence using the following policy
 * <ul>
 * <li>when an item is added to a collection, treat it as the stored copy </li>
 * <li>when calling classes request the item, return a cloned version that serves
 * as a working copy.</li>
 * </ul>
 * <p>
 * A more detailed description of how this works is given
 * in {@link macaw.persistenceLayer.demo.InMemorySupportingDocumentsManager}.
 *
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class DemonstrationCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    protected InMemoryListChoiceManager listChoiceManager;

    protected InMemorySupportingDocumentsManager supportingDocumentsManager;

    protected InMemoryChangeEventManager changeEventManager;

    protected InMemoryVariableManager variableManager;

    protected InMemoryValueLabelManager valueLabelManager;

    protected InMemoryOntologyTermManager ontologyTermManager;

    protected InMemoryUserManager userManager;

    protected InMemoryVariableFilter variableFilter;

    protected InMemorySupportingDocumentFilter supportingDocumentFilter;

    protected InMemoryOntologyTermFilter ontologyTermFilter;

    protected MacawSecurityAPI securityValidationService;

    protected User admin;

    protected Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public DemonstrationCurationService() {
        init(false);
    }

    public DemonstrationCurationService(boolean automatedTestingMode) {
        init(automatedTestingMode);
    }

    private void init(boolean automatedTestingMode) {
        admin = new User(""admin"", ""admin"");
        log = new Log();
        changeEventManager = new InMemoryChangeEventManager();
        userManager = new InMemoryUserManager(changeEventManager, log, admin);
        securityValidationService = userManager;
        ontologyTermManager = new InMemoryOntologyTermManager(changeEventManager);
        supportingDocumentsManager = new InMemorySupportingDocumentsManager(changeEventManager);
        listChoiceManager = new InMemoryListChoiceManager(changeEventManager);
        variableManager = new InMemoryVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, supportingDocumentsManager);
        valueLabelManager = new InMemoryValueLabelManager(changeEventManager);
        variableFilter = new InMemoryVariableFilter();
        supportingDocumentFilter = new InMemorySupportingDocumentFilter();
        ontologyTermFilter = new InMemoryOntologyTermFilter();
        try {
            User jsmith = new User(""jsmith"", ""cool"");
            if (automatedTestingMode == false) {
                DummyDataProvider dummyDataProvider = new DummyDataProvider(this, admin);
                dummyDataProvider.populateDatabase(jsmith);
            }
        } catch (MacawException exception) {
            exception.printErrors();
            Log log = new Log();
            log.logException(exception);
        }
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    //Interface: MacawDatabase
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addRawVariable(user, rawVariable);
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteRawVariables(user, rawVariables);
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateRawVariable(user, rawVariable);
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.addDerivedVariable(user, derivedVariable);
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        variableManager.deleteDerivedVariables(user, derivedVariables);
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        variableManager.updateDerivedVariable(user, derivedVariable);
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getRawVariableIdentifier(user, rawVariable);
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getDerivedVariableIdentifier(user, derivedVariable);
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        return variableManager.getVariable(user, variableName);
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        return variableManager.getSourceVariables(user, derivedVariable);
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        variableManager.associateSourceVariables(user, derivedVariable, sourceVariablesToAdd);
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSourceVariables(user, derivedVariable, sourceVariablesToDelete);
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        return valueLabelManager.getValueLabels(user, originalVariable);
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.addValueLabels(user, originalVariable, valueLabels);
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.updateValueLabels(user, originalVariable, valueLabels);
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        Variable originalVariable = variableManager.getOriginalVariable(variable);
        valueLabelManager.deleteValueLabels(user, originalVariable, valueLabels);
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) {
        return valueLabelManager.getValueLabelIdentifier(variable, valueLabel);
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getStudyYears(user);
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        return variableManager.getSummaryDataForAllVariables(user);
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        return variableManager.getCompleteVariableData(user, variableSummary);
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getOriginalVariable(variable);
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        return allSupportingDocuments;
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        checkVariableExists(variable);
        ArrayList<SupportingDocument> results = variableManager.getSupportingDocuments(user, variable);
        return results;
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.addSupportingDocument(user, supportingDocument);
    }

    public void updateSupportingDocument(User user, SupportingDocument revisedSupportingDocument) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.updateSupportingDocument(user, revisedSupportingDocument);
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        supportingDocumentsManager.deleteSupportingDocuments(user, supportingDocuments);
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        return supportingDocumentsManager.getSupportingDocumentIdentifier(supportingDocument);
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.associateSupportingDocuments(user, variable, supportingDocuments);
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateSupportingDocuments(user, variable, supportingDocuments);
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategories(user);
    }

    /**
     * methods for managing categories
     */
    public void addCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCategory(user, dataLibrary);
    }

    public void updateCategory(User user, Category dataLibrary) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCategory(user, dataLibrary, variables);
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCategories(user, categories, variables);
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCategoryIdentifier(category, variable);
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStates(user);
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addCleaningState(user, cleaningState);
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateCleaningState(user, cleaningState, variables);
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteCleaningStates(user, cleaningStates, variables);
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getCleaningStateIdentifier(cleaningState, variable);
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStates(user);
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAvailabilityState(user, availabilityState);
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAvailabilityState(user, availabilityState, variables);
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStatesToDelete) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAvailabilityStates(user, availabilityStatesToDelete, variables);
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAvailabilityStateIdentifier(availabilityState, variable);
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePaths(user);
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        listChoiceManager.addAliasFilePath(user, aliasFilePath);
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.updateAliasFilePath(user, aliasFilePath, variables);
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        listChoiceManager.deleteAliasFilePaths(user, aliasFilePaths, variables);
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getAliasFilePathIdentifier(aliasFilePath, variable);
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        InMemoryVariableFilter inMemoryVariableFilter = new InMemoryVariableFilter();
        ArrayList<Variable> variables = variableManager.getOriginalVariables(user);
        inMemoryVariableFilter.setVariables(variables);
        ArrayList<VariableSummary> results = inMemoryVariableFilter.filterVariableSummaries(user, searchText, year, category, variableTypeFilter);
        return results;
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        return listChoiceManager.getFilePathFromAlias(currentAlias);
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitleFilter, String documentCodeFilter) throws MacawException {
        checkValidUser(user);
        ArrayList<SupportingDocument> allSupportingDocuments = supportingDocumentsManager.getAllSupportingDocuments(user);
        supportingDocumentFilter.setSupportingDocuments(allSupportingDocuments);
        return supportingDocumentFilter.filterSupportingDocuments(user, documentTitleFilter, documentCodeFilter);
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String termFilter, String descriptionFilter) throws MacawException {
        ArrayList<OntologyTerm> results = new ArrayList<OntologyTerm>();
        checkValidUser(user);
        ArrayList<OntologyTerm> allOntologyTerms = ontologyTermManager.getAllOntologyTerms(user);
        ontologyTermFilter.setOntologyTerms(allOntologyTerms);
        return ontologyTermFilter.filterOntologyTerms(user, termFilter, descriptionFilter);
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getAllOntologyTerms(user);
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return variableManager.getAssociatedOntologyTerms(user, variable);
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.addOntologyTerm(user, ontologyTerm);
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.updateOntologyTerm(user, ontologyTerm);
        variableManager.updateOntologyTermReferences(ontologyTerm);
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        ontologyTermManager.deleteOntologyTerms(user, ontologyTerms);
        variableManager.deleteOntologyTermReferences(ontologyTerms);
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        return ontologyTermManager.getOntologyTermIdentifier(ontologyTerm);
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.associateOntologyTerms(user, variable, ontologyTerms);
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        variableManager.disassociateOntologyTerms(user, variable, ontologyTerms);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForVariable(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForSupportingDocument(user, supportingDocument);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForValueLabels(user, variable);
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryForListChoices();
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        return changeEventManager.getChangeHistoryByUser(user);
    }

    public void addChangeEvents(MacawChangeEvent changeEvent) throws MacawException {
        ArrayList<MacawChangeEvent> changeEvents = new ArrayList<MacawChangeEvent>();
        changeEvents.add(changeEvent);
        changeEventManager.registerChangeEvents(changeEvents);
    }

    //admin features for management of users.
    public ArrayList<User> getUsers(User admin) throws MacawException {
        return userManager.getUsers(admin);
    }

    public void addUser(User admin, User user) throws MacawException {
        userManager.addUser(admin, user);
    }

    public void updateUser(User admin, User user) throws MacawException {
        userManager.updateUser(admin, user);
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        userManager.deleteUsers(admin, usersToDelete);
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        return userManager.getUserIdentifier(user);
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    private void checkVariableExists(Variable variable) throws MacawException {
        variableManager.checkVariableExists(variable);
    }

    public void checkValidAdministrator(User administrator) throws MacawException {
        securityValidationService.validateAdministrator(administrator);
    }

    public void clear(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        listChoiceManager.clear();
        supportingDocumentsManager.clear();
        changeEventManager.clear();
        variableManager.clear();
        valueLabelManager.clear();
        ontologyTermManager.clear();
        userManager.clear();
    }

    public void clearAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        changeEventManager.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        userManager.validateAdministrator(admin);
        return changeEventManager.getAllChanges();
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        return variableManager.getAlternativeVariable(targetVariable);
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        variableManager.setAlternativeVariable(user, targetVariable, alternativeVariable);
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// DemonstrationCurationService_19Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getAliasFilePaths(User)} method.
*/
class DemonstrationCurationService_19Test {","// DemonstrationCurationService_19Test.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.persistenceLayer.DummyDataProvider;
import macaw.system.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DemonstrationCurationService}.
* It contains ten unit test cases for the {@link DemonstrationCurationService#getAliasFilePaths(User)} method.
*/
class DemonstrationCurationService_19Test {
"
cmpl-6u3G6oUdPMnhl4D2oViG8hwjubl5b,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryChangeEventManager_0Test.java,93.45909357070923,length,"// InMemoryChangeEventManager.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;

/**
 * A manager class that is called by various classes to make a record of editing changes
 * made to instances of objects found in <code>macaw.model</code>.  It stores records of
 * these changes in memory.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class InMemoryChangeEventManager {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private ArrayList<MacawChangeEvent> changeEvents;

    // ==========================================
    // Section Construction
    // ==========================================
    public InMemoryChangeEventManager() {
        changeEvents = new ArrayList<MacawChangeEvent>();
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * provides a collection of change events that are associated with the curation of
     * a given variable.  These changes can include:
     * <ul>
     * <li>adding or deleting a variable</li>
     * <li>changing form fields for a variable</li>
     * <li>associating and disassociating ontology terms</li>
     * <li>associating and disassociating supporting documents</li>
     * <li>associating and disassociating source variables with a derived variable</li>
     * </ul>
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            Integer currentVariableOwnerID = changeEvent.getVariableOwnerID();
            if (currentVariableOwnerID != null) {
                if ((currentVariableOwnerID.intValue() > 0) && (currentVariableOwnerID.intValue() == variableID)) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides the collection of change events associated with curating a given
     * supporting document.
     *
     * @param user
     * @param supportingDocument the target of change.
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        int supportingDocumentID = supportingDocument.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.SUPPORTING_DOCUMENT) {
                int changedObjectIdentifier = changeEvent.getChangedObjectIdentifier();
                if (changedObjectIdentifier == supportingDocumentID) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides a collection of change events for value labels associated with
     * a given variable
     * @param user
     * @param variable - the variable that owns the value labels
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getVariableOwnerID().equals(variableID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /*
	 * provides a collection of change events made by a given user.  The results are
	 * sorted in reverse chronological order
	 */
    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getUserID().equals(userID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * retrieve all change events that are associated with curation changes made to list choice
     * classes, such as {@link macaw.businessLayer.AvailabilityState}, {@link macaw.businessLayer.CleaningState},
     * {@link macaw.businessLayer.Category} and {@link macaw.businessLayer.AliasFilePath}.
     *
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices() throws MacawException {
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.LIST_CHOICE) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * add a change event that is a result of some curation operation.
     * @param event
     * @throws MacawException
     */
    public void registerChangeEvent(MacawChangeEvent event) throws MacawException {
        changeEvents.add(event);
    }

    /**
     * add a collection of change events that are a result of some curation operation.
     * @param events
     * @throws MacawException
     */
    public void registerChangeEvents(ArrayList<MacawChangeEvent> events) throws MacawException {
        changeEvents.addAll(events);
    }

    /**
     * Sort change events by descending order of dates.
     * @param changeEvents
     * @return
     */
    private ArrayList<MacawChangeEvent> sortChangeEventsByDate(ArrayList<MacawChangeEvent> changeEvents) {
        ArrayList<MacawChangeEvent> sortedChangeEvents = new ArrayList<MacawChangeEvent>();
        //sort should be improved later on...
        for (MacawChangeEvent unsortedChangeEvent : changeEvents) {
            Date unsortedDate = unsortedChangeEvent.getDate();
            int numberOfSortedEvents = sortedChangeEvents.size();
            int sortPosition = 0;
            for (sortPosition = 0; sortPosition < numberOfSortedEvents; sortPosition++) {
                Date sortedDate = sortedChangeEvents.get(sortPosition).getDate();
                if (unsortedDate.compareTo(sortedDate) < 0) {
                    break;
                }
            }
            sortedChangeEvents.add(sortPosition, unsortedChangeEvent);
        }
        return sortedChangeEvents;
    }

    /**
     * remove all change events
     */
    public void clear() {
        changeEvents.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges() {
        return changeEvents;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// InMemoryChangeEventManager_0Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForVariable(User, Variable)} method.
*/
class InMemoryChangeEventManager_0Test {","// InMemoryChangeEventManager_0Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForVariable(User, Variable)} method.
*/
class InMemoryChangeEventManager_0Test {

	/**
	* Test case 1:
	* This test case checks if the method returns an empty list when there are no change events.
	*/
	@Test
	void testCase1() {
		InMemoryChangeEventManager changeEventManager = new InMemoryChangeEventManager();
		User user = new User(""userID"", ""userName"", ""userPassword"", ""userEmail"", ""userOrganisation"");
		Variable variable = new Variable(""variableName"", ""variableDescription"", ""variableType"", ""variableUnit"", ""variableFormat"", ""variableMissingValue"", ""variableSource"", ""variableDerivation"", ""variableComment"", ""variableCleaning"", ""variableAvailability"", ""variableCategory"", ""variableAliasFilePath"");
		ArrayList<MacawChangeEvent> changeEvents = changeEventManager.getChangeHistoryForVariable(user, variable);
		assertEquals(0, changeEvents.size());
	}
	
	/**
	* Test case 2:
	* This test case checks if the method returns an empty list when there are no change events for the given variable.
	*/
	@Test
	void testCase2() {
		InMemoryChangeEventManager changeEventManager = new InMemoryChangeEventManager();
		User user = new User(""userID"", ""userName"", ""userPassword"", ""userEmail"", ""userOrganisation"");
		Variable variable = new Variable(""variableName"", ""variableDescription"", ""variableType"", ""variableUnit"", ""variableFormat"", ""variableMissingValue"", ""variableSource"", ""variableDerivation"", ""variableComment"", ""variableCleaning"", ""variableAvailability"", ""variableCategory"", ""variableAliasFilePath"");
		MacawChangeEvent changeEvent = new MacawChangeEvent(user, ChangeEventType.VARIABLE, ""changeDescription"", new Date(), variable, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null"
cmpl-6u3Hb9dvnrQYngqlRpGN8MKkyDUc5,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryChangeEventManager_1Test.java,99.50000929832458,length,"// InMemoryChangeEventManager.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;

/**
 * A manager class that is called by various classes to make a record of editing changes
 * made to instances of objects found in <code>macaw.model</code>.  It stores records of
 * these changes in memory.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class InMemoryChangeEventManager {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private ArrayList<MacawChangeEvent> changeEvents;

    // ==========================================
    // Section Construction
    // ==========================================
    public InMemoryChangeEventManager() {
        changeEvents = new ArrayList<MacawChangeEvent>();
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * provides a collection of change events that are associated with the curation of
     * a given variable.  These changes can include:
     * <ul>
     * <li>adding or deleting a variable</li>
     * <li>changing form fields for a variable</li>
     * <li>associating and disassociating ontology terms</li>
     * <li>associating and disassociating supporting documents</li>
     * <li>associating and disassociating source variables with a derived variable</li>
     * </ul>
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            Integer currentVariableOwnerID = changeEvent.getVariableOwnerID();
            if (currentVariableOwnerID != null) {
                if ((currentVariableOwnerID.intValue() > 0) && (currentVariableOwnerID.intValue() == variableID)) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides the collection of change events associated with curating a given
     * supporting document.
     *
     * @param user
     * @param supportingDocument the target of change.
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        int supportingDocumentID = supportingDocument.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.SUPPORTING_DOCUMENT) {
                int changedObjectIdentifier = changeEvent.getChangedObjectIdentifier();
                if (changedObjectIdentifier == supportingDocumentID) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides a collection of change events for value labels associated with
     * a given variable
     * @param user
     * @param variable - the variable that owns the value labels
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getVariableOwnerID().equals(variableID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /*
	 * provides a collection of change events made by a given user.  The results are
	 * sorted in reverse chronological order
	 */
    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getUserID().equals(userID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * retrieve all change events that are associated with curation changes made to list choice
     * classes, such as {@link macaw.businessLayer.AvailabilityState}, {@link macaw.businessLayer.CleaningState},
     * {@link macaw.businessLayer.Category} and {@link macaw.businessLayer.AliasFilePath}.
     *
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices() throws MacawException {
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.LIST_CHOICE) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * add a change event that is a result of some curation operation.
     * @param event
     * @throws MacawException
     */
    public void registerChangeEvent(MacawChangeEvent event) throws MacawException {
        changeEvents.add(event);
    }

    /**
     * add a collection of change events that are a result of some curation operation.
     * @param events
     * @throws MacawException
     */
    public void registerChangeEvents(ArrayList<MacawChangeEvent> events) throws MacawException {
        changeEvents.addAll(events);
    }

    /**
     * Sort change events by descending order of dates.
     * @param changeEvents
     * @return
     */
    private ArrayList<MacawChangeEvent> sortChangeEventsByDate(ArrayList<MacawChangeEvent> changeEvents) {
        ArrayList<MacawChangeEvent> sortedChangeEvents = new ArrayList<MacawChangeEvent>();
        //sort should be improved later on...
        for (MacawChangeEvent unsortedChangeEvent : changeEvents) {
            Date unsortedDate = unsortedChangeEvent.getDate();
            int numberOfSortedEvents = sortedChangeEvents.size();
            int sortPosition = 0;
            for (sortPosition = 0; sortPosition < numberOfSortedEvents; sortPosition++) {
                Date sortedDate = sortedChangeEvents.get(sortPosition).getDate();
                if (unsortedDate.compareTo(sortedDate) < 0) {
                    break;
                }
            }
            sortedChangeEvents.add(sortPosition, unsortedChangeEvent);
        }
        return sortedChangeEvents;
    }

    /**
     * remove all change events
     */
    public void clear() {
        changeEvents.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges() {
        return changeEvents;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// InMemoryChangeEventManager_1Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForSupportingDocument(User, SupportingDocument)} method.
*/
class InMemoryChangeEventManager_1Test {","// InMemoryChangeEventManager_1Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForSupportingDocument(User, SupportingDocument)} method.
*/
class InMemoryChangeEventManager_1Test {

	/**
	* Test case 1:
	* This test case is used to test the {@link InMemoryChangeEventManager#getChangeHistoryForSupportingDocument(User, SupportingDocument)} method.
	* It checks if the method returns the correct change events for a given supporting document.
	* @throws MacawException
	*/
	@Test
	void testGetChangeHistoryForSupportingDocument_1() throws MacawException {
		InMemoryChangeEventManager changeEventManager = new InMemoryChangeEventManager();
		User user = new User(""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user"
cmpl-6u3JDJghGm8mCvVFwaQERs5V0y60n,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryChangeEventManager_2Test.java,95.89892029762268,length,"// InMemoryChangeEventManager.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;

/**
 * A manager class that is called by various classes to make a record of editing changes
 * made to instances of objects found in <code>macaw.model</code>.  It stores records of
 * these changes in memory.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class InMemoryChangeEventManager {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private ArrayList<MacawChangeEvent> changeEvents;

    // ==========================================
    // Section Construction
    // ==========================================
    public InMemoryChangeEventManager() {
        changeEvents = new ArrayList<MacawChangeEvent>();
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    /**
     * provides a collection of change events that are associated with the curation of
     * a given variable.  These changes can include:
     * <ul>
     * <li>adding or deleting a variable</li>
     * <li>changing form fields for a variable</li>
     * <li>associating and disassociating ontology terms</li>
     * <li>associating and disassociating supporting documents</li>
     * <li>associating and disassociating source variables with a derived variable</li>
     * </ul>
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            Integer currentVariableOwnerID = changeEvent.getVariableOwnerID();
            if (currentVariableOwnerID != null) {
                if ((currentVariableOwnerID.intValue() > 0) && (currentVariableOwnerID.intValue() == variableID)) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides the collection of change events associated with curating a given
     * supporting document.
     *
     * @param user
     * @param supportingDocument the target of change.
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        int supportingDocumentID = supportingDocument.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.SUPPORTING_DOCUMENT) {
                int changedObjectIdentifier = changeEvent.getChangedObjectIdentifier();
                if (changedObjectIdentifier == supportingDocumentID) {
                    results.add(changeEvent);
                }
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * provides a collection of change events for value labels associated with
     * a given variable
     * @param user
     * @param variable - the variable that owns the value labels
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        int variableID = variable.getIdentifier();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getVariableOwnerID().equals(variableID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /*
	 * provides a collection of change events made by a given user.  The results are
	 * sorted in reverse chronological order
	 */
    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        String userID = user.getUserID();
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getUserID().equals(userID)) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * retrieve all change events that are associated with curation changes made to list choice
     * classes, such as {@link macaw.businessLayer.AvailabilityState}, {@link macaw.businessLayer.CleaningState},
     * {@link macaw.businessLayer.Category} and {@link macaw.businessLayer.AliasFilePath}.
     *
     * @throws MacawException
     */
    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices() throws MacawException {
        ArrayList<MacawChangeEvent> results = new ArrayList<MacawChangeEvent>();
        for (MacawChangeEvent changeEvent : changeEvents) {
            if (changeEvent.getChangeType() == ChangeEventType.LIST_CHOICE) {
                results.add(changeEvent);
            }
        }
        return sortChangeEventsByDate(results);
    }

    /**
     * add a change event that is a result of some curation operation.
     * @param event
     * @throws MacawException
     */
    public void registerChangeEvent(MacawChangeEvent event) throws MacawException {
        changeEvents.add(event);
    }

    /**
     * add a collection of change events that are a result of some curation operation.
     * @param events
     * @throws MacawException
     */
    public void registerChangeEvents(ArrayList<MacawChangeEvent> events) throws MacawException {
        changeEvents.addAll(events);
    }

    /**
     * Sort change events by descending order of dates.
     * @param changeEvents
     * @return
     */
    private ArrayList<MacawChangeEvent> sortChangeEventsByDate(ArrayList<MacawChangeEvent> changeEvents) {
        ArrayList<MacawChangeEvent> sortedChangeEvents = new ArrayList<MacawChangeEvent>();
        //sort should be improved later on...
        for (MacawChangeEvent unsortedChangeEvent : changeEvents) {
            Date unsortedDate = unsortedChangeEvent.getDate();
            int numberOfSortedEvents = sortedChangeEvents.size();
            int sortPosition = 0;
            for (sortPosition = 0; sortPosition < numberOfSortedEvents; sortPosition++) {
                Date sortedDate = sortedChangeEvents.get(sortPosition).getDate();
                if (unsortedDate.compareTo(sortedDate) < 0) {
                    break;
                }
            }
            sortedChangeEvents.add(sortPosition, unsortedChangeEvent);
        }
        return sortedChangeEvents;
    }

    /**
     * remove all change events
     */
    public void clear() {
        changeEvents.clear();
    }

    public ArrayList<MacawChangeEvent> getAllChanges() {
        return changeEvents;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// InMemoryChangeEventManager_2Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForValueLabels(User, Variable)} method.
*/
class InMemoryChangeEventManager_2Test {","// InMemoryChangeEventManager_2Test.java
package macaw.persistenceLayer.demo;

import macaw.system.*;
import macaw.businessLayer.*;
import java.util.ArrayList;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryChangeEventManager}.
* It contains ten unit test cases for the {@link InMemoryChangeEventManager#getChangeHistoryForValueLabels(User, Variable)} method.
*/
class InMemoryChangeEventManager_2Test {

	/**
	* Test case 1:
	* This test case checks if the method returns an empty list when there are no change events.
	*/
	@Test
	void testGetChangeHistoryForValueLabels_1() {
		InMemoryChangeEventManager manager = new InMemoryChangeEventManager();
		User user = new User(""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user1"", ""user"
cmpl-6u3Kk8OFkKdChmjkLUjI2I1kazDpQ,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryOntologyTermFilter.java,64.89727282524109,stop,"// InMemoryOntologyTermFilter.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.util.ValidationUtility;
import java.util.ArrayList;

/**
 * holds code used to support the search feature that lets end-users
 * select an ontology term from an existing list.  When the list
 * pops up (see {@link macaw.presentationLayer.OntologyTermsPanel}) and users press the
 * ""Select"" button, a new dialog pops up showing all the ontology terms that
 * are known in the system.  This filter helps limit the list of all ontology
 * terms so that users can rapidly find the one they want to reference for a
 * variable record.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class InMemoryOntologyTermFilter {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private ArrayList<OntologyTerm> ontologyTerms;

    // ==========================================
    // Section Construction
    // ==========================================
    public InMemoryOntologyTermFilter() {
        ontologyTerms = new ArrayList<OntologyTerm>();
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    public void setOntologyTerms(ArrayList<OntologyTerm> ontologyTerms) {
        this.ontologyTerms = ontologyTerms;
    }

    /**
     * finds ontology terms that match based on term and based on description.
     *
     * @param user
     * @param ontologyTermFilter - the search phrase that is applied to the term field
     * of an ontology term object.
     * @param ontologyDescriptionFilter - the search phrase that is applied to the
     * description field of the ontology term object.
     * @throws MacawException
     */
    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String ontologyTermFilter, String ontologyDescriptionFilter) throws MacawException {
        if ((ValidationUtility.isEmptyValue(ontologyTermFilter) == true) && (ValidationUtility.isEmptyValue(ontologyDescriptionFilter) == true)) {
            String errorMessage = MacawMessages.getMessage(""ontologyTermFilter.error"");
            MacawException exception = new MacawException(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, errorMessage);
            throw exception;
        }
        ArrayList<OntologyTerm> termResults = filterByTerm(ontologyTermFilter, ontologyTerms);
        ArrayList<OntologyTerm> descriptionFilterResults = filterByDescription(ontologyDescriptionFilter, termResults);
        ArrayList<OntologyTerm> finalResults = new ArrayList<OntologyTerm>();
        //put them in an alphabetical order
        for (OntologyTerm currentOntologyTerm : descriptionFilterResults) {
            String currentDocumentDisplayName = currentOntologyTerm.getDisplayName();
            int insertionIndex = -1;
            int numberOfResults = finalResults.size();
            for (int i = 0; i < numberOfResults; i++) {
                String currentResultDisplayName = finalResults.get(i).getDisplayName();
                if (currentDocumentDisplayName.compareTo(currentResultDisplayName) > 0) {
                    insertionIndex = i;
                    break;
                }
            }
            OntologyTerm cloneOntologyTerm = (OntologyTerm) currentOntologyTerm.clone();
            if (insertionIndex == -1) {
                //item belongs at the end
                finalResults.add(cloneOntologyTerm);
            } else {
                finalResults.add(insertionIndex, cloneOntologyTerm);
            }
        }
        return finalResults;
    }

    private ArrayList<OntologyTerm> filterByTerm(String ontologyTermFilter, ArrayList<OntologyTerm> results) {
        ArrayList<OntologyTerm> refinedResults = new ArrayList<OntologyTerm>();
        if (ValidationUtility.isEmptyValue(ontologyTermFilter) == true) {
            //return everything so just return the original result list
            return results;
        }
        SearchUtility searchUtility = new SearchUtility();
        searchUtility.setDefaultSearchPattern(ontologyTermFilter);
        for (OntologyTerm ontologyTerm : results) {
            String term = ontologyTerm.getTerm();
            if (searchUtility.valueContainsPattern(term) == true) {
                refinedResults.add(ontologyTerm);
            }
        }
        return refinedResults;
    }

    private ArrayList<OntologyTerm> filterByDescription(String descriptionFilter, ArrayList<OntologyTerm> results) {
        if (ValidationUtility.isEmptyValue(descriptionFilter) == true) {
            //return everything so just return the original result list
            return results;
        }
        SearchUtility searchUtility = new SearchUtility();
        searchUtility.setDefaultSearchPattern(descriptionFilter);
        ArrayList<OntologyTerm> refinedResults = new ArrayList<OntologyTerm>();
        for (OntologyTerm currentResult : results) {
            String currentDescription = currentResult.getDescription();
            if (searchUtility.valueContainsPattern(currentDescription) == true) {
                refinedResults.add(currentResult);
            }
        }
        return refinedResults;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// InMemoryOntologyTermFilterTest.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.util.ValidationUtility;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryOntologyTermFilter}.
* It contains ten unit test cases for the {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
*/
class InMemoryOntologyTermFilterTest {","// InMemoryOntologyTermFilterTest.java
package macaw.persistenceLayer.demo;

import macaw.businessLayer.*;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.util.ValidationUtility;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryOntologyTermFilter}.
* It contains ten unit test cases for the {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
*/
class InMemoryOntologyTermFilterTest {

	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is null and the ontologyDescriptionFilter is null.
	* It should throw a MacawException.
	*/
	@Test
	void testFilterOntologyTerms_1() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = null;
		String ontologyDescriptionFilter = null;
		MacawException exception = assertThrows(MacawException.class, () -> {
			inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		});
		assertEquals(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, exception.getErrorType());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is empty and the ontologyDescriptionFilter is empty.
	* It should throw a MacawException.
	*/
	@Test
	void testFilterOntologyTerms_2() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = """";
		String ontologyDescriptionFilter = """";
		MacawException exception = assertThrows(MacawException.class, () -> {
			inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		});
		assertEquals(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, exception.getErrorType());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is null and the ontologyDescriptionFilter is empty.
	* It should throw a MacawException.
	*/
	@Test
	void testFilterOntologyTerms_3() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = null;
		String ontologyDescriptionFilter = """";
		MacawException exception = assertThrows(MacawException.class, () -> {
			inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		});
		assertEquals(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, exception.getErrorType());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is empty and the ontologyDescriptionFilter is null.
	* It should throw a MacawException.
	*/
	@Test
	void testFilterOntologyTerms_4() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = """";
		String ontologyDescriptionFilter = null;
		MacawException exception = assertThrows(MacawException.class, () -> {
			inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		});
		assertEquals(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, exception.getErrorType());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is null and the ontologyDescriptionFilter is not null.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_5() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = null;
		String ontologyDescriptionFilter = ""description"";
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is empty and the ontologyDescriptionFilter is not null.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_6() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = """";
		String ontologyDescriptionFilter = ""description"";
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is not null and the ontologyDescriptionFilter is null.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_7() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = ""term"";
		String ontologyDescriptionFilter = null;
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is not null and the ontologyDescriptionFilter is empty.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_8() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = ""term"";
		String ontologyDescriptionFilter = """";
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(0, result.size());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is not null and the ontologyDescriptionFilter is not null.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_9() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = ""term"";
		String ontologyDescriptionFilter = ""description"";
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(1, result.size());
	}
	
	/**
	* Test case for {@link InMemoryOntologyTermFilter#filterOntologyTerms(User, String, String)} method.
	* It tests the case when the ontologyTermFilter is not null and the ontologyDescriptionFilter is not null.
	* It should return an empty list.
	*/
	@Test
	void testFilterOntologyTerms_10() throws MacawException {
		InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
		User user = new User();
		String ontologyTermFilter = ""term"";
		String ontologyDescriptionFilter = ""description"";
		ArrayList<OntologyTerm> ontologyTerms = new ArrayList<OntologyTerm>();
		OntologyTerm ontologyTerm = new OntologyTerm();
		ontologyTerm.setTerm(""term"");
		ontologyTerm.setDescription(""description"");
		ontologyTerms.add(ontologyTerm);
		inMemoryOntologyTermFilter.setOntologyTerms(ontologyTerms);
		ArrayList<OntologyTerm> result = inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
		assertEquals(1, result.size());
	}
}</code>





A:

I think you are looking for something like this:
<code>@Test
void testFilterOntologyTerms_1() throws MacawException {
    InMemoryOntologyTermFilter inMemoryOntologyTermFilter = new InMemoryOntologyTermFilter();
    User user = new User();
    String ontologyTermFilter = null;
    String ontologyDescriptionFilter = null;
    MacawException exception = assertThrows(MacawException.class, () -&gt; {
        inMemoryOntologyTermFilter.filterOntologyTerms(user, ontologyTermFilter, ontologyDescriptionFilter);
    });
    assertEquals(MacawErrorType.NO_ONTOLOGY_TERM_FILTER, exception.getErrorType());
}
</code>
"
cmpl-6u3Ln4wsb3AoTXMCDI0cxmiUiFgXs,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/demo/InMemoryUserManager_0Test.java,104.82849287986755,length,"// InMemoryUserManager.java
package macaw.persistenceLayer.demo;

import macaw.persistenceLayer.ChangeEventGenerator;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.businessLayer.MacawSecurityAPI;
import macaw.businessLayer.User;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * manages instances of {@link macaw.businessLayer.User} in-memory.  Note that in future
 * Macaw will rely on an external service for managing User identities.  For now,
 * Macaw uses its own built-in system for editing user data.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class InMemoryUserManager implements MacawSecurityAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private InMemoryChangeEventManager changeEventManager;

    private User admin;

    private int userKey;

    private HashMap<Integer, User> userFromIdentifier;

    // ==========================================
    // Section Construction
    // ==========================================
    public InMemoryUserManager(InMemoryChangeEventManager changeEventManager, Log log, User admin) {
        this.changeEventManager = changeEventManager;
        this.admin = admin;
        userFromIdentifier = new HashMap<Integer, User>();
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    public void validateUser(User candidateUser) throws MacawException {
        /**
         * 		if ((candidateUser.getUserID().equals(""jsmith"") == false) ||
         * 			(candidateUser.getPassword().equals(""cool"") == false)) {
         * 			String errorMessage
         * 				= MacawMessages.getMessage(""user.error.invalidUser"",
         * 											candidateUser.getUserID());
         * 			MacawException exception
         * 				= new MacawException(MacawErrorType.INVALID_USER,
         * 									 errorMessage);
         * 			throw exception;
         * 		}
         */
        /**
         * 		String candidateUserID = candidateUser.getUserID();
         * 		String candidatePassword = candidateUser.getPassword();
         *
         * 		ArrayList<User> users = new ArrayList<User>();
         * 		users.addAll(userFromIdentifier.values());
         * 		for (User currentUser : users) {
         * 			if ( (currentUser.getUserID().equals(candidateUserID) == true) &&
         * 				 (currentUser.getPassword().equals(candidatePassword) ==true)) {
         * 				return;
         * 			}
         * 		}
         *
         * 		//no user was found. Therefore, trigger an exception
         */
    }

    public void addUser(User admin, User user) throws MacawException {
        //Part I: Validate parameters
        validateAdministrator(admin);
        User.validateFields(user);
        checkUserDuplicates(user);
        //Part II: Perform add operation
        userKey++;
        user.setIdentifier(userKey);
        userFromIdentifier.put(userKey, user);
        //Part III: Record changes
        ArrayList<MacawChangeEvent> changeEvents = ChangeEventGenerator.addUserChange(admin, user);
        changeEventManager.registerChangeEvents(changeEvents);
    }

    public void updateUser(User admin, User revisedUser) throws MacawException {
        //Part I: Validate parameters
        validateAdministrator(admin);
        User.validateFields(revisedUser);
        checkUserExists(revisedUser);
        User originalUser = getOriginalUser(revisedUser);
        ArrayList<MacawChangeEvent> changeEvents = User.detectFieldChanges(admin, originalUser, revisedUser);
        //make sure at least one change has been made
        if (changeEvents.size() == 0) {
            return;
        }
        //Part II: Perform the update operation
        int identifier = revisedUser.getIdentifier();
        userFromIdentifier.remove(identifier);
        userFromIdentifier.put(identifier, revisedUser);
        //Part III: Record changes
        changeEventManager.registerChangeEvents(changeEvents);
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        //Part I: Validate Parameters
        validateAdministrator(admin);
        for (User userToDelete : usersToDelete) {
            checkUserExists(userToDelete);
        }
        //Part II: Perform delete users operation
        for (User userToDelete : usersToDelete) {
            int identifier = userToDelete.getIdentifier();
            userFromIdentifier.remove(identifier);
        }
        //Part III: Record changes
        ArrayList<MacawChangeEvent> changeEvents = ChangeEventGenerator.deleteUsersChanges(admin, usersToDelete);
        changeEventManager.registerChangeEvents(changeEvents);
    }

    /**
     * this is a utility
     */
    public ArrayList<User> getUsers(User admin) {
        ArrayList<User> users = new ArrayList<User>();
        users.addAll(userFromIdentifier.values());
        ArrayList<User> cloneUsers = new ArrayList<User>();
        for (User currentUser : users) {
            addUserInOrder(cloneUsers, currentUser);
        }
        return cloneUsers;
    }

    private void addUserInOrder(ArrayList<User> currentUserList, User userToAdd) {
        String targetUserID = userToAdd.getUserID();
        int insertionIndex = 0;
        for (insertionIndex = 0; insertionIndex < currentUserList.size(); insertionIndex++) {
            User currentUser = currentUserList.get(insertionIndex);
            String currentUserID = currentUser.getUserID();
            if (currentUserID.compareTo(targetUserID) >= 0) {
                break;
            }
        }
        User cloneUser = (User) userToAdd.clone();
        currentUserList.add(insertionIndex, cloneUser);
    }

    private User getOriginalUser(User user) {
        return userFromIdentifier.get(user.getIdentifier());
    }

    public int getUserIdentifier(User user) {
        ArrayList<User> users = new ArrayList<User>();
        users.addAll(userFromIdentifier.values());
        for (User currentUser : users) {
            if (user.hasSameDisplayName(currentUser) == true) {
                return currentUser.getIdentifier();
            }
        }
        return -1;
    }

    public User getUserFromEmail(User user, String email) throws MacawException {
        User.checkValidEmail(email);
        SearchUtility searchUtility = new SearchUtility(email);
        ArrayList<User> users = new ArrayList<User>();
        users.addAll(userFromIdentifier.values());
        for (User currentUser : users) {
            String currentEmail = currentUser.getEmail();
            if (searchUtility.valueExactlyMatches(currentEmail) == true) {
                return currentUser;
            }
        }
        return null;
    }

    public User getUserFromID(User user, String userID) throws MacawException {
        User.checkValidUserIDField(userID);
        ArrayList<User> users = new ArrayList<User>();
        users.addAll(userFromIdentifier.values());
        for (User currentUser : users) {
            String currentUserID = currentUser.getUserID();
            if (currentUserID.equals(userID) == true) {
                return currentUser;
            }
        }
        return null;
    }

    public ArrayList<User> getUnverifiedUsers(User admin) throws MacawException {
        ArrayList<User> allUsers = new ArrayList<User>();
        allUsers.addAll(userFromIdentifier.values());
        ArrayList<User> unverifiedUsers = new ArrayList<User>();
        String unverifiedValue = MacawMessages.getMessage(""user.status.unverified"");
        for (User currentUser : allUsers) {
            String currentStatus = currentUser.getStatus();
            if (currentStatus.equals(unverifiedValue) == true) {
                unverifiedUsers.add(currentUser);
            }
        }
        return unverifiedUsers;
    }

    public void clear() {
        userKey = 0;
        userFromIdentifier.clear();
    }

    // ==========================================
    // Section Errors and Validation
    // ==========================================
    public void validateAdministrator(User candidateAdmin) throws MacawException {
        if ((admin.getUserID().equals(candidateAdmin.getUserID()) == false) || (admin.getPassword().equals(candidateAdmin.getPassword()) == false)) {
            String errorMessage = MacawMessages.getMessage(""user.error.invalidAdministrator"", candidateAdmin.getDisplayName());
            MacawException exception = new MacawException(MacawErrorType.INVALID_ADMINISTRATOR, errorMessage);
            throw exception;
        }
    }

    private void checkUserExists(User candidateUser) throws MacawException {
        if (userFromIdentifier.containsKey(candidateUser.getIdentifier()) == false) {
            String errorMessage = MacawMessages.getMessage(""general.error.nonExistentItem"", candidateUser.getDisplayName());
            MacawException exception = new MacawException(MacawErrorType.NON_EXISTENT_USER, errorMessage);
            throw exception;
        }
    }

    private void checkUserDuplicates(User candidateUser) throws MacawException {
        SearchUtility displayNameSearchUtility = new SearchUtility(candidateUser.getDisplayName());
        SearchUtility emailSearchUtility = new SearchUtility(candidateUser.getEmail());
        ArrayList<User> users = new ArrayList<User>();
        users.addAll(userFromIdentifier.values());
        for (User currentUser : users) {
            String currentUserDisplayName = currentUser.getDisplayName();
            String currentEmail = currentUser.getEmail();
            if ((displayNameSearchUtility.valueExactlyMatches(currentUserDisplayName) == true) || (emailSearchUtility.valueExactlyMatches(currentEmail) == true)) {
                //duplicate display name or duplicate email found
                String errorMessage = MacawMessages.getMessage(""user.error.duplicateExists"", candidateUser.getDisplayName(), candidateUser.getEmail());
                MacawException exception = new MacawException(MacawErrorType.DUPLICATE_USER, errorMessage);
                throw exception;
            }
        }
    }
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// InMemoryUserManager_0Test.java
package macaw.persistenceLayer.demo;

import macaw.persistenceLayer.ChangeEventGenerator;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.businessLayer.MacawSecurityAPI;
import macaw.businessLayer.User;
import java.util.ArrayList;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryUserManager}.
* It contains ten unit test cases for the {@link InMemoryUserManager#getUsers(User)} method.
*/
class InMemoryUserManager_0Test {","// InMemoryUserManager_0Test.java
package macaw.persistenceLayer.demo;

import macaw.persistenceLayer.ChangeEventGenerator;
import macaw.system.*;
import macaw.util.SearchUtility;
import macaw.businessLayer.MacawSecurityAPI;
import macaw.businessLayer.User;
import java.util.ArrayList;
import java.util.HashMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InMemoryUserManager}.
* It contains ten unit test cases for the {@link InMemoryUserManager#getUsers(User)} method.
*/
class InMemoryUserManager_0Test {

		/**
		* Test case 1 for method {@link InMemoryUserManager#getUsers(User)}.
		* Test case 1 checks if the method returns an empty list when there are no users in the system.
		*/
		@Test
		void testGetUsers_1() {
				InMemoryChangeEventManager changeEventManager = new InMemoryChangeEventManager();
				Log log = new Log();
				User admin = new User(""admin"", ""admin"", ""admin"", ""admin@admin.com"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", ""admin"", """
7289b02c-144e-43c0-bad7-4a1d7cc3bf1a,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationService_15Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15416 tokens (11416 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ProductionCurationService.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;

/**
 * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service
 * which stores data in a MySQL database.  The structure of ProductionCurationService
 * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.
 * Both classes delegate handling API calls to manager classes that are each designed
 * to support a major concept from the package <code>macaw.model</code>
 * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},
 * {@link macaw.businessLayer.User})
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ProductionCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private SQLConnectionManager sqlConnectionManager;

    private SQLFilterQueries filterQueries;

    private SQLListChoiceManager listChoiceManager;

    private SQLSupportingDocumentsManager documentsManager;

    private SQLValueLabelManager valueLabelsManager;

    private SQLChangeEventManager changeEventManager;

    private SQLUserManager userManager;

    private SQLVariableManager variableManager;

    private SQLOntologyTermManager ontologyTermManager;

    private MacawSecurityAPI securityValidationService;

    private Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {
        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());
        sqlConnectionManager = new SQLConnectionManager(sessionProperties);
        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);
        securityValidationService = userManager;
        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);
        log = sessionProperties.getLog();
        userManager.setLog(log);
        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);
        documentsManager.setLog(log);
        listChoiceManager = new SQLListChoiceManager(changeEventManager);
        listChoiceManager.setLog(log);
        valueLabelsManager = new SQLValueLabelManager(changeEventManager);
        valueLabelsManager.setLog(log);
        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);
        ontologyTermManager.setLog(log);
        filterQueries = new SQLFilterQueries(log, listChoiceManager);
        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);
        variableManager.setLog(log);
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteRawVariables(connection, user, rawVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteDerivedVariables(connection, user, derivedVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            Variable variable = variableManager.getVariable(connection, variableName);
            return variable;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getOriginalVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabels(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.addSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.updateSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSourceVariables(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getStudyYears(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSummaryDataForAllVariables(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getCompleteVariableData(connection, user, variableSummary);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategories(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCategories(connection, user, categories);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategoryIdentifier(connection, variable, category);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePaths(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAliasFilePath(connection, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStates(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCleaningState(connection, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCleaningState(connection, user, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCleaningStates(connection, cleaningStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStates(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAvailabilityState(connection, user, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAvailabilityState(connection, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterOntologyTerms(connection, term, description);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getAllOntologyTerms(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getAssociatedOntologyTerms(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForListChoices(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForUser(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUsers(User admin) throws MacawException {
        checkValidAdministrator(admin);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUsers(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.addUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.updateUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.deleteUsers(connection, admin, usersToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUserIdentifier(connection, admin, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidAdministrator(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clear(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidAdministrator(admin);
            changeEventManager.clear(connection);
            userManager.clear(connection);
            valueLabelsManager.clear(connection);
            listChoiceManager.clear(connection);
            documentsManager.clear(connection);
            ontologyTermManager.clear(connection);
            variableManager.clear(connection);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clearAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            changeEventManager.clearAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            return changeEventManager.getAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(user);
            return variableManager.getAlternativeVariable(connection, user, targetVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidUser(user);
            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    public int getNumberOfConnections() {
        return sqlConnectionManager.getNumberOfConnections();
    }

    public void initialiseConnection(Connection connection) throws MacawException {
        try {
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToInitialiseConnection"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);
            throw macawException;
        }
    }

    public void commitDatabaseChanges(Connection connection) throws MacawException {
        try {
            connection.commit();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToCommitChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);
            throw macawException;
        }
    }

    public void rollBack(Connection connection) throws MacawException {
        try {
            connection.rollback();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToRollbackChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);
            throw macawException;
        }
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ProductionCurationService_15Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getAliasFilePaths(User)} method.
*/
class ProductionCurationService_15Test {","// ProductionCurationService_15Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getAliasFilePaths(User)} method.
*/
class ProductionCurationService_15Test {
"
680def14-33f4-4347-bfb3-a31a6a6549a2,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationService_18Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15415 tokens (11415 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ProductionCurationService.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;

/**
 * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service
 * which stores data in a MySQL database.  The structure of ProductionCurationService
 * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.
 * Both classes delegate handling API calls to manager classes that are each designed
 * to support a major concept from the package <code>macaw.model</code>
 * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},
 * {@link macaw.businessLayer.User})
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ProductionCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private SQLConnectionManager sqlConnectionManager;

    private SQLFilterQueries filterQueries;

    private SQLListChoiceManager listChoiceManager;

    private SQLSupportingDocumentsManager documentsManager;

    private SQLValueLabelManager valueLabelsManager;

    private SQLChangeEventManager changeEventManager;

    private SQLUserManager userManager;

    private SQLVariableManager variableManager;

    private SQLOntologyTermManager ontologyTermManager;

    private MacawSecurityAPI securityValidationService;

    private Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {
        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());
        sqlConnectionManager = new SQLConnectionManager(sessionProperties);
        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);
        securityValidationService = userManager;
        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);
        log = sessionProperties.getLog();
        userManager.setLog(log);
        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);
        documentsManager.setLog(log);
        listChoiceManager = new SQLListChoiceManager(changeEventManager);
        listChoiceManager.setLog(log);
        valueLabelsManager = new SQLValueLabelManager(changeEventManager);
        valueLabelsManager.setLog(log);
        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);
        ontologyTermManager.setLog(log);
        filterQueries = new SQLFilterQueries(log, listChoiceManager);
        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);
        variableManager.setLog(log);
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteRawVariables(connection, user, rawVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteDerivedVariables(connection, user, derivedVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            Variable variable = variableManager.getVariable(connection, variableName);
            return variable;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getOriginalVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabels(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.addSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.updateSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSourceVariables(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getStudyYears(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSummaryDataForAllVariables(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getCompleteVariableData(connection, user, variableSummary);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategories(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCategories(connection, user, categories);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategoryIdentifier(connection, variable, category);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePaths(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAliasFilePath(connection, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStates(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCleaningState(connection, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCleaningState(connection, user, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCleaningStates(connection, cleaningStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStates(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAvailabilityState(connection, user, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAvailabilityState(connection, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterOntologyTerms(connection, term, description);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getAllOntologyTerms(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getAssociatedOntologyTerms(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForListChoices(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForUser(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUsers(User admin) throws MacawException {
        checkValidAdministrator(admin);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUsers(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.addUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.updateUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.deleteUsers(connection, admin, usersToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUserIdentifier(connection, admin, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidAdministrator(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clear(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidAdministrator(admin);
            changeEventManager.clear(connection);
            userManager.clear(connection);
            valueLabelsManager.clear(connection);
            listChoiceManager.clear(connection);
            documentsManager.clear(connection);
            ontologyTermManager.clear(connection);
            variableManager.clear(connection);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clearAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            changeEventManager.clearAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            return changeEventManager.getAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(user);
            return variableManager.getAlternativeVariable(connection, user, targetVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidUser(user);
            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    public int getNumberOfConnections() {
        return sqlConnectionManager.getNumberOfConnections();
    }

    public void initialiseConnection(Connection connection) throws MacawException {
        try {
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToInitialiseConnection"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);
            throw macawException;
        }
    }

    public void commitDatabaseChanges(Connection connection) throws MacawException {
        try {
            connection.commit();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToCommitChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);
            throw macawException;
        }
    }

    public void rollBack(Connection connection) throws MacawException {
        try {
            connection.rollback();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToRollbackChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);
            throw macawException;
        }
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ProductionCurationService_18Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getCleaningStates(User)} method.
*/
class ProductionCurationService_18Test {","// ProductionCurationService_18Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getCleaningStates(User)} method.
*/
class ProductionCurationService_18Test {
"
fd34efd0-ea06-470d-8f33-3546ff89d270,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionCurationService_20Test.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 15414 tokens (11414 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// ProductionCurationService.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;

/**
 * Implements the interface {@link macaw.businessLayer.MacawCurationAPI} as a curation service
 * which stores data in a MySQL database.  The structure of ProductionCurationService
 * is very similar to that of {@link macaw.persistenceLayer.demo.DemonstrationCurationService}.
 * Both classes delegate handling API calls to manager classes that are each designed
 * to support a major concept from the package <code>macaw.model</code>
 * (eg: {@link macaw.businessLayer.SupportingDocument}, {@link macaw.businessLayer.Variable},
 * {@link macaw.businessLayer.User})
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ProductionCurationService implements MacawCurationAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private SQLConnectionManager sqlConnectionManager;

    private SQLFilterQueries filterQueries;

    private SQLListChoiceManager listChoiceManager;

    private SQLSupportingDocumentsManager documentsManager;

    private SQLValueLabelManager valueLabelsManager;

    private SQLChangeEventManager changeEventManager;

    private SQLUserManager userManager;

    private SQLVariableManager variableManager;

    private SQLOntologyTermManager ontologyTermManager;

    private MacawSecurityAPI securityValidationService;

    private Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public ProductionCurationService(SessionProperties sessionProperties) throws MacawException {
        changeEventManager = new SQLChangeEventManager(sessionProperties.getLog());
        sqlConnectionManager = new SQLConnectionManager(sessionProperties);
        userManager = new SQLUserManager(changeEventManager, sqlConnectionManager);
        securityValidationService = userManager;
        sessionProperties.setProperty(SessionProperties.SECURITY_SERVICE, securityValidationService);
        log = sessionProperties.getLog();
        userManager.setLog(log);
        documentsManager = new SQLSupportingDocumentsManager(changeEventManager);
        documentsManager.setLog(log);
        listChoiceManager = new SQLListChoiceManager(changeEventManager);
        listChoiceManager.setLog(log);
        valueLabelsManager = new SQLValueLabelManager(changeEventManager);
        valueLabelsManager.setLog(log);
        ontologyTermManager = new SQLOntologyTermManager(changeEventManager);
        ontologyTermManager.setLog(log);
        filterQueries = new SQLFilterQueries(log, listChoiceManager);
        variableManager = new SQLVariableManager(changeEventManager, listChoiceManager, ontologyTermManager, documentsManager);
        variableManager.setLog(log);
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    public void addRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteRawVariables(User user, ArrayList<RawVariable> rawVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteRawVariables(connection, user, rawVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateRawVariable(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateRawVariable(connection, user, rawVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getRawVariableIdentifier(User user, RawVariable rawVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getRawVariableIdentifier(connection, user, rawVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.addDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteDerivedVariables(User user, ArrayList<DerivedVariable> derivedVariables) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.deleteDerivedVariables(connection, user, derivedVariables);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateDerivedVariable(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.updateDerivedVariable(connection, user, derivedVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getDerivedVariableIdentifier(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getDerivedVariableIdentifier(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getVariable(User user, String variableName) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            Variable variable = variableManager.getVariable(connection, variableName);
            return variable;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getOriginalVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getOriginalVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<ValueLabel> getValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabels(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.addValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.updateValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteValueLabels(User user, Variable variable, ArrayList<ValueLabel> valueLabels) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            valueLabelsManager.deleteValueLabels(connection, user, variable, valueLabels);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getValueLabelIdentifier(User user, Variable variable, ValueLabel valueLabel) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return valueLabelsManager.getValueLabelIdentifier(connection, variable, valueLabel);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getAllSupportingDocuments(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = documentsManager.getAllSupportingDocuments(connection, user);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            ArrayList<SupportingDocument> results = variableManager.getAssociatedSupportingDocuments(connection, user, variable);
            return results;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.addSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.updateSupportingDocument(connection, user, supportingDocument);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteSupportingDocuments(User user, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            documentsManager.deleteSupportingDocuments(connection, user, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getSupportingDocumentIdentifier(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return documentsManager.getSupportingDocumentIdentifier(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSupportingDocumentsWithVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSupportingDocumentsFromVariable(User user, Variable variable, ArrayList<SupportingDocument> supportingDocuments) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSupportingDocuments(connection, user, variable, supportingDocuments);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Variable> getSourceVariables(User user, DerivedVariable derivedVariable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSourceVariables(connection, user, derivedVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToAdd) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateSourceVariables(connection, user, derivedVariable, sourceVariablesToAdd);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateSourceVariables(User user, DerivedVariable derivedVariable, ArrayList<Variable> sourceVariablesToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateSourceVariables(connection, user, derivedVariable, sourceVariablesToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String[] getStudyYears(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getStudyYears(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> getSummaryDataForAllVariables(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getSummaryDataForAllVariables(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getCompleteVariableData(User user, VariableSummary variableSummary) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getCompleteVariableData(connection, user, variableSummary);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategories(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategories(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCategory(User user, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCategory(connection, user, category);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCategories(User user, ArrayList<Category> categories) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCategories(connection, user, categories);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCategoryIdentifier(User user, Variable variable, Category category) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCategoryIdentifier(connection, variable, category);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePaths(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAliasFilePath(connection, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAliasFilePath(User user, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAliasFilePath(connection, user, aliasFilePath);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAliasFilePaths(User user, ArrayList<AliasFilePath> aliasFilePaths) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAliasFilePaths(connection, aliasFilePaths);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAliasFilePathIdentifier(User user, Variable variable, AliasFilePath aliasFilePath) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAliasFilePathIdentifier(connection, variable, aliasFilePath);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String getFilePathFromAlias(User user, String currentAlias) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getFilePathFromAlias(connection, currentAlias);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStates(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addCleaningState(connection, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateCleaningState(User user, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateCleaningState(connection, user, cleaningState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteCleaningStates(User user, ArrayList<CleaningState> cleaningStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteCleaningStates(connection, cleaningStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getCleaningStateIdentifier(User user, Variable variable, CleaningState cleaningState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getCleaningStateIdentifier(connection, variable, cleaningState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing availability states
     */
    public ArrayList<AvailabilityState> getAvailabilityStates(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStates(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.addAvailabilityState(connection, user, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateAvailabilityState(User user, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.updateAvailabilityState(connection, availabilityState);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteAvailabilityStates(User user, ArrayList<AvailabilityState> availabilityStates) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            listChoiceManager.deleteAvailabilityStates(connection, availabilityStates);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getAvailabilityStateIdentifier(User user, Variable variable, AvailabilityState availabilityState) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return listChoiceManager.getAvailabilityStateIdentifier(connection, variable, availabilityState);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> filterVariableSummaries(User user, String searchText, String year, String category, VariableTypeFilter variableTypeFilter) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterVariableSummaries(connection, searchText, year, category, variableTypeFilter);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> filterSupportingDocuments(User user, String documentTitle, String documentCode) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterSupportingDocuments(connection, documentTitle, documentCode);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> filterOntologyTerms(User user, String term, String description) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return filterQueries.filterOntologyTerms(connection, term, description);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getAllOntologyTerms(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getAllOntologyTerms(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return variableManager.getAssociatedOntologyTerms(connection, user, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.addOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateOntologyTerm(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.updateOntologyTerm(connection, user, ontologyTerm);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteOntologyTerms(User user, ArrayList<OntologyTerm> ontologyTermsToDelete) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            ontologyTermManager.deleteOntologyTerms(connection, user, ontologyTermsToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getOntologyTermIdentifier(User user, OntologyTerm ontologyTerm) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return ontologyTermManager.getOntologyTermIdentifier(connection, ontologyTerm);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void associateOntologyTermsWithVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.associateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void disassociateOntologyTermsFromVariable(User user, Variable variable, ArrayList<OntologyTerm> ontologyTerms) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            variableManager.disassociateOntologyTerms(connection, user, variable, ontologyTerms);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForVariable(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForVariable(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForSupportingDocument(User user, SupportingDocument supportingDocument) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForSupportingDocument(connection, supportingDocument);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForValueLabels(User user, Variable variable) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForValueLabels(connection, variable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryForListChoices(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForListChoices(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getChangeHistoryByUser(User user) throws MacawException {
        checkValidUser(user);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return changeEventManager.getChangeHistoryForUser(connection, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUsers(User admin) throws MacawException {
        checkValidAdministrator(admin);
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUsers(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void addUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.addUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void updateUser(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.updateUser(connection, admin, user);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void deleteUsers(User admin, ArrayList<User> usersToDelete) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            userManager.deleteUsers(connection, admin, usersToDelete);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public int getUserIdentifier(User admin, User user) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            return userManager.getUserIdentifier(connection, admin, user);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidAdministrator(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clear(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidAdministrator(admin);
            changeEventManager.clear(connection);
            userManager.clear(connection);
            valueLabelsManager.clear(connection);
            listChoiceManager.clear(connection);
            documentsManager.clear(connection);
            ontologyTermManager.clear(connection);
            variableManager.clear(connection);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void clearAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            changeEventManager.clearAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<MacawChangeEvent> getAllChanges(User admin) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(admin);
            return changeEventManager.getAllChanges(connection);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getAlternativeVariable(User user, Variable targetVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            securityValidationService.validateAdministrator(user);
            return variableManager.getAlternativeVariable(connection, user, targetVariable);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void setAlternativeVariable(User user, Variable targetVariable, Variable alternativeVariable) throws MacawException {
        Connection connection = sqlConnectionManager.getConnection();
        try {
            initialiseConnection(connection);
            checkValidUser(user);
            variableManager.setAlternativeVariable(connection, user, targetVariable, alternativeVariable);
            commitDatabaseChanges(connection);
        } catch (MacawException exception) {
            rollBack(connection);
            throw exception;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    public int getNumberOfConnections() {
        return sqlConnectionManager.getNumberOfConnections();
    }

    public void initialiseConnection(Connection connection) throws MacawException {
        try {
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToInitialiseConnection"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_INITIALISE_CONNECTION, errorMessage);
            throw macawException;
        }
    }

    public void commitDatabaseChanges(Connection connection) throws MacawException {
        try {
            connection.commit();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToCommitChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_COMMIT_CHANGES, errorMessage);
            throw macawException;
        }
    }

    public void rollBack(Connection connection) throws MacawException {
        try {
            connection.rollback();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            log.logException(exception);
            String errorMessage = MacawMessages.getMessage(""sql.error.unableToRollbackChanges"");
            MacawException macawException = new MacawException(MacawErrorType.UNABLE_TO_ROLLBACK, errorMessage);
            throw macawException;
        }
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ProductionCurationService_20Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getAvailabilityStates(User)} method.
*/
class ProductionCurationService_20Test {","// ProductionCurationService_20Test.java
package macaw.persistenceLayer.production;

import macaw.businessLayer.*;
import macaw.persistenceLayer.*;
import macaw.system.*;
import java.sql.*;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionCurationService}.
* It contains ten unit test cases for the {@link ProductionCurationService#getAvailabilityStates(User)} method.
*/
class ProductionCurationService_20Test {
"
cmpl-6u3QPFr27gDK4PqNt32KBJO3DKj4T,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionRetrievalService_11Test.java,103.7800886631012,length,"// ProductionRetrievalService.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;

/**
 * Implements the {@link macaw.businessLayer.MacawRetrievalAPI} interface as a service which retrieves
 * all of its data from a database.
 *
 * <code>DemonstrationRetrievalService</code> delegates the implementations
 * of {@link macaw.businessLayer.MacawRetrievalAPI} methods to manager classes whose names are prefixed
 * with ""SQL"" (eg: {@link macaw.persistenceLayer.production.SQLVariableManager}).
 *
 * The main duties of this class are
 * <ol>
 * <li>validate users before the methods are allowed to proceed</li>
 * <li>log any exceptions that are thrown.</li>
 * </ol>
 *
 * <p>
 * For security reasons, exceptions are caught rather than thrown to the calling class.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ProductionRetrievalService implements MacawRetrievalAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private SQLConnectionManager sqlConnectionManager;

    private SQLUserManager userManager;

    private SQLListChoiceManager listChoiceManager;

    private SQLVariableManager variableManager;

    private SQLValueLabelManager valueLabelsManager;

    private SQLOntologyTermManager ontologyTermManager;

    private SQLSupportingDocumentsManager documentsManager;

    private MacawSecurityAPI securityValidationService;

    private Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public ProductionRetrievalService(SessionProperties sessionProperties) throws MacawException {
        log = sessionProperties.getLog();
        sqlConnectionManager = new SQLConnectionManager(sessionProperties);
        userManager = new SQLUserManager(null, sqlConnectionManager);
        securityValidationService = userManager;
        valueLabelsManager = new SQLValueLabelManager(null);
        valueLabelsManager.setLog(log);
        ontologyTermManager = new SQLOntologyTermManager(null);
        ontologyTermManager.setLog(log);
        listChoiceManager = new SQLListChoiceManager(null);
        listChoiceManager.setLog(log);
        documentsManager = new SQLSupportingDocumentsManager(null);
        documentsManager.setLog(log);
        variableManager = new SQLVariableManager(null, listChoiceManager, ontologyTermManager, documentsManager);
        variableManager.setLog(log);
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    public User getUserFromID(User user, String userID) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUserFromID(connection, user, userID);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUnverifiedUsers(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUnverifiedUsers(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<User> emptyUserList = new ArrayList<User>();
            return emptyUserList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUsers(User admin) {
        try {
            checkValidAdministrator(admin);
            return userManager.getUsers(admin);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<User> emptyUserList = new ArrayList<User>();
            return emptyUserList;
        }
    }

    public User getUserFromEmail(User user, String email) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUserFromEmail(connection, user, email);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategories(User user) {
        Connection connection = null;
        try {
            connection = sqlConnectionManager.getConnection();
            checkValidUser(user);
            return listChoiceManager.getCategories(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<AvailabilityState> getAvailabilityStates(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAvailabilityStates(connection);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getCleaningStates(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<ValueLabel> getValueLabels(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return valueLabelsManager.getValueLabels(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedOntologyTerms(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedOntologyTerms(connection, user, variable);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedSupportingDocuments(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePaths(connection);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public AliasFilePath getAliasFilePath(User user, String cardNumber) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePath(connection, cardNumber);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<AliasFilePath> getAliasFilePathsMatchingName(User user, String regularExpression) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePathsMatchingName(connection, regularExpression);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategoriesForVariable(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getCategoriesForVariable(connection, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<Category> emptyList = new ArrayList<Category>();
            return emptyList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> getVariableSummariesForCategory(User user, String categoryName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariableSummariesForCategory(connection, categoryName);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<VariableSummary> emptyList = new ArrayList<VariableSummary>();
            return emptyList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String[] getVariableNames(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariableNames(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return (new String[0]);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getVariable(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariable(connection, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    private void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    private void checkValidAdministrator(User user) throws MacawException {
        securityValidationService.validateAdministrator(user);
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ProductionRetrievalService_11Test.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionRetrievalService}.
* It contains ten unit test cases for the {@link ProductionRetrievalService#getAliasFilePaths(User)} method.
*/
class ProductionRetrievalService_11Test {","// ProductionRetrievalService_11Test.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionRetrievalService}.
* It contains ten unit test cases for the {@link ProductionRetrievalService#getAliasFilePaths(User)} method.
*/
class ProductionRetrievalService_11Test {

		private ProductionRetrievalService productionRetrievalService;
		private SessionProperties sessionProperties;
		private Log log;
		private User user;
		
		public ProductionRetrievalService_11Test() throws MacawException {
				sessionProperties = new SessionProperties();
				log = sessionProperties.getLog();
				productionRetrievalService = new ProductionRetrievalService(sessionProperties);
				user = new User(""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", """
cmpl-6u3S5Yxdekru1nRVjvnkqe5z5CNVy,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/persistenceLayer/production/ProductionRetrievalService_6Test.java,102.41197299957275,length,"// ProductionRetrievalService.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;

/**
 * Implements the {@link macaw.businessLayer.MacawRetrievalAPI} interface as a service which retrieves
 * all of its data from a database.
 *
 * <code>DemonstrationRetrievalService</code> delegates the implementations
 * of {@link macaw.businessLayer.MacawRetrievalAPI} methods to manager classes whose names are prefixed
 * with ""SQL"" (eg: {@link macaw.persistenceLayer.production.SQLVariableManager}).
 *
 * The main duties of this class are
 * <ol>
 * <li>validate users before the methods are allowed to proceed</li>
 * <li>log any exceptions that are thrown.</li>
 * </ol>
 *
 * <p>
 * For security reasons, exceptions are caught rather than thrown to the calling class.
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class ProductionRetrievalService implements MacawRetrievalAPI {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private SQLConnectionManager sqlConnectionManager;

    private SQLUserManager userManager;

    private SQLListChoiceManager listChoiceManager;

    private SQLVariableManager variableManager;

    private SQLValueLabelManager valueLabelsManager;

    private SQLOntologyTermManager ontologyTermManager;

    private SQLSupportingDocumentsManager documentsManager;

    private MacawSecurityAPI securityValidationService;

    private Log log;

    // ==========================================
    // Section Construction
    // ==========================================
    public ProductionRetrievalService(SessionProperties sessionProperties) throws MacawException {
        log = sessionProperties.getLog();
        sqlConnectionManager = new SQLConnectionManager(sessionProperties);
        userManager = new SQLUserManager(null, sqlConnectionManager);
        securityValidationService = userManager;
        valueLabelsManager = new SQLValueLabelManager(null);
        valueLabelsManager.setLog(log);
        ontologyTermManager = new SQLOntologyTermManager(null);
        ontologyTermManager.setLog(log);
        listChoiceManager = new SQLListChoiceManager(null);
        listChoiceManager.setLog(log);
        documentsManager = new SQLSupportingDocumentsManager(null);
        documentsManager.setLog(log);
        variableManager = new SQLVariableManager(null, listChoiceManager, ontologyTermManager, documentsManager);
        variableManager.setLog(log);
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    public User getUserFromID(User user, String userID) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUserFromID(connection, user, userID);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUnverifiedUsers(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUnverifiedUsers(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<User> emptyUserList = new ArrayList<User>();
            return emptyUserList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<User> getUsers(User admin) {
        try {
            checkValidAdministrator(admin);
            return userManager.getUsers(admin);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<User> emptyUserList = new ArrayList<User>();
            return emptyUserList;
        }
    }

    public User getUserFromEmail(User user, String email) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return userManager.getUserFromEmail(connection, user, email);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategories(User user) {
        Connection connection = null;
        try {
            connection = sqlConnectionManager.getConnection();
            checkValidUser(user);
            return listChoiceManager.getCategories(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<AvailabilityState> getAvailabilityStates(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAvailabilityStates(connection);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for managing cleaning states
     */
    public ArrayList<CleaningState> getCleaningStates(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getCleaningStates(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<ValueLabel> getValueLabels(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return valueLabelsManager.getValueLabels(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedOntologyTerms(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<OntologyTerm> getOntologyTerms(User user, Variable variable) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedOntologyTerms(connection, user, variable);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<SupportingDocument> getSupportingDocuments(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getAssociatedSupportingDocuments(connection, user, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    /**
     * Methods for data libraries
     */
    public ArrayList<AliasFilePath> getAliasFilePaths(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePaths(connection);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public AliasFilePath getAliasFilePath(User user, String cardNumber) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePath(connection, cardNumber);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<AliasFilePath> getAliasFilePathsMatchingName(User user, String regularExpression) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return listChoiceManager.getAliasFilePathsMatchingName(connection, regularExpression);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<Category> getCategoriesForVariable(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getCategoriesForVariable(connection, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<Category> emptyList = new ArrayList<Category>();
            return emptyList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public ArrayList<VariableSummary> getVariableSummariesForCategory(User user, String categoryName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariableSummariesForCategory(connection, categoryName);
        } catch (MacawException exception) {
            log.logException(exception);
            ArrayList<VariableSummary> emptyList = new ArrayList<VariableSummary>();
            return emptyList;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public String[] getVariableNames(User user) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariableNames(connection, user);
        } catch (MacawException exception) {
            log.logException(exception);
            return (new String[0]);
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    public Variable getVariable(User user, String variableName) {
        Connection connection = null;
        try {
            checkValidUser(user);
            connection = sqlConnectionManager.getConnection();
            return variableManager.getVariable(connection, variableName);
        } catch (MacawException exception) {
            log.logException(exception);
            return null;
        } finally {
            sqlConnectionManager.releaseConnection(connection);
        }
    }

    private void checkValidUser(User user) throws MacawException {
        securityValidationService.validateUser(user);
    }

    private void checkValidAdministrator(User user) throws MacawException {
        securityValidationService.validateAdministrator(user);
    }
    // ==========================================
    // Section Overload
    // ==========================================
}
","// ProductionRetrievalService_6Test.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionRetrievalService}.
* It contains ten unit test cases for the {@link ProductionRetrievalService#getCleaningStates(User)} method.
*/
class ProductionRetrievalService_6Test {","// ProductionRetrievalService_6Test.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionRetrievalService}.
* It contains ten unit test cases for the {@link ProductionRetrievalService#getCleaningStates(User)} method.
*/
class ProductionRetrievalService_6Test {

		private ProductionRetrievalService productionRetrievalService;
		private SessionProperties sessionProperties;
		private Log log;
		
		public ProductionRetrievalService_6Test() {
				try {
						sessionProperties = new SessionProperties();
						log = sessionProperties.getLog();
						productionRetrievalService = new ProductionRetrievalService(sessionProperties);
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 1:
		* This test case checks that the method returns an empty list when the user is null.
		*/
		@Test
		void testCase1() {
				try {
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(null);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 2:
		* This test case checks that the method returns an empty list when the user is not null but has no ID.
		*/
		@Test
		void testCase2() {
				try {
						User user = new User();
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 3:
		* This test case checks that the method returns an empty list when the user is not null but has an empty ID.
		*/
		@Test
		void testCase3() {
				try {
						User user = new User();
						user.setUserID("""");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 4:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase4() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 5:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase5() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 6:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase6() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 7:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase7() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 8:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase8() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 9:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase9() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 10:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase10() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<CleaningState> cleaningStates = productionRetrievalService.getCleaningStates(user);
						assertEquals(0, cleaningStates.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
}

// ProductionRetrievalService_7Test.java
package macaw.persistenceLayer.production;

import macaw.system.Log;
import macaw.system.MacawException;
import macaw.system.SessionProperties;
import macaw.businessLayer.*;
import java.sql.Connection;
import java.util.ArrayList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ProductionRetrievalService}.
* It contains ten unit test cases for the {@link ProductionRetrievalService#getValueLabels(User, String)} method.
*/
class ProductionRetrievalService_7Test {
		
		private ProductionRetrievalService productionRetrievalService;
		private SessionProperties sessionProperties;
		private Log log;
		
		public ProductionRetrievalService_7Test() {
				try {
						sessionProperties = new SessionProperties();
						log = sessionProperties.getLog();
						productionRetrievalService = new ProductionRetrievalService(sessionProperties);
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 1:
		* This test case checks that the method returns an empty list when the user is null.
		*/
		@Test
		void testCase1() {
				try {
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(null, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 2:
		* This test case checks that the method returns an empty list when the user is not null but has no ID.
		*/
		@Test
		void testCase2() {
				try {
						User user = new User();
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 3:
		* This test case checks that the method returns an empty list when the user is not null but has an empty ID.
		*/
		@Test
		void testCase3() {
				try {
						User user = new User();
						user.setUserID("""");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 4:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase4() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 5:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase5() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 6:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase6() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 7:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase7() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 8:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase8() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 9:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase9() {
				try {
						User user = new User();
						user.setUserID(""userID"");
						ArrayList<ValueLabel> valueLabels = productionRetrievalService.getValueLabels(user, ""variableName"");
						assertEquals(0, valueLabels.size());
				} catch (MacawException exception) {
						log.logException(exception);
				}
		}
		
		/**
		* Test case 10:
		* This test case checks that the method returns an empty list when the user is not null but has a non-empty ID.
		*/
		@Test
		void testCase10() {
				try {
						User"
cmpl-6u3TjQtlmjStQ5Y3fSyafRqVjsSJi,/EvoSuiteBenchmark/69_lhamacaw/src/main/java/macaw/system/StartupOptions.java,106.45206117630005,length,"// StartupOptions.java
package macaw.system;

/**
 * <p></p>
 * <hr>
 * Copyright 2010 Medical Research Council Unit for Lifelong Health and Ageing
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *      http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * <hr>
 * @author Kevin Garwood (kgarwood@users.sourceforge.net)
 * @version 1.0
 */
/*
 * Code Road Map:
 * --------------
 * Code is organised into the following sections.  Wherever possible, 
 * methods are classified based on an order of precedence described in 
 * parentheses (..).  For example, if you're trying to find a method 
 * 'getName(...)' that is both an interface method and an accessor 
 * method, the order tells you it should appear under interface.
 * 
 * Order of 
 * Precedence     Section
 * ==========     ======
 * (1)            Section Constants
 * (2)            Section Properties
 * (3)            Section Construction
 * (7)            Section Accessors and Mutators
 * (6)            Section Errors and Validation
 * (5)            Section Interfaces
 * (4)            Section Overload
 *
 */
public class StartupOptions {

    // ==========================================
    // Section Constants
    // ==========================================
    // ==========================================
    // Section Properties
    // ==========================================
    private boolean useDemo;

    private String databaseName;

    private String dbDriverName;

    private String dbUser;

    private String dbPassword;

    private String server;

    private String port;

    private int maximumNumberOfConnections;

    // ==========================================
    // Section Construction
    // ==========================================
    public StartupOptions() {
        useDemo = true;
        dbUser = null;
        dbPassword = null;
        server = ""localhost"";
        port = null;
        dbDriverName = ""com.mysql.jdbc.Driver"";
        databaseName = ""macaw"";
        maximumNumberOfConnections = 20;
    }

    // ==========================================
    // Section Accessors and Mutators
    // ==========================================
    public void processCommandLineArguments(String[] arguments) {
        useDemo = true;
        for (int i = 0; i < arguments.length; i++) {
            if (arguments[i].equals(""-production"") == true) {
                useDemo = false;
            } else if (arguments[i].equals(""-dbUser"") == true) {
                dbUser = arguments[i + 1];
            } else if (arguments[i].equals(""-dbPassword"") == true) {
                dbPassword = arguments[i + 1];
            } else if (arguments[i].equals(""-dbName"") == true) {
                databaseName = arguments[i + 1];
            } else if (arguments[i].equals(""-dbServer"") == true) {
                server = arguments[i + 1];
            } else if (arguments[i].equals(""-dbPort"") == true) {
                port = arguments[i + 1];
            }
        }
    }

    public String getDatabaseURI() {
        StringBuilder buffer = new StringBuilder();
        buffer.append(""jdbc:mysql://"");
        if (server == null) {
            buffer.append(""localhost"");
        } else {
            buffer.append(server);
        }
        if (port != null) {
            buffer.append("":"");
            buffer.append(port);
        }
        buffer.append(""/"");
        buffer.append(databaseName);
        return buffer.toString();
    }

    /**
     * @return the dbUser
     */
    public String getDbUser() {
        return dbUser;
    }

    /**
     * @param dbUser the dbUser to set
     */
    public void setDbUser(String dbUser) {
        this.dbUser = dbUser;
    }

    /**
     * @return the dbPassword
     */
    public String getDbPassword() {
        return dbPassword;
    }

    /**
     * @param dbPassword the dbPassword to set
     */
    public void setDbPassword(String dbPassword) {
        this.dbPassword = dbPassword;
    }

    /**
     * @return the server
     */
    public String getServer() {
        return server;
    }

    /**
     * @param server the server to set
     */
    public void setServer(String server) {
        this.server = server;
    }

    /**
     * @return the port
     */
    public String getPort() {
        return port;
    }

    /**
     * @param port the port to set
     */
    public void setPort(String port) {
        this.port = port;
    }

    /**
     * @return the useDemo
     */
    public boolean useDemo() {
        return useDemo;
    }

    /**
     * @param useDemo the useDemo to set
     */
    public void setUseDemo(boolean useDemo) {
        this.useDemo = useDemo;
    }

    /**
     * @return the databaseName
     */
    public String getDatabaseName() {
        return databaseName;
    }

    /**
     * @param databaseName the databaseName to set
     */
    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    /**
     * @return the dbDriverName
     */
    public String getDbDriverName() {
        return dbDriverName;
    }

    /**
     * @param dbDriverName the dbDriverName to set
     */
    public void setDbDriverName(String dbDriverName) {
        this.dbDriverName = dbDriverName;
    }

    /**
     * @return the maximumNumberOfConnections
     */
    public int getMaximumNumberOfConnections() {
        return maximumNumberOfConnections;
    }

    /**
     * @param maximumNumberOfConnections the maximumNumberOfConnections to set
     */
    public void setMaximumNumberOfConnections(int maximumNumberOfConnections) {
        this.maximumNumberOfConnections = maximumNumberOfConnections;
    }
    // ==========================================
    // Section Errors and Validation
    // ==========================================
    // ==========================================
    // Section Interfaces
    // ==========================================
    // ==========================================
    // Section Overload
    // ==========================================
}
","// StartupOptionsTest.java
package macaw.system;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartupOptions}.
* It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.
*/
class StartupOptionsTest {","// StartupOptionsTest.java
package macaw.system;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartupOptions}.
* It contains ten unit test cases for the {@link StartupOptions#useDemo()} method.
*/
class StartupOptionsTest {

		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true.
		*/
		@Test
		public void testUseDemoTrue() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				assertTrue(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false.
		*/
		@Test
		public void testUseDemoFalse() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -production flag.
		*/
		@Test
		public void testUseDemoTrueProduction() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-production""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -production flag.
		*/
		@Test
		public void testUseDemoFalseProduction() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-production""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -dbUser flag.
		*/
		@Test
		public void testUseDemoTrueDbUser() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-dbUser"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -dbUser flag.
		*/
		@Test
		public void testUseDemoFalseDbUser() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-dbUser"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -dbPassword flag.
		*/
		@Test
		public void testUseDemoTrueDbPassword() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-dbPassword"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -dbPassword flag.
		*/
		@Test
		public void testUseDemoFalseDbPassword() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-dbPassword"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -dbName flag.
		*/
		@Test
		public void testUseDemoTrueDbName() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-dbName"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -dbName flag.
		*/
		@Test
		public void testUseDemoFalseDbName() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-dbName"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -dbServer flag.
		*/
		@Test
		public void testUseDemoTrueDbServer() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-dbServer"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -dbServer flag.
		*/
		@Test
		public void testUseDemoFalseDbServer() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-dbServer"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns true when the useDemo property is set to true and the command line arguments contain the -dbPort flag.
		*/
		@Test
		public void testUseDemoTrueDbPort() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(true);
				startupOptions.processCommandLineArguments(new String[] {""-dbPort"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
		
		/**
		* Test case for the {@link StartupOptions#useDemo()} method.
		* This test case checks if the method returns false when the useDemo property is set to false and the command line arguments contain the -dbPort flag.
		*/
		@Test
		public void testUseDemoFalseDbPort() {
				StartupOptions startupOptions = new StartupOptions();
				startupOptions.setUseDemo(false);
				startupOptions.processCommandLineArguments(new String[] {""-dbPort"", ""test""});
				assertFalse(startupOptions.useDemo());
		}
}</code>



I have tried to use the following command to run the test:
<code>java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore macaw.system.StartupOptionsTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [macaw.system.StartupOptionsTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: macaw.system.StartupOptionsTest
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:264)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore macaw.system.StartupOptionsTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [macaw.system.StartupOptionsTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: macaw.system.StartupOptionsTest
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:264)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore macaw.system.StartupOptionsTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [macaw.system.StartupOptionsTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult.java:44)
    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:72)
    at org.junit.runner.JUnitCore.main(JUnitCore.java:36)
Caused by: java.lang.ClassNotFoundException: macaw.system.StartupOptionsTest
    at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:264)
    at org.junit.internal.Classes.getClass(Classes.java:16)
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:100)
    ... 4 more

FAILURES!!!
Tests run: 1,  Failures: 1
</code>
I have tried to use the following command to run the test:
<code>java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore macaw.system.StartupOptionsTest</code>
But I get the following error:
<code>JUnit version 4.12
.E
Time: 0.001
There was 1 failure:
1) initializationError(org.junit.runner.JUnitCommandLineParseResult)
java.lang.IllegalArgumentException: Could not find class [macaw.system.StartupOptionsTest]
    at org.junit.runner.JUnitCommandLineParseResult.parseParameters(JUnitCommandLineParseResult.java:102)
    at org.junit.runner.JUnitCommandLineParseResult.parseArgs(JUnitCommandLineParseResult.java:50)
    at org.junit.runner.JUnitCommandLineParseResult.parse(JUnitCommandLineParseResult"
