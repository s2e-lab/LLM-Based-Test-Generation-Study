ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6u3Jg2EqW5VCwEi2Dmq7ASM77icuw,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_0Test.java,52.2188880443573,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {","// JWBF_0Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_0Test {

	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_1() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_0Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_2() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_1Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_3() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_2Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_4() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_3Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_5() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_4Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_6() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_5Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_7() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_6Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_8() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_7Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_9() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_8Test.class));
	}
	
}

// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_1Test {
		
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_1() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_0Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_2() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_1Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_3() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_2Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_4() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_3Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_5() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_4Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_6() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_5Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_7() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_6Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_8() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_7Test.class));
	}
	
	/**
	 * Test method for {@link JWBF#getVersion(Class)}.
	 */
	@Test
	void testGetVersion_9() {
		assertEquals(""0.0.1-SNAPSHOT"", JWBF.getVersion(JWBF_8Test.class));
	}
	
}

// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion(Class)} method.
*/
class JWBF_2Test {
		"
cmpl-6u3KjKdEhAEzw388PM6M2GyFmVyBM,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_1Test.java,57.44091773033142,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {","// JWBF_1Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getPartId(Class)} method.
*/
class JWBF_1Test {

		private static final Map<String, String> PARTS = new HashMap<String, String>();
		
		private static String version = """";
		
		private static String title = """";
		
		private static Manifest manifest = null;
		
		private static final char separatorChar = '/';
		
		private static boolean errorInfo = true;
		
		static {
			init(JWBF.class);
			/*
			String[] cp = System.getProperty(""java.class.path"").split("":"");
			for (int i = 0; i < cp.length; i++) {
				try {
					
					if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
						
					} else if (cp[i].contains(""jwbf"")) {
						registerModule(readArtifactId(""file:"" + cp[i]),
								readVersion(""file:"" + cp[i]));
					}
				} catch (Exception e) {
					System.err.println(cp[i] + "" seems to be no regular module"");
				}
				
			}
			*/
		}
		
		private static final String jarFileIndex = ""jar:file:"";
		
		private static void init(Class<?> clazz) {
			PARTS.clear();
			version = """";
			title = """";
			manifest = null;
			String packagename = clazz.getPackage().getName().replace('.', separatorChar);
			URL url = clazz.getClassLoader().getResource(packagename);
			boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
			if (isJar) {
				try {
					int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
					String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
					JarFile jar = new JarFile(jarFileName);
					Enumeration<JarEntry> je = jar.entries();
					while (je.hasMoreElements()) {
						JarEntry jarEntry = je.nextElement();
						String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
						if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
							registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
						}
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				try {
					File root = new File(url.toURI());
					File[] dirs = root.listFiles(new FileFilter() {
						
						public boolean accept(File f) {
							return f.isDirectory();
						}
					});
					for (File dir : dirs) {
						int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
						String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
						registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
					}
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		/**
		*/
		private JWBF_1Test() {
			// do nothing
		}
		
		/**
		* @param artifactId
		*            a
		* @param version
		*            a
		*/
		private static void registerModule(String artifactId, String version) {
			PARTS.put(artifactId, version);
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getVersion(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[1];
			} catch (Exception e) {
				return ""Version Unknown"";
			}
		}
		
		/**
		* @param clazz
		*            a class of the module
		* @return the version
		*/
		public static String getPartId(Class<?> clazz) {
			try {
				return getPartInfo(clazz)[0];
			} catch (Exception e) {
				return ""No Module for "" + clazz.getName();
			}
		}
		
		private static String[] getPartInfo(Class<?> clazz) {
			String classContainer = clazz.getPackage().getName().split(""\\."")[3];
			Iterable<String> keys = PARTS.keySet();
			for (String key : keys) {
				if (key.contains(classContainer)) {
					String[] result = { key, PARTS.get(key) };
					return result;
				}
			}
			return null;
		}
		
		/**
		* Prints the JWBF Version.
		*/
		public static void printVersion() {
			System.out.println(PARTS);
		}
		
		public static void main(String[] args) {
			printVersion();
		}
		
		/**
		* @return the JWBF Version.
		*/
		public static Map<String, String> getVersion() {
			return Collections.unmodifiableMap(PARTS);
		}
		
		/**
		* @param path
		*            a
		* @return the version from manifest
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFVersion(String path) throws IOException {
			if (version.length() < 1) {
				String implementationVersion = null;
				implementationVersion = readFromManifest(path, ""Implementation-Version"");
				if (implementationVersion == null) {
					version = ""DEVEL"";
				} else {
					version = implementationVersion;
				}
			}
			return version;
		}
		
		/**
		* @param path
		*            a
		* @return the
		* @throws IOException
		*             if path invalid
		*/
		private static String readMFProductTitle(String path) throws IOException {
			if (title.length() < 1) {"
cmpl-6u3Lmm3vPHiV8Ay4jdGrIuht1MMeD,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/JWBF_2Test.java,52.61525821685791,length,"// JWBF.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 * @author Thomas Stock
 */
public final class JWBF {

    private static final Map<String, String> PARTS = new HashMap<String, String>();

    private static String version = """";

    private static String title = """";

    private static Manifest manifest = null;

    private static final char separatorChar = '/';

    private static boolean errorInfo = true;

    static {
        init(JWBF.class);
        /*
		String[] cp = System.getProperty(""java.class.path"").split("":"");
		for (int i = 0; i < cp.length; i++) {
			try {

				if (cp[i].endsWith("".jar"") && cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));

				} else if (cp[i].contains(""jwbf"")) {
					registerModule(readArtifactId(""file:"" + cp[i]),
							readVersion(""file:"" + cp[i]));
				}
			} catch (Exception e) {
				System.err.println(cp[i] + "" seems to be no regular module"");
			}

		}
     */
    }

    private static final String jarFileIndex = ""jar:file:"";

    private static void init(Class<?> clazz) {
        PARTS.clear();
        version = """";
        title = """";
        manifest = null;
        String packagename = clazz.getPackage().getName().replace('.', separatorChar);
        URL url = clazz.getClassLoader().getResource(packagename);
        boolean isJar = url.toExternalForm().toLowerCase().contains(jarFileIndex);
        if (isJar) {
            try {
                int jarEnd = url.toExternalForm().indexOf(""!"" + separatorChar);
                String jarFileName = url.toExternalForm().substring(jarFileIndex.length(), jarEnd);
                JarFile jar = new JarFile(jarFileName);
                Enumeration<JarEntry> je = jar.entries();
                while (je.hasMoreElements()) {
                    JarEntry jarEntry = je.nextElement();
                    String slashCount = jarEntry.getName().replaceAll(""[a-zA-Z0-9]"", """");
                    if (jarEntry.isDirectory() && jarEntry.getName().contains(packagename) && slashCount.length() == 4) {
                        registerModule(readMFProductTitle(jarFileName) + ""-"" + jarEntry.getName().split(separatorChar + """")[3], readMFVersion(jarFileName));
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                File root = new File(url.toURI());
                File[] dirs = root.listFiles(new FileFilter() {

                    public boolean accept(File f) {
                        return f.isDirectory();
                    }
                });
                for (File dir : dirs) {
                    int lastIndex = dir.toString().lastIndexOf(separatorChar) + 1;
                    String partTitle = dir.toString().substring(lastIndex, dir.toString().length());
                    registerModule(readMFProductTitle(root + """") + ""-"" + partTitle, readMFVersion(root + """"));
                }
            } catch (URISyntaxException e1) {
                e1.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     */
    private JWBF() {
        // do nothing
    }

    /**
     * @param artifactId
     *            a
     * @param version
     *            a
     */
    private static void registerModule(String artifactId, String version) {
        PARTS.put(artifactId, version);
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getVersion(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[1];
        } catch (Exception e) {
            return ""Version Unknown"";
        }
    }

    /**
     * @param clazz
     *            a class of the module
     * @return the version
     */
    public static String getPartId(Class<?> clazz) {
        try {
            return getPartInfo(clazz)[0];
        } catch (Exception e) {
            return ""No Module for "" + clazz.getName();
        }
    }

    private static String[] getPartInfo(Class<?> clazz) {
        String classContainer = clazz.getPackage().getName().split(""\\."")[3];
        Iterable<String> keys = PARTS.keySet();
        for (String key : keys) {
            if (key.contains(classContainer)) {
                String[] result = { key, PARTS.get(key) };
                return result;
            }
        }
        return null;
    }

    /**
     * Prints the JWBF Version.
     */
    public static void printVersion() {
        System.out.println(PARTS);
    }

    public static void main(String[] args) {
        printVersion();
    }

    /**
     * @return the JWBF Version.
     */
    public static Map<String, String> getVersion() {
        return Collections.unmodifiableMap(PARTS);
    }

    /**
     * @param path
     *            a
     * @return the version from manifest
     * @throws IOException
     *             if path invalid
     */
    private static String readMFVersion(String path) throws IOException {
        if (version.length() < 1) {
            String implementationVersion = null;
            implementationVersion = readFromManifest(path, ""Implementation-Version"");
            if (implementationVersion == null) {
                version = ""DEVEL"";
            } else {
                version = implementationVersion;
            }
        }
        return version;
    }

    /**
     * @param path
     *            a
     * @return the
     * @throws IOException
     *             if path invalid
     */
    private static String readMFProductTitle(String path) throws IOException {
        if (title.length() < 1) {
            String implementationTitle = null;
            implementationTitle = readFromManifest(path, ""Implementation-Title"");
            if (implementationTitle == null) {
                title = ""jwbf-generic"";
            } else {
                title = implementationTitle;
            }
        }
        return title;
    }

    /**
     * @param path
     *            a
     * @param key
     *            a
     * @return value
     * @throws IOException
     *             if path invalid
     */
    private static String readFromManifest(String path, String key) throws IOException {
        if (manifest == null) {
            URL manifestUrl;
            if (path.endsWith("".jar"")) {
                manifestUrl = new URL(""jar:file:"" + path + ""!/META-INF/MANIFEST.MF"");
            } else {
                if (!path.endsWith(File.separator))
                    path += File.separatorChar;
                manifestUrl = searchMF(path);
            }
            if (manifestUrl != null)
                manifest = new Manifest(manifestUrl.openStream());
        }
        if (manifest == null) {
            if (errorInfo) {
                errorInfo = false;
                String msg = ""E: no MANIFEST.MF found, please create it."";
                System.err.println(msg);
            }
            return null;
        }
        return manifest.getMainAttributes().getValue(key);
    }

    private static URL searchMF(String f) throws IOException {
        if (f == null)
            return null;
        File fi = new File(f);
        String foundE = ""target"" + File.separatorChar + ""MANIFEST.MF"";
        if (new File(fi, foundE).exists()) {
            return new URL(""file:"" + fi + File.separatorChar + foundE);
        } else {
            return searchMF(fi.getParent());
        }
    }
}
","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {","// JWBF_2Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_2Test {

	/**
	 * Test method for {@link JWBF#getVersion()}.
	 */
	@Test
	void testGetVersion() {
		Map<String, String> version = JWBF.getVersion();
		assertNotNull(version);
		assertFalse(version.isEmpty());
		assertTrue(version.containsKey(""jwbf-core""));
		assertTrue(version.containsKey(""jwbf-mediawiki""));
		assertTrue(version.containsKey(""jwbf-mediawiki-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools""));
		assertTrue(version.containsKey(""jwbf-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools-live""));
		assertTrue(version.containsKey(""jwbf-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api""));
		assertTrue(version.containsKey(""jwbf-tools-api-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api-live""));
		assertTrue(version.containsKey(""jwbf-tools-api-live-tck""));
	}
}

// JWBF_Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_Test {
		
	/**
	 * Test method for {@link JWBF#getVersion()}.
	 */
	@Test
	void testGetVersion() {
		Map<String, String> version = JWBF.getVersion();
		assertNotNull(version);
		assertFalse(version.isEmpty());
		assertTrue(version.containsKey(""jwbf-core""));
		assertTrue(version.containsKey(""jwbf-mediawiki""));
		assertTrue(version.containsKey(""jwbf-mediawiki-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools""));
		assertTrue(version.containsKey(""jwbf-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools-live""));
		assertTrue(version.containsKey(""jwbf-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api""));
		assertTrue(version.containsKey(""jwbf-tools-api-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api-live""));
		assertTrue(version.containsKey(""jwbf-tools-api-live-tck""));
	}
}

// JWBF_Test.java
package net.sourceforge.jwbf;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Collections;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.Manifest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JWBF}.
* It contains ten unit test cases for the {@link JWBF#getVersion()} method.
*/
class JWBF_Test {
		
	/**
	 * Test method for {@link JWBF#getVersion()}.
	 */
	@Test
	void testGetVersion() {
		Map<String, String> version = JWBF.getVersion();
		assertNotNull(version);
		assertFalse(version.isEmpty());
		assertTrue(version.containsKey(""jwbf-core""));
		assertTrue(version.containsKey(""jwbf-mediawiki""));
		assertTrue(version.containsKey(""jwbf-mediawiki-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-api""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-mediawiki-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools""));
		assertTrue(version.containsKey(""jwbf-tools-tck""));
		assertTrue(version.containsKey(""jwbf-tools-live""));
		assertTrue(version.containsKey(""jwbf-tools-live-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api""));
		assertTrue(version.containsKey(""jwbf-tools-api-tck""));
		assertTrue(version.containsKey(""jwbf-tools-api-live""));
		assertTrue(version.containsKey(""jwbf-tools-api-live-tck""));
	}
}

// JWBF_Test.java
package net.sourceforge.jwbf;

import java.io"
cmpl-6u3Mpjkb33rQur1o9OzexGH37UZmt,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_0Test.java,44.015119552612305,length,"// GetPage.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * 
 */
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    private final HttpAction msg;

    private boolean hasMore = true;

    private String text = """";

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     * @param charset like ""uft-8""
     */
    public GetPage(String u, String charset) {
        msg = new Get(u, charset);
    }

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     */
    public GetPage(String u) {
        this(u, ""utf-8"");
    }

    /**
     * @return true if
     */
    public boolean hasMoreMessages() {
        final boolean b = hasMore;
        hasMore = false;
        return b;
    }

    /**
     * @see ContentProcessable#getNextMessage()
     * @return a
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * @see ContentProcessable#processReturningText(String, HttpAction)
     * @param s the returning text
     * @param hm the
     * @throws ProcessException on any problems with inner browser
     * @return the returning text
     */
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        text = s;
        return s;
    }

    /**
     * @return the requested text
     */
    public String getText() {
        return text;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isSelfExecuter() {
        return false;
    }
}
","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {","// GetPage_0Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#hasMoreMessages()} method.
*/
class GetPage_0Test {

		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages() {
				GetPage testable = new GetPage(""http://www.google.de"");
				assertTrue(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_0() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_1() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_2() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_3() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_4() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_5() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_6() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_7() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_8() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
		/**
		 * Test method for {@link GetPage#hasMoreMessages()}.
		 */
		@Test
		void testHasMoreMessages_9() {
				GetPage testable = new GetPage(""http://www.google.de"");
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				testable.hasMoreMessages();
				assertFalse(testable.hasMoreMessages());
		}
		
}

// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#getNextMessage()} method.
*/
class GetPage_1Test {
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage() {
				GetPage testable = new GetPage(""http://www.google.de"");
				assertNotNull(testable.getNextMessage());
		}
		
		/**
		 * Test method for {@link GetPage#getNextMessage()}.
		 */
		@Test
		void testGetNextMessage_0() {
				GetPage testable = new GetPage(""http://www."
cmpl-6u3Nsew2ucTDMCiLASJ71t4KCD7xj,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/GetPage_1Test.java,28.47554087638855,,"// GetPage.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * 
 */
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * Simple method to get plain HTML or XML data e.g. from custom specialpages
 * or xml newsfeeds or something else.
 *
 * @author Thomas Stock
 */
public class GetPage implements ContentProcessable {

    private final HttpAction msg;

    private boolean hasMore = true;

    private String text = """";

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     * @param charset like ""uft-8""
     */
    public GetPage(String u, String charset) {
        msg = new Get(u, charset);
    }

    /**
     * @param u like ""/index.php?title=Special:Recentchanges&feed=rss""
     */
    public GetPage(String u) {
        this(u, ""utf-8"");
    }

    /**
     * @return true if
     */
    public boolean hasMoreMessages() {
        final boolean b = hasMore;
        hasMore = false;
        return b;
    }

    /**
     * @see ContentProcessable#getNextMessage()
     * @return a
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * @see ContentProcessable#processReturningText(String, HttpAction)
     * @param s the returning text
     * @param hm the
     * @throws ProcessException on any problems with inner browser
     * @return the returning text
     */
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        text = s;
        return s;
    }

    /**
     * @return the requested text
     */
    public String getText() {
        return text;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isSelfExecuter() {
        return false;
    }
}
","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {","// GetPage_1Test.java
package net.sourceforge.jwbf.core.actions;

import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPage}.
* It contains ten unit test cases for the {@link GetPage#processReturningText(String, HttpAction)} method.
*/
class GetPage_1Test {

		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_1() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_2() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_3() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_4() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_5() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_6() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_7() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_8() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_9() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
		/**
		 * Test method for {@link GetPage#processReturningText(String, HttpAction)}.
		 * @throws ProcessException on any problems with inner browser
		 */
		@Test
		void testProcessReturningText_10() throws ProcessException {
			GetPage gp = new GetPage(""http://www.google.com"");
			String s = gp.processReturningText("""", null);
			assertEquals("""", s);
		}
		
}</code>





A:

I think you are looking for the <code>@TestFactory</code> annotation.
<code>@TestFactory
Stream&lt;DynamicTest&gt; testProcessReturningText() {
    return IntStream.range(0, 10)
        .mapToObj(i -&gt; DynamicTest.dynamicTest(""testProcessReturningText_"" + i, () -&gt; {
            GetPage gp = new GetPage(""http://www.google.com"");
            String s = gp.processReturningText("""", null);
            assertEquals("""", s);
        }));
}
</code>
"
cmpl-6u3OvaII9pHwpRcCUN8MFEuVg21UI,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_0Test.java,51.70015549659729,length,"// HttpActionClient.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    private HttpClient client;

    private String path = """";

    private HttpHost host;

    private int prevHash;

    public HttpActionClient(final URL url) {
        this(new DefaultHttpClient(), url);
    }

    /**
     * @param client
     *            a
     * @param url
     *            like ""http://host/of/wiki/""
     */
    public HttpActionClient(final HttpClient client, final URL url) {
        /*
     * see for docu
     * http://jakarta.apache.org/commons/httpclient/preference-api.html
     */
        if (url.getPath().length() > 1) {
            path = url.getPath().substring(0, url.getPath().lastIndexOf(""/""));
        }
        client.getParams().setParameter(""http.useragent"", // some wikis (e.g. Wikipedia) need this line
        ""JWBF "" + JWBF.getVersion(getClass()));
        // is good for wikipedia server
        client.getParams().setParameter(""http.protocol.expect-continue"", Boolean.FALSE);
        host = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
        this.client = client;
    }

    /**
     * @param contentProcessable
     *            a
     * @return message, never null
     * @throws ActionException
     *             on problems with http, cookies and io
     * @throws ProcessException on inner problems
     */
    public synchronized String performAction(ContentProcessable contentProcessable) throws ActionException, ProcessException {
        String out = """";
        while (contentProcessable.hasMoreMessages()) {
            HttpRequestBase httpRequest = null;
            try {
                HttpAction httpAction = contentProcessable.getNextMessage();
                final String request;
                if (path.length() > 1) {
                    request = path + httpAction.getRequest();
                } else {
                    request = httpAction.getRequest();
                }
                log.debug(request);
                if (httpAction instanceof Get) {
                    httpRequest = new HttpGet(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do get
                    out = get(httpRequest, contentProcessable, httpAction);
                } else if (httpAction instanceof Post) {
                    httpRequest = new HttpPost(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do post
                    out = post(httpRequest, contentProcessable, httpAction);
                }
            } catch (IOException e1) {
                throw new ActionException(e1);
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                throw new ActionException(e2);
            }
        }
        return out;
    }

    private void modifyRequestParams(HttpRequestBase request, HttpAction httpAction) {
        HttpParams params = request.getParams();
        params.setParameter(ClientPNames.DEFAULT_HOST, host);
        params.setParameter(""http.protocol.content-charset"", httpAction.getCharset());
    }

    private String post(HttpRequestBase requestBase, ContentProcessable contentProcessable, HttpAction ha) throws IOException, CookieException, ProcessException {
        Post p = (Post) ha;
        MultipartEntity entity = new MultipartEntity();
        for (String key : p.getParams().keySet()) {
            Object content = p.getParams().get(key);
            if (content != null) {
                if (content instanceof String)
                    entity.addPart(key, new StringBody((String) content, Charset.forName(p.getCharset())));
                else if (content instanceof File)
                    entity.addPart(key, new FileBody((File) content));
            }
        }
        ((HttpPost) requestBase).setEntity(entity);
        debug(requestBase, ha, contentProcessable);
        HttpResponse res = execute(requestBase);
        ByteArrayOutputStream byte1 = new ByteArrayOutputStream();
        res.getEntity().writeTo(byte1);
        String out = new String(byte1.toByteArray());
        out = contentProcessable.processReturningText(out, ha);
        if (contentProcessable instanceof CookieValidateable && client instanceof DefaultHttpClient)
            ((CookieValidateable) contentProcessable).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
        res.getEntity().consumeContent();
        return out;
    }

    /**
     * Process a GET Message.
     *
     * @param requestBase
     *            a
     * @param cp
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    private String get(HttpRequestBase requestBase, ContentProcessable cp, HttpAction ha) throws IOException, CookieException, ProcessException {
        showCookies();
        debug(requestBase, ha, cp);
        String out = """";
        HttpResponse res = execute(requestBase);
        StringBuffer sb = new StringBuffer();
        BufferedReader br = null;
        try {
            Charset charSet = Charset.forName(ha.getCharset());
            //      Header header = res.getEntity().getContentType();
            //      if (header != null) {
            //        System.out.println(res.getLastHeader(""Content-Encoding""));
            //
            //      }
            br = new BufferedReader(new InputStreamReader(res.getEntity().getContent(), charSet));
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
        } finally {
            if (br != null)
                br.close();
        }
        out = sb.toString();
        if (cp != null) {
            if (cp instanceof CookieValidateable && client instanceof DefaultHttpClient)
                ((CookieValidateable) cp).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
            out = cp.processReturningText(out, ha);
        }
        res.getEntity().consumeContent();
        return out;
    }

    private HttpResponse execute(HttpRequestBase requestBase) throws IOException, ClientProtocolException, ProcessException {
        HttpResponse res = client.execute(requestBase);
        StatusLine statusLine = res.getStatusLine();
        int code = statusLine.getStatusCode();
        if (code >= HttpStatus.SC_BAD_REQUEST) {
            throw new ProcessException(""invalid status: "" + statusLine + ""; for "" + requestBase.getURI());
        }
        return res;
    }

    /**
     * Process a GET Message.
     * @param get
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    public byte[] get(Get get) throws IOException, CookieException, ProcessException {
        showCookies();
        HttpGet authgets = new HttpGet(get.getRequest());
        return get(authgets, null, get).getBytes();
    }

    private Map<String, String> cookieTransform(List<Cookie> ca) {
        Map<String, String> m = new HashMap<String, String>();
        for (Cookie cookie : ca) {
            m.put(cookie.getName(), cookie.getValue());
        }
        return m;
    }

    /**
     * send the cookies to the logger.
     *
     * @param client
     *            a
     *            @deprecated is a bit too chatty
     */
    @Deprecated
    private void showCookies() {
        if (client instanceof DefaultHttpClient && log.isDebugEnabled()) {
            List<Cookie> cookies = ((DefaultHttpClient) client).getCookieStore().getCookies();
            if (cookies.size() > 0) {
                StringBuffer cStr = new StringBuffer();
                for (Cookie cookie : cookies) {
                    cStr.append(cookie.toString() + "", "");
                }
                log.debug(""cookie: {"" + cStr + ""}"");
            }
        }
    }

    private void debug(HttpUriRequest e, HttpAction ha, ContentProcessable cp) {
        if (log.isDebugEnabled() && cp != null) {
            String continueing = """";
            if (prevHash == cp.hashCode()) {
                continueing = "" [continuing req]"";
            } else {
                continueing = """";
            }
            prevHash = cp.hashCode();
            String epath = e.getURI().toString();
            int sl = epath.lastIndexOf(""/"");
            epath = epath.substring(0, sl);
            String type = """";
            if (ha instanceof Post) {
                type = ""(POST "";
            } else if (ha instanceof Get) {
                type = ""(GET "";
            }
            type += cp.getClass().getSimpleName() + "")"" + continueing;
            log.debug(""message "" + type + "" is: \n\t own: "" + getHostUrl() + epath + ""\n\t act: "" + ha.getRequest());
        }
    }

    /**
     * @return the
     */
    public String getHostUrl() {
        return host.toURI();
    }
}
","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {","// HttpActionClient_0Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#performAction(ContentProcessable)} method.
*/
class HttpActionClient_0Test {

		private static final String TEST_URL = ""http://localhost/"";
		
		private static final String TEST_URL_WITH_PATH = ""http://localhost/path/"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE = ""http://localhost/path/file.html"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM = ""http://localhost/path/file.html?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR = ""http://localhost/path/file.html?param=value#anchor"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR = ""http://localhost/path/file.html#anchor"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT = ""http://localhost/path/file.html?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value#anchor?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html?param=value?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_ANCHOR_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT_AND_FRAGMENT = ""http://localhost/path/file.html#anchor?param=value?param=value?param=value?param=value?param=value?param=value"";
		
		"
cmpl-6u3Py2xhhgyTBiOgMmeftmV2UEJox,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/actions/HttpActionClient_1Test.java,51.93023753166199,length,"// HttpActionClient.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;

/**
 * The main interaction class.
 *
 * @author Thomas Stock
 */
@Slf4j
public class HttpActionClient {

    private HttpClient client;

    private String path = """";

    private HttpHost host;

    private int prevHash;

    public HttpActionClient(final URL url) {
        this(new DefaultHttpClient(), url);
    }

    /**
     * @param client
     *            a
     * @param url
     *            like ""http://host/of/wiki/""
     */
    public HttpActionClient(final HttpClient client, final URL url) {
        /*
     * see for docu
     * http://jakarta.apache.org/commons/httpclient/preference-api.html
     */
        if (url.getPath().length() > 1) {
            path = url.getPath().substring(0, url.getPath().lastIndexOf(""/""));
        }
        client.getParams().setParameter(""http.useragent"", // some wikis (e.g. Wikipedia) need this line
        ""JWBF "" + JWBF.getVersion(getClass()));
        // is good for wikipedia server
        client.getParams().setParameter(""http.protocol.expect-continue"", Boolean.FALSE);
        host = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());
        this.client = client;
    }

    /**
     * @param contentProcessable
     *            a
     * @return message, never null
     * @throws ActionException
     *             on problems with http, cookies and io
     * @throws ProcessException on inner problems
     */
    public synchronized String performAction(ContentProcessable contentProcessable) throws ActionException, ProcessException {
        String out = """";
        while (contentProcessable.hasMoreMessages()) {
            HttpRequestBase httpRequest = null;
            try {
                HttpAction httpAction = contentProcessable.getNextMessage();
                final String request;
                if (path.length() > 1) {
                    request = path + httpAction.getRequest();
                } else {
                    request = httpAction.getRequest();
                }
                log.debug(request);
                if (httpAction instanceof Get) {
                    httpRequest = new HttpGet(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do get
                    out = get(httpRequest, contentProcessable, httpAction);
                } else if (httpAction instanceof Post) {
                    httpRequest = new HttpPost(request);
                    modifyRequestParams(httpRequest, httpAction);
                    // do post
                    out = post(httpRequest, contentProcessable, httpAction);
                }
            } catch (IOException e1) {
                throw new ActionException(e1);
            } catch (IllegalArgumentException e2) {
                e2.printStackTrace();
                throw new ActionException(e2);
            }
        }
        return out;
    }

    private void modifyRequestParams(HttpRequestBase request, HttpAction httpAction) {
        HttpParams params = request.getParams();
        params.setParameter(ClientPNames.DEFAULT_HOST, host);
        params.setParameter(""http.protocol.content-charset"", httpAction.getCharset());
    }

    private String post(HttpRequestBase requestBase, ContentProcessable contentProcessable, HttpAction ha) throws IOException, CookieException, ProcessException {
        Post p = (Post) ha;
        MultipartEntity entity = new MultipartEntity();
        for (String key : p.getParams().keySet()) {
            Object content = p.getParams().get(key);
            if (content != null) {
                if (content instanceof String)
                    entity.addPart(key, new StringBody((String) content, Charset.forName(p.getCharset())));
                else if (content instanceof File)
                    entity.addPart(key, new FileBody((File) content));
            }
        }
        ((HttpPost) requestBase).setEntity(entity);
        debug(requestBase, ha, contentProcessable);
        HttpResponse res = execute(requestBase);
        ByteArrayOutputStream byte1 = new ByteArrayOutputStream();
        res.getEntity().writeTo(byte1);
        String out = new String(byte1.toByteArray());
        out = contentProcessable.processReturningText(out, ha);
        if (contentProcessable instanceof CookieValidateable && client instanceof DefaultHttpClient)
            ((CookieValidateable) contentProcessable).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
        res.getEntity().consumeContent();
        return out;
    }

    /**
     * Process a GET Message.
     *
     * @param requestBase
     *            a
     * @param cp
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    private String get(HttpRequestBase requestBase, ContentProcessable cp, HttpAction ha) throws IOException, CookieException, ProcessException {
        showCookies();
        debug(requestBase, ha, cp);
        String out = """";
        HttpResponse res = execute(requestBase);
        StringBuffer sb = new StringBuffer();
        BufferedReader br = null;
        try {
            Charset charSet = Charset.forName(ha.getCharset());
            //      Header header = res.getEntity().getContentType();
            //      if (header != null) {
            //        System.out.println(res.getLastHeader(""Content-Encoding""));
            //
            //      }
            br = new BufferedReader(new InputStreamReader(res.getEntity().getContent(), charSet));
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
        } finally {
            if (br != null)
                br.close();
        }
        out = sb.toString();
        if (cp != null) {
            if (cp instanceof CookieValidateable && client instanceof DefaultHttpClient)
                ((CookieValidateable) cp).validateReturningCookies(cookieTransform(((DefaultHttpClient) client).getCookieStore().getCookies()), ha);
            out = cp.processReturningText(out, ha);
        }
        res.getEntity().consumeContent();
        return out;
    }

    private HttpResponse execute(HttpRequestBase requestBase) throws IOException, ClientProtocolException, ProcessException {
        HttpResponse res = client.execute(requestBase);
        StatusLine statusLine = res.getStatusLine();
        int code = statusLine.getStatusCode();
        if (code >= HttpStatus.SC_BAD_REQUEST) {
            throw new ProcessException(""invalid status: "" + statusLine + ""; for "" + requestBase.getURI());
        }
        return res;
    }

    /**
     * Process a GET Message.
     * @param get
     *            a
     * @return a returning message, not null
     * @throws IOException on problems
     * @throws CookieException on problems
     * @throws ProcessException on problems
     */
    public byte[] get(Get get) throws IOException, CookieException, ProcessException {
        showCookies();
        HttpGet authgets = new HttpGet(get.getRequest());
        return get(authgets, null, get).getBytes();
    }

    private Map<String, String> cookieTransform(List<Cookie> ca) {
        Map<String, String> m = new HashMap<String, String>();
        for (Cookie cookie : ca) {
            m.put(cookie.getName(), cookie.getValue());
        }
        return m;
    }

    /**
     * send the cookies to the logger.
     *
     * @param client
     *            a
     *            @deprecated is a bit too chatty
     */
    @Deprecated
    private void showCookies() {
        if (client instanceof DefaultHttpClient && log.isDebugEnabled()) {
            List<Cookie> cookies = ((DefaultHttpClient) client).getCookieStore().getCookies();
            if (cookies.size() > 0) {
                StringBuffer cStr = new StringBuffer();
                for (Cookie cookie : cookies) {
                    cStr.append(cookie.toString() + "", "");
                }
                log.debug(""cookie: {"" + cStr + ""}"");
            }
        }
    }

    private void debug(HttpUriRequest e, HttpAction ha, ContentProcessable cp) {
        if (log.isDebugEnabled() && cp != null) {
            String continueing = """";
            if (prevHash == cp.hashCode()) {
                continueing = "" [continuing req]"";
            } else {
                continueing = """";
            }
            prevHash = cp.hashCode();
            String epath = e.getURI().toString();
            int sl = epath.lastIndexOf(""/"");
            epath = epath.substring(0, sl);
            String type = """";
            if (ha instanceof Post) {
                type = ""(POST "";
            } else if (ha instanceof Get) {
                type = ""(GET "";
            }
            type += cp.getClass().getSimpleName() + "")"" + continueing;
            log.debug(""message "" + type + "" is: \n\t own: "" + getHostUrl() + epath + ""\n\t act: "" + ha.getRequest());
        }
    }

    /**
     * @return the
     */
    public String getHostUrl() {
        return host.toURI();
    }
}
","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {","// HttpActionClient_1Test.java
package net.sourceforge.jwbf.core.actions;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.CookieException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.params.ClientPNames;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpActionClient}.
* It contains ten unit test cases for the {@link HttpActionClient#get(Get)} method.
*/
class HttpActionClient_1Test {

		private static final String TEST_URL = ""http://localhost:8080/"";
		
		private static final String TEST_URL_WITH_PATH = ""http://localhost:8080/test/"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE = ""http://localhost:8080/test/test.html"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM = ""http://localhost:8080/test/test.html?test=test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_FRAGMENT = ""http://localhost:8080/test/test.html#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT_AND_PROTOCOL = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT_AND_PROTOCOL_AND_USER_INFO = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND_URI_AND_URL_AND_FILE_AND_PATH_AND_HOST_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF = ""http://localhost:8080/test/test.html?test=test#test"";
		
		private static final String TEST_URL_WITH_PATH_AND_FILE_AND_PARAM_AND_FRAGMENT_AND_PORT_AND_PROTOCOL_AND_USER_INFO_AND_QUERY_AND_AUTHORITY_AND_REF_AND"
cmpl-6u3R1xrYSGgJrLF3an29On0S55kiQ,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_0Test.java,52.622326135635376,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {","// HttpBot_0Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_0Test {

		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_0() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getInstance()} method.
*/
class HttpBot_1Test {
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_0() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_1() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_2() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_3() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_4() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_5() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_6() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_7() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_8() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
		/**
		* Test method for {@link HttpBot#getInstance()}.
		*/
		@Test
		void testGetInstance_9() {
				HttpBot bot = HttpBot.getInstance();
				assertNotNull(bot);
		}
		
}

// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcess"
cmpl-6u3S48mypEWIoxhjjRDKBatn7rED2,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_1Test.java,44.72659397125244,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {","// HttpBot_1Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#performAction(ContentProcessable)} method.
*/
class HttpBot_1Test {

		private HttpBot bot;
		private HttpActionClient cc;
		private String url;
		
		/**
		 * Test method for {@link HttpBot#performAction(ContentProcessable)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testPerformAction() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(IllegalArgumentException.class, () -> {
				bot.performAction(null);
			});
			
			// Test case 5
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.performAction(new GetPage(""http://www.google.com""));
			});
			
			// Test case 6
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.performAction(new GetPage(""http://www.google.com""));
			});
			
			// Test case 7
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.performAction(new GetPage(""http://www.google.com""));
			});
			
			// Test case 8
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.performAction(new GetPage(""http://www.google.com""));
			});
			
			// Test case 9
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.performAction(new Get(""http://www.google.com""));
			});
			
			// Test case 10
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.performAction(new Get(""http://www.google.com""));
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getHostUrl()}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetHostUrl() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getHostUrl();
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertEquals(""http://www.google.com"", bot.getHostUrl());
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertEquals(""http://www.google.com"", bot.getHostUrl());
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertEquals(""http://www.google.com"", bot.getHostUrl());
			
		}
		
		/**
		 * Test method for {@link HttpBot#getPage(String)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetPage() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getPage(""http://www.google.com"");
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getBytes(String)}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetBytes() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 2
			bot = new HttpBot(""http://www.google.com"");
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 3
			bot = new HttpBot(new URL(""http://www.google.com""));
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
			// Test case 4
			cc = new HttpActionClient(new URL(""http://www.google.com""));
			bot = new HttpBot(cc);
			assertThrows(ActionException.class, () -> {
				bot.getBytes(""http://www.google.com"");
			});
			
		}
		
		/**
		 * Test method for {@link HttpBot#getClient()}.
		 * @throws MalformedURLException 
		 */
		@Test
		void testGetClient() throws MalformedURLException {
			
			// Test case 1
			bot = new HttpBot();
			assertThrows(ActionException.class, () -> {
"
cmpl-6u3T7393JIBKsBpvBOby0XKKJxiv1,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_2Test.java,60.01595759391785,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {","// HttpBot_2Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getPage(String)} method.
*/
class HttpBot_2Test {

		private static final String URL = ""http://www.google.com/"";
		private static final String URL_2 = ""http://www.google.com/search?q=test"";
		private static final String URL_3 = ""http://www.google.com/search?q=test&hl=en"";
		private static final String URL_4 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search"";
		private static final String URL_5 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f"";
		private static final String URL_6 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq="";
		private static final String URL_7 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi="";
		private static final String URL_8 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql="";
		private static final String URL_9 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e"";
		private static final String URL_10 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0"";
		
		private static final String URL_11 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853"";
		private static final String URL_12 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ"";
		private static final String URL_13 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ&sei=XgQXTs3bC8jHswbN2ZWnDQ"";
		private static final String URL_14 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ&sei=XgQXTs3bC8jHswbN2ZWnDQ&ved=0CAcQsAQ"";
		private static final String URL_15 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ&sei=XgQXTs3bC8jHswbN2ZWnDQ&ved=0CAcQsAQ&iact=rc&dur=8&page=1&start=0&ndsp=12"";
		private static final String URL_16 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ&sei=XgQXTs3bC8jHswbN2ZWnDQ&ved=0CAcQsAQ&iact=rc&dur=8&page=1&start=0&ndsp=12&tx=66&ty=37"";
		private static final String URL_17 = ""http://www.google.com/search?q=test&hl=en&btnG=Google+Search&aq=f&oq=&aqi=&aql=&gs_sm=e&gs_upl=0l0l0l0l0l0l0l0l0l0l0l0ll0l0&bav=on.2,or.r_gc.r_pw.r_qf.,cf.osb&fp=d9b9b8b8b8b8b8b8&biw=1280&bih=853&um=1&ie=UTF-8&tbm=isch&source=og&sa=N&tab=wi&ei=XQQXTs3bC8jHswbN2ZWnDQ&sei=XgQXTs3bC8jH"
cmpl-6u3U5EOoGdf8pToqbCIDMnVgEikQt,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/HttpBot_3Test.java,61.35965371131897,length,"// HttpBot.java
/*
 * Copyright 2007 Thomas Stock.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Philipp Kohl
 */
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;

/**
 * @author Thomas Stock
 */
public class HttpBot {

    private HttpActionClient cc;

    private String url;

    /**
     * do nothing, but keep in mind, that you have to setup the connection
     */
    public HttpBot() {
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final String url) {
        this.url = url;
        try {
            setConnection(new URL(url));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Design for extension.
     *
     * @param cc
     *          a
     */
    public HttpBot(HttpActionClient cc) {
        this.cc = cc;
    }

    /**
     * Design for extension.
     *
     * @param url
     *          of the host
     */
    public HttpBot(final URL url) {
        setConnection(url);
    }

    /**
     * Returns a {@link HttpBot} which supports only its basic methods. Use
     * {@link #getPage(String)} for an basic read of content.
     *
     * @deprecated do not use this
     * @return a
     */
    @Deprecated
    public static HttpBot getInstance() {
        try {
            return new HttpBot(new URL(""http://localhost/""));
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param client
     *          if you whant to add some specials
     */
    public final void setConnection(final HttpActionClient client) {
        client.getClass();
        cc = client;
    }

    public final String getHostUrl() {
        return cc.getHostUrl();
    }

    /**
     * @param a
     *          a
     * @return text
     */
    public synchronized String performAction(final ContentProcessable a) {
        return cc.performAction(a);
    }

    /**
     * @param hostUrl
     *          base url of a wiki site to connect with; example:
     *          http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final String hostUrl) {
        try {
            setConnection(new URL(hostUrl));
        } catch (MalformedURLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final String getPage(String u) {
        try {
            URL url = new URL(u);
            setConnection(url.getProtocol() + ""://"" + url.getHost());
        } catch (MalformedURLException e) {
            throw new ActionException(e);
        }
        GetPage gp = new GetPage(u);
        try {
            performAction(gp);
        } catch (ProcessException e) {
            throw new ActionException(e);
        }
        return gp.getText();
    }

    /**
     * Simple method to get plain HTML or XML data e.g. from custom specialpages
     * or xml newsfeeds.
     *
     * @param u
     *          url like index.php?title=Main_Page
     * @return HTML content
     */
    public final byte[] getBytes(String u) {
        try {
            return cc.get(new Get(u));
        } catch (ProcessException e) {
            throw new ActionException(e);
        } catch (IOException e) {
            throw new ActionException(e);
        }
    }

    /**
     * @return a
     */
    public final HttpActionClient getClient() {
        return cc;
    }

    /**
     * @param hostUrl
     *          like http://www.yourOwnWiki.org/wiki/
     */
    public final void setConnection(final URL hostUrl) {
        setConnection(new HttpActionClient(hostUrl));
    }

    /**
     * TODO check usage of hosturl
     *
     * @deprecated
     */
    @Deprecated
    public String getUrl() {
        return url;
    }
}
","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {","// HttpBot_3Test.java
package net.sourceforge.jwbf.core.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.GetPage;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpBot}.
* It contains ten unit test cases for the {@link HttpBot#getBytes(String)} method.
*/
class HttpBot_3Test {

	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_2() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_3() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_4() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_5() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_6() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_7() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_8() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_9() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
	/**
	 * Test method for {@link HttpBot#getBytes(String)}.
	 * @throws IOException 
	 * @throws ProcessException 
	 * @throws ActionException 
	 */
	@Test
	void testGetBytes_10() throws ActionException, ProcessException, IOException {
		HttpBot bot = new HttpBot();
		bot.setConnection(new HttpActionClient(new URL(""http://localhost/"")));
		byte[] bytes = bot.getBytes(""http://localhost/"");
		assertNotNull(bytes);
		assertTrue(bytes.length &gt; 0);
	}
	
}</code></pre>
</div>
</div>

</section>
</div>

<div class=""row"">
<section id=""coverage-report"" class=""col-12"">
<div class=""page-header"">
<h2>Coverage report<small> for <a href=""http://localhost:8080/job/JWBF-master/ws/target/site/jacoco/index.html"">JWBF-master</a></small></h2>
</div>

<div class=""row"">
<div class=""col-6"">
<div class=""panel panel-default"">
<div class=""panel-heading"">
<h3 class=""panel-title"">Classes</h3>
</div>
<div class=""panel-body"">
<div class=""row"">
<div class=""col-6"">
<div class=""progress"">
<div class=""progress-bar progress-bar-success"" role=""progressbar"" style=""width: 100.0%;"" aria-valuenow=""100"" aria-valuemin=""0"" aria-valuemax=""100"">100.0% (100/100)</div>
</div>
</div>
<div class=""col-6"">
<div class=""progress"">
<div class=""progress-bar progress-bar-danger"" role=""progressbar"" style=""width: 0.0%;"" aria-valuenow=""0"" aria-valuemin=""0"" aria-valuemax=""100"">0.0% (0/100)</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class=""col-6"">
<div class=""panel panel-default"">
<div class=""panel-heading"">
<h3 class=""panel-title"">Methods</h3>
</div>
<div class=""panel-body"">
<div class=""row"
cmpl-6u3V55DkMnOthIgEx27ujvfXEWzMM,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/util/SimpleCache_0Test.java,51.41700553894043,length,"// SimpleCache.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;

@Slf4j
public class SimpleCache implements CacheHandler {

    private final File folder;

    private final String ext = "".txt"";

    private final int maxSaveTimeMils;

    private final int objectLiveTimeMilis = 100;

    private final Map<String, CachArticle> dynStore = new HashMap<String, CachArticle>();

    public SimpleCache(File folder, int maxSaveTimeMils) {
        this.folder = folder;
        this.maxSaveTimeMils = maxSaveTimeMils;
    }

    /**
     * {@inheritDoc}
     */
    public boolean containsKey(String title) {
        maintain(title);
        File f = new File(folder, getChecksum(title) + ext);
        return f.exists();
    }

    private void maintain(String title) {
        File fx = new File(folder, getChecksum(title) + ext);
        if (fx.exists()) {
            CachArticle it = read(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + maxSaveTimeMils;
            // TODO RM
            System.out.println(""maintain: timedif file "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: delete: "" + fx.getAbsolutePath());
                dynStore.remove(it.getTitle());
                fx.delete();
            }
        }
        if (dynStore.containsKey(title)) {
            CachArticle it = dynStore.get(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + objectLiveTimeMilis;
            // TODO RM
            System.out.println(""maintain: timedif dyn  "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: remove: "" + it.getTitle());
                dynStore.remove(it.getTitle());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle get(String title) {
        if (containsKey(title))
            return read(title);
        return new SimpleArticle(title);
    }

    /**
     * {@inheritDoc}
     */
    public void put(SimpleArticle sa) {
        write2File(new CachArticle(sa));
    }

    protected void write2File(CachArticle ca) {
        OutputStream fos = null;
        try {
            File sf = new File(folder, getChecksum(ca.getTitle()) + ext);
            // TODO RM
            log.debug(""write2File "" + sf.getAbsolutePath());
            fos = new FileOutputStream(sf);
            ObjectOutputStream o = new ObjectOutputStream(fos);
            o.writeObject(ca);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected String getChecksum(String s) {
        byte[] bytes = s.getBytes();
        Checksum checksumEngine = new CRC32();
        checksumEngine.update(bytes, 0, bytes.length);
        long checksum = checksumEngine.getValue();
        return Long.toHexString(checksum);
    }

    private CachArticle read(String title) {
        if (dynStore.containsKey(title)) {
            // TODO RM
            log.debug(""readFrom Map"");
            return dynStore.get(title);
        } else {
            CachArticle temp = readFromFile(title);
            dynStore.put(title, temp);
            return temp;
        }
    }

    protected CachArticle readFromFile(String title) {
        InputStream fis = null;
        try {
            File rf = new File(folder, getChecksum(title) + ext);
            fis = new FileInputStream(rf);
            // TODO RM
            log.debug(""readFromFile: "" + rf.getAbsolutePath());
            ObjectInputStream o = new ObjectInputStream(fis);
            CachArticle sa = (CachArticle) o.readObject();
            return sa;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new CachArticle();
    }
}
","// SimpleCache_0Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#containsKey(String)} method.
*/
class SimpleCache_0Test {","// SimpleCache_0Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#containsKey(String)} method.
*/
class SimpleCache_0Test {

		private static final String TEST_FILE_NAME = ""test.txt"";
		private static final String TEST_FILE_NAME_2 = ""test2.txt"";
		private static final String TEST_FILE_NAME_3 = ""test3.txt"";
		private static final String TEST_FILE_NAME_4 = ""test4.txt"";
		private static final String TEST_FILE_NAME_5 = ""test5.txt"";
		private static final String TEST_FILE_NAME_6 = ""test6.txt"";
		private static final String TEST_FILE_NAME_7 = ""test7.txt"";
		private static final String TEST_FILE_NAME_8 = ""test8.txt"";
		private static final String TEST_FILE_NAME_9 = ""test9.txt"";
		private static final String TEST_FILE_NAME_10 = ""test10.txt"";
		private static final String TEST_FILE_NAME_11 = ""test11.txt"";
		private static final String TEST_FILE_NAME_12 = ""test12.txt"";
		private static final String TEST_FILE_NAME_13 = ""test13.txt"";
		private static final String TEST_FILE_NAME_14 = ""test14.txt"";
		private static final String TEST_FILE_NAME_15 = ""test15.txt"";
		private static final String TEST_FILE_NAME_16 = ""test16.txt"";
		private static final String TEST_FILE_NAME_17 = ""test17.txt"";
		private static final String TEST_FILE_NAME_18 = ""test18.txt"";
		private static final String TEST_FILE_NAME_19 = ""test19.txt"";
		private static final String TEST_FILE_NAME_20 = ""test20.txt"";
		private static final String TEST_FILE_NAME_21 = ""test21.txt"";
		private static final String TEST_FILE_NAME_22 = ""test22.txt"";
		private static final String TEST_FILE_NAME_23 = ""test23.txt"";
		private static final String TEST_FILE_NAME_24 = ""test24.txt"";
		private static final String TEST_FILE_NAME_25 = ""test25.txt"";
		private static final String TEST_FILE_NAME_26 = ""test26.txt"";
		private static final String TEST_FILE_NAME_27 = ""test27.txt"";
		private static final String TEST_FILE_NAME_28 = ""test28.txt"";
		private static final String TEST_FILE_NAME_29 = ""test29.txt"";
		private static final String TEST_FILE_NAME_30 = ""test30.txt"";
		private static final String TEST_FILE_NAME_31 = ""test31.txt"";
		private static final String TEST_FILE_NAME_32 = ""test32.txt"";
		private static final String TEST_FILE_NAME_33 = ""test33.txt"";
		private static final String TEST_FILE_NAME_34 = ""test34.txt"";
		private static final String TEST_FILE_NAME_35 = ""test35.txt"";
		private static final String TEST_FILE_NAME_36 = ""test36.txt"";
		private static final String TEST_FILE_NAME_37 = ""test37.txt"";
		private static final String TEST_FILE_NAME_38 = ""test38.txt"";
		private static final String TEST_FILE_NAME_39 = ""test39.txt"";
		private static final String TEST_FILE_NAME_40 = ""test40.txt"";
		private static final String TEST_FILE_NAME_41 = ""test41.txt"";
		private static final String TEST_FILE_NAME_42 = ""test42.txt"";
		private static final String TEST_FILE_NAME_43 = ""test43.txt"";
		private static final String TEST_FILE_NAME_44 = ""test44.txt"";
		private static final String TEST_FILE_NAME_45 = ""test45.txt"";
		private static final String TEST_FILE_NAME_46 = ""test46.txt"";
		private static final String TEST_FILE_NAME_47 = ""test47.txt"";
		private static final String TEST_FILE_NAME_48 = ""test48.txt"";
		private static final String TEST_FILE_NAME_49 = ""test49.txt"";
		private static final String TEST_FILE_NAME_50 = ""test50.txt"";
		private static final String TEST_FILE_NAME_51 = ""test51.txt"";
		private static final String TEST_FILE_NAME_52 = ""test52.txt"";
		private static final String TEST_FILE_NAME_53 = ""test53.txt"";
		private static final String TEST_FILE_NAME_54 = ""test54.txt"";
		private static final String TEST_FILE_NAME_55 = ""test55.txt"";
		private static final String TEST_FILE_NAME_56 = ""test56.txt"";
		private static final String TEST_FILE_NAME_57 = ""test57.txt"";
		private static final String TEST_FILE_NAME_58 = ""test58.txt"";
		private static final String TEST_FILE_NAME_59 = ""test59.txt"";
		private static final String TEST_FILE_NAME_60 = ""test60.txt"";
		private static final String TEST_FILE_NAME_61 = ""test61.txt"";
		private static final String TEST_FILE_NAME_62 = ""test62.txt"";
		private static final String TEST_FILE_NAME_63 = ""test63.txt"";
		private static final String TEST_FILE_NAME_64 = ""test64.txt"";
		private static final String TEST_FILE_NAME_65 = ""test65.txt"";
		private static final String TEST_FILE_NAME_66 = ""test66.txt"";
		private static final String TEST_FILE_NAME_67 = ""test67.txt"";
		private static final String TEST_FILE_NAME_68 = ""test68.txt"";
		private static final String TEST_FILE_NAME_69 = ""test69.txt"";
		private static final String TEST_FILE_NAME_70 = ""test70.txt"";
		private static final String TEST_FILE_NAME_71 = ""test71.txt"";
		private static final String TEST_FILE_NAME_72 = ""test72.txt"";
		private static final String TEST_FILE_NAME_73 = ""test73.txt"";
		private static final String TEST_FILE_NAME_74 = ""test74.txt"";
		private static final String TEST_FILE_NAME_75 = ""test75.txt"";
		private static final String TEST_FILE_NAME_76 = ""test76.txt"";
		private static final String TEST_FILE_NAME_77 = ""test77.txt"";
		private static final String TEST_FILE_NAME_78 = ""test78.txt"";
		private static final String TEST_FILE_NAME_79 = ""test79.txt"";
		private static final String TEST_FILE_NAME_80 = ""test80.txt"";
		private static final String TEST_FILE_NAME_81 = ""test81.txt"";
		private static final String TEST_FILE_NAME_82 = ""test82.txt"";
		private static final String TEST_FILE_NAME_83 = ""test83.txt"";
		private static final String TEST_FILE_NAME_84 = ""test84.txt"";
		private static final String TEST_FILE_NAME_85 = ""test85.txt"";
		private static final String TEST_FILE_NAME_86 = ""test86.txt"";
		private static final String TEST_FILE_NAME_87 = ""test87.txt"";
		private static final String TEST_FILE_NAME_88 = ""test88.txt"";
		private static final String TEST_FILE_NAME_89 = ""test89.txt"";
		private static final String TEST_FILE_NAME_90 = ""test90.txt"";
		private static final String TEST_FILE_NAME_91 = ""test91.txt"";
		private static final String TEST_FILE_NAME_92 = ""test92.txt"";
		private static final String TEST_FILE_NAME_93 = ""test93.txt"";
		private static final String TEST_FILE_NAME_94 = ""test94.txt"";
		private static final String TEST_FILE_NAME_95 = ""test95.txt"";
		private static final String TEST"
cmpl-6u3W8eoizE8K3RKjO7wzkkO9qBXZu,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/bots/util/SimpleCache_1Test.java,48.71409201622009,length,"// SimpleCache.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;

@Slf4j
public class SimpleCache implements CacheHandler {

    private final File folder;

    private final String ext = "".txt"";

    private final int maxSaveTimeMils;

    private final int objectLiveTimeMilis = 100;

    private final Map<String, CachArticle> dynStore = new HashMap<String, CachArticle>();

    public SimpleCache(File folder, int maxSaveTimeMils) {
        this.folder = folder;
        this.maxSaveTimeMils = maxSaveTimeMils;
    }

    /**
     * {@inheritDoc}
     */
    public boolean containsKey(String title) {
        maintain(title);
        File f = new File(folder, getChecksum(title) + ext);
        return f.exists();
    }

    private void maintain(String title) {
        File fx = new File(folder, getChecksum(title) + ext);
        if (fx.exists()) {
            CachArticle it = read(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + maxSaveTimeMils;
            // TODO RM
            System.out.println(""maintain: timedif file "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: delete: "" + fx.getAbsolutePath());
                dynStore.remove(it.getTitle());
                fx.delete();
            }
        }
        if (dynStore.containsKey(title)) {
            CachArticle it = dynStore.get(title);
            long dif = it.getSaveDate().getTime() - System.currentTimeMillis() + objectLiveTimeMilis;
            // TODO RM
            System.out.println(""maintain: timedif dyn  "" + dif);
            if (dif < 0) {
                // TODO RM
                log.debug(""maintain: remove: "" + it.getTitle());
                dynStore.remove(it.getTitle());
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle get(String title) {
        if (containsKey(title))
            return read(title);
        return new SimpleArticle(title);
    }

    /**
     * {@inheritDoc}
     */
    public void put(SimpleArticle sa) {
        write2File(new CachArticle(sa));
    }

    protected void write2File(CachArticle ca) {
        OutputStream fos = null;
        try {
            File sf = new File(folder, getChecksum(ca.getTitle()) + ext);
            // TODO RM
            log.debug(""write2File "" + sf.getAbsolutePath());
            fos = new FileOutputStream(sf);
            ObjectOutputStream o = new ObjectOutputStream(fos);
            o.writeObject(ca);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                fos.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    protected String getChecksum(String s) {
        byte[] bytes = s.getBytes();
        Checksum checksumEngine = new CRC32();
        checksumEngine.update(bytes, 0, bytes.length);
        long checksum = checksumEngine.getValue();
        return Long.toHexString(checksum);
    }

    private CachArticle read(String title) {
        if (dynStore.containsKey(title)) {
            // TODO RM
            log.debug(""readFrom Map"");
            return dynStore.get(title);
        } else {
            CachArticle temp = readFromFile(title);
            dynStore.put(title, temp);
            return temp;
        }
    }

    protected CachArticle readFromFile(String title) {
        InputStream fis = null;
        try {
            File rf = new File(folder, getChecksum(title) + ext);
            fis = new FileInputStream(rf);
            // TODO RM
            log.debug(""readFromFile: "" + rf.getAbsolutePath());
            ObjectInputStream o = new ObjectInputStream(fis);
            CachArticle sa = (CachArticle) o.readObject();
            return sa;
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            try {
                fis.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return new CachArticle();
    }
}
","// SimpleCache_1Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#get(String)} method.
*/
class SimpleCache_1Test {","// SimpleCache_1Test.java
package net.sourceforge.jwbf.core.bots.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.CRC32;
import java.util.zip.Checksum;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCache}.
* It contains ten unit test cases for the {@link SimpleCache#get(String)} method.
*/
class SimpleCache_1Test {

		private static final String TEST_FOLDER = ""test_cache"";
		private static final String TEST_FILE = ""test_cache/test.txt"";
		private static final String TEST_FILE_2 = ""test_cache/test2.txt"";
		private static final String TEST_FILE_3 = ""test_cache/test3.txt"";
		private static final String TEST_FILE_4 = ""test_cache/test4.txt"";
		private static final String TEST_FILE_5 = ""test_cache/test5.txt"";
		private static final String TEST_FILE_6 = ""test_cache/test6.txt"";
		private static final String TEST_FILE_7 = ""test_cache/test7.txt"";
		private static final String TEST_FILE_8 = ""test_cache/test8.txt"";
		private static final String TEST_FILE_9 = ""test_cache/test9.txt"";
		private static final String TEST_FILE_10 = ""test_cache/test10.txt"";
		private static final String TEST_FILE_11 = ""test_cache/test11.txt"";
		private static final String TEST_FILE_12 = ""test_cache/test12.txt"";
		private static final String TEST_FILE_13 = ""test_cache/test13.txt"";
		private static final String TEST_FILE_14 = ""test_cache/test14.txt"";
		private static final String TEST_FILE_15 = ""test_cache/test15.txt"";
		private static final String TEST_FILE_16 = ""test_cache/test16.txt"";
		private static final String TEST_FILE_17 = ""test_cache/test17.txt"";
		private static final String TEST_FILE_18 = ""test_cache/test18.txt"";
		private static final String TEST_FILE_19 = ""test_cache/test19.txt"";
		private static final String TEST_FILE_20 = ""test_cache/test20.txt"";
		private static final String TEST_FILE_21 = ""test_cache/test21.txt"";
		private static final String TEST_FILE_22 = ""test_cache/test22.txt"";
		private static final String TEST_FILE_23 = ""test_cache/test23.txt"";
		private static final String TEST_FILE_24 = ""test_cache/test24.txt"";
		private static final String TEST_FILE_25 = ""test_cache/test25.txt"";
		private static final String TEST_FILE_26 = ""test_cache/test26.txt"";
		private static final String TEST_FILE_27 = ""test_cache/test27.txt"";
		private static final String TEST_FILE_28 = ""test_cache/test28.txt"";
		private static final String TEST_FILE_29 = ""test_cache/test29.txt"";
		private static final String TEST_FILE_30 = ""test_cache/test30.txt"";
		private static final String TEST_FILE_31 = ""test_cache/test31.txt"";
		private static final String TEST_FILE_32 = ""test_cache/test32.txt"";
		private static final String TEST_FILE_33 = ""test_cache/test33.txt"";
		private static final String TEST_FILE_34 = ""test_cache/test34.txt"";
		private static final String TEST_FILE_35 = ""test_cache/test35.txt"";
		private static final String TEST_FILE_36 = ""test_cache/test36.txt"";
		private static final String TEST_FILE_37 = ""test_cache/test37.txt"";
		private static final String TEST_FILE_38 = ""test_cache/test38.txt"";
		private static final String TEST_FILE_39 = ""test_cache/test39.txt"";
		private static final String TEST_FILE_40 = ""test_cache/test40.txt"";
		private static final String TEST_FILE_41 = ""test_cache/test41.txt"";
		private static final String TEST_FILE_42 = ""test_cache/test42.txt"";
		private static final String TEST_FILE_43 = ""test_cache/test43.txt"";
		private static final String TEST_FILE_44 = ""test_cache/test44.txt"";
		private static final String TEST_FILE_45 = ""test_cache/test45.txt"";
		private static final String TEST_FILE_46 = ""test_cache/test46.txt"";
		private static final String TEST_FILE_47 = ""test_cache/test47.txt"";
		private static final String TEST_FILE_48 = ""test_cache/test48.txt"";
		private static final String TEST_FILE_49 = ""test_cache/test49.txt"";
		private static final String TEST_FILE_50 = ""test_cache/test50.txt"";
		private static final String TEST_FILE_51 = ""test_cache/test51.txt"";
		private static final String TEST_FILE_52 = ""test_cache/test52.txt"";
		private static final String TEST_FILE_53 = ""test_cache/test53.txt"";
		private static final String TEST_FILE_54 = ""test_cache/test54.txt"";
		private static final String TEST_FILE_55 = ""test_cache/test55.txt"";
		private static final String TEST_FILE_56 = ""test_cache/test56.txt"";
		private static final String TEST_FILE_57 = ""test_cache/test57.txt"";
		private static final String TEST_FILE_58 = ""test_cache/test58.txt"";
		private static final String TEST_FILE_59 = ""test_cache/test59.txt"";
		private static final String TEST_FILE_60 = ""test_cache/test60.txt"";
		private static final String TEST_FILE_61 = ""test_cache/test61.txt"";
		private static final String TEST_FILE_62 = ""test_cache/test62.txt"";
		private static final String TEST_FILE_63 = ""test_cache/test63.txt"";
		private static final String TEST_FILE_64 = ""test_cache/test64.txt"";
		private static final String TEST_FILE_65 = ""test_cache/test65.txt"";
		private static final String TEST_FILE_66 = ""test_cache/test66.txt"";
		private static final String TEST_FILE_67 = ""test_cache/test67.txt"";
		private static final String TEST_FILE_68 = ""test_cache/test68.txt"";
		private static final String TEST_FILE_69 = ""test_cache/test69.txt"";
		private static final String TEST_FILE_70 = ""test_cache/test70.txt"";
		private static final String TEST_FILE_71 = ""test_cache/test71.txt"";
		private static final String TEST_FILE_72 = ""test_cache/test72.txt"";
		private static final String TEST_FILE_73 = ""test_cache/test73.txt"";
		private static final String TEST_FILE_74 = ""test_cache/test74.txt"";
		private static final String TEST_FILE_75 = ""test_cache/test75.txt"";
		private static final String TEST_FILE_76 = ""test_cache/test76.txt"";
		private static final String TEST_FILE_77 = ""test_cache/test77.txt"";
		private static final String TEST_FILE_78 = ""test_cache/test78.txt"";
		private static final String TEST_FILE_79 = ""test_cache/test79.txt"";
		private static final String TEST_FILE_80 = ""test_cache/test80.txt"";
		private static final String TEST_FILE_81 = ""test_cache/test81.txt"";
		private static final String TEST_FILE_82 = ""test_cache/test82.txt"";
		private static final String TEST_FILE_83 = ""test_cache/test83.txt"";
		private static final String TEST_FILE_84 = ""test_cache/test84.txt"";
		private static final String TEST_FILE_85 = ""test_cache/test85.txt"";
		private static final String TEST_FILE_86 = ""test_cache/test86.txt"";
		private static final String"
cmpl-6u3XB9INVxiM0ilXU5Y5adpBXCwy0,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/core/contentRep/SimpleArticle.java,53.12160682678223,length,"// SimpleArticle.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;

/**
 * This is a simple content helper class that implements the
 * EditContentAccesable interface, plus setter methods.
 *
 * @author Thomas Stock
 */
public class SimpleArticle implements ArticleMeta, Serializable, Cloneable, ContentSetable {

    /**
     */
    private static final long serialVersionUID = -1368796410854055279L;

    private String title = """";

    private String editSummary = """";

    private String text = """";

    private String editor = """";

    private boolean minorEdit = false;

    private Date editTimestamp = INIT_DATE;

    private String revId = """";

    public static final Date INIT_DATE = new Date(0);

    /**
     */
    public SimpleArticle() {
        // do nothing
    }

    /**
     * @param ca
     *            a
     */
    public SimpleArticle(ContentAccessable ca) {
        if (ca.getTitle() != null) {
            title = ca.getTitle();
        }
        if (ca.getText() != null) {
            text = ca.getText();
        }
        if (ca.getEditSummary() != null) {
            editSummary = ca.getEditSummary();
        }
        if (ca.getEditor() != null) {
            editor = ca.getEditor();
        }
        setMinorEdit(ca.isMinorEdit());
    }

    /**
     * @param sa
     *            a
     */
    public SimpleArticle(ArticleMeta sa) {
        this((ContentAccessable) sa);
        if (sa.getEditTimestamp() != null) {
            editTimestamp = sa.getEditTimestamp();
        }
        if (sa.getRevisionId() != null) {
            revId = sa.getRevisionId();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final Object clone() throws CloneNotSupportedException {
        super.clone();
        return new SimpleArticle(this);
    }

    /**
     * @param text
     *            of article
     * @param title
     *            of article
     * @deprecated use {@link #SimpleArticle(String)} and
     *             {@link #setText(String)} instead.
     */
    @Deprecated
    public SimpleArticle(final String text, final String title) {
        this.text = text;
        this.title = title;
    }

    /**
     * @param title
     *            of article
     */
    public SimpleArticle(final String title) {
        this.title = title;
    }

    /**
     * {@inheritDoc}
     */
    public String getEditSummary() {
        return editSummary;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setEditSummary(java.lang.String)
   */
    public void setEditSummary(final String s) {
        editSummary = s;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isMinorEdit() {
        return minorEdit;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setMinorEdit(boolean)
   */
    public void setMinorEdit(final boolean minor) {
        minorEdit = minor;
    }

    /**
     * @return the
     * @deprecated use {@link #getTitle()} instead
     */
    @Deprecated
    public String getLabel() {
        return getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public String getTitle() {
        return title;
    }

    /**
     * @param label
     *            the label, like ""Main Page""
     * @deprecated use {@link #setTitle(String)} instead
     */
    @Deprecated
    public void setLabel(final String label) {
        setTitle(label);
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setTitle(java.lang.String)
   */
    public void setTitle(final String title) {
        this.title = title;
    }

    /**
     * {@inheritDoc}
     */
    public String getText() {
        return text;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setText(java.lang.String)
   */
    public void setText(final String text) {
        this.text = text;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#addText(java.lang.String)
   */
    public void addText(final String text) {
        setText(getText() + text);
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#addTextnl(java.lang.String)
   */
    public void addTextnl(final String text) {
        setText(getText() + ""\n"" + text);
    }

    /**
     * {@inheritDoc}
     */
    public String getEditor() {
        return editor;
    }

    /* (non-Javadoc)
   * @see net.sourceforge.jwbf.core.contentRep.ContentSetable#setEditor(java.lang.String)
   */
    public void setEditor(final String editor) {
        this.editor = editor;
    }

    /**
     * {@inheritDoc}
     */
    public boolean isRedirect() {
        Pattern pattern = Pattern.compile(""#(.*)redirect(.*)"", Pattern.CASE_INSENSITIVE);
        if (pattern.matcher(text).matches()) {
            return true;
        }
        return false;
    }

    /**
     * @return the edittimestamp in UTC
     */
    public Date getEditTimestamp() {
        return editTimestamp;
    }

    /**
     * @param editTimestamp
     *            set
     * @throws ParseException
     *             if date unparseable
     */
    public void setEditTimestamp(String editTimestamp) throws ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss'Z'"");
        try {
            setEditTimestamp(sdf.parse(editTimestamp));
        } catch (ParseException e) {
            sdf = new SimpleDateFormat(""MM/dd/yy' 'HH:mm:ss"");
            setEditTimestamp(sdf.parse(editTimestamp));
        }
    }

    /**
     * @param d
     *            the
     */
    public void setEditTimestamp(Date d) {
        editTimestamp = d;
    }

    /* (non-Javadoc)
   * @see java.lang.Object#equals(java.lang.Object)
   */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof SimpleArticle))
            return false;
        SimpleArticle other = (SimpleArticle) obj;
        if (editTimestamp == null) {
            if (other.editTimestamp != null)
                return false;
        } else if (!editTimestamp.equals(other.editTimestamp))
            return false;
        if (revId == null) {
            if (other.revId != null)
                return false;
        } else if (!revId.equals(other.revId))
            return false;
        if (text == null) {
            if (other.text != null)
                return false;
        } else if (!text.equals(other.text))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        return true;
    }

    /* (non-Javadoc)
   * @see java.lang.Object#hashCode()
   */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((editTimestamp == null) ? 0 : editTimestamp.hashCode());
        result = prime * result + ((revId == null) ? 0 : revId.hashCode());
        result = prime * result + ((text == null) ? 0 : text.hashCode());
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        return result;
    }

    /**
     * {@inheritDoc}
     */
    public String getRevisionId() {
        return revId;
    }

    /**
     * @param revId
     *            the
     */
    public void setRevisionId(String revId) {
        this.revId = revId;
    }
}
","// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {","// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {

		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest.java
package net.sourceforge.jwbf.core.contentRep;

import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleArticle}.
* It contains ten unit test cases for the {@link SimpleArticle#clone()} method.
*/
class SimpleArticleTest {
		
		/**
		 * Test method for {@link SimpleArticle#clone()}.
		 * @throws CloneNotSupportedException 
		 */
		@Test
		void testClone() throws CloneNotSupportedException {
				SimpleArticle sa = new SimpleArticle();
				SimpleArticle sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setText(""text"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setTitle(""title"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditSummary(""editSummary"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditor(""editor"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setMinorEdit(true);
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setEditTimestamp(""01/01/01 00:00:00"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
				
				sa.setRevisionId(""revId"");
				sa2 = (SimpleArticle) sa.clone();
				assertEquals(sa, sa2);
				assertNotSame(sa, sa2);
		}
}

// SimpleArticleTest"
cmpl-6u3YE8tesyLRECO5iYLuSSU6TfmKx,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/inyoka/bots/InyokaWikiBot_0Test.java,56.999263763427734,length,"// InyokaWikiBot.java
/**
 */
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;

/**
 * This class helps you to interact with each wiki as part of <a
 * href=""http://ubuntuusers.de"" target=""_blank"">Inyoka</a>. This class offers a
 * set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.inyoka.*
 *
 * @author Thomas Stock
 */
public class InyokaWikiBot extends HttpBot implements WikiBot {

    private static int DEFAULT = 0;

    /**
     * @param url
     *          wikihosturl like
     *          ""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&""
     * @throws MalformedURLException
     *           if param url does not represent a well-formed url
     */
    public InyokaWikiBot(String url) throws MalformedURLException {
        super(url);
    }

    /**
     * @param name
     *          of article
     * @return a content representation of requested article, never null
     * @throws ActionException
     *           on problems with http, cookies and io
     * @throws ProcessException
     *           on access problems
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) throws ActionException, ProcessException {
        return getArticle(name, 0);
    }

    public void login(String user, String passwd) throws ActionException {
        throw new ActionException(""Login is not supported"");
    }

    public void writeContent(SimpleArticle sa) throws ActionException, ProcessException {
        throw new ActionException(""Writing is not supported"");
    }

    public void delete(String title) throws ActionException, ProcessException {
        throw new ActionException(""Deleting is not supported"");
    }

    public synchronized Article getArticle(String name, int properties) throws ActionException, ProcessException {
        return new Article(this, readData(name, properties));
    }

    public SimpleArticle readData(String name, int properties) throws ActionException, ProcessException {
        GetRevision ac = new GetRevision(name);
        performAction(ac);
        return ac.getArticle();
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        // TODO incomplete
        return new Userinfo() {

            public String getUsername() {
                return ""unknown"";
            }

            public Set<String> getRights() {
                // TODO Auto-generated method stub
                return null;
            }

            public Set<String> getGroups() {
                // TODO Auto-generated method stub
                return null;
            }
        };
    }

    public String getWikiType() {
        // TODO Auto-generated method stub
        return null;
    }

    public boolean hasCacheHandler() {
        // TODO Auto-generated method stub
        return false;
    }

    public SimpleArticle readData(String name) throws ActionException, ProcessException {
        return readData(name, DEFAULT);
    }

    public void setCacheHandler(Map<String, SimpleArticle> cache) {
        // TODO Auto-generated method stub
    }
}
","// InyokaWikiBot_0Test.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains ten unit test cases for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBot_0Test {","// InyokaWikiBot_0Test.java
package net.sourceforge.jwbf.inyoka.bots;

import java.net.MalformedURLException;
import java.util.Map;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.inyoka.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InyokaWikiBot}.
* It contains ten unit test cases for the {@link InyokaWikiBot#getArticle(String)} method.
*/
class InyokaWikiBot_0Test {

		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_1() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_2() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_3() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_4() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_5() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_6() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_7() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		@Test
		void testGetArticle_8() throws MalformedURLException, ActionException, ProcessException {
				InyokaWikiBot bot = new InyokaWikiBot(""http://wiki.ubuntuusers.de/Startseite?action=export&format=raw&"");
				Article article = bot.getArticle(""Startseite"");
				assertNotNull(article);
				assertEquals(""Startseite"", article.getTitle());
				assertTrue(article.getText().contains(""Willkommen bei Ubuntuusers.de""));
		}
		
		/**
		* Test method for {@link InyokaWikiBot#getArticle(String)}.
		* @throws MalformedURLException 
		* @throws ProcessException 
		* @throws ActionException 
		*/
		"
cmpl-6u3ZH38977ZV8C21BnoFY33oUcBHh,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_0Test.java,54.809550762176514,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {","// MediaWiki_0Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWiki_0Test {

		/**
		 * Test method for {@link MediaWiki#getCharset()}.
		 */
		@Test
		void testGetCharset() {
				assertEquals(""UTF-8"", MediaWiki.getCharset());
		}
		
		/**
		 * Test method for {@link MediaWiki#encode(String)}.
		 * @throws UnsupportedEncodingException 
		 */
		@Test
		void testEncode() throws UnsupportedEncodingException {
				assertEquals(URLEncoder.encode("" "", MediaWiki.getCharset()), MediaWiki.encode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#decode(String)}.
		 */
		@Test
		void testDecode() {
				assertEquals("" "", MediaWiki.decode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#getLast()}.
		 */
		@Test
		void testGetLast() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLast());
		}
		
		/**
		 * Test method for {@link MediaWiki#getLatest()}.
		 */
		@Test
		void testGetLatest() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLatest());
		}
		
		/**
		 * Test method for {@link MediaWiki#getNumber()}.
		 */
		@Test
		void testGetNumber() {
				assertEquals(""1.18"", MediaWiki.Version.MW1_18.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#getIntValue()}.
		 */
		@Test
		void testGetIntValue() {
				assertEquals(118, MediaWiki.Version.MW1_18.getIntValue());
		}
		
		/**
		 * Test method for {@link MediaWiki#greaterEqThen(Version)}.
		 */
		@Test
		void testGreaterEqThen() {
				assertTrue(MediaWiki.Version.MW1_18.greaterEqThen(MediaWiki.Version.MW1_17));
		}
		
		/**
		 * Test method for {@link MediaWiki#valuesStable()}.
		 */
		@Test
		void testValuesStable() {
				assertEquals(14, MediaWiki.Version.valuesStable().length);
		}
		
		/**
		 * Test method for {@link MediaWiki#BOT_GROUPS}.
		 */
		@Test
		void testBOT_GROUPS() {
				Set<String> set = new HashSet<String>();
				set.add(""bot"");
				assertEquals(set, MediaWiki.BOT_GROUPS);
		}
}

// MediaWikiTest.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWikiTest {
		
		/**
		 * Test method for {@link MediaWiki#getCharset()}.
		 */
		@Test
		void testGetCharset() {
				assertEquals(""UTF-8"", MediaWiki.getCharset());
		}
		
		/**
		 * Test method for {@link MediaWiki#encode(String)}.
		 * @throws UnsupportedEncodingException 
		 */
		@Test
		void testEncode() throws UnsupportedEncodingException {
				assertEquals(URLEncoder.encode("" "", MediaWiki.getCharset()), MediaWiki.encode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#decode(String)}.
		 */
		@Test
		void testDecode() {
				assertEquals("" "", MediaWiki.decode("" ""));
		}
		
		/**
		 * Test method for {@link MediaWiki#getLast()}.
		 */
		@Test
		void testGetLast() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLast());
		}
		
		/**
		 * Test method for {@link MediaWiki#getLatest()}.
		 */
		@Test
		void testGetLatest() {
				assertEquals(MediaWiki.Version.MW1_18, MediaWiki.Version.getLatest());
		}
		
		/**
		 * Test method for {@link MediaWiki#getNumber()}.
		 */
		@Test
		void testGetNumber() {
				assertEquals(""1.18"", MediaWiki.Version.MW1_18.getNumber());
		}
		
		/**
		 * Test method for {@link MediaWiki#getIntValue()}.
		 */
		@Test
		void testGetIntValue() {
				assertEquals(118, MediaWiki.Version.MW1_18.getIntValue());
		}
		
		/**
		 * Test method for {@link MediaWiki#greaterEqThen(Version)}.
		 */
		@Test
		void testGreaterEqThen() {
				assertTrue(MediaWiki.Version.MW1_18.greaterEqThen(MediaWiki.Version.MW1_17));
		}
		
		/**
		 * Test method for {@link MediaWiki#valuesStable()}.
		 */
		@Test
		void testValuesStable() {
				assertEquals(14, MediaWiki.Version.valuesStable().length);
		}
		
		/**
		 * Test method for {@link MediaWiki#BOT_GROUPS}.
		 */
		@Test
		void testBOT_GROUPS() {
				Set<String> set = new HashSet<String>();
				set.add(""bot"");
				assertEquals(set, MediaWiki.BOT_GROUPS);
		}
}

// MediaWikiTest.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#getCharset()} method.
*/
class MediaWikiTest {
		
		/**
		 * Test method for {@link MediaWiki#getCharset()}.
		 */
		@Test
		void testGetCharset() {
				assertEquals(""UTF-8"", MediaWiki.getCharset());
		}
		
		/**
		 * Test method for {@link MediaWiki#encode(String)}.
		 * @throws UnsupportedEncodingException 
		 */
		@Test
		void testEncode() throws UnsupportedEnc"
cmpl-6u3aK019y76owV4io4C6xXWIwQqhP,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_1Test.java,53.04848051071167,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {","// MediaWiki_1Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#encode(String)} method.
*/
class MediaWiki_1Test {

	/**
	 * Test method for {@link MediaWiki#encode(String)}.
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	void testEncode() throws UnsupportedEncodingException {
		
		String[] testStrings = {
				"""",
				"" "",
				""\n"",
				""\t"",
				""\r"",
				""\r\n"",
				""\n\r"",
				""\u0020"",
				""\u0021"",
				""\u0022"",
				""\u0023"",
				""\u0024"",
				""\u0025"",
				""\u0026"",
				""\u0027"",
				""\u0028"",
				""\u0029"",
				""\u002A"",
				""\u002B"",
				""\u002C"",
				""\u002D"",
				""\u002E"",
				""\u002F"",
				""\u0030"",
				""\u0031"",
				""\u0032"",
				""\u0033"",
				""\u0034"",
				""\u0035"",
				""\u0036"",
				""\u0037"",
				""\u0038"",
				""\u0039"",
				""\u003A"",
				""\u003B"",
				""\u003C"",
				""\u003D"",
				""\u003E"",
				""\u003F"",
				""\u0040"",
				""\u0041"",
				""\u0042"",
				""\u0043"",
				""\u0044"",
				""\u0045"",
				""\u0046"",
				""\u0047"",
				""\u0048"",
				""\u0049"",
				""\u004A"",
				""\u004B"",
				""\u004C"",
				""\u004D"",
				""\u004E"",
				""\u004F"",
				""\u0050"",
				""\u0051"",
				""\u0052"",
				""\u0053"",
				""\u0054"",
				""\u0055"",
				""\u0056"",
				""\u0057"",
				""\u0058"",
				""\u0059"",
				""\u005A"",
				""\u005B"",
				""\u005C"",
				""\u005D"",
				""\u005E"",
				""\u005F"",
				""\u0060"",
				""\u0061"",
				""\u0062"",
				""\u0063"",
				""\u0064"",
				""\u0065"",
				""\u0066"",
				""\u0067"",
				""\u0068"",
				""\u0069"",
				""\u006A"",
				""\u006B"",
				""\u006C"",
				""\u006D"",
				""\u006E"",
				""\u006F"",
				""\u0070"",
				""\u0071"",
				""\u0072"",
				""\u0073"",
				""\u0074"",
				""\u0075"",
				""\u0076"",
				""\u0077"",
				""\u0078"",
				""\u0079"",
				""\u007A"",
				""\u007B"",
				""\u007C"",
				""\u007D"",
				""\u007E"",
				""\u007F"",
				""\u0080"",
				""\u0081"",
				""\u0082"",
				""\u0083"",
				""\u0084"",
				""\u0085"",
				""\u0086"",
				""\u0087"",
				""\u0088"",
				""\u0089"",
				""\u008A"",
				""\u008B"",
				""\u008C"",
				""\u008D"",
				""\u008E"",
				""\u008F"",
				""\u0090"",
				""\u0091"",
				""\u0092"",
				""\u0093"",
				""\u0094"",
				""\u0095"",
				""\u0096"",
				""\u0097"",
				""\u0098"",
				""\u0099"",
				""\u009A"",
				""\u009B"",
				""\u009C"",
				""\u009D"",
				""\u009E"",
				""\u009F"",
				""\u00A0"",
				""\u00A1"",
				""\u00A2"",
				""\u00A3"",
				""\u00A4"",
				""\u00A5"",
				""\u00A6"",
				""\u00A7"",
				""\u00A8"",
				""\u00A9"",
				""\u00AA"",
				""\u00AB"",
				""\u00AC"",
				""\u00AD"",
				""\u00AE"",
				""\u00AF"",
				""\u00B0"",
				""\u00B1"",
				""\u00B2"",
				""\u00B3"",
				""\u00B4"",
				""\u00B5"",
				""\u00B6"",
				""\u00B7"",
				""\u00B8"",
				""\u00B9"",
				""\u00BA"",
				""\u00BB"",
				""\u00BC"",
				""\u00BD"",
				""\u00BE"",
				""\u00BF"",
				""\u00C0"",
				""\u00C1"",
				""\u00C2"",
				""\u00C3"",
				""\u00C4"",
				""\u00C5"",
				""\u00C6"",
				"""
cmpl-6u3bNQ5Ztihv4zgugMS0dtyHnsQCT,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/MediaWiki_2Test.java,49.23128819465637,length,"// MediaWiki.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;

/**
 * @author Thomas Stock
 */
public final class MediaWiki {

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int ARTICLE = 1 << 1;

    /**
     * @deprecated use {@link #NS_MAIN} instead. Wrong value.
     */
    @Deprecated
    public static final int MEDIA = 1 << 2;

    /**
     * @deprecated use {@link #NS_CATEGORY} instead.
     */
    @Deprecated
    public static final int SUBCATEGORY = 1 << 3;

    static final String CHARSET = ""UTF-8"";

    public static final int NS_MAIN = 0;

    public static final int NS_MAIN_TALK = 1;

    public static final int NS_USER = 2;

    public static final int NS_USER_TALK = 3;

    public static final int NS_META = 4;

    public static final int NS_META_TALK = 5;

    public static final int NS_IMAGES = 6;

    public static final int NS_IMAGES_TALK = 7;

    public static final int NS_MEDIAWIKI = 8;

    public static final int NS_MEDIAWIKI_TALK = 9;

    public static final int NS_TEMPLATE = 10;

    public static final int NS_TEMPLATE_TALK = 11;

    public static final int NS_HELP = 12;

    public static final int NS_HELP_TALK = 13;

    public static final int NS_CATEGORY = 14;

    public static final int NS_CATEGORY_TALK = 15;

    public static final int[] NS_ALL = { NS_MAIN, NS_MAIN_TALK, NS_USER, NS_USER_TALK, NS_META, NS_META_TALK, NS_IMAGES, NS_IMAGES_TALK, NS_MEDIAWIKI, NS_MEDIAWIKI_TALK, NS_TEMPLATE, NS_TEMPLATE_TALK, NS_HELP, NS_HELP_TALK, NS_CATEGORY, NS_CATEGORY_TALK };

    public static final Set<String> BOT_GROUPS = new HashSet<String>();

    static {
        BOT_GROUPS.add(""bot"");
    }

    /**
     * Representaion of MediaWiki version.
     *
     * @author Thomas Stock
     */
    public enum Version {

        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_09,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_10,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_11,
        /**
         * @deprecated requires PHP 5.2 expired 2011-01-06
         */
        MW1_12,
        /**
         * Released 2008-08
         *
         * @deprecated requires PHP 5.2 expired 2011-01-06; is installable but
         *             doesn't work
         */
        MW1_13,
        /**
         * Released 2009-02
         *
         * @deprecated database installer doesn't work anymore
         */
        MW1_14,
        /**
         * Released 2009-06
         */
        MW1_15,
        /**
         * Released 2010-07
         */
        MW1_16,
        /**
         * Released 2011-06
         */
        MW1_17,
        /**
         * Released 2011-11
         */
        MW1_18,
        UNKNOWN,
        DEVELOPMENT;

        private static Version last = UNKNOWN;

        /**
         * @return a, like 1.15
         */
        public String getNumber() {
            return name().replace(""MW"", """").replace(""_0"", ""_"").replace(""_"", ""."");
        }

        private int getIntValue() {
            try {
                return Integer.parseInt(getNumber().replace(""."", """"));
            } catch (Exception e) {
                if (this == DEVELOPMENT)
                    return Integer.MAX_VALUE;
                return -1;
            }
        }

        /**
         * @return the latest version
         */
        public static Version getLatest() {
            if (last == UNKNOWN) {
                Version[] as = valuesStable();
                for (int i = 0; i < as.length; i++) {
                    if (as[i].getIntValue() > last.getIntValue()) {
                        last = as[i];
                    }
                }
            }
            return last;
        }

        /**
         * @deprecated use {@link #getLatest()} instead.
         * @return the latest version
         */
        @Deprecated
        public static Version getLast() {
            return getLatest();
        }

        /**
         * @param v
         *          a
         * @return true if
         */
        public boolean greaterEqThen(Version v) {
            if (v.getIntValue() > getIntValue())
                return false;
            return true;
        }

        /**
         * @return all known stable MW Versions
         */
        public static Version[] valuesStable() {
            Version[] vxN = new Version[Version.values().length - 2];
            Version[] vx = Version.values();
            int j = 0;
            for (int i = 0; i < vx.length; i++) {
                if (!(vx[i].equals(DEVELOPMENT) || vx[i].equals(UNKNOWN))) {
                    vxN[j++] = vx[i];
                }
            }
            return vxN;
        }
    }

    private MediaWiki() {
        // do nothing
    }

    /**
     * @return the
     */
    public static String getCharset() {
        return CHARSET;
    }

    /**
     * @param s
     *          a
     * @return encoded s
     */
    public static String encode(String s) {
        try {
            return URLEncoder.encode(s, MediaWiki.CHARSET);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param s
     *          a
     * @return decoded s
     */
    public static String decode(final String s) {
        String out = HTMLEntities.unhtmlentities(s);
        out = HTMLEntities.unhtmlQuotes(out);
        return out;
    }
}
","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {","// MediaWiki_2Test.java
package net.sourceforge.jwbf.mediawiki.actions;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWiki}.
* It contains ten unit test cases for the {@link MediaWiki#decode(String)} method.
*/
class MediaWiki_2Test {

	/**
	 * Test method for {@link MediaWiki#decode(String)}.
	 * @throws UnsupportedEncodingException 
	 */
	@Test
	void testDecode() throws UnsupportedEncodingException {
		
		String s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		String expected = ""äöüßÄÖÜ¤°€"";
		String actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;&#x00E4;&#x00F6;&#x00FC;&#x00DF;&#x00C4;&#x00D6;&#x00DC;&#x00A7;&#x00B0;&#x20AC;"";
		expected = ""äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€äöüßÄÖÜ¤°€"";
		actual = MediaWiki.decode(s);
		assertEquals(expected, actual);
		
		s = ""&#x00E4;&"
cmpl-6u3cQ2piiKidSqVAlvmZXIc4vhFYL,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/FileUpload_0Test.java,51.71720862388611,length,"// FileUpload.java
/*
 * Copyright 2007 Justus Bisser.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Thomas Stock
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;

/**
 * <p>
 * To allow your bot to upload media in your MediaWiki. Add at least the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableUploads = true;
 * </pre>
 *
 * For more details see also
 * <a href=""http://www.mediawiki.org/wiki/Help:Configuration_settings#Uploads"">Upload Config</a>
 *
 * @author Justus Bisser
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class FileUpload extends MWAction {

    private final Get g;

    private boolean first = true;

    private boolean second = true;

    private final SimpleFile a;

    private Post msg;

    /**
     * @param a the
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(final SimpleFile a, MediaWikiBot bot) throws ActionException, VersionException {
        super(bot.getVersion());
        if (!a.getFile().isFile() || !a.getFile().canRead()) {
            throw new ActionException(""no such file "" + a.getFile());
        }
        if (!bot.isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        this.a = a;
        String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
        g = new Get(uS);
    }

    /**
     * @param filename to uplad
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(MediaWikiBot bot, String filename) throws ActionException, VersionException {
        this(new SimpleFile(filename), bot);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            return g;
        }
        String uS = """";
        // try {
        uS = ""/Spezial:Hochladen"";
        uS = ""/index.php?title=Special:Upload"";
        // uS = ""/index.php?title="" + URLEncoder.encode(""Spezial:Hochladen"",
        // MediaWikiBot.CHARSET);
        // + ""&action=submit"";
        // } catch (UnsupportedEncodingException e) {
        // e.printStackTrace();
        // }
        try {
            log.info(""WRITE: "" + a.getTitle());
            Post post = new Post(uS);
            if (a.getText().length() == 0) {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                //				 post.addParam(""wpUploadDescription"", ""false"");
                //				 post.addParam(""wpWatchthis"", ""false"");
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
            } else {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                // new StringPart(""wpUploadDescription"", ""false""),
                // new StringPart(""wpWatchthis"", ""false""),
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
                post.addParam(""wpUploadDescription"", a.getText());
            }
            if (!a.getFile().exists()) {
                throw new FileNotFoundException();
            }
            msg = post;
            second = false;
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        if (s.contains(""error"")) {
            Pattern errFinder = Pattern.compile(""<p>(.*?)</p>"", Pattern.DOTALL | Pattern.MULTILINE);
            Matcher m = errFinder.matcher(s);
            String lastP = """";
            while (m.find()) {
                lastP = MediaWiki.decode(m.group(1));
                log.error(""Upload failed: "" + lastP);
            }
            throw new ProcessException(""Upload failed - "" + lastP);
        }
        return """";
    }
}
","// FileUpload_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_0Test {","// FileUpload_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_0Test {

		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_1Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_2Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#hasMoreMessages()} method.
*/
class FileUpload_3Test {
		
		/**
		* Test method for {@link FileUpload#hasMoreMessages()}.
		*/
		@Test
		void testHasMoreMessages() {
				// TODO Auto-generated method stub
		}
}

// FileUpload_4Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.j"
cmpl-6u3dTBD1se1maQEl0Recp6QlXAN1r,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/FileUpload_1Test.java,40.87656545639038,length,"// FileUpload.java
/*
 * Copyright 2007 Justus Bisser.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Thomas Stock
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;

/**
 * <p>
 * To allow your bot to upload media in your MediaWiki. Add at least the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableUploads = true;
 * </pre>
 *
 * For more details see also
 * <a href=""http://www.mediawiki.org/wiki/Help:Configuration_settings#Uploads"">Upload Config</a>
 *
 * @author Justus Bisser
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class FileUpload extends MWAction {

    private final Get g;

    private boolean first = true;

    private boolean second = true;

    private final SimpleFile a;

    private Post msg;

    /**
     * @param a the
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(final SimpleFile a, MediaWikiBot bot) throws ActionException, VersionException {
        super(bot.getVersion());
        if (!a.getFile().isFile() || !a.getFile().canRead()) {
            throw new ActionException(""no such file "" + a.getFile());
        }
        if (!bot.isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        this.a = a;
        String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
        g = new Get(uS);
    }

    /**
     * @param filename to uplad
     * @param bot a
     * @throws ActionException on problems with file
     * @throws VersionException on wrong MediaWiki version
     */
    public FileUpload(MediaWikiBot bot, String filename) throws ActionException, VersionException {
        this(new SimpleFile(filename), bot);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            return g;
        }
        String uS = """";
        // try {
        uS = ""/Spezial:Hochladen"";
        uS = ""/index.php?title=Special:Upload"";
        // uS = ""/index.php?title="" + URLEncoder.encode(""Spezial:Hochladen"",
        // MediaWikiBot.CHARSET);
        // + ""&action=submit"";
        // } catch (UnsupportedEncodingException e) {
        // e.printStackTrace();
        // }
        try {
            log.info(""WRITE: "" + a.getTitle());
            Post post = new Post(uS);
            if (a.getText().length() == 0) {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                //				 post.addParam(""wpUploadDescription"", ""false"");
                //				 post.addParam(""wpWatchthis"", ""false"");
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
            } else {
                post.addParam(""wpDestFile"", a.getTitle());
                post.addParam(""wpIgnoreWarning"", ""true"");
                post.addParam(""wpSourceType"", ""file"");
                post.addParam(""wpUpload"", ""Upload file"");
                // new StringPart(""wpUploadDescription"", ""false""),
                // new StringPart(""wpWatchthis"", ""false""),
                post.addParam(""wpUploadFile"", a.getFile());
                // new FilePart( f.getName(), f)
                post.addParam(""wpUploadDescription"", a.getText());
            }
            if (!a.getFile().exists()) {
                throw new FileNotFoundException();
            }
            msg = post;
            second = false;
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        if (s.contains(""error"")) {
            Pattern errFinder = Pattern.compile(""<p>(.*?)</p>"", Pattern.DOTALL | Pattern.MULTILINE);
            Matcher m = errFinder.matcher(s);
            String lastP = """";
            while (m.find()) {
                lastP = MediaWiki.decode(m.group(1));
                log.error(""Upload failed: "" + lastP);
            }
            throw new ProcessException(""Upload failed - "" + lastP);
        }
        return """";
    }
}
","// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_1Test {","// FileUpload_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_1Test {

		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_2Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.SimpleFile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUpload}.
* It contains ten unit test cases for the {@link FileUpload#processAllReturningText(String)} method.
*/
class FileUpload_3Test {
		
		/**
		 * Test method for {@link FileUpload#processAllReturningText(String)}.
		 * @throws ActionException on problems with file
		 * @throws VersionException on wrong MediaWiki version
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, VersionException {
				
				// Arrange
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				SimpleFile a = new SimpleFile(""test.txt"");
				FileUpload test = new FileUpload(a, bot);
				
				// Act
				String result = test.processAllReturningText(""<p>Error</p>"");
				
				// Assert
				assertEquals("""", result);
		}
}

// FileUpload_4Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.FileNotFoundException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge"
cmpl-6u3eWontHI2v8bCjuVwMdCyIPtANH,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetApiToken_0Test.java,56.00799512863159,length,"// GetApiToken.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-<a
 * href=""http://www.mediawiki.org/wiki/API:Changing_wiki_content""
 * >Editing-API</a>. <br />
 * Its job is to get the token for some actions like delete or edit.
 *
 * @author Max Gensthaler
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public final class GetApiToken extends MWAction {

    /**
     * Types that need a token. See API field intoken.
     */
    // TODO this does not feel the elegant way.
    // Probably put complete request URIs into this enum objects
    // to support different URIs for different actions.
    public enum Intoken {

        DELETE,
        EDIT,
        MOVE,
        PROTECT,
        EMAIL,
        BLOCK,
        UNBLOCK,
        IMPORT
    }

    private String token = """";

    private boolean first = true;

    private Intoken intoken = null;

    private Get msg;

    /**
     * Constructs a new <code>GetToken</code> action.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     * @param si
     *          site info object
     * @param ui
     *          user info object
     * @throws VersionException
     *           if this action is not supported of the MediaWiki version
     *           connected to
     */
    public GetApiToken(Intoken intoken, String title, Version v, Userinfo ui) throws VersionException {
        super(v);
        this.intoken = intoken;
        generateTokenRequest(intoken, title);
    }

    /**
     * Generates the next MediaWiki API token and adds it to <code>msgs</code>.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     */
    private void generateTokenRequest(Intoken intoken, String title) {
        if (log.isTraceEnabled()) {
            log.trace(""enter GetToken.generateTokenRequest()"");
        }
        String uS = ""/api.php"" + ""?action=query"" + ""&prop=info"" + ""&intoken="" + intoken.toString().toLowerCase() + ""&titles="" + MediaWiki.encode(title) + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * Returns the requested token after parsing the result from MediaWiki.
     *
     * @return the requested token
     */
    protected String getToken() {
        return token;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (hm.getRequest().equals(msg.getRequest())) {
            if (log.isTraceEnabled()) {
                log.trace(""enter GetToken.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                process(doc);
            } catch (JDOMException e) {
                if (s.startsWith(""unknown_action:"")) {
                    log.error(""Adding '$wgEnableWriteAPI = true;' to your MediaWiki's LocalSettings.php might remove this problem."", e);
                } else {
                    log.error(e.getMessage(), e);
                }
            } catch (IOException e) {
                log.error(e.getMessage(), e);
            }
        }
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            if (log.isTraceEnabled()) {
                log.trace(""enter getApiToken"");
            }
            return msg;
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        try {
            Element elem = doc.getRootElement().getChild(""query"").getChild(""pages"").getChild(""page"");
            // process reply for token request
            switch(intoken) {
                case DELETE:
                    token = elem.getAttributeValue(""deletetoken"");
                    break;
                case EDIT:
                    token = elem.getAttributeValue(""edittoken"");
                    break;
                case MOVE:
                    token = elem.getAttributeValue(""movetoken"");
                    break;
                case PROTECT:
                    token = elem.getAttributeValue(""protecttoken"");
                    break;
                case EMAIL:
                    token = elem.getAttributeValue(""emailtoken"");
                    break;
                case BLOCK:
                    token = elem.getAttributeValue(""blocktoken"");
                    break;
                case UNBLOCK:
                    token = elem.getAttributeValue(""unblocktoken"");
                    break;
                case IMPORT:
                    token = elem.getAttributeValue(""importtoken"");
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        } catch (RuntimeException e) {
            throw new RuntimeException(""Unknow reply. This is not a token."", e);
        }
        if (log.isDebugEnabled())
            log.debug(""found token ="" + token + ""\n"" + ""for: "" + msg.getRequest() + ""\n"");
    }
}
","// GetApiToken_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#processReturningText(String, HttpAction)} method.
*/
class GetApiToken_0Test {","// GetApiToken_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#processReturningText(String, HttpAction)} method.
*/
class GetApiToken_0Test {

		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_0() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""title"", MW1_12, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" deletetoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_1() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""title"", MW1_13, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" deletetoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_2() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""title"", MW1_14, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" deletetoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_3() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""title"", MW1_15, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" deletetoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_4() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.DELETE, ""title"", MW1_16, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" deletetoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testProcessReturningText_5() throws VersionException, IOException, JDOMException, ProcessException {
				
				// Setup
				GetApiToken getApiToken = new GetApiToken(GetApiToken.Intoken.EDIT, ""title"", MW1_12, new Userinfo());
				String s = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""title\"" edittoken=\""token\"" /></pages></query></api>"";
				HttpAction hm = new HttpAction(HttpAction.Type.GET, ""url"", ""host"");
				
				// Run the test
				String result = getApiToken.processReturningText(s, hm);
				
				// Verify the results
				assertEquals("""", result);
		}
		
		/**
		* Test case for {@link GetApiToken#processReturningText(String, HttpAction)} method.
		* @throws VersionException if the MediaWiki version"
cmpl-6u3fZAqbdzFf5jFMuFc9jWRJI6qoT,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetApiToken_1Test.java,51.61088180541992,length,"// GetApiToken.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-<a
 * href=""http://www.mediawiki.org/wiki/API:Changing_wiki_content""
 * >Editing-API</a>. <br />
 * Its job is to get the token for some actions like delete or edit.
 *
 * @author Max Gensthaler
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public final class GetApiToken extends MWAction {

    /**
     * Types that need a token. See API field intoken.
     */
    // TODO this does not feel the elegant way.
    // Probably put complete request URIs into this enum objects
    // to support different URIs for different actions.
    public enum Intoken {

        DELETE,
        EDIT,
        MOVE,
        PROTECT,
        EMAIL,
        BLOCK,
        UNBLOCK,
        IMPORT
    }

    private String token = """";

    private boolean first = true;

    private Intoken intoken = null;

    private Get msg;

    /**
     * Constructs a new <code>GetToken</code> action.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     * @param si
     *          site info object
     * @param ui
     *          user info object
     * @throws VersionException
     *           if this action is not supported of the MediaWiki version
     *           connected to
     */
    public GetApiToken(Intoken intoken, String title, Version v, Userinfo ui) throws VersionException {
        super(v);
        this.intoken = intoken;
        generateTokenRequest(intoken, title);
    }

    /**
     * Generates the next MediaWiki API token and adds it to <code>msgs</code>.
     *
     * @param intoken
     *          type to get the token for
     * @param title
     *          title of the article to generate the token for
     */
    private void generateTokenRequest(Intoken intoken, String title) {
        if (log.isTraceEnabled()) {
            log.trace(""enter GetToken.generateTokenRequest()"");
        }
        String uS = ""/api.php"" + ""?action=query"" + ""&prop=info"" + ""&intoken="" + intoken.toString().toLowerCase() + ""&titles="" + MediaWiki.encode(title) + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * Returns the requested token after parsing the result from MediaWiki.
     *
     * @return the requested token
     */
    protected String getToken() {
        return token;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (hm.getRequest().equals(msg.getRequest())) {
            if (log.isTraceEnabled()) {
                log.trace(""enter GetToken.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                process(doc);
            } catch (JDOMException e) {
                if (s.startsWith(""unknown_action:"")) {
                    log.error(""Adding '$wgEnableWriteAPI = true;' to your MediaWiki's LocalSettings.php might remove this problem."", e);
                } else {
                    log.error(e.getMessage(), e);
                }
            } catch (IOException e) {
                log.error(e.getMessage(), e);
            }
        }
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            first = false;
            if (log.isTraceEnabled()) {
                log.trace(""enter getApiToken"");
            }
            return msg;
        }
        return null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        try {
            Element elem = doc.getRootElement().getChild(""query"").getChild(""pages"").getChild(""page"");
            // process reply for token request
            switch(intoken) {
                case DELETE:
                    token = elem.getAttributeValue(""deletetoken"");
                    break;
                case EDIT:
                    token = elem.getAttributeValue(""edittoken"");
                    break;
                case MOVE:
                    token = elem.getAttributeValue(""movetoken"");
                    break;
                case PROTECT:
                    token = elem.getAttributeValue(""protecttoken"");
                    break;
                case EMAIL:
                    token = elem.getAttributeValue(""emailtoken"");
                    break;
                case BLOCK:
                    token = elem.getAttributeValue(""blocktoken"");
                    break;
                case UNBLOCK:
                    token = elem.getAttributeValue(""unblocktoken"");
                    break;
                case IMPORT:
                    token = elem.getAttributeValue(""importtoken"");
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        } catch (RuntimeException e) {
            throw new RuntimeException(""Unknow reply. This is not a token."", e);
        }
        if (log.isDebugEnabled())
            log.debug(""found token ="" + token + ""\n"" + ""for: "" + msg.getRequest() + ""\n"");
    }
}
","// GetApiToken_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiToken_1Test {","// GetApiToken_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetApiToken}.
* It contains ten unit test cases for the {@link GetApiToken#hasMoreMessages()} method.
*/
class GetApiToken_1Test {

		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_1() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_12, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_2() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_13, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_3() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_14, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_4() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_15, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_5() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.DELETE, ""Test"", MW1_16, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_6() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_12, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_7() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_13, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_8() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_14, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_9() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_15, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
		
		/**
		* Test case for {@link GetApiToken#hasMoreMessages()} method.
		* @throws VersionException if the MediaWiki version is not supported
		* @throws IOException if an IOException occurs
		* @throws JDOMException if a JDOMException occurs
		* @throws ProcessException if a ProcessException occurs
		*/
		@Test
		void testHasMoreMessages_10() throws VersionException, IOException, JDOMException, ProcessException {
				GetApiToken classUnderTest = new GetApiToken(GetApiToken.Intoken.EDIT, ""Test"", MW1_16, new Userinfo(""Test"", ""Test""));
				assertTrue(classUnderTest.hasMoreMessages());
		}
}

// GetApiToken_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki"
cmpl-6u3gcUYh2KptEtAYr0tcGHsQkmfMY,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/GetRevision.java,53.41522479057312,length,"// GetRevision.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Reads the content of a given article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetRevision extends MWAction {

    private final SimpleArticle sa;

    public static final int CONTENT = 1 << 1;

    public static final int TIMESTAMP = 1 << 2;

    public static final int USER = 1 << 3;

    public static final int COMMENT = 1 << 4;

    public static final int IDS = 1 << 5;

    public static final int FLAGS = 1 << 6;

    public static final int FIRST = 1 << 30;

    public static final int LAST = 1 << 31;

    private final int properties;

    private final Get msg;

    private boolean singleProcess = true;

    private final Version botVersion;

    /**
     * TODO follow redirects. TODO change constructor fild ordering; bot
     *
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     * @param articlename
     *          of
     * @param properties
     *          the
     * @param v
     *          the
     */
    public GetRevision(Version v, final String articlename, final int properties) throws ProcessException {
        super(v);
        botVersion = v;
        // if (!bot.getUserinfo().getRights().contains(""read"")) {
        // throw new
        // ActionException(""reading is not permited, make sure that this account is able to read"");
        // } FIXME check if
        this.properties = properties;
        sa = new SimpleArticle();
        sa.setTitle(articlename);
        String uS = ""/api.php?action=query&prop=revisions&titles="" + MediaWiki.encode(articlename) + ""&rvprop="" + getDataProperties(properties) + getReversion(properties) + ""&rvlimit=1"" + ""&format=xml"";
        msg = new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(final String s, HttpAction ha) throws ProcessException {
        if (msg.getRequest().equals(ha.getRequest()) && singleProcess) {
            if (log.isDebugEnabled()) {
                // TODO no very nice debug here
                if (s.length() < 151) {
                    log.debug(s);
                } else {
                    log.debug(""..."" + s.substring(50, 150) + ""..."");
                }
            }
            parse(s);
            singleProcess = false;
        }
        return """";
    }

    /**
     * TODO Not very nice implementation.
     *
     * @param property
     *          the
     * @return a
     */
    private String getDataProperties(final int property) {
        String properties = """";
        if ((property & CONTENT) > 0) {
            properties += ""content|"";
        }
        if ((property & COMMENT) > 0) {
            properties += ""comment|"";
        }
        if ((property & TIMESTAMP) > 0) {
            properties += ""timestamp|"";
        }
        if ((property & USER) > 0) {
            properties += ""user|"";
        }
        if ((property & IDS) > 0 && botVersion.greaterEqThen(MW1_11)) {
            properties += ""ids|"";
        }
        if ((property & FLAGS) > 0 && botVersion.greaterEqThen(MW1_11)) {
            properties += ""flags|"";
        }
        if (properties.length() > 0) {
            return MediaWiki.encode(properties.substring(0, properties.length() - 1));
        }
        return """";
    }

    private String getReversion(final int property) {
        String properties = ""&rvdir="";
        if ((property & FIRST) > 0) {
            properties += ""newer"";
        } else {
            properties += ""older"";
        }
        return properties;
    }

    private void parse(final String xml) throws ApiException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        if (root != null)
            findContent(root);
    }

    /**
     * @return the
     */
    public SimpleArticle getArticle() {
        return sa;
    }

    private void findContent(final Element root) throws ApiException {
        // if(log.isDebugEnabled())
        // log.debug(""try to find content in "" + root.getQualifiedName());
        @SuppressWarnings(""unchecked"")
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""error"")) {
                throw new ApiException(element.getAttributeValue(""code""), element.getAttributeValue(""info""));
            } else if (element.getQualifiedName().equalsIgnoreCase(""rev"")) {
                try {
                    sa.setText(element.getText());
                } catch (NullPointerException e) {
                    if (log.isDebugEnabled()) {
                        log.debug(""no text found"");
                    }
                }
                if ((properties & FLAGS) > 0) {
                    if (element.getAttribute(""minor"") != null) {
                        sa.setMinorEdit(true);
                    } else {
                        sa.setMinorEdit(false);
                    }
                }
                sa.setRevisionId(getAsStringValues(element, ""revid""));
                sa.setEditSummary(getAsStringValues(element, ""comment""));
                sa.setEditor(getAsStringValues(element, ""user""));
                if ((properties & TIMESTAMP) > 0) {
                    try {
                        sa.setEditTimestamp(getAsStringValues(element, ""timestamp""));
                    } catch (ParseException e) {
                        log.debug(""timestamp could not be parsed"");
                    }
                }
            } else {
                findContent(element);
            }
        }
    }

    private String getAsStringValues(Element e, String attrName) {
        String buff = """";
        try {
            buff = e.getAttributeValue(attrName);
            if (buff == null) {
                throw new NullPointerException();
            }
        } catch (Exception npe) {
            // LOG.debug(""no value for "" + attrName );
            buff = """";
        }
        // LOG.debug(""value for "" + attrName + "" = \"""" + buff + ""\"""");
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetRevisionTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRevision}.
* It contains ten unit test cases for the {@link GetRevision#processReturningText(String, HttpAction)} method.
*/
class GetRevisionTest {","// GetRevisionTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.ParseException;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.ApiException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRevision}.
* It contains ten unit test cases for the {@link GetRevision#processReturningText(String, HttpAction)} method.
*/
class GetRevisionTest {

		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the xml returned by the MediaWiki API contains the following elements:
		* <pre>
		* &lt;api&gt;
		* 	&lt;query&gt;
		* 		&lt;pages&gt;
		* 			&lt;page pageid=""1"" ns=""0"" title=""Main Page""&gt;
		* 				&lt;revisions&gt;
		* 					&lt;rev revid=""1"" parentid=""0"" minor=""false"" user=""127.0.0.1"" timestamp=""2007-12-22T19:58:00Z"" comment=""/* Main Page */ new""&gt;
		* 						&lt;text xml:space=""preserve"" bytes=""0""&gt;
		* 							&lt;/text&gt;
		* 					&lt;/rev&gt;
		* 				&lt;/revisions&gt;
		* 			&lt;/page&gt;
		* 		&lt;/pages&gt;
		* 	&lt;/query&gt;
		* &lt;/api&gt;
		* </pre>
		* @throws IOException
		* @throws JDOMException
		* @throws ParseException
		* @throws ProcessException
		* @throws ActionException
		*/
		@Test
		void testProcessReturningText_1() throws IOException, JDOMException, ParseException, ProcessException, ActionException {
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""false\"" user=\""127.0.0.1\"" timestamp=\""2007-12-22T19:58:00Z\"" comment=\""/* Main Page */ new\""><text xml:space=\""preserve\"" bytes=\""0\""></text></rev></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_09, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				gr.processReturningText(xml, new HttpAction());
				SimpleArticle sa = gr.getArticle();
				assertEquals("""", sa.getText());
				assertEquals(""1"", sa.getRevisionId());
				assertEquals(""/* Main Page */ new"", sa.getEditSummary());
				assertEquals(""127.0.0.1"", sa.getEditor());
				assertEquals(""2007-12-22T19:58:00Z"", sa.getEditTimestamp());
				assertFalse(sa.isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the xml returned by the MediaWiki API contains the following elements:
		* <pre>
		* &lt;api&gt;
		* 	&lt;query&gt;
		* 		&lt;pages&gt;
		* 			&lt;page pageid=""1"" ns=""0"" title=""Main Page""&gt;
		* 				&lt;revisions&gt;
		* 					&lt;rev revid=""1"" parentid=""0"" minor=""false"" user=""127.0.0.1"" timestamp=""2007-12-22T19:58:00Z"" comment=""/* Main Page */ new""&gt;
		* 						&lt;text xml:space=""preserve"" bytes=""0""&gt;
		* 							&lt;/text&gt;
		* 					&lt;/rev&gt;
		* 				&lt;/revisions&gt;
		* 			&lt;/page&gt;
		* 		&lt;/pages&gt;
		* 	&lt;/query&gt;
		* &lt;/api&gt;
		* </pre>
		* @throws IOException
		* @throws JDOMException
		* @throws ParseException
		* @throws ProcessException
		* @throws ActionException
		*/
		@Test
		void testProcessReturningText_2() throws IOException, JDOMException, ParseException, ProcessException, ActionException {
				String xml = ""<api><query><pages><page pageid=\""1\"" ns=\""0\"" title=\""Main Page\""><revisions><rev revid=\""1\"" parentid=\""0\"" minor=\""false\"" user=\""127.0.0.1\"" timestamp=\""2007-12-22T19:58:00Z\"" comment=\""/* Main Page */ new\""><text xml:space=\""preserve\"" bytes=\""0\""></text></rev></revisions></page></pages></query></api>"";
				GetRevision gr = new GetRevision(MW1_10, ""Main Page"", GetRevision.CONTENT | GetRevision.TIMESTAMP | GetRevision.USER | GetRevision.COMMENT | GetRevision.IDS | GetRevision.FLAGS);
				gr.processReturningText(xml, new HttpAction());
				SimpleArticle sa = gr.getArticle();
				assertEquals("""", sa.getText());
				assertEquals(""1"", sa.getRevisionId());
				assertEquals(""/* Main Page */ new"", sa.getEditSummary());
				assertEquals(""127.0.0.1"", sa.getEditor());
				assertEquals(""2007-12-22T19:58:00Z"", sa.getEditTimestamp());
				assertFalse(sa.isMinorEdit());
		}
		
		/**
		* Test case for {@link GetRevision#processReturningText(String, HttpAction)} method.
		* It tests the case when the xml returned by the MediaWiki API contains the following elements:
		* <pre>
		* &lt;api&gt;
		* 	&lt;query&gt;
		* 		&lt;pages&gt;
		* 			&lt;page pageid=""1"" ns=""0"" title=""Main Page""&gt;
		* 				&lt;revisions&gt;
		* 					&lt;rev revid=""1"" parentid=""0"" minor=""false"" user=""127.0.0.1"" timestamp=""2007-12-22T19:58:00Z"" comment=""/* Main Page */ new""&gt;
		* 						&lt;text xml:space=""preserve"" bytes=""0""&gt;
		* 							&lt;/text&gt;
		* 					&lt;/rev&gt;
		* 				&lt;/revisions&gt;
		* 			&lt;/page&gt;
		* 		&lt;/pages&gt;
		* 	&lt;/query&gt;
		* &lt;/api&gt;
		* </pre>
		* @throws IOException
		* @throws JDOMException
		* @throws ParseException
		* @throws ProcessException
		* @throws ActionException
		*/
		@Test
		void testProcessReturningText_3() throws IOException, JDOMException, ParseException, ProcessException,"
cmpl-6u3hfBMhDQ4fHUrAzIzsSKaKowNgo,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/MovePage.java,40.82386612892151,length,"// MovePage.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-API's <a
 * href=""http://www.mediawiki.org/wiki/API:Edit_-_Move"">""action=move""</a>.
 *
 * <p>
 * To allow your bot to move articles in your MediaWiki add the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableWriteAPI = true;
 * $wgGroupPermissions['bot']['move'] = true;
 * $wgGroupPermissions['bot']['movefile'] = true;            // optional
 * $wgGroupPermissions['bot']['move-subpages'] = true;       // optional
 * $wgGroupPermissions['bot']['move-rootuserpages'] = true;  // optional
 * </pre>
 *
 * <p>
 * Move an article with
 *
 * <pre>
 * String oldtitle = ...
 * String newtitle = ...
 * String reason = ...
 * Boolean withsubpages = ...
 * Boolean noredirect = ...
 *
 * MediaWikiBot bot = ...
 * bot.performAction(new MovePage(bot, oldtitle, newtitle, reason, withsubpages, noredirect));
 * </pre>
 *
 * @author Christoph Giesel
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class MovePage extends MWAction {

    private final String oldtitle;

    private final String newtitle;

    private final String reason;

    private final boolean withsubpages;

    private final boolean noredirect;

    private final GetApiToken token;

    private boolean moveToken = true;

    /**
     * Constructs a new <code>MovePage</code> action.
     *
     * @param bot
     *          the MediaWikiBot
     * @param oldtitle
     *          title to move
     * @param newtitle
     *          new title
     * @param reason
     *          reason why to move
     * @param withsubpages
     *          if <b>TRUE</b> also move the subpages
     * @param noredirect
     *          if <b>TRUE</b> create no redirects
     * @throws ProcessException
     *           ProcessException
     * @throws ActionException
     *           ActionException
     */
    public MovePage(MediaWikiBot bot, String oldtitle, String newtitle, String reason, boolean withsubpages, boolean noredirect) throws ProcessException, ActionException {
        super(bot.getVersion());
        token = new GetApiToken(GetApiToken.Intoken.MOVE, oldtitle, bot.getVersion(), bot.getUserinfo());
        this.oldtitle = oldtitle;
        this.newtitle = newtitle;
        this.reason = reason;
        this.withsubpages = withsubpages;
        this.noredirect = noredirect;
        if (oldtitle == null || oldtitle.length() == 0 || newtitle == null || newtitle.length() == 0) {
            throw new IllegalArgumentException(""The arguments 'oldtitle' and 'newtitle' must not be null or empty"");
        }
        if (!bot.getUserinfo().getRights().contains(""move"")) {
            throw new ProcessException(""The given user doesn't have the rights to move. "" + ""Add '$wgGroupPermissions['bot']['move'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
        if (withsubpages && !bot.getUserinfo().getRights().contains(""move-subpages"")) {
            throw new ProcessException(""The given user doesn't have the rights to move subpages. "" + ""Add '$wgGroupPermissions['bot']['move-subpages'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
    }

    /**
     * @return the delete action
     */
    private HttpAction getSecondRequest() {
        HttpAction msg = null;
        if (token.getToken() == null || token.getToken().length() == 0) {
            throw new IllegalArgumentException(""The argument 'token' must not be \"""" + String.valueOf(token.getToken()) + ""\"""");
        }
        if (log.isTraceEnabled()) {
            log.trace(""enter MovePage.generateMoveRequest(String)"");
        }
        String uS = ""/api.php"" + ""?action=move"" + ""&from="" + MediaWiki.encode(oldtitle) + ""&to="" + MediaWiki.encode(newtitle) + ""&token="" + MediaWiki.encode(token.getToken()) + (withsubpages ? ""&movesubpages"" : """") + (noredirect ? ""&noredirect"" : """") + ((reason != null && reason.length() != 0) ? ""&reason="" + MediaWiki.encode(reason) : """") + ""&movetalk&format=xml"";
        if (log.isDebugEnabled()) {
            log.debug(""move url: \"""" + uS + ""\"""");
        }
        msg = new Post(uS);
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        super.processReturningText(s, hm);
        if (moveToken) {
            token.processReturningText(s, hm);
            moveToken = false;
        } else {
            if (log.isTraceEnabled()) {
                log.trace(""enter MovePage.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                if (!containsError(doc)) {
                    process(doc);
                }
            } catch (JDOMException e) {
                String msg = e.getMessage();
                if (s.startsWith(""unknown_action:"")) {
                    msg = ""unknown_action; Adding '$wgEnableWriteAPI = true;' to your MediaWiki's "" + ""LocalSettings.php might remove this problem."";
                }
                log.error(msg, e);
                throw new ProcessException(msg, e);
            } catch (IOException e) {
                log.error(e.getMessage(), e);
                throw new ProcessException(e);
            }
            setHasMoreMessages(false);
        }
        return """";
    }

    /**
     * Determines if the given XML {@link Document} contains an error message
     * which then would printed by the logger.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     * @return if
     */
    private boolean containsError(Document doc) {
        Element elem = doc.getRootElement().getChild(""error"");
        if (elem != null) {
            log.error(elem.getAttributeValue(""code"") + "": "" + elem.getAttributeValue(""info""));
            return true;
        }
        return false;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        Element elem = doc.getRootElement().getChild(""move"");
        if (elem != null) {
            // process reply for delete request
            if (log.isInfoEnabled()) {
                log.info(""Moved article '"" + elem.getAttributeValue(""from"") + ""' to '"" + elem.getAttributeValue(""to"") + ""'"" + "" with reason '"" + elem.getAttributeValue(""reason"") + ""'"");
            }
        } else {
            log.error(""Unknow reply. This is not a reply for a delete action."");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (token.hasMoreMessages()) {
            setHasMoreMessages(true);
            return token.getNextMessage();
        }
        return getSecondRequest();
    }
}
","// MovePageTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MovePage}.
* It contains ten unit test cases for the {@link MovePage#processReturningText(String, HttpAction)} method.
*/
class MovePageTest {","// MovePageTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MovePage}.
* It contains ten unit test cases for the {@link MovePage#processReturningText(String, HttpAction)} method.
*/
class MovePageTest {

		private static final String TEST_TEXT = ""== Test ==\n"" + ""Test"";
		
		private static final String TEST_TEXT_NEW = ""== Test ==\n"" + ""Test new"";
		
		private static final String TEST_TEXT_NEW_2 = ""== Test ==\n"" + ""Test new 2"";
		
		private static final String TEST_TEXT_NEW_3 = ""== Test ==\n"" + ""Test new 3"";
		
		private static final String TEST_TEXT_NEW_4 = ""== Test ==\n"" + ""Test new 4"";
		
		private static final String TEST_TEXT_NEW_5 = ""== Test ==\n"" + ""Test new 5"";
		
		private static final String TEST_TEXT_NEW_6 = ""== Test ==\n"" + ""Test new 6"";
		
		private static final String TEST_TEXT_NEW_7 = ""== Test ==\n"" + ""Test new 7"";
		
		private static final String TEST_TEXT_NEW_8 = ""== Test ==\n"" + ""Test new 8"";
		
		private static final String TEST_TEXT_NEW_9 = ""== Test ==\n"" + ""Test new 9"";
		
		private static final String TEST_TEXT_NEW_10 = ""== Test ==\n"" + ""Test new 10"";
		
		private static final String TEST_TEXT_NEW_11 = ""== Test ==\n"" + ""Test new 11"";
		
		private static final String TEST_TEXT_NEW_12 = ""== Test ==\n"" + ""Test new 12"";
		
		private static final String TEST_TEXT_NEW_13 = ""== Test ==\n"" + ""Test new 13"";
		
		private static final String TEST_TEXT_NEW_14 = ""== Test ==\n"" + ""Test new 14"";
		
		private static final String TEST_TEXT_NEW_15 = ""== Test ==\n"" + ""Test new 15"";
		
		private static final String TEST_TEXT_NEW_16 = ""== Test ==\n"" + ""Test new 16"";
		
		private static final String TEST_TEXT_NEW_17 = ""== Test ==\n"" + ""Test new 17"";
		
		private static final String TEST_TEXT_NEW_18 = ""== Test ==\n"" + ""Test new 18"";
		
		private static final String TEST_TEXT_NEW_19 = ""== Test ==\n"" + ""Test new 19"";
		
		private static final String TEST_TEXT_NEW_20 = ""== Test ==\n"" + ""Test new 20"";
		
		private static final String TEST_TEXT_NEW_21 = ""== Test ==\n"" + ""Test new 21"";
		
		private static final String TEST_TEXT_NEW_22 = ""== Test ==\n"" + ""Test new 22"";
		
		private static final String TEST_TEXT_NEW_23 = ""== Test ==\n"" + ""Test new 23"";
		
		private static final String TEST_TEXT_NEW_24 = ""== Test ==\n"" + ""Test new 24"";
		
		private static final String TEST_TEXT_NEW_25 = ""== Test ==\n"" + ""Test new 25"";
		
		private static final String TEST_TEXT_NEW_26 = ""== Test ==\n"" + ""Test new 26"";
		
		private static final String TEST_TEXT_NEW_27 = ""== Test ==\n"" + ""Test new 27"";
		
		private static final String TEST_TEXT_NEW_28 = ""== Test ==\n"" + ""Test new 28"";
		
		private static final String TEST_TEXT_NEW_29 = ""== Test ==\n"" + ""Test new 29"";
		
		private static final String TEST_TEXT_NEW_30 = ""== Test ==\n"" + ""Test new 30"";
		
		private static final String TEST_TEXT_NEW_31 = ""== Test ==\n"" + ""Test new 31"";
		
		private static final String TEST_TEXT_NEW_32 = ""== Test ==\n"" + ""Test new 32"";
		
		private static final String TEST_TEXT_NEW_33 = ""== Test ==\n"" + ""Test new 33"";
		
		private static final String TEST_TEXT_NEW_34 = ""== Test ==\n"" + ""Test new 34"";
		
		private static final String TEST_TEXT_NEW_35 = ""== Test ==\n"" + ""Test new 35"";
		
		private static final String TEST_TEXT_NEW_36 = ""== Test ==\n"" + ""Test new 36"";
		
		private static final String TEST_TEXT_NEW_37 = ""== Test ==\n"" + ""Test new 37"";
		
		private static final String TEST_TEXT_NEW_38 = ""== Test ==\n"" + ""Test new 38"";
		
		private static final String TEST_TEXT_NEW_39 = ""== Test ==\n"" + ""Test new 39"";
		
		private static final String TEST_TEXT_NEW_40 = ""== Test ==\n"" + ""Test new 40"";
		
		private static final String TEST_TEXT_NEW_41 = ""== Test ==\n"" + ""Test new 41"";
		
		private static final String TEST_TEXT_NEW_42 = ""== Test ==\n"" + ""Test new 42"";
		
		private static final String TEST_TEXT_NEW_43 = ""== Test ==\n"" + ""Test new 43"";
		
		private static final String TEST_TEXT_NEW_44 = ""== Test ==\n"" + ""Test new 44"";
		
		private static final String TEST_TEXT_NEW_45 = ""== Test ==\n"" + ""Test new 45"";
		
		private static final String TEST_TEXT_NEW_46 = ""== Test ==\n"" + ""Test new 46"";
		
		private static final String TEST_TEXT_NEW_47 = ""== Test ==\n"" + ""Test new 47"";
		
		private static final String TEST_TEXT_NEW_48 = ""== Test ==\n"" + ""Test new 48"";
		
		private static final String TEST_TEXT_NEW_49 = ""== Test ==\n"" + ""Test new 49"";
		
		private static final String TEST_TEXT_NEW_50 = ""== Test ==\n"" + ""Test new 50"";
		
		private static final String TEST_TEXT_NEW_51 = ""== Test ==\n"" + ""Test new 51"";
		
		private static final String TEST_TEXT_NEW_52 = ""== Test ==\n"" + ""Test new 52"";
		
		private static final String TEST_TEXT_NEW_53 = ""== Test ==\n"" + ""Test new 53"";
		
		private static final String TEST_TEXT_NEW_54 = ""== Test ==\n"" + ""Test new 54"";
		
		private static final String TEST_TEXT_NEW_55 = ""== Test ==\n"" + ""Test new 55"";
		
		private static final String TEST_TEXT_NEW_56 = ""== Test ==\n"" + ""Test new 56"";
		
		private static final String TEST_TEXT_NEW_57 = ""== Test ==\n"" + ""Test new 57"";
		
		private static final String TEST_TEXT_NEW_58 = ""== Test ==\n"" + ""Test new 58"";
		
		private static final String TEST_TEXT_NEW_59 = ""== Test ==\n"" + ""Test new 59"";
		
		private static final String TEST_TEXT_NEW_60 = ""== Test ==\n"" + ""Test new 60"";
		
		private static final String TEST_TEXT_NEW_61 = ""== Test ==\n"" + ""Test new 61"";
		
		private static final String TEST_TEXT_NEW_62 = ""== Test ==\n"" + ""Test new 62"";
		
		private static final String TEST_TEXT_NEW_63 = ""== Test ==\n"" + ""Test new 63"";
		
		private static final String TEST_TEXT_NEW_64 = ""== Test ==\n"" + ""Test"
cmpl-6u3iiVvxymgpJaGQ5AXJrx4TZ1BPj,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostDelete.java,56.41159009933472,length,"// PostDelete.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action class using the MediaWiki-API's <a
 * href=""http://www.mediawiki.org/wiki/API:Edit_-_Delete"">""action=delete""</a>.
 *
 * <p>
 * To allow your bot to delete articles in your MediaWiki add the following line
 * to your MediaWiki's LocalSettings.php:<br>
 *
 * <pre>
 * $wgEnableWriteAPI = true;
 * $wgGroupPermissions['bot']['delete'] = true;
 * </pre>
 *
 * <p>
 * Delete an article with
 *
 * <pre>
 * String name = ...
 * MediaWikiBot bot = ...
 * Siteinfo si = bot.getSiteinfo();
 * Userinfo ui = bot.getUserinfo();
 * bot.performAction(new PostDelete(name, si, ui));
 * </pre>
 *
 * @author Max Gensthaler
 */
@Slf4j
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostDelete extends MWAction {

    private final String title;

    private final GetApiToken token;

    private boolean delToken = true;

    /**
     * Constructs a new <code>PostDelete</code> action.
     *
     * @param bot
     *          a
     * @param title
     *          a
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     */
    public PostDelete(MediaWikiBot bot, String title) throws ProcessException, ActionException {
        super(bot.getVersion());
        token = new GetApiToken(GetApiToken.Intoken.DELETE, title, bot.getVersion(), bot.getUserinfo());
        this.title = title;
        if (title == null || title.length() == 0) {
            throw new IllegalArgumentException(""The argument 'title' must not be null or empty"");
        }
        if (!bot.getUserinfo().getRights().contains(""delete"")) {
            throw new ProcessException(""The given user doesn't have the rights to delete. "" + ""Add '$wgGroupPermissions['bot']['delete'] = true;' "" + ""to your MediaWiki's LocalSettings.php might solve this problem."");
        }
    }

    /**
     * @return the delete action
     */
    private HttpAction getSecondRequest() {
        HttpAction msg = null;
        if (token.getToken() == null || token.getToken().length() == 0) {
            throw new IllegalArgumentException(""The argument 'token' must not be \"""" + String.valueOf(token.getToken()) + ""\"""");
        }
        if (log.isTraceEnabled()) {
            log.trace(""enter PostDelete.generateDeleteRequest(String)"");
        }
        String uS = ""/api.php"" + ""?action=delete"" + ""&title="" + MediaWiki.encode(title) + ""&token="" + MediaWiki.encode(token.getToken()) + ""&format=xml"";
        if (log.isDebugEnabled()) {
            log.debug(""delete url: \"""" + uS + ""\"""");
        }
        msg = new Post(uS);
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        super.processReturningText(s, hm);
        if (delToken) {
            token.processReturningText(s, hm);
            delToken = false;
        } else {
            if (log.isTraceEnabled()) {
                log.trace(""enter PostDelete.processAllReturningText(String)"");
            }
            if (log.isDebugEnabled()) {
                log.debug(""Got returning text: \"""" + s + ""\"""");
            }
            SAXBuilder builder = new SAXBuilder();
            try {
                Document doc = builder.build(new InputSource(new StringReader(s)));
                if (!containsError(doc)) {
                    process(doc);
                }
            } catch (JDOMException e) {
                String msg = e.getMessage();
                if (s.startsWith(""unknown_action:"")) {
                    msg = ""unknown_action; Adding '$wgEnableWriteAPI = true;' to your MediaWiki's "" + ""LocalSettings.php might remove this problem."";
                }
                log.error(msg, e);
                throw new ProcessException(msg, e);
            } catch (IOException e) {
                log.error(e.getMessage(), e);
                throw new ProcessException(e);
            }
            setHasMoreMessages(false);
        }
        return """";
    }

    /**
     * Determines if the given XML {@link Document} contains an error message
     * which then would printed by the logger.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     * @return if
     */
    private boolean containsError(Document doc) {
        Element elem = doc.getRootElement().getChild(""error"");
        if (elem != null) {
            log.error(elem.getAttributeValue(""info""));
            if (elem.getAttributeValue(""code"").equals(""inpermissiondenied"")) {
                log.error(""Adding '$wgGroupPermissions['bot']['delete'] = true;' to your MediaWiki's LocalSettings.php might remove this problem."");
            }
            return true;
        }
        return false;
    }

    /**
     * Processing the XML {@link Document} returned from the MediaWiki API.
     *
     * @param doc
     *          XML <code>Document</code>
     * @throws JDOMException
     *           thrown if the document could not be parsed
     */
    private void process(Document doc) {
        Element elem = doc.getRootElement().getChild(""delete"");
        if (elem != null) {
            // process reply for delete request
            if (log.isInfoEnabled()) {
                log.info(""Deleted article '"" + elem.getAttributeValue(""title"") + ""'"" + "" with reason '"" + elem.getAttributeValue(""reason"") + ""'"");
            }
        } else {
            log.error(""Unknow reply. This is not a reply for a delete action."");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (token.hasMoreMessages()) {
            setHasMoreMessages(true);
            return token.getNextMessage();
        }
        return getSecondRequest();
    }
}
","// PostDeleteTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostDelete}.
* It contains ten unit test cases for the {@link PostDelete#processReturningText(String, HttpAction)} method.
*/
class PostDeleteTest {","// PostDeleteTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.StringReader;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostDelete}.
* It contains ten unit test cases for the {@link PostDelete#processReturningText(String, HttpAction)} method.
*/
class PostDeleteTest {

		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess2() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess3() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess4() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess5() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess6() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess7() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess8() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete title=\""Test\"" reason=\""\"" &gt;&lt;/delete&gt;&lt;/api&gt;"";
				String result = postDelete.processReturningText(xml, new Post(""""));
				assertEquals("""", result);
		}
		
		/**
		 * Test case for {@link PostDelete#processReturningText(String, HttpAction)} method.
		 * It tests if the method returns the correct value for a successful delete action.
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessReturningTextSuccess9() throws ProcessException, ActionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				PostDelete postDelete = new PostDelete(bot, ""Test"");
				String xml = ""&lt;api&gt;&lt;delete"
cmpl-6u3jlJ6qjeqcptB5nMzCtLM1RjnlM,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_0Test.java,43.86865043640137,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {","// PostModifyContent_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#hasMoreMessages()} method.
*/
class PostModifyContent_0Test {

		private static final String TEST_TEXT = ""test text"";
		private static final String TEST_TITLE = ""test title"";
		private static final String TEST_SUMMARY = ""test summary"";
		private static final String TEST_URL = ""http://localhost/wiki/index.php?title=test_title&action=edit&dontcountme=s"";
		private static final String TEST_URL_API = ""http://localhost/wiki/api.php?action=edit&title=test_title"";
		private static final String TEST_URL_API_TOKEN = ""http://localhost/wiki/api.php?action=tokens&type=edit"";
		private static final String TEST_URL_API_LOGIN = ""http://localhost/wiki/api.php?action=login"";
		private static final String TEST_URL_API_LOGOUT = ""http://localhost/wiki/api.php?action=logout"";
		private static final String TEST_URL_API_USERINFO = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights"";
		private static final String TEST_URL_API_USERINFO_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password"";
		private static final String TEST_URL_API_USERINFO_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_password&lgtoken=test_token"";
		private static final String TEST_URL_API_USERINFO_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT_LOGIN_LOGOUT = ""http://localhost/wiki/api.php?action=query&meta=userinfo&uiprop=rights&lgname=test_user&lgpassword=test_"
cmpl-6u3koLJHuXcxohJt9CFvywH4kWcSu,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_1Test.java,48.95231103897095,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#processReturningText(String, HttpAction)} method.
*/
class PostModifyContent_1Test {","// PostModifyContent_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#processReturningText(String, HttpAction)} method.
*/
class PostModifyContent_1Test {

		private static final String TEST_TEXT = ""test text"";
		private static final String TEST_TITLE = ""test title"";
		private static final String TEST_EDIT_SUMMARY = ""test edit summary"";
		private static final String TEST_EDIT_TOKEN = ""test edit token"";
		private static final String TEST_EDIT_TIME = ""test edit time"";
		private static final String TEST_START_TIME = ""test start time"";
		private static final String TEST_ERROR_MESSAGE = ""test error message"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED = ""test error message truncated"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_700 = ""test error message truncated 700"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_701 = ""test error message truncated 701"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_702 = ""test error message truncated 702"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_703 = ""test error message truncated 703"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_704 = ""test error message truncated 704"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_705 = ""test error message truncated 705"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_706 = ""test error message truncated 706"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_707 = ""test error message truncated 707"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_708 = ""test error message truncated 708"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_709 = ""test error message truncated 709"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_710 = ""test error message truncated 710"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_711 = ""test error message truncated 711"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_712 = ""test error message truncated 712"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_713 = ""test error message truncated 713"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_714 = ""test error message truncated 714"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_715 = ""test error message truncated 715"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_716 = ""test error message truncated 716"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_717 = ""test error message truncated 717"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_718 = ""test error message truncated 718"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_719 = ""test error message truncated 719"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_720 = ""test error message truncated 720"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_721 = ""test error message truncated 721"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_722 = ""test error message truncated 722"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_723 = ""test error message truncated 723"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_724 = ""test error message truncated 724"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_725 = ""test error message truncated 725"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_726 = ""test error message truncated 726"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_727 = ""test error message truncated 727"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_728 = ""test error message truncated 728"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_729 = ""test error message truncated 729"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_730 = ""test error message truncated 730"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_731 = ""test error message truncated 731"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_732 = ""test error message truncated 732"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_733 = ""test error message truncated 733"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_734 = ""test error message truncated 734"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_735 = ""test error message truncated 735"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_736 = ""test error message truncated 736"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_737 = ""test error message truncated 737"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_738 = ""test error message truncated 738"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_739 = ""test error message truncated 739"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_740 = ""test error message truncated 740"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_741 = ""test error message truncated 741"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_742 = ""test error message truncated 742"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_743 = ""test error message truncated 743"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_744 = ""test error message truncated 744"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_745 = ""test error message truncated 745"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_746 = ""test error message truncated 746"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_747 = ""test error message truncated 747"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_748 = ""test error message truncated 748"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_749 = ""test error message truncated 749"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_750 = ""test error message truncated 750"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_751 = ""test error message truncated 751"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_752 = ""test error message truncated 752"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_753 = ""test error message truncated 753"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_754 = ""test error message truncated 754"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_755 = ""test error message truncated 755"";
		private static final String TEST_ERROR_MESSAGE_TRUNCATED_756 = ""test error message truncated 756"";
		"
cmpl-6u3lrwdGRMxQeTvUCUnCosasNIIb3,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/editing/PostModifyContent_2Test.java,37.537397146224976,length,"// PostModifyContent.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * Writes an article.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class PostModifyContent extends MWAction {

    private boolean first = true;

    private boolean second = true;

    private final ContentAccessable a;

    private Hashtable<String, String> tab = new Hashtable<String, String>();

    private MediaWikiBot bot;

    private GetApiToken apiReq = null;

    private HttpAction apiGet = null;

    private HttpAction initOldGet = null;

    private Post postModify = null;

    private boolean apiEdit = false;

    /**
     * @param bot a
     * @param a the
     * @throws ProcessException a
     * @throws ActionException a
     */
    public PostModifyContent(MediaWikiBot bot, final SimpleArticle a) throws ActionException, ProcessException {
        super(bot.getVersion());
        if (a.getTitle().length() < 1) {
            throw new ActionException(""imposible request, no title"");
        }
        this.a = a;
        this.bot = bot;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        if (first) {
            try {
                if (!bot.isEditApi())
                    throw new VersionException(""write api off - user triggerd"");
                switch(bot.getVersion()) {
                    case MW1_09:
                    case MW1_10:
                    case MW1_11:
                    case MW1_12:
                        throw new VersionException(""write api not available"");
                    default:
                        break;
                }
                first = false;
                if (!(bot.getUserinfo().getRights().contains(""edit"") && bot.getUserinfo().getRights().contains(""writeapi""))) {
                    throw new VersionException(""write api not avalibal"");
                }
                apiReq = new GetApiToken(GetApiToken.Intoken.EDIT, a.getTitle(), bot.getVersion(), bot.getUserinfo());
                apiGet = apiReq.getNextMessage();
                apiEdit = true;
                return apiGet;
            } catch (VersionException e) {
                String uS = ""/index.php?title="" + // TODO check encoding here
                MediaWiki.encode(a.getTitle()) + ""&action=edit&dontcountme=s"";
                initOldGet = new Get(uS);
                first = false;
                return initOldGet;
            } catch (JwbfException e) {
                throw new RuntimeException(e);
            }
        }
        if (apiEdit) {
            String uS = ""/api.php?action=edit&title="" + MediaWiki.encode(a.getTitle());
            postModify = new Post(uS);
            postModify.addParam(""summary"", a.getEditSummary());
            postModify.addParam(""text"", a.getText());
            try {
                Set<String> groups = bot.getUserinfo().getGroups();
                if (!isIntersectionEmpty(groups, MediaWiki.BOT_GROUPS)) {
                    postModify.addParam(""bot"", """");
                }
            } catch (JwbfException e) {
                log.warn(""{}"", e);
            }
            //			postModify.addParam(""watch"", ""unknown"")
            if (a.isMinorEdit())
                postModify.addParam(""minor"", """");
            else
                postModify.addParam(""notminor"", """");
            postModify.addParam(""token"", apiReq.getToken());
        } else {
            String uS = ""/index.php?title="" + MediaWiki.encode(a.getTitle()) + ""&action=submit"";
            postModify = new Post(uS);
            postModify.addParam(""wpSave"", ""Save"");
            postModify.addParam(""wpStarttime"", tab.get(""wpStarttime""));
            postModify.addParam(""wpEditToken"", tab.get(""wpEditToken""));
            postModify.addParam(""wpEdittime"", tab.get(""wpEdittime""));
            postModify.addParam(""wpTextbox1"", a.getText());
            String editSummaryText = a.getEditSummary();
            if (editSummaryText != null && editSummaryText.length() > 200) {
                editSummaryText = editSummaryText.substring(0, 200);
            }
            postModify.addParam(""wpSummary"", editSummaryText);
            if (a.isMinorEdit()) {
                postModify.addParam(""wpMinoredit"", ""1"");
            }
            log.info(""WRITE: "" + a.getTitle());
        }
        second = false;
        return postModify;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean hasMoreMessages() {
        return first || second;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processReturningText(String s, HttpAction hm) throws ProcessException {
        if (s.contains(""error"")) {
            if (s.length() > 700) {
                s = s.substring(0, 700);
            }
            throw new ProcessException(s);
        }
        if (initOldGet != null && hm.getRequest().equals(initOldGet.getRequest())) {
            getWpValues(s, tab);
            if (log.isDebugEnabled()) {
                log.debug(tab.toString());
            }
        } else if (apiGet != null && hm.getRequest().equals(apiGet.getRequest())) {
            log.debug(""parseapi"");
            apiReq.processReturningText(s, hm);
        }
        return s;
    }

    /**
     * @param text
     *            where to search
     * @param tab
     *            tabel with required values
     */
    private void getWpValues(final String text, Hashtable<String, String> tab) {
        String[] tParts = text.split(""\n"");
        for (int i = 0; i < tParts.length; i++) {
            if (tParts[i].indexOf(""wpEditToken"") > 0) {
                // \<input type='hidden' value=\""(.*?)\"" name=\""wpEditToken\""
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEditToken"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpEdittime"") > 0) {
                // value=""(\d+)"" name=[""\']wpEdittime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpEdittime"", tParts[i].substring(begin, end));
            } else if (tParts[i].indexOf(""wpStarttime"") > 0) {
                // value=""(\d+)"" name=[""\']wpStarttime[""\']
                int begin = tParts[i].indexOf(""value"") + 7;
                int end = tParts[i].indexOf(""name"") - 2;
                tab.put(""wpStarttime"", tParts[i].substring(begin, end));
            }
        }
    }

    /**
     * @param a a
     * @param b a
     * @return true if one or both sets are <code>null</code> or the intersection of sets is empty.
     */
    @SuppressWarnings(""unchecked"")
    public static boolean isIntersectionEmpty(Set<?> a, Set<?> b) {
        if (a != null && b != null) {
            Set<?> aTemp = new HashSet(a);
            Set<?> bTemp = new HashSet(b);
            aTemp.retainAll(bTemp);
            bTemp.retainAll(aTemp);
            return !(aTemp.size() > 0 && bTemp.size() > 0);
        }
        return true;
    }
}
","// PostModifyContent_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_2Test {","// PostModifyContent_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostModifyContent}.
* It contains ten unit test cases for the {@link PostModifyContent#isIntersectionEmpty(Set, Set)} method.
*/
class PostModifyContent_2Test {

	/**
	 * Test method for {@link PostModifyContent#isIntersectionEmpty(Set, Set)}.
	 */
	@Test
	void testIsIntersectionEmpty() {
		Set<String> a = new HashSet<String>();
		Set<String> b = new HashSet<String>();
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""a"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""b"");
		assertTrue(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""b"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""a"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""c"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""d"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""e"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""f"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""g"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""h"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""i"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""j"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""k"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""l"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""m"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""n"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""o"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""p"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""q"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""r"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""s"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""t"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""u"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""v"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""w"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""x"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""y"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		a.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
		b.add(""z"");
		assertFalse(PostModifyContent.isIntersectionEmpty(a, b));
	}
}

// PostModifyContentTest.java
package net.sourceforge.jwbf.mediawiki.actions.editing;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge"
cmpl-6u3muvrkhKa5qSgWHAKXiIyH0ohxW,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/login/PostLogin_0Test.java,53.44132852554321,length,"// PostLogin.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Philipp Kohl
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15 })
public class PostLogin extends MWAction {

    private Post msg;

    private final String success = ""Success"";

    private final String wrongPass = ""WrongPass"";

    private final String notExists = ""NotExists"";

    private final String needToken = ""NeedToken"";

    private LoginData login = null;

    private boolean reTry = false;

    private boolean reTryLimit = true;

    private final String username;

    private final String pw;

    private final String domain;

    /**
     * @param username
     *          the
     * @param pw
     *          password
     * @param domain
     *          a
     * @param login
     *          a
     */
    public PostLogin(final String username, final String pw, final String domain, LoginData login) {
        super();
        this.login = login;
        this.username = username;
        this.pw = pw;
        this.domain = domain;
        msg = getLoginMsg(username, pw, domain, null);
    }

    private Post getLoginMsg(final String username, final String pw, final String domain, final String token) {
        Post pm = new Post(""/api.php?action=login&format=xml"");
        pm.addParam(""lgname"", username);
        pm.addParam(""lgpassword"", pw);
        if (domain != null)
            pm.addParam(""lgdomain"", domain);
        if (token != null) {
            pm.addParam(""lgtoken"", token);
        }
        return pm;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
        } catch (IOException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
        } catch (NullPointerException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(""No regular content was found, check your api\n::"" + s);
        } catch (Exception e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(e.getLocalizedMessage());
        }
        return s;
    }

    /**
     * @param startElement
     *          the, where the search begins
     * @throws ProcessException
     *           if problems with login
     */
    private void findContent(final Element startElement) throws ProcessException {
        Element loginEl = startElement.getChild(""login"");
        String result = loginEl.getAttributeValue(""result"");
        if (result.equalsIgnoreCase(success)) {
            Map<String, String> properties = new HashMap<String, String>();
            properties.put(""userId"", loginEl.getAttribute(""lguserid"").toString());
            login.setup(loginEl.getAttributeValue(""lgusername""), true);
        } else if (result.equalsIgnoreCase(needToken) && reTryLimit) {
            msg = getLoginMsg(username, pw, domain, loginEl.getAttributeValue(""token""));
            reTry = true;
            reTryLimit = false;
        } else if (result.equalsIgnoreCase(wrongPass)) {
            throw new ProcessException(""Wrong Password"");
        } else if (result.equalsIgnoreCase(notExists)) {
            throw new ActionException(""No such User"");
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /*
   * (non-Javadoc)
   * 
   * @see net.sourceforge.jwbf.mediawiki.actions.util.MWAction#hasMoreMessages()
   */
    @Override
    public boolean hasMoreMessages() {
        boolean temp = super.hasMoreMessages() || reTry;
        reTry = false;
        return temp;
    }
}
","// PostLogin_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostLogin}.
* It contains ten unit test cases for the {@link PostLogin#processAllReturningText(String)} method.
*/
class PostLogin_0Test {","// PostLogin_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.login;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashMap;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Post;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PostLogin}.
* It contains ten unit test cases for the {@link PostLogin#processAllReturningText(String)} method.
*/
class PostLogin_0Test {

		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* 	<li>username: ""test""</li>
		* 	<li>pw: ""test""</li>
		* 	<li>domain: ""test""</li>
		* 	<li>login: null</li>
		* 	<li>s: ""&lt;api&gt;&lt;login result=\""NeedToken\"" token=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;""</li>
		* </ul>
		* @throws ProcessException 
		*/
		@Test
		void testProcessAllReturningText_0() throws ProcessException {
			// Arrange
			String username = ""test"";
			String pw = ""test"";
			String domain = ""test"";
			LoginData login = null;
			PostLogin postLogin = new PostLogin(username, pw, domain, login);
			String s = ""&lt;api&gt;&lt;login result=\""NeedToken\"" token=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;"";
			
			// Act
			String actual = postLogin.processAllReturningText(s);
			
			// Assert
			assertEquals(s, actual);
		}
		
		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* 	<li>username: ""test""</li>
		* 	<li>pw: ""test""</li>
		* 	<li>domain: ""test""</li>
		* 	<li>login: null</li>
		* 	<li>s: ""&lt;api&gt;&lt;login result=\""Success\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;""</li>
		* </ul>
		* @throws ProcessException 
		*/
		@Test
		void testProcessAllReturningText_1() throws ProcessException {
			// Arrange
			String username = ""test"";
			String pw = ""test"";
			String domain = ""test"";
			LoginData login = null;
			PostLogin postLogin = new PostLogin(username, pw, domain, login);
			String s = ""&lt;api&gt;&lt;login result=\""Success\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;"";
			
			// Act
			String actual = postLogin.processAllReturningText(s);
			
			// Assert
			assertEquals(s, actual);
		}
		
		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* 	<li>username: ""test""</li>
		* 	<li>pw: ""test""</li>
		* 	<li>domain: ""test""</li>
		* 	<li>login: null</li>
		* 	<li>s: ""&lt;api&gt;&lt;login result=\""WrongPass\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;""</li>
		* </ul>
		* @throws ProcessException 
		*/
		@Test
		void testProcessAllReturningText_2() throws ProcessException {
			// Arrange
			String username = ""test"";
			String pw = ""test"";
			String domain = ""test"";
			LoginData login = null;
			PostLogin postLogin = new PostLogin(username, pw, domain, login);
			String s = ""&lt;api&gt;&lt;login result=\""WrongPass\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;"";
			
			// Act
			String actual = postLogin.processAllReturningText(s);
			
			// Assert
			assertEquals(s, actual);
		}
		
		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* 	<li>username: ""test""</li>
		* 	<li>pw: ""test""</li>
		* 	<li>domain: ""test""</li>
		* 	<li>login: null</li>
		* 	<li>s: ""&lt;api&gt;&lt;login result=\""NotExists\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;""</li>
		* </ul>
		* @throws ProcessException 
		*/
		@Test
		void testProcessAllReturningText_3() throws ProcessException {
			// Arrange
			String username = ""test"";
			String pw = ""test"";
			String domain = ""test"";
			LoginData login = null;
			PostLogin postLogin = new PostLogin(username, pw, domain, login);
			String s = ""&lt;api&gt;&lt;login result=\""NotExists\"" lguserid=\""test\"" lgusername=\""test\"" lgtoken=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;"";
			
			// Act
			String actual = postLogin.processAllReturningText(s);
			
			// Assert
			assertEquals(s, actual);
		}
		
		/**
		* Test case for {@link PostLogin#processAllReturningText(String)}
		* with the following input:
		* <ul>
		* 	<li>username: ""test""</li>
		* 	<li>pw: ""test""</li>
		* 	<li>domain: ""test""</li>
		* 	<li>login: null</li>
		* 	<li>s: ""&lt;api&gt;&lt;login result=\""NeedToken\"" token=\""test\"" cookieprefix=\""test\"" sessionid=\""test\""&gt;&lt;/login&gt;&lt;/api&gt;""</li>
		* </ul>
		* @throws ProcessException 
		*/
		@Test
		void testProcessAllReturningText_4() throws ProcessException {
			// Arrange
			String username = ""test"";
			String pw = ""test"";
			String domain = ""test"";
			LoginData login = null;
			PostLogin postLogin = new PostLogin(username, pw, domain, login);
			String s = ""&lt;api&gt;&lt;login"
cmpl-6u3nxSHFpjxJxAtVW2HDAXe8vassS,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/meta/GetUserinfo.java,55.06384468078613,length,"// GetUserinfo.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetUserinfo extends MWAction implements Userinfo {

    private String username = """";

    private final Set<String> rights = new HashSet<String>();

    private final Set<String> groups = new HashSet<String>();

    private Get msg;

    /**
     * @param v a
     * @throws VersionException  a
     */
    public GetUserinfo(Version v) throws VersionException {
        super(v);
        switch(v) {
            case MW1_11:
                msg = new Get(""/api.php?"" + ""action=query&"" + ""meta=userinfo&"" + ""uiprop="" + MediaWiki.encode(""blockinfo|hasmsg|groups|rights"") + ""&"" + ""format=xml"");
                break;
            default:
                msg = new Get(""/api.php?"" + ""action=query&"" + ""meta=userinfo&"" + ""uiprop="" + MediaWiki.encode(""blockinfo|hasmsg|groups|rights|options|editcount|ratelimits"") + ""&"" + ""format=xml"");
                break;
        }
    }

    private void parse(final String xml) {
        log.debug(xml);
        rights.clear();
        groups.clear();
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final String processAllReturningText(final String s) throws ProcessException {
        parse(s);
        return """";
    }

    /**
     * {@inheritDoc}
     */
    public Set<String> getRights() {
        return rights;
    }

    /**
     * {@inheritDoc}
     */
    public Set<String> getGroups() {
        return groups;
    }

    /**
     * {@inheritDoc}
     */
    public String getUsername() {
        return username;
    }

    @SuppressWarnings(""unchecked"")
    protected void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            // blockinfo|hasmsg|groups|rights   <- MW 11
            if (element.getQualifiedName().equalsIgnoreCase(""userinfo"")) {
                username = element.getAttributeValue(""name"");
            } else if (element.getQualifiedName().equalsIgnoreCase(""groups"")) {
                Iterator<Element> git = element.getChildren(""g"").iterator();
                while (git.hasNext()) {
                    String gel = git.next().getTextTrim();
                    groups.add(gel);
                }
            } else if (element.getQualifiedName().equalsIgnoreCase(""rights"")) {
                Iterator<Element> rit = element.getChildren(""r"").iterator();
                while (rit.hasNext()) {
                    String rel = rit.next().getTextTrim();
                    rights.add(rel);
                }
            }
            findContent(element);
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetUserinfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetUserinfo}.
* It contains ten unit test cases for the {@link GetUserinfo#processAllReturningText(String)} method.
*/
class GetUserinfoTest {","// GetUserinfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetUserinfo}.
* It contains ten unit test cases for the {@link GetUserinfo#processAllReturningText(String)} method.
*/
class GetUserinfoTest {

		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(0, getUserinfo.getRights().size());
				assertEquals(0, getUserinfo.getGroups().size());
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText2() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(0, getUserinfo.getRights().size());
				assertEquals(0, getUserinfo.getGroups().size());
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText3() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(0, getUserinfo.getRights().size());
				assertEquals(0, getUserinfo.getGroups().size());
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText4() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(0, getUserinfo.getRights().size());
				assertEquals(0, getUserinfo.getGroups().size());
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText5() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /></query></api>"";
				getUserinfo.processAllReturningText(xml);
				assertEquals(""TestUser"", getUserinfo.getUsername());
				assertEquals(0, getUserinfo.getRights().size());
				assertEquals(0, getUserinfo.getGroups().size());
		}
		
		/**
		 * Test case for {@link GetUserinfo#processAllReturningText(String)} method.
		 * @throws VersionException 
		 */
		@Test
		void testProcessAllReturningText6() throws VersionException {
				GetUserinfo getUserinfo = new GetUserinfo(MW1_11);
				String xml = ""<api><query><userinfo name=\""TestUser\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser2\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser3\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser4\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\""TestUser5\"" blockid=\""0\"" blockedby=\""\"" blockedbyid=\""0\"" blockedreason=\""\"" blockedexpiry=\""infinite\"" editcount=\""0\"" groups=\""\"" rights=\""\"" /><userinfo name=\"""
cmpl-6u3p0mbOsL6r7IXhWO4cG1onWHgGR,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/meta/GetVersion.java,44.90354037284851,length,"// GetVersion.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 * Carlos Valenzuela
 */
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Basic action to receive {@link Version}.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetVersion extends MWAction {

    private final Get msg;

    private String generator = """";

    private String sitename = """";

    private String base = """";

    private String theCase = """";

    private String mainpage = """";

    public static Set<String> GENERATOR_EXT = new HashSet<String>();

    static {
        GENERATOR_EXT.add(""alpha"");
        GENERATOR_EXT.add(""wmf"");
    }

    /**
     * Create and submit the request to the Wiki. Do not use
     * {@link MediaWikiBot#performAction(net.sourceforge.jwbf.actions.ContentProcessable)}
     * .
     *
     * @param bot
     *          a
     * @throws ProcessException
     *           a
     * @throws ActionException
     *           a
     */
    public GetVersion(MediaWikiBot bot) throws ActionException, ProcessException {
        this();
        bot.performAction(this);
    }

    /*
   * In this case the superconstructor with no value is allowed, because the
   * versionrequest is mandatory
   */
    /**
     * Create the request.
     */
    @SuppressWarnings(""deprecation"")
    public GetVersion() {
        msg = new Get(""/api.php?action=query&meta=siteinfo&format=xml"");
    }

    private void parse(final String xml) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
            findContent(root);
        } catch (JDOMException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            log.error(xml);
            throw new ProcessException(e.getLocalizedMessage());
        } catch (IOException e) {
            log.error(e.getClass().getName() + e.getLocalizedMessage());
            throw new ProcessException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public final String processAllReturningText(final String s) throws ProcessException {
        parse(s);
        return """";
    }

    /**
     * @return the, like ""Wikipedia""
     */
    public String getSitename() {
        return sitename;
    }

    /**
     * @return the, like ""http://de.wikipedia.org/wiki/Wikipedia:Hauptseite""
     */
    public String getBase() {
        return base;
    }

    /**
     * @return the, like ""first-letter""
     */
    public String getCase() {
        return theCase;
    }

    /**
     * @return the
     * @see Version
     */
    public Version getVersion() {
        for (String generatorFragment : GENERATOR_EXT) {
            if (getGenerator().contains(generatorFragment))
                return Version.DEVELOPMENT;
        }
        Version[] versions = Version.values();
        StringBuilder buffer = new StringBuilder();
        for (Version version : versions) {
            buffer.append(version.getNumber()).append(' ');
            if (getGenerator().contains(version.getNumber())) {
                return version;
            }
        }
        if (log.isInfoEnabled())
            log.info(""\nVersion is UNKNOWN for JWBF ("" + JWBF.getVersion(getClass()) + "") : \n\t"" + getGenerator() + ""\n\t"" + ""supported versions: "" + buffer.toString() + ""\n\t"" + ""\n\tUsing settings for actual Wikipedia development version"");
        return Version.UNKNOWN;
    }

    /**
     * @return the MediaWiki Generator, like ""MediaWiki 1.16alpha""
     */
    public String getGenerator() {
        return generator;
    }

    /**
     * @return the, like ""Main Page""
     */
    public String getMainpage() {
        return mainpage;
    }

    @SuppressWarnings(""unchecked"")
    protected void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""general"")) {
                mainpage = element.getAttributeValue(""mainpage"");
                base = element.getAttributeValue(""base"");
                sitename = element.getAttributeValue(""sitename"");
                generator = element.getAttributeValue(""generator"");
                theCase = element.getAttributeValue(""case"");
            } else {
                findContent(element);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// GetVersionTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetVersion}.
* It contains ten unit test cases for the {@link GetVersion#processAllReturningText(String)} method.
*/
class GetVersionTest {","// GetVersionTest.java
package net.sourceforge.jwbf.mediawiki.actions.meta;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.JWBF;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetVersion}.
* It contains ten unit test cases for the {@link GetVersion#processAllReturningText(String)} method.
*/
class GetVersionTest {

		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.9.
		*/
		@Test
		void testProcessAllReturningText_1_9() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.9\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_09, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.10.
		*/
		@Test
		void testProcessAllReturningText_1_10() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.10\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_10, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.11.
		*/
		@Test
		void testProcessAllReturningText_1_11() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.11\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_11, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.12.
		*/
		@Test
		void testProcessAllReturningText_1_12() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.12\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_12, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.13.
		*/
		@Test
		void testProcessAllReturningText_1_13() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.13\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_13, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.14.
		*/
		@Test
		void testProcessAllReturningText_1_14() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.14\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://en.wikipedia.org/wiki/Main_Page\"" />\n"" +
						""  </query>\n"" +
						""</api>"";
				GetVersion getVersion = new GetVersion();
				try {
						getVersion.processAllReturningText(xml);
				} catch (ProcessException e) {
						fail(""Exception thrown"");
				}
				assertEquals(MW1_14, getVersion.getVersion());
		}
		
		/**
		* Test case for {@link GetVersion#processAllReturningText(String)} method.
		* It tests the case when the MediaWiki version is 1.15.
		*/
		@Test
		void testProcessAllReturningText_1_15() {
				String xml = ""<?xml version=\""1.0\""?>\n"" +
						""<api>\n"" +
						""  <query>\n"" +
						""    <general generator=\""MediaWiki 1.15\"" sitename=\""Wikipedia\"" case=\""first-letter\"" mainpage=\""Main Page\"" base=\""http://"
cmpl-6u3q3kU2GYvSh0bzmoDccGXPYzTci,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/misc/GetRendering.java,53.89223551750183,length,"// GetRendering.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Implements function to render wikitext on remote
 * <a href=""http://www.mediawiki.org/wiki/API:Expanding_templates_and_rendering#parse"">parse</a>.
 *
 * @author Thomas Stock
 */
@SupportedBy({ MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class GetRendering extends MWAction {

    private final Get msg;

    private String html = """";

    private final MediaWikiBot bot;

    private boolean isSelfEx = true;

    /**
     * @param bot a
     * @param wikitext a
     * @throws VersionException if not supported
     */
    public GetRendering(MediaWikiBot bot, String wikitext) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        msg = new Get(""/api.php?action=parse&text="" + MediaWiki.encode(wikitext) + ""&titles=API&format=xml"");
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return isSelfEx;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        html = findElement(""text"", s).getTextTrim();
        html = html.replace(""\n"", """");
        switch(bot.getVersion()) {
            case MW1_12:
                break;
            default:
                int last = html.lastIndexOf(""<!--"");
                html = html.substring(0, last);
        }
        return """";
    }

    protected Element findElement(String elementName, String xml) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(xml);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            return findContent(root, elementName);
        else
            // XXX okay ?
            return null;
    }

    private Element findContent(final Element e, final String name) {
        Element found = null;
        @SuppressWarnings(""unchecked"")
        Iterator<Element> el = e.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(name)) {
                //				System.out.println(element.getQualifiedName());
                return element;
            } else {
                found = findContent(element, name);
            }
        }
        if (found == null) {
            throw new NoSuchElementException();
        }
        return found;
    }

    private void update() {
        try {
            isSelfEx = false;
            bot.performAction(this);
        } catch (ActionException e) {
            e.printStackTrace();
        } catch (ProcessException e) {
            e.printStackTrace();
        } finally {
            isSelfEx = true;
        }
    }

    /**
     * @return the
     */
    public String getHtml() {
        if (html.length() < 1) {
            update();
        }
        return html;
    }
}
","// GetRenderingTest.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRendering}.
* It contains ten unit test cases for the {@link GetRendering#processAllReturningText(String)} method.
*/
class GetRenderingTest {","// GetRenderingTest.java
package net.sourceforge.jwbf.mediawiki.actions.misc;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetRendering}.
* It contains ten unit test cases for the {@link GetRendering#processAllReturningText(String)} method.
*/
class GetRenderingTest {

		private static final String WIKITEXT = ""'''bold'''"";
		private static final String HTML = ""<p><b>bold</b></p>"";
		
		private static final String WIKITEXT_2 = ""''italic''"";
		private static final String HTML_2 = ""<p><i>italic</i></p>"";
		
		private static final String WIKITEXT_3 = ""'''bold''' and ''italic''"";
		private static final String HTML_3 = ""<p><b>bold</b> and <i>italic</i></p>"";
		
		private static final String WIKITEXT_4 = ""'''bold''' and ''italic'' and '''bold and italic'''"";
		private static final String HTML_4 = ""<p><b>bold</b> and <i>italic</i> and <b><i>bold and italic</i></b></p>"";
		
		private static final String WIKITEXT_5 = ""'''bold''' and ''italic'' and '''bold and italic''' and ''italic and '''bold''' ''"";
		private static final String HTML_5 = ""<p><b>bold</b> and <i>italic</i> and <b><i>bold and italic</i></b> and <i>italic and <b>bold</b> </i></p>"";
		
		private static final String WIKITEXT_6 = ""'''bold''' and ''italic'' and '''bold and italic''' and ''italic and '''bold''' '' and '''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and italic and '''bold and italic''' and '''''bold and ital"
cmpl-6u3r6M96ZXhG5GH9hEVdL7FyYYSYe,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_0Test.java,43.65292167663574,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {","// CategoryMembersFull_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#iterator()} method.
*/
class CategoryMembersFull_0Test {

		/**
		 * Test case for {@link CategoryMembersFull#iterator()}
		 * @throws ProcessException 
		 * @throws ActionException 
		 * @throws JwbfException 
		 */
		@Test
		void testIterator() throws JwbfException, ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Main_topic_classifications"");
				Iterator<CategoryItem> it = cmf.iterator();
				assertTrue(it.hasNext());
				CategoryItem ci = it.next();
				assertEquals(""Category:Main topic classifications"", ci.getTitle());
				assertEquals(14, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories"", ci.getTitle());
				assertEquals(15, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic"", ci.getTitle());
				assertEquals(16, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles"", ci.getTitle());
				assertEquals(17, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters"", ci.getTitle());
				assertEquals(18, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - top"", ci.getTitle());
				assertEquals(19, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - high"", ci.getTitle());
				assertEquals(20, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - mid"", ci.getTitle());
				assertEquals(21, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - low"", ci.getTitle());
				assertEquals(22, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - bottom"", ci.getTitle());
				assertEquals(23, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA"", ci.getTitle());
				assertEquals(24, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA-top"", ci.getTitle());
				assertEquals(25, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA-high"", ci.getTitle());
				assertEquals(26, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA-mid"", ci.getTitle());
				assertEquals(27, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA-low"", ci.getTitle());
				assertEquals(28, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - NA-bottom"", ci.getTitle());
				assertEquals(29, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - unassessed"", ci.getTitle());
				assertEquals(30, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - unassessed-top"", ci.getTitle());
				assertEquals(31, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - unassessed-high"", ci.getTitle());
				assertEquals(32, ci.getPageid());
				assertEquals(14, ci.getNamespace());
				assertTrue(it.hasNext());
				ci = it.next();
				assertEquals(""Category:Wikipedia categories by topic with auto-assessed-class articles and importance parameters - unassessed-mid"", ci.getTitle());
				assert"
cmpl-6u3s9eSVhB41NrSggcHeTpzsjcskn,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_1Test.java,45.608847856521606,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#processAllReturningText(String)} method.
*/
class CategoryMembersFull_1Test {","// CategoryMembersFull_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#processAllReturningText(String)} method.
*/
class CategoryMembersFull_1Test {

		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText("""");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText1() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText2() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText3() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test3\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText4() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test4\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText5() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test5\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText6() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test5\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test6\"" /></categorymembers></query></api>"");
				assertEquals("""", s);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#processAllReturningText(String)} method.
		 * @throws ActionException on any kind of problems
		 * @throws ProcessException on any kind of problems
		 */
		@Test
		void testProcessAllReturningText7() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/index.php"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Test"");
				String s = cmf.processAllReturningText(""<api><query-continue><categorymembers cmcontinue=\""\"" /></query-continue><query><categorymembers><cm pageid=\""1\"" ns=\""0\"" title=\""Test\"" /><cm pageid=\""2\"" ns=\""0\"" title=\""Test2\"" /><cm pageid=\""3\"" ns=\""0\"" title=\""Test3\"" /><cm pageid=\""4\"" ns=\""0\"" title=\""Test4\"" /><cm pageid=\""5\"" ns=\""0\"" title=\""Test5\"" /><cm pageid=\""6\"" ns=\""0\"" title=\""Test6\"" /><cm pageid=\""7\"" ns"
cmpl-6u3tCE530STuYZtRDc6EKiGclCjG5,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_2Test.java,53.22509694099426,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_2Test {","// CategoryMembersFull_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#hasNext()} method.
*/
class CategoryMembersFull_2Test {

		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_1() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_2() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_3() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_4() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_5() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_6() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_7() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_8() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &lt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has more than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_9() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Physics"", 0);
				int count = 0;
				while (cmf.hasNext()) {
						cmf.next();
						count++;
				}
				assertTrue(count &gt; 500);
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#hasNext()} method.
		 * It tests the case when the category has less than 500 members.
		 * @throws ActionException
		 * @throws ProcessException
		 */
		@Test
		void testHasNext_10() throws ActionException, ProcessException {
				MediaWikiBot bot = new MediaWikiBot(""http://en.wikipedia.org/w/"");
				CategoryMembersFull"
cmpl-6u3uFxQTqdqQa8HIau8upICnBQrPv,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/CategoryMembersFull_3Test.java,49.72084856033325,length,"// CategoryMembersFull.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;

/**
 * A specialization of {@link CategoryMembers} with contains
 * {@link CategoryItem}s.
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class CategoryMembersFull extends CategoryMembers implements Iterable<CategoryItem>, Iterator<CategoryItem> {

    private Get msg;

    /**
     * Collection that will contain the result (titles of articles linking to the
     * target) after performing the action has finished.
     */
    private Collection<CategoryItem> titleCollection = new ArrayList<CategoryItem>();

    private Iterator<CategoryItem> titleIterator;

    /**
     * @throws ActionException
     *           on any kind of http or version problems
     * @throws ProcessException
     *           on inner problems like a version mismatch
     */
    public CategoryMembersFull(MediaWikiBot bot, String categoryName, int... namespaces) throws ProcessException {
        super(bot, categoryName, namespaces);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void addCatItem(String title, int pageid, int ns) {
        CategoryItem ci = new CategoryItem();
        ci.setTitle(title);
        ci.setPageid(pageid);
        ci.setNamespace(ns);
        titleCollection.add(ci);
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public Iterator<CategoryItem> iterator() {
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new CategoryMembersFull(bot, categoryName, namespace);
        } catch (JwbfException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    private void prepareCollection() {
        if (init || (!titleIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateFirstRequest();
            } else {
                msg = generateContinueRequest(nextPageInfo);
            }
            init = false;
            try {
                bot.performAction(this);
                setHasMoreMessages(true);
                log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        titleCollection.clear();
        String buff = super.processAllReturningText(s);
        if (log.isDebugEnabled())
            log.debug(titleCollection.toString());
        return buff;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return titleIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public CategoryItem next() {
        prepareCollection();
        return titleIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        titleIterator.remove();
    }

    @Override
    protected void finalizeParse() {
        titleIterator = titleCollection.iterator();
    }
}
","// CategoryMembersFull_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_3Test {","// CategoryMembersFull_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.CategoryItem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CategoryMembersFull}.
* It contains ten unit test cases for the {@link CategoryMembersFull#next()} method.
*/
class CategoryMembersFull_3Test {

		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has no members.
		 */
		@Test
		void testNext_1() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Empty"");
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has one member.
		 */
		@Test
		void testNext_2() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:One"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""One"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(1, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has two members.
		 */
		@Test
		void testNext_3() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Two"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Two"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(2, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Two_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(3, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has three members.
		 */
		@Test
		void testNext_4() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Three"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Three"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(4, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Three_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(5, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Three_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(6, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has four members.
		 */
		@Test
		void testNext_5() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Four"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Four"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(7, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_2"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(8, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_3"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(9, ci.getPageid());
						assertTrue(cmf.hasNext());
						ci = cmf.next();
						assertEquals(""Four_4"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(10, ci.getPageid());
						assertFalse(cmf.hasNext());
				} catch (ProcessException e) {
						fail(e.getLocalizedMessage());
				}
		}
		
		/**
		 * Test case for {@link CategoryMembersFull#next()} method.
		 * It tests the case when the category has five members.
		 */
		@Test
		void testNext_6() {
				try {
						MediaWikiBot bot = new MediaWikiBot(""http://localhost/mediawiki/"");
						CategoryMembersFull cmf = new CategoryMembersFull(bot, ""Category:Five"");
						assertTrue(cmf.hasNext());
						CategoryItem ci = cmf.next();
						assertEquals(""Five"", ci.getTitle());
						assertEquals(0, ci.getNamespace());
						assertEquals(11, ci.getPageid());
						assertTrue(cmf.hasNext());
			"
cmpl-6u3vI6h5zxDRQ056qi8ZtPwJQ2K3r,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/ImageInfo.java,50.97280955314636,length,"// ImageInfo.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * Action to receive the full address of an image. Like ""Img.gif"" to
 * ""http://wikihost.tld/w/images/x/y/Img.gif"".
 *
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class ImageInfo extends MWAction {

    private static final Map<String, String> EMPTY_STRING_MAP = Collections.emptyMap();

    public static final String WIDTH = ""iiurlwidth"";

    public static final String HEIGHT = ""iiurlheight"";

    private String urlOfImage = """";

    private Get msg;

    private final MediaWikiBot bot;

    private boolean selfEx = true;

    private Map<String, String> map = new HashMap<String, String>();

    /**
     * Get an absolute url to an image.
     *
     * @param bot
     *          a
     * @param name
     *          of, like ""Test.gif""
     * @throws VersionException
     *           if not supported
     */
    public ImageInfo(MediaWikiBot bot, String name) throws VersionException {
        this(bot, name, EMPTY_STRING_MAP);
    }

    public ImageInfo(MediaWikiBot bot, String name, Map<String, String> params) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        map.putAll(params);
        prepareMsg(name);
    }

    public ImageInfo(MediaWikiBot bot, String name, String[][] params) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        if (params != null) {
            for (String[] param : params) {
                if (param.length == 2) {
                    String key = param[0];
                    String value = param[1];
                    if (key != null && value != null)
                        map.put(key, value);
                }
            }
        }
        prepareMsg(name);
    }

    private void prepareMsg(String name) {
        int width = NumberUtils.toInt(map.get(WIDTH));
        int height = NumberUtils.toInt(map.get(HEIGHT));
        String addProps = """";
        if (width > 0)
            addProps += ""&"" + WIDTH + ""="" + width;
        if (height > 0)
            addProps += ""&"" + HEIGHT + ""="" + height;
        if (bot.getVersion().greaterEqThen(Version.MW1_15)) {
            msg = new Get(""/api.php?action=query&titles=File:"" + MediaWiki.encode(name) + ""&prop=imageinfo"" + addProps + ""&iiprop=url&format=xml"");
        } else {
            msg = new Get(""/api.php?action=query&titles=Image:"" + MediaWiki.encode(name) + ""&prop=imageinfo"" + addProps + ""&iiprop=url&format=xml"");
        }
    }

    /**
     * @return position like ""http://server.tld/path/to/Test.gif""
     * @throws ProcessException
     *           on
     */
    public String getUrlAsString() throws ProcessException {
        try {
            selfEx = false;
            bot.performAction(this);
        } catch (ActionException e1) {
            e1.printStackTrace();
        } finally {
            selfEx = true;
        }
        try {
            new URL(urlOfImage);
        } catch (MalformedURLException e) {
            if (bot.getHostUrl().length() <= 0) {
                throw new ProcessException(""please use the constructor with hostUrl; "" + urlOfImage);
            }
            urlOfImage = bot.getHostUrl() + urlOfImage;
        }
        return urlOfImage;
    }

    public URL getUrl() throws MalformedURLException, ProcessException {
        return new URL(getUrlAsString());
    }

    /**
     * {@inheritDoc}
     *
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selfEx;
    }

    /**
     * @return a
     * @throws ProcessException
     *           on
     * @throws ActionException
     *           on
     * @throws IOException
     *           on
     */
    public BufferedImage getAsImage() throws ProcessException, IOException {
        return ImageIO.read(new URL(getUrlAsString()));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        findUrlOfImage(s);
        return """";
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) throws ProcessException {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""ii"")) {
                urlOfImage = element.getAttributeValue(""url"");
                return;
            } else {
                findContent(element);
            }
        }
    }

    private void findUrlOfImage(String s) throws ProcessException {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            log.warn("""", e);
        } catch (IOException e) {
            log.warn("""", e);
        }
        if (root != null)
            findContent(root);
        if (urlOfImage.length() < 1)
            throw new ProcessException(""Could not find this image"");
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// ImageInfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ImageInfo}.
* It contains ten unit test cases for the {@link ImageInfo#processAllReturningText(String)} method.
*/
class ImageInfoTest {","// ImageInfoTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.imageio.ImageIO;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.apache.commons.lang.math.NumberUtils;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ImageInfo}.
* It contains ten unit test cases for the {@link ImageInfo#processAllReturningText(String)} method.
*/
class ImageInfoTest {

		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"");
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText2() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new String[][] {});
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText3() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText4() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText5() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText6() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText7() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText8() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText9() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
		
		/**
		* Test case for {@link ImageInfo#processAllReturningText(String)} method.
		* @throws ProcessException on
		*/
		@Test
		void testProcessAllReturningText10() throws ProcessException {
				String s = """";
				ImageInfo imageInfo = new ImageInfo(new MediaWikiBot(), ""Test.gif"", new HashMap<String, String>());
				imageInfo.processAllReturningText(s);
		}
}

// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.RequestBuilder;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.ApiRequestBuilder;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.VersionException;
import net.sourceforge.jwbf.mediawiki.actions.queries.CategoryMembers;
import net.sourceforge.jwbf.mediawiki.actions.queries.ImageInfo;
import net.sourceforge.jwbf.mediawiki.actions.queries.ImageUsageTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.LinkTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.TemplateUserTitles;
import net.sourceforge.jwbf.mediawiki.actions.queries.Userinfo.UserinfoException;
import net.sourceforge.jwbf.mediawiki.actions.util.RedirectFilter;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionExceptionError;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.ActionExceptionType;
import net.sourceforge.jwbf.mediawiki.bots.util.MWActionException.ExceptionType;
import net.sourceforge.jwbf."
cmpl-6u3wLzJPt3LBWKQUPmoFHynBhvJL1,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_0Test.java,51.591588497161865,length,"// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#processAllReturningText(String)} method.
*/
class LogEvents_0Test {","// LogEvents_0Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#processAllReturningText(String)} method.
*/
class LogEvents_0Test {

		/**
		 * Test method for {@link LogEvents#processAllReturningText(String)}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<api><query><logevents letype=\""block\"" leuser=\""JWBF\"" lelimit=\""10\"" lestart=\""2008-01-01T00:00:00Z\"" leend=\""2008-01-02T00:00:00Z\"" leprop=\""ids|title|type|user|timestamp|comment|details\"" leaction=\""block/block\"" leid=\""1\"" leuserid=\""1\"" letimestamp=\""2008-01-01T00:00:00Z\"" lecomment=\""\"" ledetails=\""\"" /></query></api>"";
			
			SAXBuilder builder = new SAXBuilder();
			Reader i = new StringReader(xml);
			Document doc = builder.build(new InputSource(i));
			Element root = doc.getRootElement();
			
			LogEvents test = new LogEvents(new MediaWikiBot(""http://localhost/w/api.php""), ""block"");
			test.findContent(root);
			
			Collection<LogItem> logCollection = new Vector<LogItem>();
			logCollection = test.logCollection;
			
			Iterator<LogItem> logIterator = logCollection.iterator();
			
			LogItem logItem = logIterator.next();
			
			assertEquals(""block"", logItem.getType());
			assertEquals(""JWBF"", logItem.getUser());
			
		}
		
		/**
		 * Test method for {@link LogEvents#processAllReturningText(String)}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText2() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<api><query><logevents letype=\""block\"" leuser=\""JWBF\"" lelimit=\""10\"" lestart=\""2008-01-01T00:00:00Z\"" leend=\""2008-01-02T00:00:00Z\"" leprop=\""ids|title|type|user|timestamp|comment|details\"" leaction=\""block/block\"" leid=\""1\"" leuserid=\""1\"" letimestamp=\""2008-01-01T00:00:00Z\"" lecomment=\""\"" ledetails=\""\"" /></query></api>"";
			
			SAXBuilder builder = new SAXBuilder();
			Reader i = new StringReader(xml);
			Document doc = builder.build(new InputSource(i));
			Element root = doc.getRootElement();
			
			LogEvents test = new LogEvents(new MediaWikiBot(""http://localhost/w/api.php""), ""block"");
			test.findContent(root);
			
			Collection<LogItem> logCollection = new Vector<LogItem>();
			logCollection = test.logCollection;
			
			Iterator<LogItem> logIterator = logCollection.iterator();
			
			LogItem logItem = logIterator.next();
			
			assertEquals(""block"", logItem.getType());
			assertEquals(""JWBF"", logItem.getUser());
			
		}
		
		/**
		 * Test method for {@link LogEvents#processAllReturningText(String)}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText3() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<api><query><logevents letype=\""block\"" leuser=\""JWBF\"" lelimit=\""10\"" lestart=\""2008-01-01T00:00:00Z\"" leend=\""2008-01-02T00:00:00Z\"" leprop=\""ids|title|type|user|timestamp|comment|details\"" leaction=\""block/block\"" leid=\""1\"" leuserid=\""1\"" letimestamp=\""2008-01-01T00:00:00Z\"" lecomment=\""\"" ledetails=\""\"" /></query></api>"";
			
			SAXBuilder builder = new SAXBuilder();
			Reader i = new StringReader(xml);
			Document doc = builder.build(new InputSource(i));
			Element root = doc.getRootElement();
			
			LogEvents test = new LogEvents(new MediaWikiBot(""http://localhost/w/api.php""), ""block"");
			test.findContent(root);
			
			Collection<LogItem> logCollection = new Vector<LogItem>();
			logCollection = test.logCollection;
			
			Iterator<LogItem> logIterator = logCollection.iterator();
			
			LogItem logItem = logIterator.next();
			
			assertEquals(""block"", logItem.getType());
			assertEquals(""JWBF"", logItem.getUser());
			
		}
		
		/**
		 * Test method for {@link LogEvents#processAllReturningText(String)}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testProcessAllReturningText4() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<api><query><logevents letype=\""block\"" leuser=\""JWBF\"" lelimit=\""10\"" lestart=\""2008-01-01T00:00:00Z\"" leend=\""2008-01-02T00:00:00Z\"" leprop=\""ids|title|type|user|timestamp|comment|details\"" leaction=\""block/block\"" leid=\""1\"" leuserid=\""1\"" letimestamp=\""2008-01-01T00:00:00Z\"" lecomment=\""\"" ledetails=\""\"" /></query></api>"";
			
			SAXBuilder builder = new SAXBuilder();
			Reader i = new StringReader(xml);
			Document doc = builder.build(new InputSource(i));
			Element root = doc.getRootElement();
			
			LogEvents test = new LogEvents(new MediaWikiBot(""http://localhost/w/api.php""), ""block"");
			test.findContent(root);
			
			Collection<LogItem> logCollection = new Vector<LogItem>();
			logCollection = test.logCollection;
			
			Iterator<LogItem> logIterator = logCollection.iterator();
			
			LogItem logItem = logIterator.next();
			
			assertEquals(""block"", logItem.getType());
			assertEquals(""JWBF"", logItem.getUser());
			
		}
		
		/**
		 * Test method for {@link LogEvents#processAllReturningText(String)}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @th"
cmpl-6u3xOdTD9Vhm6LqYVEqE1ZWiiYt0Q,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_1Test.java,51.04542922973633,length,"// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_1Test {","// LogEvents_1Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#hasNext()} method.
*/
class LogEvents_1Test {

		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext2() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext3() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext4() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext5() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext6() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext7() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext8() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext9() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
		/**
		 * Test method for {@link LogEvents#hasNext()}.
		 * @throws VersionException 
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testHasNext10() throws VersionException, JDOMException, IOException, ActionException, ProcessException {
			
			MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
			LogEvents logEvents = new LogEvents(bot, ""upload"");
			
			assertTrue(logEvents.hasNext());
			
		}
		
}

// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1"
cmpl-6u3yRiqmx7nZFoAAL5DEAssSkU57c,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_2Test.java,54.811800718307495,length,"// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#next()} method.
*/
class LogEvents_2Test {","// LogEvents_2Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#next()} method.
*/
class LogEvents_2Test {

		/**
		 * Test case for {@link LogEvents#next()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testNext() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<?xml version=\""1.0\""?>\n"" + 
					""<api>\n"" + 
					""  <query>\n"" + 
					""    <logevents>\n"" + 
					""      <item action=\""block\"" logid=\""1\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""2\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""3\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""4\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""5\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""6\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""7\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""8\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""9\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""10\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""    </logevents>\n"" + 
					""  </query>\n"" + 
					""</api>"";
			
			SAXBuilder builder = new SAXBuilder();
			Reader i = new StringReader(xml);
			Document doc = builder.build(new InputSource(i));
			Element root = doc.getRootElement();
			
			LogEvents le = new LogEvents(new MediaWikiBot(MW1_11), ""block"");
			le.findContent(root);
			
			Iterator<LogItem> it = le.iterator();
			
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertTrue(it.hasNext());
			assertEquals(""User:Test"", it.next().getTitle());
			assertFalse(it.hasNext());
			
		}
		
		/**
		 * Test case for {@link LogEvents#next()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testNext2() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
			
			String xml = ""<?xml version=\""1.0\""?>\n"" + 
					""<api>\n"" + 
					""  <query>\n"" + 
					""    <logevents>\n"" + 
					""      <item action=\""block\"" logid=\""1\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""2\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""3\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""4\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""5\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""6\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""7\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""8\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""9\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""      <item action=\""block\"" logid=\""10\"" page=\""User:Test\"" timestamp=\""2007-01-01T00:00:00Z\"" type=\""block\"" user=\""Test\""/>\n"" + 
					""    </logevents>\n"" + 
					""  </query>\n"" + 
					""</api>"";
			
			"
cmpl-6u3zUxwnLNHmtE0UR9JLOAj6S2onu,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/LogEvents_3Test.java,52.33301782608032,length,"// LogEvents.java
/*
 * Copyright 2007 Thomas Stock.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

/**
 * List log events, filtered by time range, event type, user type, or the page
 * it applies to. Ordered by event timestamp. Parameters: letype (flt), lefrom
 * (paging timestamp), leto (flt), ledirection (dflt=older), leuser (flt),
 * letitle (flt), lelimit (dflt=10, max=500/5000)
 *
 * api.php ? action=query & list=logevents      - List last 10 events of any type
 *
 * TODO This is a semi-complete extension point
 * @author Thomas Stock
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16 })
public class LogEvents extends MWAction implements Iterator<LogItem>, Iterable<LogItem> {

    /**
     * value for the bllimit-parameter. *
     */
    public static final String BLOCK = ""block"";

    public static final String PROTECT = ""protect"";

    public static final String RIGHTS = ""rights"";

    public static final String DELETE = ""delete"";

    public static final String UPLOAD = ""upload"";

    public static final String MOVE = ""move"";

    public static final String IMPORT = ""mport"";

    public static final String PATROL = ""patrol"";

    public static final String MERGE = ""merge"";

    private final int limit;

    private Get msg;

    private final MediaWikiBot bot;

    /* first run variable */
    private boolean init = true;

    private boolean selvEx = true;

    /**
     * Collection that will contain the result (titles of articles linking to
     * the target) after performing the action has finished.
     */
    private Collection<LogItem> logCollection = new Vector<LogItem>();

    private Iterator<LogItem> logIterator = null;

    private final String[] type;

    private String nextPageInfo = """";

    private boolean hasMoreResults = true;

    /**
     * information necessary to get the next api page.
     */
    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String type) throws VersionException {
        this(bot, new String[] { type });
    }

    /**
     * @param bot a
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, String[] type) throws VersionException {
        this(bot, 50, type.clone());
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String type) throws VersionException {
        this(bot, limit, new String[] { type });
    }

    /**
     * @param bot a
     * @param limit of events
     * @param type of like {@link #MOVE}
     * @throws VersionException if incompatible with this version
     */
    public LogEvents(MediaWikiBot bot, int limit, String[] type) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        this.type = type;
        this.limit = limit;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateRequest(String... logtype) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param logtype
     *            type of log, like upload
     * @return a
     */
    private Get generateContinueRequest(String[] logtype, String continueing) {
        String uS = """";
        uS = ""/api.php?action=query&list=logevents"";
        if (logtype.length > 0) {
            StringBuffer logtemp = new StringBuffer();
            for (int i = 0; i < logtype.length; i++) {
                logtemp.append(logtype[i] + ""|"");
            }
            uS += ""&letype="" + logtemp.substring(0, logtemp.length() - 1);
        }
        uS += ""&lelimit="" + limit + ""&format=xml"";
        return new Get(uS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(final String s) throws ProcessException {
        logCollection.clear();
        parseArticleTitles(s);
        parseHasMore(s);
        logIterator = logCollection.iterator();
        return """";
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *            text for parsing
     */
    private void parseArticleTitles(String s) {
        SAXBuilder builder = new SAXBuilder();
        Element root = null;
        try {
            Reader i = new StringReader(s);
            Document doc = builder.build(new InputSource(i));
            root = doc.getRootElement();
        } catch (JDOMException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (root != null)
            findContent(root);
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s   text for parsing
     */
    private void parseHasMore(final String s) {
        // get the blcontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<logevents *lestart=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            nextPageInfo = m.group(1);
            hasMoreResults = true;
        } else {
            hasMoreResults = false;
        }
        if (log.isDebugEnabled())
            log.debug(""has more = "" + hasMoreResults);
    }

    @SuppressWarnings(""unchecked"")
    private void findContent(final Element root) {
        Iterator<Element> el = root.getChildren().iterator();
        while (el.hasNext()) {
            Element element = el.next();
            if (element.getQualifiedName().equalsIgnoreCase(""item"")) {
                LogItem l = new LogItem();
                l.setTitle(element.getAttributeValue(""title""));
                l.setType(element.getAttributeValue(""type""));
                l.setUser(element.getAttributeValue(""user""));
                logCollection.add(l);
            } else {
                findContent(element);
            }
        }
    }

    private void prepareCollection() {
        if (init || (!logIterator.hasNext() && hasMoreResults)) {
            if (init) {
                msg = generateRequest(type);
            } else {
                msg = generateContinueRequest(type, nextPageInfo);
            }
            init = false;
            try {
                // TODO not good
                selvEx = false;
                bot.performAction(this);
                // TODO not good
                selvEx = true;
                setHasMoreMessages(true);
                if (log.isDebugEnabled())
                    log.debug(""preparing success"");
            } catch (ActionException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            } catch (ProcessException e) {
                e.printStackTrace();
                setHasMoreMessages(false);
            }
        }
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }

    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        prepareCollection();
        return logIterator.hasNext();
    }

    /**
     * {@inheritDoc}
     */
    public LogItem next() {
        prepareCollection();
        return logIterator.next();
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        logIterator.remove();
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings(""unchecked"")
    public Iterator<LogItem> iterator() {
        try {
            return (Iterator<LogItem>) clone();
        } catch (CloneNotSupportedException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new LogEvents(bot, limit, type);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }

    /**
     * {@inheritDoc}
     * @deprecated see super
     */
    @Deprecated
    @Override
    public boolean isSelfExecuter() {
        return selvEx;
    }
}
","// LogEvents_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#iterator()} method.
*/
class LogEvents_3Test {","// LogEvents_3Test.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import java.util.Iterator;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import net.sourceforge.jwbf.mediawiki.contentRep.LogItem;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogEvents}.
* It contains ten unit test cases for the {@link LogEvents#iterator()} method.
*/
class LogEvents_3Test {

		/**
		 * Test case for {@link LogEvents#iterator()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
				
				// create a testbot
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				
				// create a LogEvents object
				LogEvents logEvents = new LogEvents(bot, ""upload"");
				
				// create a SAXBuilder
				SAXBuilder builder = new SAXBuilder();
				
				// create a JDOM document
				Document doc = builder.build(new StringReader(logEvents.generateRequest(""upload"").getRequest()));
				
				// create a root element
				Element root = doc.getRootElement();
				
				// create a query element
				Element query = root.getChild(""query"");
				
				// create a logevents element
				Element logevents = query.getChild(""logevents"");
				
				// create a letype attribute
				String letype = logevents.getAttributeValue(""letype"");
				
				// create a lelimit attribute
				String lelimit = logevents.getAttributeValue(""lelimit"");
				
				// create a format attribute
				String format = logevents.getAttributeValue(""format"");
				
				// test the attributes
				assertEquals(""upload"", letype);
				assertEquals(""50"", lelimit);
				assertEquals(""xml"", format);
				
		}
		
		/**
		 * Test case for {@link LogEvents#iterator()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator2() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
				
				// create a testbot
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				
				// create a LogEvents object
				LogEvents logEvents = new LogEvents(bot, ""upload"");
				
				// create a SAXBuilder
				SAXBuilder builder = new SAXBuilder();
				
				// create a JDOM document
				Document doc = builder.build(new StringReader(logEvents.generateRequest(""upload"").getRequest()));
				
				// create a root element
				Element root = doc.getRootElement();
				
				// create a query element
				Element query = root.getChild(""query"");
				
				// create a logevents element
				Element logevents = query.getChild(""logevents"");
				
				// create a letype attribute
				String letype = logevents.getAttributeValue(""letype"");
				
				// create a lelimit attribute
				String lelimit = logevents.getAttributeValue(""lelimit"");
				
				// create a format attribute
				String format = logevents.getAttributeValue(""format"");
				
				// test the attributes
				assertEquals(""upload"", letype);
				assertEquals(""50"", lelimit);
				assertEquals(""xml"", format);
				
		}
		
		/**
		 * Test case for {@link LogEvents#iterator()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator3() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
				
				// create a testbot
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				
				// create a LogEvents object
				LogEvents logEvents = new LogEvents(bot, ""upload"");
				
				// create a SAXBuilder
				SAXBuilder builder = new SAXBuilder();
				
				// create a JDOM document
				Document doc = builder.build(new StringReader(logEvents.generateRequest(""upload"").getRequest()));
				
				// create a root element
				Element root = doc.getRootElement();
				
				// create a query element
				Element query = root.getChild(""query"");
				
				// create a logevents element
				Element logevents = query.getChild(""logevents"");
				
				// create a letype attribute
				String letype = logevents.getAttributeValue(""letype"");
				
				// create a lelimit attribute
				String lelimit = logevents.getAttributeValue(""lelimit"");
				
				// create a format attribute
				String format = logevents.getAttributeValue(""format"");
				
				// test the attributes
				assertEquals(""upload"", letype);
				assertEquals(""50"", lelimit);
				assertEquals(""xml"", format);
				
		}
		
		/**
		 * Test case for {@link LogEvents#iterator()}.
		 * @throws IOException 
		 * @throws JDOMException 
		 * @throws VersionException 
		 * @throws ProcessException 
		 * @throws ActionException 
		 */
		@Test
		void testIterator4() throws JDOMException, IOException, ActionException, ProcessException, VersionException {
				
				// create a testbot
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				
				// create a LogEvents object
				LogEvents logEvents = new LogEvents(bot, ""upload"");
				
				// create a SAXBuilder
				SAXBuilder builder = new SAXBuilder();
				
				// create a JDOM document
				Document doc = builder.build(new StringReader(logEvents.generateRequest(""upload"").getRequest()));
				
				// create a root element
				Element root = doc.getRootElement();
				
				// create a query element
				Element query = root.getChild(""query"");
				
				// create a logevents element
				Element logevents = query.getChild(""logevents"");
				
				// create a letype attribute
				String letype = logevents.getAttributeValue(""letype"");
				
				// create a lelimit attribute
				String le"
cmpl-6u40XI554YxX6OJ3IkYPRpPOJMOtT,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/RandomPageTitle.java,53.70010304450989,length,"// RandomPageTitle.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;

/**
 * Action to receive the title of a random page
 *
 * TODO write a test that shows compatibility with all these versions
 *
 * @author Juan Ignacio Cidre
 */
@Slf4j
@SupportedBy({ MW1_11, MW1_12, MW1_13, MW1_14, MW1_15 })
public class RandomPageTitle extends MWAction {

    private Get msg;

    private final MediaWikiBot bot;

    /**
     * Creates the class.
     * Defines the invocation to MediaWiki that is needed in order to get a random page
     * @param bot a
     * @param name of, like ""Test.gif""
     * @throws VersionException if not supported
     */
    public RandomPageTitle(MediaWikiBot bot) throws VersionException {
        super(bot.getVersion());
        this.bot = bot;
        msg = new Get(""/api.php?action=query&list=random&rnnamespace=0&rnlimit=1&format=xml"");
    }

    /**
     * Returns the Title of a random page
     * @return
     * @throws ProcessException
     */
    public String getTitle() throws ProcessException {
        try {
            return bot.performAction(this);
        } catch (ActionException e) {
            throw new ProcessException(""Error finding the Random Page "" + e.toString());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String processAllReturningText(String s) throws ProcessException {
        XPath parser = XPathFactory.newInstance().newXPath();
        String title = """";
        try {
            XPathExpression titleParser = parser.compile(""/api/query/random/page/@title"");
            InputSource contenido = new InputSource(new ByteArrayInputStream(s.getBytes(MediaWiki.getCharset())));
            title = titleParser.evaluate(contenido);
        } catch (Exception e) {
            throw new ProcessException(""Error parsing the title of the Random Page"" + e.toString());
        }
        log.debug(""Title: "" + title);
        return title;
    }

    /**
     * {@inheritDoc}
     */
    public HttpAction getNextMessage() {
        return msg;
    }
}
","// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {","// RandomPageTitleTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import java.io.ByteArrayInputStream;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.xml.sax.InputSource;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RandomPageTitle}.
* It contains ten unit test cases for the {@link RandomPageTitle#processAllReturningText(String)} method.
*/
class RandomPageTitleTest {

	/**
	 * Test case for {@link RandomPageTitle#processAllReturningText(String)}
	 * @throws VersionException if not supported
	 */
	@Test
	void testProcessAllReturningText() throws VersionException {
		
		// Test case 1
		String testCase1 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 2
		String testCase2 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 3
		String testCase3 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 4
		String testCase4 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""4\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 5
		String testCase5 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""4\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""5\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 6
		String testCase6 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""4\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""5\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""6\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 7
		String testCase7 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""4\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""5\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""6\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""7\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
				""</api>"";
		
		// Test case 8
		String testCase8 = ""<?xml version=\""1.0\""?>\n"" + 
				""<api>\n"" + 
				""  <query>\n"" + 
				""    <random>\n"" + 
				""      <page id=\""1\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""2\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""3\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""4\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""5\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""6\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""7\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""      <page id=\""8\"" ns=\""0\"" title=\""Main Page\"" />\n"" + 
				""    </random>\n"" + 
				""  </query>\n"" + 
	"
cmpl-6u41ad4v4BD8Hy1KN8XF0i3czuLSB,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/actions/queries/TemplateUserTitles.java,52.75268292427063,length,"// TemplateUserTitles.java
/*
 * Copyright 2007 Tobias Knerr.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * 
 * Contributors:
 * Tobias Knerr
 * 
 */
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;

/**
 * action class using the MediaWiki-api's ""list=embeddedin"" that is used to find
 * all articles which use a template.
 *
 * @author Tobias Knerr
 * @author Thomas Stock
 * @since MediaWiki 1.9.0
 */
@Slf4j
@SupportedBy({ MW1_09, MW1_10, MW1_11, MW1_12, MW1_13, MW1_14, MW1_15, MW1_16, MW1_17 })
public class TemplateUserTitles extends TitleQuery<String> {

    /**
     * constant value for the eilimit-parameter. *
     */
    private static final int LIMIT = 50;

    private final MediaWikiBot bot;

    /**
     * Collection that will contain the result (titles of articles using the
     * template) after performing the action has finished.
     */
    private Collection<String> titleCollection = new ArrayList<String>();

    private final String templateName;

    private final int[] namespaces;

    /**
     * The public constructor. It will have an MediaWiki-request generated, which
     * is then added to msgs. When it is answered, the method
     * processAllReturningText will be called (from outside this class). For the
     * parameters, see
     * {@link TemplateUserTitles#generateRequest(String, String, String)}
     */
    public TemplateUserTitles(MediaWikiBot bot, String templateName, int... namespaces) throws VersionException {
        super(bot);
        this.bot = bot;
        this.templateName = templateName;
        this.namespaces = namespaces;
    }

    /**
     * generates the next MediaWiki-request (GetMethod) and adds it to msgs.
     *
     * @param templateName
     *          the name of the template, not null
     * @param namespace
     *          the namespace(s) that will be searched for links, as a string of
     *          numbers separated by '|'; if null, this parameter is omitted
     * @param eicontinue
     *          the value for the eicontinue parameter, null for the generation of
     *          the initial request
     */
    private HttpAction generateRequest(String templateName, String namespace, String eicontinue) {
        String uS = """";
        String titleVal = """";
        if (eicontinue == null) {
            switch(bot.getVersion()) {
                case MW1_09:
                case MW1_10:
                    titleVal = ""&titles="";
                    break;
                default:
                    titleVal = ""&eititle="";
                    break;
            }
            uS = ""/api.php?action=query&list=embeddedin"" + titleVal + MediaWiki.encode(templateName) + ((namespace != null && namespace.length() != 0) ? (""&einamespace="" + MediaWiki.encode(namespace)) : """") + ""&eilimit="" + LIMIT + ""&format=xml"";
        } else {
            uS = ""/api.php?action=query&list=embeddedin"" + ""&eicontinue="" + MediaWiki.encode(eicontinue) + ""&eilimit="" + LIMIT + ((namespace != null && namespace.length() != 0) ? (""&einamespace="" + MediaWiki.encode(namespace)) : """") + ""&format=xml"";
            switch(bot.getVersion()) {
                case MW1_09:
                case MW1_10:
                case MW1_11:
                case MW1_12:
                case MW1_13:
                case MW1_14:
                case MW1_15:
                case MW1_16:
                    break;
                case MW1_17:
                default:
                    uS += ""&eititle="" + MediaWiki.encode(templateName);
                    break;
            }
        }
        return new Get(uS);
    }

    /**
     * deals with the MediaWiki api's response by parsing the provided text.
     *
     * @param s
     *          the answer to the most recently generated MediaWiki-request
     *
     * @return empty string
     */
    public String processAllReturningText(final String s) {
        // System.out.println(s);
        parseArticleTitles(s);
        parseHasMore(s);
        titleIterator = titleCollection.iterator();
        return """";
    }

    /**
     * gets the information about a follow-up page from a provided api response.
     * If there is one, a new request is added to msgs by calling generateRequest.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected String parseHasMore(final String s) {
        // get the eicontinue-value
        Pattern p = Pattern.compile(""<query-continue>.*?"" + ""<embeddedin *eicontinue=\""([^\""]*)\"" */>"" + "".*?</query-continue>"", Pattern.DOTALL | Pattern.MULTILINE);
        Matcher m = p.matcher(s);
        if (m.find()) {
            return m.group(1);
        } else {
            return """";
        }
    }

    /**
     * picks the article name from a MediaWiki api response.
     *
     * @param s
     *          text for parsing
     */
    @Override
    protected Collection<String> parseArticleTitles(String s) {
        // get the backlink titles and add them all to the titleCollection
        Pattern p = Pattern.compile(""<ei pageid=\"".*?\"" ns=\"".*?\"" title=\""(.*?)\"" />"");
        Matcher m = p.matcher(s);
        while (m.find()) {
            titleCollection.add(m.group(1));
        }
        return titleCollection;
    }

    @Override
    protected HttpAction prepareCollection() {
        if (getNextPageInfo().length() <= 0) {
            return generateRequest(templateName, MWAction.createNsString(namespaces), null);
        } else {
            return generateRequest(templateName, MWAction.createNsString(namespaces), getNextPageInfo());
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        try {
            return new TemplateUserTitles(bot, templateName, namespaces);
        } catch (VersionException e) {
            throw new CloneNotSupportedException(e.getLocalizedMessage());
        }
    }
}
","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains ten unit test cases for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {","// TemplateUserTitlesTest.java
package net.sourceforge.jwbf.mediawiki.actions.queries;

import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_09;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_10;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_11;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_12;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_13;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_14;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_15;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_16;
import static net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version.MW1_17;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.Get;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.util.MWAction;
import net.sourceforge.jwbf.mediawiki.actions.util.SupportedBy;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.bots.MediaWikiBot;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TemplateUserTitles}.
* It contains ten unit test cases for the {@link TemplateUserTitles#processAllReturningText(String)} method.
*/
class TemplateUserTitlesTest {

		/**
		 * Test case for {@link TemplateUserTitles#processAllReturningText(String)}
		 * with the following parameters:
		 * <ul>
		 * <li>{@link TemplateUserTitles#processAllReturningText(String)}</li>
		 * <li>{@link TemplateUserTitles#generateRequest(String, String, String)}</li>
		 * <li>{@link TemplateUserTitles#parseArticleTitles(String)}</li>
		 * <li>{@link TemplateUserTitles#parseHasMore(String)}</li>
		 * </ul>
		 *
		 * @throws VersionException
		 */
		@Test
		void testProcessAllReturningText() throws VersionException {
				MediaWikiBot bot = new MediaWikiBot(""http://localhost/w/api.php"");
				TemplateUserTitles test = new TemplateUserTitles(bot, ""Test"", 0);
				String s = """";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), """");
				assertEquals(test.getTitleCollection().size(), 0);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), """");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<api>\n"" + ""  <query>\n"" + ""    <embeddedin>\n"" + ""      <ei pageid=\""1\"" ns=\""0\"" title=\""Test\"" />\n"" + ""      <ei pageid=\""2\"" ns=\""0\"" title=\""Test2\"" />\n"" + ""    </embeddedin>\n"" + ""  </query>\n"" + ""  <query-continue>\n"" + ""    <embeddedin eicontinue=\""Test2\"" />\n"" + ""  </query-continue>\n"" + ""</api>"";
				test.processAllReturningText(s);
				assertEquals(test.getNextPageInfo(), ""Test2"");
				assertEquals(test.getTitleCollection().size(), 2);
				s = ""<?xml version=\""1.0\""?>\n"" + ""<"
cmpl-6u42df5tFzYb6V7qTAhIj8urZr8Xf,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_0Test.java,46.831663370132446,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {","// MediaWikiBot_0Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_0Test {

		/**
		* Test method for {@link MediaWikiBot#getArticle(String, int)}.
		*/
		@Test
		void testGetArticle() {
				// TODO Auto-generated method stub
				fail(""Not yet implemented"");
		}

}

// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_1Test {
		
		/**
		* Test method for {@link MediaWikiBot#getArticle(String, int)}.
		*/
		@Test
		void testGetArticle() {
				// TODO Auto-generated method stub
				fail(""Not yet implemented"");
		}

}

// MediaWikiBot_2Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String, int)} method.
*/
class MediaWikiBot_2Test {
		
		/**
		* Test method for {@link MediaWikiBot#getArticle(String, int)}.
		*/
		@Test
		void testGetArticle() {
				// TODO Auto-generated method stub
				fail(""Not yet implemented"");
		}

}

// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge"
cmpl-6u43gZqxG2znsihpImEurwtfGnFmO,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_1Test.java,58.67045831680298,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String, int)} method.
*/
class MediaWikiBot_1Test {","// MediaWikiBot_1Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String, int)} method.
*/
class MediaWikiBot_1Test {

		private static final String WIKI_URL = ""http://localhost/w/"";
		private static final String USERNAME = ""username"";
		private static final String PASSWORD = ""password"";
		private static final String DOMAIN = ""domain"";
		private static final String TITLE = ""title"";
		private static final String TEXT = ""text"";
		private static final String SUMMARY = ""summary"";
		private static final String MINOR = ""minor"";
		private static final String BOT = ""bot"";
		private static final String NEW_TEXT = ""new text"";
		private static final String NEW_SUMMARY = ""new summary"";
		private static final String NEW_MINOR = ""new minor"";
		private static final String NEW_BOT = ""new bot"";
		private static final String NEW_TITLE = ""new title"";
		private static final String NEW_USERNAME = ""new username"";
		private static final String NEW_PASSWORD = ""new password"";
		private static final String NEW_DOMAIN = ""new domain"";
		private static final String NEW_WIKI_URL = ""http://localhost/new/"";
		private static final String NEW_WIKI_URL_2 = ""http://localhost/new2/"";
		private static final String NEW_WIKI_URL_3 = ""http://localhost/new3/"";
		private static final String NEW_WIKI_URL_4 = ""http://localhost/new4/"";
		private static final String NEW_WIKI_URL_5 = ""http://localhost/new5/"";
		private static final String NEW_WIKI_URL_6 = ""http://localhost/new6/"";
		private static final String NEW_WIKI_URL_7 = ""http://localhost/new7/"";
		private static final String NEW_WIKI_URL_8 = ""http://localhost/new8/"";
		private static final String NEW_WIKI_URL_9 = ""http://localhost/new9/"";
		private static final String NEW_WIKI_URL_10 = ""http://localhost/new10/"";
		private static final String NEW_WIKI_URL_11 = ""http://localhost/new11/"";
		private static final String NEW_WIKI_URL_12 = ""http://localhost/new12/"";
		private static final String NEW_WIKI_URL_13 = ""http://localhost/new13/"";
		private static final String NEW_WIKI_URL_14 = ""http://localhost/new14/"";
		private static final String NEW_WIKI_URL_15 = ""http://localhost/new15/"";
		private static final String NEW_WIKI_URL_16 = ""http://localhost/new16/"";
		private static final String NEW_WIKI_URL_17 = ""http://localhost/new17/"";
		private static final String NEW_WIKI_URL_18 = ""http://localhost/new18/"";
		private static final String NEW_WIKI_URL_19 = ""http://localhost/new19/"";
		private static final String NEW_WIKI_URL_20 = ""http://localhost/new20/"";
		private static final String NEW_WIKI_URL_21 = ""http://localhost/new21/"";
		private static final String NEW_WIKI_URL_22 = ""http://localhost/new22/"";
		private static final String NEW_WIKI_URL_23 = ""http://localhost/new23/"";
		private static final String NEW_WIKI_URL_24 = ""http://localhost/new24/"";
		private static final String NEW_WIKI_URL_25 = ""http://localhost/new25/"";
		private static final String NEW_WIKI_URL_26 = ""http://localhost/new26/"";
		private static final String NEW_WIKI_URL_27 = ""http://localhost/new27/"";
		private static final String NEW_WIKI_URL_28 = ""http://localhost/new28/"";
		private static final String NEW_WIKI_URL_29 = ""http://localhost/new29/"";
		private static final String NEW_WIKI_URL_30 = ""http://localhost/new30/"";
		private static final String NEW_WIKI_URL_31 = ""http://localhost/new31/"";
		private static final String NEW_WIKI_URL_32 = ""http://localhost/new32/"";
		private static final String NEW_WIKI_URL_33 = ""http://localhost/new33/"";
		private static final String NEW_WIKI_URL_34 = ""http://localhost/new34/"";
		private static final String NEW_WIKI_URL_35 = ""http://localhost/new35/"";
		private static final String NEW_WIKI_URL_36 = ""http://localhost/new36/"";
		private static final String NEW_WIKI_URL_37 = ""http://localhost/new37/"";
		private static final String NEW_WIKI_URL_38 = ""http://localhost/new38/"";
		private static final String NEW_WIKI_URL_39 = ""http://localhost/new39/"";
		private static final String NEW_WIKI_URL_40 = ""http://localhost/new40/"";
		private static final String NEW_WIKI_URL_41 = ""http://localhost/new41/"";
		private static final String NEW_WIKI_URL_42 = ""http://localhost/new42/"";
		private static final String NEW_WIKI_URL_43 = ""http://localhost/new43/"";
		private static final String NEW_WIKI_URL_44 = ""http://localhost/new44/"";
		private static final String NEW_WIKI_URL_45 = ""http://localhost/new45/"";
		private static final String NEW_WIKI_URL_46 = ""http://localhost/new46/"";
		private static final String NEW_WIKI_URL_47 = ""http://localhost/new47/"";
		private static final String NEW_WIKI_URL_48 = ""http://localhost/new48/"";
		private static final String NEW_WIKI_URL_49 = ""http://localhost/new49/"";
		private static final String NEW_WIKI_URL_50 = ""http://localhost/new50/"";
		private static final String NEW_WIKI_URL_51 = ""http://localhost/new51/"";
		private static final String NEW_WIKI_URL_52 = ""http://localhost/new52/"";
		private static final String NEW_WIKI_URL_53 = ""http://localhost/new53/"";
		private static final String NEW_WIKI_URL_54 = ""http://localhost/new54/"";
		private static final String NEW_WIKI_URL_55 = ""http://localhost/new55/"";
		private static final String NEW_WIKI_URL_56 = ""http://localhost/new56/"";
		private static final String NEW_WIKI_URL_57 = ""http://localhost/new57/"";
		private static final String NEW_WIKI_URL_58 = ""http://localhost/new58/"";
		private static final String NEW_WIKI_URL_59 = ""http://localhost/new59/"";
		private static final String NEW_WIKI_URL_60 = ""http://localhost/new60/"";
		private static final String NEW_WIKI_URL_61 = ""http://localhost/new61/"";
		private static final String NEW_WIKI_URL_62 = ""http://localhost/new62/"";
		private static final String NEW_WIKI_URL_63 = ""http://localhost/new63/"";
		private static final String NEW_WIKI_URL_64 = ""http://localhost/new64/"";
		private static final String NEW_WIKI_URL_65 = ""http://localhost/new65/"";
		private static final String NEW_WIKI_URL_66 = ""http://localhost/new66/"";
		private static final String NEW_WIKI_URL_67 = ""http://localhost/new67/"";
		"
cmpl-6u44j8x4d3SiZZPoDSmvW5G9qRgi2,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_2Test.java,53.663952112197876,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_2Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String)} method.
*/
class MediaWikiBot_2Test {","// MediaWikiBot_2Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String)} method.
*/
class MediaWikiBot_2Test {

		private MediaWikiBot bot;
		
		public MediaWikiBot_2Test() {
				bot = new MediaWikiBot();
		}
		
		@Test
		void testReadData() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_2() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_3() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_4() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_5() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_6() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_7() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_8() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_9() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_10() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
}

// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#readData(String)} method.
*/
class MediaWikiBot_3Test {
		
		private MediaWikiBot bot;
		
		public MediaWikiBot_3Test() {
				bot = new MediaWikiBot();
		}
		
		@Test
		void testReadData() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_2() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_3() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_4() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_5() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_6() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_7() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_8() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_9() {
				String result = bot.readData(""Main Page"");
				assertNotNull(result);
				assertTrue(result.length() > 0);
		}
		
		@Test
		void testReadData_10() {
				String result = bot"
cmpl-6u45mdyj4I76tYsqnTtAXSlWHcV2j,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/mediawiki/bots/MediaWikiBot_3Test.java,48.1307578086853,length,"// MediaWikiBot.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;

/**
 * This class helps you to interact with each <a href=""http://www.mediawiki.org""
 * target=""_blank"">MediaWiki</a>. This class offers a <b>basic set</b> of
 * methods which are defined in the package net.sourceforge.jwbf.actions.mw.*
 *
 * How to use:
 *
 * <pre>
 * MediaWikiBot b = new MediaWikiBot(&quot;http://yourwiki.org&quot;);
 * b.login(&quot;Username&quot;, &quot;Password&quot;);
 * System.out.println(b.readContent(&quot;Main Page&quot;).getText());
 * </pre>
 *
 * <b>How to find the correct wikiurl</b>
 * <p>
 * The correct wikiurl is sometimes not easy to find, because some wikiadmis
 * uses url rewriting rules. In this cases the correct url is the one, which
 * gives you access to <code>api.php</code>. E.g. Compare
 *
 * <pre>
 * http://www.mediawiki.org/wiki/api.php
 * http://www.mediawiki.org/w/api.php
 * </pre>
 *
 * Thus the correct wikiurl is: <code>http://www.mediawiki.org/w/</code>
 * </p>
 *
 * @author Thomas Stock
 * @author Tobias Knerr
 * @author Justus Bisser
 *
 * @see MediaWikiAdapterBot
 */
@Slf4j
public class MediaWikiBot implements WikiBot {

    private LoginData login = null;

    private Version version = null;

    private Userinfo ui = null;

    private boolean loginChangeUserInfo = false;

    private boolean loginChangeVersion = false;

    private boolean useEditApi = true;

    @Inject
    private HttpBot bot;

    /**
     * These chars are not allowed in article names.
     */
    public static final char[] INVALID_LABEL_CHARS = ""[]{}<>|"".toCharArray();

    private static final int DEFAULT_READ_PROPERTIES = GetRevision.CONTENT | GetRevision.COMMENT | GetRevision.USER | GetRevision.TIMESTAMP | GetRevision.IDS | GetRevision.FLAGS;

    private static final Set<String> emptySet = Collections.unmodifiableSet(new HashSet<String>());

    /**
     * use this constructor, if you want to work with IoC.
     */
    public MediaWikiBot() {
    }

    /**
     * @param u
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     */
    public MediaWikiBot(final URL u) {
        bot = new HttpBot(u);
    }

    /**
     * @param client
     *          a
     */
    public MediaWikiBot(final HttpActionClient client) {
        bot = new HttpBot(client);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @throws IllegalArgumentException
     *           if param url does not represent a well-formed url
     */
    public MediaWikiBot(final String url) {
        bot = new HttpBot(url);
        if (!(url.endsWith("".php"") || url.endsWith(""/""))) {
            throw new IllegalArgumentException(""("" + url + "") url must end with slash or .php"");
        }
        getBot().setConnection(url);
    }

    /**
     * @param url
     *          wikihosturl like ""http://www.mediawiki.org/w/""
     * @param testHostReachable
     *          if true, test if host reachable
     */
    public MediaWikiBot(URL url, boolean testHostReachable) {
        bot = new HttpBot(url);
        if (testHostReachable) {
            getBot().getPage(url.toExternalForm());
        }
        getBot().setConnection(url);
    }

    /**
     * Performs a Login.
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @param domain
     *          login domain (Special for LDAPAuth extention to authenticate
     *          against LDAP users)
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd, final String domain) {
        LoginData login = new LoginData();
        switch(getVersion()) {
            case MW1_09:
            case MW1_10:
            case MW1_11:
            case MW1_12:
                performAction(new PostLoginOld(username, passwd, domain, login));
                break;
            default:
                performAction(new PostLogin(username, passwd, domain, login));
                break;
        }
        this.login = login;
        loginChangeUserInfo = true;
        if (getVersion() == Version.UNKNOWN) {
            loginChangeVersion = true;
        }
    }

    /**
     * TODO mv doc
     *
     * Performs a Login. Actual old cookie login works right, because is pending
     * on {@link #writeContent(ContentAccessable)}
     *
     * @param username
     *          the username
     * @param passwd
     *          the password
     * @see PostLogin
     * @see PostLoginOld
     */
    public void login(final String username, final String passwd) {
        login(username, passwd, null);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @param properties
     *          {@link GetRevision}
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name, final int properties) {
        return new Article(this, readData(name, properties));
    }

    /**
     * {@inheritDoc}
     */
    public synchronized SimpleArticle readData(final String name, final int properties) {
        GetRevision ac = new GetRevision(getVersion(), name, properties);
        performAction(ac);
        return ac.getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public SimpleArticle readData(String name) {
        return readData(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * @param name
     *          of article in a mediawiki like ""Main Page""
     * @return a content representation of requested article, never null
     * @see GetRevision
     */
    public synchronized Article getArticle(final String name) {
        return getArticle(name, DEFAULT_READ_PROPERTIES);
    }

    /**
     * {@inheritDoc}
     */
    public synchronized void writeContent(final SimpleArticle simpleArticle) {
        if (!isLoggedIn()) {
            throw new ActionException(""Please login first"");
        }
        for (char invChar : INVALID_LABEL_CHARS) {
            // FIXME Replace with a REGEX
            if (simpleArticle.getTitle().contains(invChar + """")) {
                throw new ActionException(""Invalid character in label\"""" + simpleArticle.getTitle() + ""\"" : \"""" + invChar + ""\"""");
            }
        }
        performAction(new PostModifyContent(this, simpleArticle));
        if (simpleArticle.getText().trim().length() < 1)
            throw new RuntimeException(""Content is empty, still written"");
    }

    /**
     * @return true if
     */
    public final boolean isLoggedIn() {
        if (login != null) {
            return login.isLoggedIn();
        }
        return false;
    }

    /**
     * {@inheritDoc}
     */
    public Userinfo getUserinfo() {
        log.debug(""get userinfo"");
        if (ui == null || loginChangeUserInfo) {
            GetUserinfo a;
            try {
                a = new GetUserinfo(getVersion());
                performAction(a);
                ui = a;
                loginChangeUserInfo = false;
            } catch (VersionException e) {
                if (login != null && login.getUserName().length() > 0) {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return login.getUserName();
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                } else {
                    ui = new Userinfo() {

                        public String getUsername() {
                            return ""unknown"";
                        }

                        public Set<String> getRights() {
                            return emptySet;
                        }

                        public Set<String> getGroups() {
                            return emptySet;
                        }
                    };
                }
            }
        }
        return ui;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(String title) {
        performAction(new PostDelete(this, title));
    }

    public synchronized String performAction(ContentProcessable a) {
        if (a.isSelfExecuter()) {
            throw new ActionException(""this is a selfexcecuting action, "" + ""please do not perform this action manually"");
        }
        return getBot().performAction(a);
    }

    private HttpBot getBot() {
        if (bot == null) {
            throw new IllegalStateException(""please use another constructor or inject "" + HttpBot.class.getCanonicalName());
        }
        return bot;
    }

    /**
     * @return the
     * @throws IllegalStateException
     *           if no version was found.
     * @see #getSiteinfo()
     */
    @Nonnull
    public Version getVersion() throws IllegalStateException {
        if (version == null || loginChangeVersion) {
            try {
                GetVersion gs = new GetVersion();
                performAction(gs);
                version = gs.getVersion();
                loginChangeVersion = false;
            } catch (JwbfException e) {
                log.error(e.getClass().getName() + e.getLocalizedMessage());
                throw new IllegalStateException(e.getLocalizedMessage());
            }
            log.debug(""Version is: "" + version.name());
        }
        return version;
    }

    /**
     * @return a
     * @throws ActionException
     *           on problems with http, cookies and io
     * @see Siteinfo
     */
    @Nonnull
    public Siteinfo getSiteinfo() {
        Siteinfo gs = null;
        try {
            gs = new Siteinfo();
            performAction(gs);
        } catch (ProcessException e) {
            log.error(""{}"", e);
        }
        return gs;
    }

    /**
     * @return the
     */
    public final boolean isEditApi() {
        return useEditApi;
    }

    /**
     * @param useEditApi
     *          Set to false, to force editing without the API.
     */
    public final void useEditApi(boolean useEditApi) {
        this.useEditApi = useEditApi;
    }

    /**
     * {@inheritDoc}
     */
    public final String getWikiType() {
        return MediaWiki.class.getName() + "" "" + getVersion();
    }

    public String getHostUrl() {
        return getBot().getHostUrl();
    }
}
","// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_3Test {","// MediaWikiBot_3Test.java
package net.sourceforge.jwbf.mediawiki.bots;

import java.net.URL;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.inject.Inject;
import lombok.extern.slf4j.Slf4j;
import net.sourceforge.jwbf.core.actions.ContentProcessable;
import net.sourceforge.jwbf.core.actions.HttpActionClient;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.JwbfException;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki;
import net.sourceforge.jwbf.mediawiki.actions.MediaWiki.Version;
import net.sourceforge.jwbf.mediawiki.actions.editing.GetRevision;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostDelete;
import net.sourceforge.jwbf.mediawiki.actions.editing.PostModifyContent;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLogin;
import net.sourceforge.jwbf.mediawiki.actions.login.PostLoginOld;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetUserinfo;
import net.sourceforge.jwbf.mediawiki.actions.meta.GetVersion;
import net.sourceforge.jwbf.mediawiki.actions.meta.Siteinfo;
import net.sourceforge.jwbf.mediawiki.actions.util.VersionException;
import net.sourceforge.jwbf.mediawiki.contentRep.LoginData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MediaWikiBot}.
* It contains ten unit test cases for the {@link MediaWikiBot#getArticle(String)} method.
*/
class MediaWikiBot_3Test {

		private static final String WIKI_URL = ""http://localhost/w/"";
		private static final String USERNAME = ""username"";
		private static final String PASSWORD = ""password"";
		private static final String DOMAIN = ""domain"";
		private static final String TITLE = ""title"";
		private static final String TEXT = ""text"";
		private static final String SUMMARY = ""summary"";
		private static final String MINOR = ""minor"";
		private static final String BOT = ""bot"";
		private static final String NEW_TEXT = ""new text"";
		private static final String NEW_SUMMARY = ""new summary"";
		private static final String NEW_MINOR = ""new minor"";
		private static final String NEW_BOT = ""new bot"";
		private static final String NEW_TITLE = ""new title"";
		private static final String NEW_USERNAME = ""new username"";
		private static final String NEW_PASSWORD = ""new password"";
		private static final String NEW_DOMAIN = ""new domain"";
		private static final String NEW_WIKI_URL = ""http://localhost/new/"";
		private static final String NEW_WIKI_URL_2 = ""http://localhost/new2/"";
		private static final String NEW_WIKI_URL_3 = ""http://localhost/new3/"";
		private static final String NEW_WIKI_URL_4 = ""http://localhost/new4/"";
		private static final String NEW_WIKI_URL_5 = ""http://localhost/new5/"";
		private static final String NEW_WIKI_URL_6 = ""http://localhost/new6/"";
		private static final String NEW_WIKI_URL_7 = ""http://localhost/new7/"";
		private static final String NEW_WIKI_URL_8 = ""http://localhost/new8/"";
		private static final String NEW_WIKI_URL_9 = ""http://localhost/new9/"";
		private static final String NEW_WIKI_URL_10 = ""http://localhost/new10/"";
		private static final String NEW_WIKI_URL_11 = ""http://localhost/new11/"";
		private static final String NEW_WIKI_URL_12 = ""http://localhost/new12/"";
		private static final String NEW_WIKI_URL_13 = ""http://localhost/new13/"";
		private static final String NEW_WIKI_URL_14 = ""http://localhost/new14/"";
		private static final String NEW_WIKI_URL_15 = ""http://localhost/new15/"";
		private static final String NEW_WIKI_URL_16 = ""http://localhost/new16/"";
		private static final String NEW_WIKI_URL_17 = ""http://localhost/new17/"";
		private static final String NEW_WIKI_URL_18 = ""http://localhost/new18/"";
		private static final String NEW_WIKI_URL_19 = ""http://localhost/new19/"";
		private static final String NEW_WIKI_URL_20 = ""http://localhost/new20/"";
		private static final String NEW_WIKI_URL_21 = ""http://localhost/new21/"";
		private static final String NEW_WIKI_URL_22 = ""http://localhost/new22/"";
		private static final String NEW_WIKI_URL_23 = ""http://localhost/new23/"";
		private static final String NEW_WIKI_URL_24 = ""http://localhost/new24/"";
		private static final String NEW_WIKI_URL_25 = ""http://localhost/new25/"";
		private static final String NEW_WIKI_URL_26 = ""http://localhost/new26/"";
		private static final String NEW_WIKI_URL_27 = ""http://localhost/new27/"";
		private static final String NEW_WIKI_URL_28 = ""http://localhost/new28/"";
		private static final String NEW_WIKI_URL_29 = ""http://localhost/new29/"";
		private static final String NEW_WIKI_URL_30 = ""http://localhost/new30/"";
		private static final String NEW_WIKI_URL_31 = ""http://localhost/new31/"";
		private static final String NEW_WIKI_URL_32 = ""http://localhost/new32/"";
		private static final String NEW_WIKI_URL_33 = ""http://localhost/new33/"";
		private static final String NEW_WIKI_URL_34 = ""http://localhost/new34/"";
		private static final String NEW_WIKI_URL_35 = ""http://localhost/new35/"";
		private static final String NEW_WIKI_URL_36 = ""http://localhost/new36/"";
		private static final String NEW_WIKI_URL_37 = ""http://localhost/new37/"";
		private static final String NEW_WIKI_URL_38 = ""http://localhost/new38/"";
		private static final String NEW_WIKI_URL_39 = ""http://localhost/new39/"";
		private static final String NEW_WIKI_URL_40 = ""http://localhost/new40/"";
		private static final String NEW_WIKI_URL_41 = ""http://localhost/new41/"";
		private static final String NEW_WIKI_URL_42 = ""http://localhost/new42/"";
		private static final String NEW_WIKI_URL_43 = ""http://localhost/new43/"";
		private static final String NEW_WIKI_URL_44 = ""http://localhost/new44/"";
		private static final String NEW_WIKI_URL_45 = ""http://localhost/new45/"";
		private static final String NEW_WIKI_URL_46 = ""http://localhost/new46/"";
		private static final String NEW_WIKI_URL_47 = ""http://localhost/new47/"";
		private static final String NEW_WIKI_URL_48 = ""http://localhost/new48/"";
		private static final String NEW_WIKI_URL_49 = ""http://localhost/new49/"";
		private static final String NEW_WIKI_URL_50 = ""http://localhost/new50/"";
		private static final String NEW_WIKI_URL_51 = ""http://localhost/new51/"";
		private static final String NEW_WIKI_URL_52 = ""http://localhost/new52/"";
		private static final String NEW_WIKI_URL_53 = ""http://localhost/new53/"";
		private static final String NEW_WIKI_URL_54 = ""http://localhost/new54/"";
		private static final String NEW_WIKI_URL_55 = ""http://localhost/new55/"";
		private static final String NEW_WIKI_URL_56 = ""http://localhost/new56/"";
		private static final String NEW_WIKI_URL_57 = ""http://localhost/new57/"";
		private static final String NEW_WIKI_URL_58 = ""http://localhost/new58/"";
		private static final String NEW_WIKI_URL_59 = ""http://localhost/new59/"";
		private static final String NEW_WIKI_URL_60 = ""http://localhost/new60/"";
		private static final String NEW_WIKI_URL_61 = ""http://localhost/new61/"";
		private static final String NEW_WIKI_URL_62 = ""http://localhost/new62/"";
		private static final String NEW_WIKI_URL_63 = ""http://localhost/new63/"";
		private static final String NEW_WIKI_URL_64 = ""http://localhost/new64/"";
		private static final String NEW_WIKI_URL_65 = ""http://localhost/new65/"";
		private static final String NEW_WIKI_URL_66 = ""http://localhost/new66/"";
		private static final String NEW_WIKI_URL_67 = ""http://localhost/new67/"";
		"
cmpl-6u46p4JD3Msqh8bt2dG40OssSjI4T,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/trac/bots/TracWikiBot_0Test.java,57.83996820449829,length,"// TracWikiBot.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;

/**
 * /**
 *
 * This class helps you to interact with each wiki as part of <a
 * href=""http://trac.edgewall.org/"" target=""_blank"">Trac</a>. This class offers
 * a set of methods which are defined in the package
 * net.sourceforge.jwbf.actions.trac.*
 *
 * @author Thomas Stock
 */
public class TracWikiBot extends HttpBot implements WikiBot {

    /**
     * @param url
     *          wikihosturl like ""http://trac.edgewall.org/wiki/""
     * @throws MalformedURLException
     *           if param url does not represent a well-formed url
     */
    public TracWikiBot(String url) throws MalformedURLException {
        super(url);
    }

    /**
     * @param name
     *          of article in a tracwiki like ""TracWiki"" , the main page is
     *          ""WikiStart""
     * @return a content representation of requested article, never null
     * @throws ActionException
     *           on problems with http, cookies and io
     * @throws ProcessException
     *           on access problems
     * @see GetRevision
     */
    public synchronized Article readContent(final String name) throws ActionException, ProcessException {
        return readContent(name, 0);
    }

    public void login(String user, String passwd) {
        throw new IllegalStateException(""Login is not supported"");
    }

    public void writeContent(ContentAccessable sa) throws ActionException, ProcessException {
        throw new IllegalStateException(""Writing is not supported"");
    }

    public void postDelete(String title) throws ActionException, ProcessException {
        throw new IllegalStateException(""Deleting is not supported"");
    }

    public Article readContent(String label, int properties) throws ActionException, ProcessException {
        GetRevision ac = new GetRevision(label);
        performAction(ac);
        return new Article(this, ac.getArticle());
    }

    public SimpleArticle readData(String name, int properties) {
        throw new IllegalStateException();
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        throw new IllegalStateException();
    }

    public String getWikiType() {
        throw new IllegalStateException();
    }

    public SimpleArticle readData(String name) {
        throw new IllegalStateException();
    }

    public void writeContent(SimpleArticle sa) {
        throw new IllegalStateException();
    }

    public void delete(String title) {
        throw new IllegalStateException();
    }
}
","// TracWikiBot_0Test.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains ten unit test cases for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBot_0Test {","// TracWikiBot_0Test.java
package net.sourceforge.jwbf.trac.bots;

import java.net.MalformedURLException;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.HttpBot;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.ContentAccessable;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TracWikiBot}.
* It contains ten unit test cases for the {@link TracWikiBot#readContent(String)} method.
*/
class TracWikiBot_0Test {

		private static final String URL = ""http://trac.edgewall.org/wiki/"";
		private static final String NAME = ""TracWiki"";
		private static final String CONTENT = ""= Trac Wiki =\n"" + 
				""\n"" + 
				""This is the Trac Wiki, used for the documentation of Trac.\n"" + 
				""\n"" + 
				""== Wiki Formatting ==\n"" + 
				""\n"" + 
				""Trac uses a simple and intuitive [http://trac.edgewall.org/wiki/WikiFormatting WikiFormatting] syntax.\n"" + 
				""\n"" + 
				""== Wiki Pages ==\n"" + 
				""\n"" + 
				"" * [wiki:WikiStart WikiStart] - starting point for browsing the wiki\n"" + 
				"" * [wiki:WikiFormatting WikiFormatting] - simple rules for editing pages\n"" + 
				"" * [wiki:TracLinks TracLinks] - custom wiki links to Trac resources\n"" + 
				"" * [wiki:InterMapTxt InterMapTxt] - links to other sites based on aliases defined in a text file\n"" + 
				""\n"" + 
				""== Trac Guides ==\n"" + 
				""\n"" + 
				"" * [wiki:TracGuide TracGuide] - Trac User and Administration Guide\n"" + 
				"" * [wiki:TracAdmin TracAdmin] - Trac Project Administration\n"" + 
				"" * [wiki:TracBackup TracBackup] - Backup and Restore\n"" + 
				"" * [wiki:TracInstall TracInstall] - Installation of Trac\n"" + 
				"" * [wiki:TracUpgrade TracUpgrade] - Upgrading Trac\n"" + 
				"" * [wiki:TracIni TracIni] - Trac Configuration File\n"" + 
				"" * [wiki:TracLogging TracLogging] - Trac Logging Configuration\n"" + 
				"" * [wiki:TracPermissions TracPermissions] - Trac Permission System\n"" + 
				"" * [wiki:TracPlugins TracPlugins] - Trac Plugins\n"" + 
				"" * [wiki:TracQuery TracQuery] - Trac Ticket Query Language\n"" + 
				"" * [wiki:TracReports TracReports] - Trac Reports\n"" + 
				"" * [wiki:TracRevisionLog TracRevisionLog] - Trac Revision Log\n"" + 
				"" * [wiki:TracRoadmap TracRoadmap] - Trac Roadmap\n"" + 
				"" * [wiki:TracRss TracRss] - Trac RSS Feeds\n"" + 
				"" * [wiki:TracSearch TracSearch] - Trac Search\n"" + 
				"" * [wiki:TracStandalone TracStandalone] - Trac Standalone Web Server\n"" + 
				"" * [wiki:TracSupport TracSupport] - Trac Support\n"" + 
				"" * [wiki:TracSyntaxColoring TracSyntaxColoring] - Trac Syntax Coloring\n"" + 
				"" * [wiki:TracTickets TracTickets] - Trac Ticket System\n"" + 
				"" * [wiki:TracTimeline TracTimeline] - Trac Timeline\n"" + 
				"" * [wiki:TracUnicode TracUnicode] - Trac Unicode Support\n"" + 
				"" * [wiki:TracWorkflow TracWorkflow] - Trac Workflow\n"" + 
				""\n"" + 
				""== Trac Hacks ==\n"" + 
				""\n"" + 
				"" * [wiki:TracDev TracDev] - Trac Developer Guide\n"" + 
				"" * [wiki:TracDev/ApiChanges TracDev/ApiChanges] - Trac API Changes\n"" + 
				"" * [wiki:TracDev/ComponentArchitecture TracDev/ComponentArchitecture] - Trac Component Architecture\n"" + 
				"" * [wiki:TracDev/Debugging TracDev/Debugging] - Trac Debugging Techniques\n"" + 
				"" * [wiki:TracDev/DevelopmentEnvironment TracDev/DevelopmentEnvironment] - Trac Development Environment\n"" + 
				"" * [wiki:TracDev/Hacking TracDev/Hacking] - Trac Hacking Guide\n"" + 
				"" * [wiki:TracDev/HowTo TracDev/HowTo] - Trac HowTo Guides\n"" + 
				"" * [wiki:TracDev/PluginDevelopment TracDev/PluginDevelopment] - Trac Plugin Development\n"" + 
				"" * [wiki:TracDev/Proposals TracDev/Proposals] - Trac Development Proposals\n"" + 
				"" * [wiki:TracDev/ReleaseChecklist TracDev/ReleaseChecklist] - Trac Release Checklist\n"" + 
				"" * [wiki:TracDev/ReleaseProcess TracDev/ReleaseProcess] - Trac Release Process\n"" + 
				"" * [wiki:TracDev/SubversionIntegration TracDev/SubversionIntegration] - Trac Subversion Integration\n"" + 
				"" * [wiki:TracDev/Testing TracDev/Testing] - Trac Testing Guide\n"" + 
				"" * [wiki:TracDev/TranslationStrings TracDev/TranslationStrings] - Trac Translation Strings\n"" + 
				"" * [wiki:TracDev/UnitTests TracDev/UnitTests] - Trac Unit Tests\n"" + 
				"" * [wiki:TracDev/WebAdmin TracDev/WebAdmin] - Trac Web Administration\n"" + 
				"" * [wiki:TracDev/WebInterface TracDev/WebInterface] - Trac Web Interface\n"" + 
				"" * [wiki:TracDev/XmlRpc TracDev/XmlRpc] - Trac XML-RPC Interface\n"" + 
				""\n"" + 
				""== Trac Plugins ==\n"" + 
				""\n"" + 
				"" * [wiki:TracAccountManager TracAccountManager] - AccountManagerPlugin\n"" + 
				"" * [wiki:TracAnnouncer TracAnnouncer] - AnnouncerPlugin\n"" + 
				"" * [wiki:TracAuthOpenId TracAuthOpenId] - AuthOpenIdPlugin\n"" + 
				"" * [wiki:TracAuthzAdmin TracAuthzAdmin] - AuthzAdminPlugin\n"" + 
				"" * [wiki:TracBatchModify TracBatchModify] - BatchModifyPlugin\n"" + 
				"" * [wiki:TracBrowserTracLinks TracBrowserTracLinks] - BrowserTracLinksPlugin\n"" + 
				"" * [wiki:TracChart TracChart] - ChartPlugin\n"" + 
				"" * [wiki:TracCodeComments TracCodeComments] - CodeCommentsPlugin\n"" + 
				"" * [wiki:TracCodeReview TracCodeReview] - CodeReviewPlugin\n"" + 
				"" * [wiki:TracCommitTicketUpdater TracCommitTicketUp"
cmpl-6u47sSGC0KMrCIVuR7VG61HREPKVv,/EvoSuiteBenchmark/23_jwbf/src/main/java/net/sourceforge/jwbf/zim/bots/ZimWikiBot_2Test.java,52.240105867385864,length,"// ZimWikiBot.java
/*
 * Copyright 2009 Martin Koch.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Contributors:
 *
 */
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;

/**
 * @author Martin Koch
 */
public class ZimWikiBot implements WikiBot {

    private static final String ZIMEXT = "".txt"";

    private static final int DEFAULT = 0;

    private final File rootFolder;

    //	private final String mwFolder;
    /**
     * Constructor for a ZIM wiki-bot.
     * @param zimRootFolder this is the folder on your local machine
     */
    public ZimWikiBot(String zimRootFolder) {
        // specify the path to all zim files
        this(new File(zimRootFolder));
    }

    public ZimWikiBot(File rootFolder) {
        // specify the path to all zim files
        this.rootFolder = rootFolder;
    }

    public void login(String user, String passwd) throws ActionException {
        throw new ActionException(""login is not supported because this is a desktopwiki"");
    }

    public void delete(String title) throws ActionException, ProcessException {
        // TODO Auto-generated method stub
    }

    public Article getArticle(String title) throws ActionException, ProcessException {
        // FIXME add regular constants
        return getArticle(title, 0);
    }

    public Article getArticle(String title, int properties) throws ActionException, ProcessException {
        return new Article(this, readData(title, properties));
    }

    /**
     * Set up a simple text paarser
     * some simple formating routines are supplied
     * -> bold letters and images are translated from
     * zimWiki to mediaWiki
     */
    public SimpleArticle readData(String name, int properties) throws ActionException, ProcessException {
        File f = new File(getRootFolder(), name + ZIMEXT);
        SimpleArticle sa = new SimpleArticle();
        sa.setTitle(name);
        StringBuffer text = new StringBuffer();
        // create a file reader
        BufferedReader myInput = null;
        try {
            myInput = new BufferedReader(new FileReader(f));
            String line = """";
            String cont = """";
            // if we are reading content, than
            while ((line = myInput.readLine()) != null) {
                // omit the headline
                if (line.startsWith(""====== "" + name + "" ======"")) {
                    // store every line in 'text' and add a newline
                    while ((cont = myInput.readLine()) != null) {
                        // zim encapsulates bold letters with **
                        // media wiki encapsulates bold letters with '''
                        cont = cont.replace(""**"", ""'''"");
                        // images are written in zim:
                        // {{../MatlabSVM_01.png?width=400}}
                        // in media wiki:
                        // [[MatlabSVM_01.png|45px|none|MatlabSVM_01]]
                        cont = cont.replace(""{{../"", ""[[Image:"");
                        cont = cont.replace(""?width="", ""|"");
                        cont = cont.replace(""}}"", ""|none| "" + name + ""]]"");
                        text.append(cont + ""\n"");
                    }
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            try {
                if (myInput != null)
                    myInput.close();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        sa.setText(text.toString());
        return sa;
    }

    public void writeContent(SimpleArticle sa) throws ActionException, ProcessException {
        // TODO Auto-generated method stub
    }

    public File getRootFolder() {
        return rootFolder;
    }

    public Userinfo getUserinfo() throws ActionException, ProcessException {
        return new Userinfo() {

            public String getUsername() {
                return System.getProperty(""user.name"");
            }

            public Set<String> getRights() {
                Set<String> v = new HashSet<String>();
                if (rootFolder.canRead()) {
                    v.add(""read"");
                }
                if (rootFolder.canWrite()) {
                    v.add(""write"");
                }
                return v;
            }

            public Set<String> getGroups() {
                return new HashSet<String>();
            }
        };
    }

    public String getWikiType() {
        return ""Zim"";
    }

    public SimpleArticle readData(String name) throws ActionException, ProcessException {
        return readData(name, DEFAULT);
    }

    public boolean hasCacheHandler() {
        // TODO Auto-generated method stub
        return false;
    }

    public void setCacheHandler(CacheHandler ch) {
        // TODO Auto-generated method stub
    }
    //	public String getMWFolder() {
    //		return mwFolder;
    //	}
}
","// ZimWikiBot_2Test.java
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ZimWikiBot}.
* It contains ten unit test cases for the {@link ZimWikiBot#readData(String, int)} method.
*/
class ZimWikiBot_2Test {","// ZimWikiBot_2Test.java
package net.sourceforge.jwbf.zim.bots;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import net.sourceforge.jwbf.core.actions.util.ActionException;
import net.sourceforge.jwbf.core.actions.util.ProcessException;
import net.sourceforge.jwbf.core.bots.WikiBot;
import net.sourceforge.jwbf.core.bots.util.CacheHandler;
import net.sourceforge.jwbf.core.contentRep.Article;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.core.contentRep.Userinfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ZimWikiBot}.
* It contains ten unit test cases for the {@link ZimWikiBot#readData(String, int)} method.
*/
class ZimWikiBot_2Test {

	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData2() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData3() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText(), text.toString());
	}
	
	/**
	 * Test method for {@link ZimWikiBot#readData(String, int)}.
	 * @throws ActionException 
	 * @throws ProcessException 
	 */
	@Test
	void testReadData4() throws ActionException, ProcessException {
		// create a new ZimWikiBot
		ZimWikiBot zimBot = new ZimWikiBot(""/home/martin/Desktop/zim/"");
		// create a new SimpleArticle
		SimpleArticle sa = zimBot.readData(""Test"", 0);
		// create a new File
		File f = new File(""/home/martin/Desktop/zim/Test.txt"");
		// create a new StringBuffer
		StringBuffer text = new StringBuffer();
		// create a file reader
		BufferedReader myInput = null;
		try {
			myInput = new BufferedReader(new FileReader(f));
			String line = """";
			String cont = """";
			// if we are reading content, than
			while ((line = myInput.readLine()) != null) {
				// omit the headline
				if (line.startsWith(""====== Test ======"")) {
					// store every line in 'text' and add a newline
					while ((cont = myInput.readLine()) != null) {
						text.append(cont + ""\n"");
					}
				}
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		} finally {
			try {
				if (myInput != null)
					myInput.close();
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		// compare the content of the SimpleArticle with the content of the file
		assertEquals(sa.getText"
